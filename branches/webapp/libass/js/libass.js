// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// TODO: " u s e   s t r i c t ";

try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function(filename) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename).toString();
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };

  Module['load'] = function(f) {
    globalEval(read(f));
  };

  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
} else if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  Module['printErr'] = printErr;

  // Polyfill over SpiderMonkey/V8 differences
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function(f) { snarf(f) };
  }

  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
} else if (ENVIRONMENT_IS_WEB) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }

  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }

  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
} else if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...

  Module['load'] = importScripts;

} else {
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['printErr']) {
  Module['printErr'] = function(){};
}
if (!Module['print']) {
  Module['print'] = Module['printErr'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  bitshift64: function (low, high, op, bits) {
    var ander = Math.pow(2, bits)-1;
    if (bits < 32) {
      switch (op) {
        case 'shl':
          return [low << bits, (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))];
        case 'ashr':
          return [(((low >>> bits ) | ((high&ander) << (32 - bits))) >> 0) >>> 0, (high >> bits) >>> 0];
        case 'lshr':
          return [((low >>> bits) | ((high&ander) << (32 - bits))) >>> 0, high >>> bits];
      }
    } else if (bits == 32) {
      switch (op) {
        case 'shl':
          return [0, low];
        case 'ashr':
          return [high, (high|0) < 0 ? ander : 0];
        case 'lshr':
          return [high, 0];
      }
    } else { // bits > 32
      switch (op) {
        case 'shl':
          return [0, low << (bits - 32)];
        case 'ashr':
          return [(high >> (bits - 32)) >>> 0, (high|0) < 0 ? ander : 0];
        case 'lshr':
          return [high >>>  (bits - 32) , 0];
      }
    }
    abort('unknown bitshift64 op: ' + [value, op, bits]);
  },
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type[type.length-1] == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      assert(type.fields.length === struct.length, 'Number of named fields must match the type for ' + typeName);
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  addFunction: function (func) {
    var ret = FUNCTION_TABLE.length;
    FUNCTION_TABLE.push(func);
    FUNCTION_TABLE.push(0);
    return ret;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func) {
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        FUNCTION_TABLE[func].apply(null, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  stackAlloc: function stackAlloc(size) { var ret = STACKTOP;STACKTOP += size;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"); return ret; },
  staticAlloc: function staticAlloc(size) { var ret = STATICTOP;STATICTOP += size;STATICTOP = ((((STATICTOP)+3)>>2)<<2); if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function alignMemory(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function makeBigInt(low,high,unsigned) { var ret = (unsigned ? (((low)>>>0)+(((high)>>>0)*4294967296)) : (((low)>>>0)+(((high)|0)*4294967296))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



var CorrectionsMonitor = {
  MAX_ALLOWED: 0, // XXX
  corrections: 0,
  sigs: {},

  note: function(type, succeed, sig) {
    if (!succeed) {
      this.corrections++;
      if (this.corrections >= this.MAX_ALLOWED) abort('\n\nToo many corrections!');
    }
  },

  print: function() {
  }
};





//========================================
// Runtime essentials
//========================================

var __THREW__ = false; // Used in checking for thrown exceptions.

var ABORT = false;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;

function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Adding
//
//         __attribute__((used))
//
//       to the function definition will prevent that.
//
// Note: Closure optimizations will minify function names, making
//       functions no longer callable. If you run closure (on by default
//       in -O2 and above), you should export the functions you will call
//       by calling emcc with something like
//
//         -s EXPORTED_FUNCTIONS='["_func1","_func2"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  try {
    var func = eval('_' + ident);
  } catch(e) {
    try {
      func = globalScope['Module']['_' + ident]; // closure exported function
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
Module["ccall"] = ccall;

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  // TODO: optimize this, eval the whole function once instead of going through ccall each time
  return function() {
    return ccall(ident, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type[type.length-1] === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': HEAP32[((ptr)>>2)]=value; break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (tempDoubleF64[0]=value,HEAP32[((ptr)>>2)]=tempDoubleI32[0],HEAP32[(((ptr)+(4))>>2)]=tempDoubleI32[1]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type[type.length-1] === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (tempDoubleI32[0]=HEAP32[((ptr)>>2)],tempDoubleI32[1]=HEAP32[(((ptr)+(4))>>2)],tempDoubleF64[0]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

// Allocates memory for some data and initializes it properly.

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;

function allocate(slab, types, allocator) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));

  if (zeroinit) {
      _memset(ret, 0, size);
      return ret;
  }
  
  var i = 0, type;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  var nullTerminated = typeof(length) == "undefined";
  var ret = "";
  var i = 0;
  var t;
  var nullByte = String.fromCharCode(0);
  while (1) {
    t = String.fromCharCode(HEAPU8[((ptr)+(i))]);
    if (nullTerminated && t == nullByte) { break; } else {}
    ret += t;
    i += 1;
    if (!nullTerminated && i == length) { break; }
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;

// Memory management

var FUNCTION_TABLE; // XXX: In theory the indexes here can be equal to pointers to stacked or malloced memory. Such comparisons should
                    //      be false, but can turn out true. We should probably set the top bit to prevent such issues.

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and STATICTOP is the new top.
  Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [STATICTOP, TOTAL_MEMORY]);
  assert(STATICTOP >= TOTAL_MEMORY);
  assert(TOTAL_MEMORY > 4); // So the loop below will not be infinite
  while (TOTAL_MEMORY <= STATICTOP) { // Simple heuristic. Override enlargeMemory() if your program has something more optimal for it
    TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY);
  }
  var oldHEAP8 = HEAP8;
  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAPF64 = new Float64Array(buffer);
  HEAP8.set(oldHEAP8);
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 10485760;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
  assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
         'Cannot fallback to non-typed array case: Code is too specialized');

  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAPF64 = new Float64Array(buffer);

  // Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 255;
  assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

var base = intArrayFromString('(null)'); // So printing %s of NULL gives '(null)'
                                         // Also this ensures we leave 0 as an invalid address, 'NULL'
STATICTOP = base.length;
for (var i = 0; i < base.length; i++) {
  HEAP8[(i)]=base[i]
}

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

STACK_ROOT = STACKTOP = Runtime.alignMemory(STATICTOP);
STACK_MAX = STACK_ROOT + TOTAL_STACK;

var tempDoublePtr = Runtime.alignMemory(STACK_MAX, 8);
var tempDoubleI8  = HEAP8.subarray(tempDoublePtr);
var tempDoubleI32 = HEAP32.subarray(tempDoublePtr >> 2);
var tempDoubleF32 = HEAPF32.subarray(tempDoublePtr >> 2);
var tempDoubleF64 = HEAPF64.subarray(tempDoublePtr >> 3);
function copyTempFloat(ptr) { // functions, because inlining this code is increases code size too much
  tempDoubleI8[0] = HEAP8[ptr];
  tempDoubleI8[1] = HEAP8[ptr+1];
  tempDoubleI8[2] = HEAP8[ptr+2];
  tempDoubleI8[3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  tempDoubleI8[0] = HEAP8[ptr];
  tempDoubleI8[1] = HEAP8[ptr+1];
  tempDoubleI8[2] = HEAP8[ptr+2];
  tempDoubleI8[3] = HEAP8[ptr+3];
  tempDoubleI8[4] = HEAP8[ptr+4];
  tempDoubleI8[5] = HEAP8[ptr+5];
  tempDoubleI8[6] = HEAP8[ptr+6];
  tempDoubleI8[7] = HEAP8[ptr+7];
}
STACK_MAX = tempDoublePtr + 8;

STATICTOP = alignMemoryPage(STACK_MAX);

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === 'number') {
      func = FUNCTION_TABLE[func];
    }
    func(callback.arg === undefined ? null : callback.arg);
  }
}

var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);

  // Print summary of correction activity
  CorrectionsMonitor.print();
}

function String_len(ptr) {
  var i = 0;
  while (HEAP8[((ptr)+(i))]) i++; // Note: should be |!= 0|, technically. But this helps catch bugs with undefineds
  return i;
}
Module['String_len'] = String_len;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = [];
  var t;
  var i = 0;
  if (length === undefined) {
    length = stringy.length;
  }
  while (i < length) {
    var chr = stringy.charCodeAt(i);
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + stringy[i] + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(chr);
    i = i + 1;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var i = 0;
  while (i < string.length) {
    var chr = string.charCodeAt(i);
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + string[i] + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    HEAP8[((buffer)+(i))]=chr
    i = i + 1;
  }
  if (!dontAddNull) {
    HEAP8[((buffer)+(i))]=0
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer)+(i))]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

var STRING_TABLE = [];

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
  // TODO: clean up previous line
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
function addRunDependency() {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency() {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) run();
}
Module['removeRunDependency'] = removeRunDependency;

// === Body ===




function _ass_free_track($track) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $track_addr;
      var $i;
      $track_addr=$track;
      var $0=$track_addr;
      var $parser_priv=(($0+80)|0);
      var $1=HEAP32[(($parser_priv)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=$track_addr;
      var $parser_priv1=(($2+80)|0);
      var $3=HEAP32[(($parser_priv1)>>2)];
      var $fontname=(($3+4)|0);
      var $4=HEAP32[(($fontname)>>2)];
      _free($4);
      var $5=$track_addr;
      var $parser_priv2=(($5+80)|0);
      var $6=HEAP32[(($parser_priv2)>>2)];
      var $fontdata=(($6+8)|0);
      var $7=HEAP32[(($fontdata)>>2)];
      _free($7);
      var $8=$track_addr;
      var $parser_priv3=(($8+80)|0);
      var $9=HEAP32[(($parser_priv3)>>2)];
      var $10=$9;
      _free($10);
      __label__ = 4; break;
    case 4: 
      var $11=$track_addr;
      var $style_format=(($11+24)|0);
      var $12=HEAP32[(($style_format)>>2)];
      _free($12);
      var $13=$track_addr;
      var $event_format=(($13+28)|0);
      var $14=HEAP32[(($event_format)>>2)];
      _free($14);
      var $15=$track_addr;
      var $Language=(($15+64)|0);
      var $16=HEAP32[(($Language)>>2)];
      _free($16);
      var $17=$track_addr;
      var $styles=(($17+16)|0);
      var $18=HEAP32[(($styles)>>2)];
      var $tobool4=(($18)|0)!=0;
      if ($tobool4) { __label__ = 5; break; } else { __label__ = 10; break; }
    case 5: 
      $i=0;
      __label__ = 6; break;
    case 6: 
      var $19=$i;
      var $20=$track_addr;
      var $n_styles=(($20)|0);
      var $21=HEAP32[(($n_styles)>>2)];
      var $cmp=(($19)|0) < (($21)|0);
      if ($cmp) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $22=$track_addr;
      var $23=$i;
      _ass_free_style($22, $23);
      __label__ = 8; break;
    case 8: 
      var $24=$i;
      var $inc=((($24)+(1))|0);
      $i=$inc;
      __label__ = 6; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $25=$track_addr;
      var $styles7=(($25+16)|0);
      var $26=HEAP32[(($styles7)>>2)];
      var $27=$26;
      _free($27);
      var $28=$track_addr;
      var $events=(($28+20)|0);
      var $29=HEAP32[(($events)>>2)];
      var $tobool8=(($29)|0)!=0;
      if ($tobool8) { __label__ = 11; break; } else { __label__ = 16; break; }
    case 11: 
      $i=0;
      __label__ = 12; break;
    case 12: 
      var $30=$i;
      var $31=$track_addr;
      var $n_events=(($31+8)|0);
      var $32=HEAP32[(($n_events)>>2)];
      var $cmp11=(($30)|0) < (($32)|0);
      if ($cmp11) { __label__ = 13; break; } else { __label__ = 15; break; }
    case 13: 
      var $33=$track_addr;
      var $34=$i;
      _ass_free_event($33, $34);
      __label__ = 14; break;
    case 14: 
      var $35=$i;
      var $inc14=((($35)+(1))|0);
      $i=$inc14;
      __label__ = 12; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $36=$track_addr;
      var $events17=(($36+20)|0);
      var $37=HEAP32[(($events17)>>2)];
      var $38=$37;
      _free($38);
      var $39=$track_addr;
      var $name=(($39+72)|0);
      var $40=HEAP32[(($name)>>2)];
      _free($40);
      var $41=$track_addr;
      var $42=$41;
      _free($42);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_free_track["X"]=1;

function _ass_free_style($track, $sid) {
  ;
  var __label__;

  var $track_addr;
  var $sid_addr;
  var $style;
  $track_addr=$track;
  $sid_addr=$sid;
  var $0=$track_addr;
  var $styles=(($0+16)|0);
  var $1=HEAP32[(($styles)>>2)];
  var $2=$sid_addr;
  var $add_ptr=(($1+($2)*(120))|0);
  $style=$add_ptr;
  var $3=$style;
  var $Name=(($3)|0);
  var $4=HEAP32[(($Name)>>2)];
  _free($4);
  var $5=$style;
  var $FontName=(($5+4)|0);
  var $6=HEAP32[(($FontName)>>2)];
  _free($6);
  ;
  return;
}


function _ass_free_event($track, $eid) {
  ;
  var __label__;

  var $track_addr;
  var $eid_addr;
  var $event;
  $track_addr=$track;
  $eid_addr=$eid;
  var $0=$track_addr;
  var $events=(($0+20)|0);
  var $1=HEAP32[(($events)>>2)];
  var $2=$eid_addr;
  var $add_ptr=(($1+($2)*(56))|0);
  $event=$add_ptr;
  var $3=$event;
  var $Name=(($3+28)|0);
  var $4=HEAP32[(($Name)>>2)];
  _free($4);
  var $5=$event;
  var $Effect=(($5+44)|0);
  var $6=HEAP32[(($Effect)>>2)];
  _free($6);
  var $7=$event;
  var $Text=(($7+48)|0);
  var $8=HEAP32[(($Text)>>2)];
  _free($8);
  var $9=$event;
  var $render_priv=(($9+52)|0);
  var $10=HEAP32[(($render_priv)>>2)];
  var $11=$10;
  _free($11);
  ;
  return;
}


function _ass_alloc_style($track) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $track_addr;
      var $sid;
      $track_addr=$track;
      var $0=$track_addr;
      var $n_styles=(($0)|0);
      var $1=HEAP32[(($n_styles)>>2)];
      var $2=$track_addr;
      var $max_styles=(($2+4)|0);
      var $3=HEAP32[(($max_styles)>>2)];
      var $cmp=(($1)|0) <= (($3)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      ___assert_fail(((STRING_TABLE.__str)|0), ((STRING_TABLE.__str1)|0), 95, ((STRING_TABLE.___PRETTY_FUNCTION___ass_alloc_style)|0));
      throw "Reached an unreachable!"
      __label__ = 5; break;
    case 5: 
      var $5=$track_addr;
      var $n_styles1=(($5)|0);
      var $6=HEAP32[(($n_styles1)>>2)];
      var $7=$track_addr;
      var $max_styles2=(($7+4)|0);
      var $8=HEAP32[(($max_styles2)>>2)];
      var $cmp3=(($6)|0)==(($8)|0);
      if ($cmp3) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $9=$track_addr;
      var $max_styles4=(($9+4)|0);
      var $10=HEAP32[(($max_styles4)>>2)];
      var $add=((($10)+(20))|0);
      HEAP32[(($max_styles4)>>2)]=$add;
      var $11=$track_addr;
      var $styles=(($11+16)|0);
      var $12=HEAP32[(($styles)>>2)];
      var $13=$12;
      var $14=$track_addr;
      var $max_styles5=(($14+4)|0);
      var $15=HEAP32[(($max_styles5)>>2)];
      var $mul=((($15)*(120))|0);
      var $call=_realloc($13, $mul);
      var $16=$call;
      var $17=$track_addr;
      var $styles6=(($17+16)|0);
      HEAP32[(($styles6)>>2)]=$16;
      __label__ = 7; break;
    case 7: 
      var $18=$track_addr;
      var $n_styles7=(($18)|0);
      var $19=HEAP32[(($n_styles7)>>2)];
      var $inc=((($19)+(1))|0);
      HEAP32[(($n_styles7)>>2)]=$inc;
      $sid=$19;
      var $20=$track_addr;
      var $styles8=(($20+16)|0);
      var $21=HEAP32[(($styles8)>>2)];
      var $22=$sid;
      var $add_ptr=(($21+($22)*(120))|0);
      var $23=$add_ptr;
      for (var $$dest = $23>>2, $$stop = $$dest + 30; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $24=$sid;
      ;
      return $24;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_alloc_style["X"]=1;

function _ass_alloc_event($track) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $track_addr;
      var $eid;
      $track_addr=$track;
      var $0=$track_addr;
      var $n_events=(($0+8)|0);
      var $1=HEAP32[(($n_events)>>2)];
      var $2=$track_addr;
      var $max_events=(($2+12)|0);
      var $3=HEAP32[(($max_events)>>2)];
      var $cmp=(($1)|0) <= (($3)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      ___assert_fail(((STRING_TABLE.__str2)|0), ((STRING_TABLE.__str1)|0), 117, ((STRING_TABLE.___PRETTY_FUNCTION___ass_alloc_event)|0));
      throw "Reached an unreachable!"
      __label__ = 5; break;
    case 5: 
      var $5=$track_addr;
      var $n_events1=(($5+8)|0);
      var $6=HEAP32[(($n_events1)>>2)];
      var $7=$track_addr;
      var $max_events2=(($7+12)|0);
      var $8=HEAP32[(($max_events2)>>2)];
      var $cmp3=(($6)|0)==(($8)|0);
      if ($cmp3) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $9=$track_addr;
      var $max_events4=(($9+12)|0);
      var $10=HEAP32[(($max_events4)>>2)];
      var $add=((($10)+(200))|0);
      HEAP32[(($max_events4)>>2)]=$add;
      var $11=$track_addr;
      var $events=(($11+20)|0);
      var $12=HEAP32[(($events)>>2)];
      var $13=$12;
      var $14=$track_addr;
      var $max_events5=(($14+12)|0);
      var $15=HEAP32[(($max_events5)>>2)];
      var $mul=((($15)*(56))|0);
      var $call=_realloc($13, $mul);
      var $16=$call;
      var $17=$track_addr;
      var $events6=(($17+20)|0);
      HEAP32[(($events6)>>2)]=$16;
      __label__ = 7; break;
    case 7: 
      var $18=$track_addr;
      var $n_events7=(($18+8)|0);
      var $19=HEAP32[(($n_events7)>>2)];
      var $inc=((($19)+(1))|0);
      HEAP32[(($n_events7)>>2)]=$inc;
      $eid=$19;
      var $20=$track_addr;
      var $events8=(($20+20)|0);
      var $21=HEAP32[(($events8)>>2)];
      var $22=$eid;
      var $add_ptr=(($21+($22)*(56))|0);
      var $23=$add_ptr;
      for (var $$dest = $23>>2, $$stop = $$dest + 14; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $24=$eid;
      ;
      return $24;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_alloc_event["X"]=1;

function _ass_process_force_style($track) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $track_addr;
      var $fs;
      var $eq;
      var $dt;
      var $style;
      var $tname;
      var $token;
      var $target;
      var $sid;
      var $list;
      $track_addr=$track;
      var $0=$track_addr;
      var $library=(($0+76)|0);
      var $1=HEAP32[(($library)>>2)];
      var $style_overrides=(($1+8)|0);
      var $2=HEAP32[(($style_overrides)>>2)];
      $list=$2;
      var $3=$list;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      __label__ = 106; break;
    case 4: 
      var $4=$list;
      $fs=$4;
      __label__ = 5; break;
    case 5: 
      var $5=$fs;
      var $6=HEAP32[(($5)>>2)];
      var $tobool1=(($6)|0)!=0;
      if ($tobool1) { __label__ = 6; break; } else { __label__ = 106; break; }
    case 6: 
      var $7=$fs;
      var $8=HEAP32[(($7)>>2)];
      var $call=_strrchr($8, 61);
      $eq=$call;
      var $9=$eq;
      var $tobool2=(($9)|0)!=0;
      if ($tobool2) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      __label__ = 105; break;
    case 8: 
      var $10=$eq;
      HEAP8[($10)]=0;
      var $11=$eq;
      var $add_ptr=(($11+1)|0);
      $token=$add_ptr;
      var $12=$fs;
      var $13=HEAP32[(($12)>>2)];
      var $call5=_strcasecmp($13, ((STRING_TABLE.__str3)|0));
      var $tobool6=(($call5)|0)!=0;
      if ($tobool6) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $14=$token;
      var $call8=_atoi($14);
      var $15=$track_addr;
      var $PlayResX=(($15+36)|0);
      HEAP32[(($PlayResX)>>2)]=$call8;
      __label__ = 25; break;
    case 10: 
      var $16=$fs;
      var $17=HEAP32[(($16)>>2)];
      var $call9=_strcasecmp($17, ((STRING_TABLE.__str4)|0));
      var $tobool10=(($call9)|0)!=0;
      if ($tobool10) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $18=$token;
      var $call12=_atoi($18);
      var $19=$track_addr;
      var $PlayResY=(($19+40)|0);
      HEAP32[(($PlayResY)>>2)]=$call12;
      __label__ = 24; break;
    case 12: 
      var $20=$fs;
      var $21=HEAP32[(($20)>>2)];
      var $call14=_strcasecmp($21, ((STRING_TABLE.__str5)|0));
      var $tobool15=(($call14)|0)!=0;
      if ($tobool15) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: 
      var $22=$token;
      var $call17=_ass_strtod($22, 0);
      var $23=$track_addr;
      var $Timer=(($23+44)|0);
      (tempDoubleF64[0]=$call17,HEAP32[(($Timer)>>2)]=tempDoubleI32[0],HEAP32[((($Timer)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 23; break;
    case 14: 
      var $24=$fs;
      var $25=HEAP32[(($24)>>2)];
      var $call19=_strcasecmp($25, ((STRING_TABLE.__str6)|0));
      var $tobool20=(($call19)|0)!=0;
      if ($tobool20) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      var $26=$token;
      var $call22=_atoi($26);
      var $27=$track_addr;
      var $WrapStyle=(($27+52)|0);
      HEAP32[(($WrapStyle)>>2)]=$call22;
      __label__ = 22; break;
    case 16: 
      var $28=$fs;
      var $29=HEAP32[(($28)>>2)];
      var $call24=_strcasecmp($29, ((STRING_TABLE.__str7)|0));
      var $tobool25=(($call24)|0)!=0;
      if ($tobool25) { __label__ = 18; break; } else { __label__ = 17; break; }
    case 17: 
      var $30=$token;
      var $call27=_parse_bool($30);
      var $conv=(($call27 << 24) >> 24);
      var $31=$track_addr;
      var $ScaledBorderAndShadow=(($31+56)|0);
      HEAP32[(($ScaledBorderAndShadow)>>2)]=$conv;
      __label__ = 21; break;
    case 18: 
      var $32=$fs;
      var $33=HEAP32[(($32)>>2)];
      var $call29=_strcasecmp($33, ((STRING_TABLE.__str8)|0));
      var $tobool30=(($call29)|0)!=0;
      if ($tobool30) { __label__ = 20; break; } else { __label__ = 19; break; }
    case 19: 
      var $34=$token;
      var $call32=_parse_bool($34);
      var $conv33=(($call32 << 24) >> 24);
      var $35=$track_addr;
      var $Kerning=(($35+60)|0);
      HEAP32[(($Kerning)>>2)]=$conv33;
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      var $36=$fs;
      var $37=HEAP32[(($36)>>2)];
      var $call40=_strrchr($37, 46);
      $dt=$call40;
      var $38=$dt;
      var $tobool41=(($38)|0)!=0;
      if ($tobool41) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $39=$dt;
      HEAP8[($39)]=0;
      var $40=$fs;
      var $41=HEAP32[(($40)>>2)];
      $style=$41;
      var $42=$dt;
      var $add_ptr43=(($42+1)|0);
      $tname=$add_ptr43;
      __label__ = 28; break;
    case 27: 
      $style=0;
      var $43=$fs;
      var $44=HEAP32[(($43)>>2)];
      $tname=$44;
      __label__ = 28; break;
    case 28: 
      $sid=0;
      __label__ = 29; break;
    case 29: 
      var $45=$sid;
      var $46=$track_addr;
      var $n_styles=(($46)|0);
      var $47=HEAP32[(($n_styles)>>2)];
      var $cmp=(($45)|0) < (($47)|0);
      if ($cmp) { __label__ = 30; break; } else { __label__ = 102; break; }
    case 30: 
      var $48=$style;
      var $cmp49=(($48)|0)==0;
      if ($cmp49) { __label__ = 32; break; } else { __label__ = 31; break; }
    case 31: 
      var $49=$sid;
      var $50=$track_addr;
      var $styles=(($50+16)|0);
      var $51=HEAP32[(($styles)>>2)];
      var $arrayidx=(($51+($49)*(120))|0);
      var $Name=(($arrayidx)|0);
      var $52=HEAP32[(($Name)>>2)];
      var $53=$style;
      var $call51=_strcasecmp($52, $53);
      var $cmp52=(($call51)|0)==0;
      if ($cmp52) { __label__ = 32; break; } else { __label__ = 100; break; }
    case 32: 
      var $54=$track_addr;
      var $styles55=(($54+16)|0);
      var $55=HEAP32[(($styles55)>>2)];
      var $56=$sid;
      var $add_ptr56=(($55+($56)*(120))|0);
      $target=$add_ptr56;
      var $57=$tname;
      var $call57=_strcasecmp($57, ((STRING_TABLE.__str9)|0));
      var $cmp58=(($call57)|0)==0;
      if ($cmp58) { __label__ = 33; break; } else { __label__ = 36; break; }
    case 33: 
      var $58=$target;
      var $FontName=(($58+4)|0);
      var $59=HEAP32[(($FontName)>>2)];
      var $cmp61=(($59)|0)!=0;
      if ($cmp61) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $60=$target;
      var $FontName64=(($60+4)|0);
      var $61=HEAP32[(($FontName64)>>2)];
      _free($61);
      __label__ = 35; break;
    case 35: 
      var $62=$token;
      var $call66=_strdup($62);
      var $63=$target;
      var $FontName67=(($63+4)|0);
      HEAP32[(($FontName67)>>2)]=$call66;
      var $64=$track_addr;
      var $library68=(($64+76)|0);
      var $65=HEAP32[(($library68)>>2)];
      var $66=$token;
      _ass_msg($65, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str9)|0),HEAP32[(((tempInt)+(4))>>2)]=$66,tempInt));
      __label__ = 99; break;
    case 36: 
      var $67=$tname;
      var $call70=_strcasecmp($67, ((STRING_TABLE.__str11)|0));
      var $cmp71=(($call70)|0)==0;
      if ($cmp71) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      var $68=$track_addr;
      var $library74=(($68+76)|0);
      var $69=HEAP32[(($library74)>>2)];
      var $70=$token;
      var $call75=_string2color($69, $70);
      var $71=$target;
      var $PrimaryColour=(($71+16)|0);
      HEAP32[(($PrimaryColour)>>2)]=$call75;
      var $72=$track_addr;
      var $library76=(($72+76)|0);
      var $73=HEAP32[(($library76)>>2)];
      var $74=$token;
      _ass_msg($73, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str11)|0),HEAP32[(((tempInt)+(4))>>2)]=$74,tempInt));
      __label__ = 98; break;
    case 38: 
      var $75=$tname;
      var $call78=_strcasecmp($75, ((STRING_TABLE.__str12)|0));
      var $cmp79=(($call78)|0)==0;
      if ($cmp79) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $76=$track_addr;
      var $library82=(($76+76)|0);
      var $77=HEAP32[(($library82)>>2)];
      var $78=$token;
      var $call83=_string2color($77, $78);
      var $79=$target;
      var $SecondaryColour=(($79+20)|0);
      HEAP32[(($SecondaryColour)>>2)]=$call83;
      var $80=$track_addr;
      var $library84=(($80+76)|0);
      var $81=HEAP32[(($library84)>>2)];
      var $82=$token;
      _ass_msg($81, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str12)|0),HEAP32[(((tempInt)+(4))>>2)]=$82,tempInt));
      __label__ = 97; break;
    case 40: 
      var $83=$tname;
      var $call86=_strcasecmp($83, ((STRING_TABLE.__str13)|0));
      var $cmp87=(($call86)|0)==0;
      if ($cmp87) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $84=$track_addr;
      var $library90=(($84+76)|0);
      var $85=HEAP32[(($library90)>>2)];
      var $86=$token;
      var $call91=_string2color($85, $86);
      var $87=$target;
      var $OutlineColour=(($87+24)|0);
      HEAP32[(($OutlineColour)>>2)]=$call91;
      var $88=$track_addr;
      var $library92=(($88+76)|0);
      var $89=HEAP32[(($library92)>>2)];
      var $90=$token;
      _ass_msg($89, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str13)|0),HEAP32[(((tempInt)+(4))>>2)]=$90,tempInt));
      __label__ = 96; break;
    case 42: 
      var $91=$tname;
      var $call94=_strcasecmp($91, ((STRING_TABLE.__str14)|0));
      var $cmp95=(($call94)|0)==0;
      if ($cmp95) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $92=$track_addr;
      var $library98=(($92+76)|0);
      var $93=HEAP32[(($library98)>>2)];
      var $94=$token;
      var $call99=_string2color($93, $94);
      var $95=$target;
      var $BackColour=(($95+28)|0);
      HEAP32[(($BackColour)>>2)]=$call99;
      var $96=$track_addr;
      var $library100=(($96+76)|0);
      var $97=HEAP32[(($library100)>>2)];
      var $98=$token;
      _ass_msg($97, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str14)|0),HEAP32[(((tempInt)+(4))>>2)]=$98,tempInt));
      __label__ = 95; break;
    case 44: 
      var $99=$tname;
      var $call102=_strcasecmp($99, ((STRING_TABLE.__str15)|0));
      var $cmp103=(($call102)|0)==0;
      if ($cmp103) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $100=$token;
      var $call106=_ass_strtod($100, 0);
      var $101=$target;
      var $FontSize=(($101+8)|0);
      (tempDoubleF64[0]=$call106,HEAP32[(($FontSize)>>2)]=tempDoubleI32[0],HEAP32[((($FontSize)+(4))>>2)]=tempDoubleI32[1]);
      var $102=$track_addr;
      var $library107=(($102+76)|0);
      var $103=HEAP32[(($library107)>>2)];
      var $104=$token;
      _ass_msg($103, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str15)|0),HEAP32[(((tempInt)+(4))>>2)]=$104,tempInt));
      __label__ = 94; break;
    case 46: 
      var $105=$tname;
      var $call109=_strcasecmp($105, ((STRING_TABLE.__str16)|0));
      var $cmp110=(($call109)|0)==0;
      if ($cmp110) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      var $106=$token;
      var $call113=_atoi($106);
      var $107=$target;
      var $Bold=(($107+32)|0);
      HEAP32[(($Bold)>>2)]=$call113;
      var $108=$track_addr;
      var $library114=(($108+76)|0);
      var $109=HEAP32[(($library114)>>2)];
      var $110=$token;
      _ass_msg($109, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str16)|0),HEAP32[(((tempInt)+(4))>>2)]=$110,tempInt));
      __label__ = 93; break;
    case 48: 
      var $111=$tname;
      var $call116=_strcasecmp($111, ((STRING_TABLE.__str17)|0));
      var $cmp117=(($call116)|0)==0;
      if ($cmp117) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      var $112=$token;
      var $call120=_atoi($112);
      var $113=$target;
      var $Italic=(($113+36)|0);
      HEAP32[(($Italic)>>2)]=$call120;
      var $114=$track_addr;
      var $library121=(($114+76)|0);
      var $115=HEAP32[(($library121)>>2)];
      var $116=$token;
      _ass_msg($115, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str17)|0),HEAP32[(((tempInt)+(4))>>2)]=$116,tempInt));
      __label__ = 92; break;
    case 50: 
      var $117=$tname;
      var $call123=_strcasecmp($117, ((STRING_TABLE.__str18)|0));
      var $cmp124=(($call123)|0)==0;
      if ($cmp124) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $118=$token;
      var $call127=_atoi($118);
      var $119=$target;
      var $Underline=(($119+40)|0);
      HEAP32[(($Underline)>>2)]=$call127;
      var $120=$track_addr;
      var $library128=(($120+76)|0);
      var $121=HEAP32[(($library128)>>2)];
      var $122=$token;
      _ass_msg($121, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str18)|0),HEAP32[(((tempInt)+(4))>>2)]=$122,tempInt));
      __label__ = 91; break;
    case 52: 
      var $123=$tname;
      var $call130=_strcasecmp($123, ((STRING_TABLE.__str19)|0));
      var $cmp131=(($call130)|0)==0;
      if ($cmp131) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      var $124=$token;
      var $call134=_atoi($124);
      var $125=$target;
      var $StrikeOut=(($125+44)|0);
      HEAP32[(($StrikeOut)>>2)]=$call134;
      var $126=$track_addr;
      var $library135=(($126+76)|0);
      var $127=HEAP32[(($library135)>>2)];
      var $128=$token;
      _ass_msg($127, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str19)|0),HEAP32[(((tempInt)+(4))>>2)]=$128,tempInt));
      __label__ = 90; break;
    case 54: 
      var $129=$tname;
      var $call137=_strcasecmp($129, ((STRING_TABLE.__str20)|0));
      var $cmp138=(($call137)|0)==0;
      if ($cmp138) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: 
      var $130=$token;
      var $call141=_ass_strtod($130, 0);
      var $131=$target;
      var $Spacing=(($131+64)|0);
      (tempDoubleF64[0]=$call141,HEAP32[(($Spacing)>>2)]=tempDoubleI32[0],HEAP32[((($Spacing)+(4))>>2)]=tempDoubleI32[1]);
      var $132=$track_addr;
      var $library142=(($132+76)|0);
      var $133=HEAP32[(($library142)>>2)];
      var $134=$token;
      _ass_msg($133, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str20)|0),HEAP32[(((tempInt)+(4))>>2)]=$134,tempInt));
      __label__ = 89; break;
    case 56: 
      var $135=$tname;
      var $call144=_strcasecmp($135, ((STRING_TABLE.__str21)|0));
      var $cmp145=(($call144)|0)==0;
      if ($cmp145) { __label__ = 57; break; } else { __label__ = 58; break; }
    case 57: 
      var $136=$token;
      var $call148=_atoi($136);
      var $137=$target;
      var $Angle=(($137+72)|0);
      HEAP32[(($Angle)>>2)]=$call148;
      var $138=$track_addr;
      var $library149=(($138+76)|0);
      var $139=HEAP32[(($library149)>>2)];
      var $140=$token;
      _ass_msg($139, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str21)|0),HEAP32[(((tempInt)+(4))>>2)]=$140,tempInt));
      __label__ = 88; break;
    case 58: 
      var $141=$tname;
      var $call151=_strcasecmp($141, ((STRING_TABLE.__str22)|0));
      var $cmp152=(($call151)|0)==0;
      if ($cmp152) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      var $142=$token;
      var $call155=_atoi($142);
      var $143=$target;
      var $BorderStyle=(($143+76)|0);
      HEAP32[(($BorderStyle)>>2)]=$call155;
      var $144=$track_addr;
      var $library156=(($144+76)|0);
      var $145=HEAP32[(($library156)>>2)];
      var $146=$token;
      _ass_msg($145, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str22)|0),HEAP32[(((tempInt)+(4))>>2)]=$146,tempInt));
      __label__ = 87; break;
    case 60: 
      var $147=$tname;
      var $call158=_strcasecmp($147, ((STRING_TABLE.__str23)|0));
      var $cmp159=(($call158)|0)==0;
      if ($cmp159) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: 
      var $148=$token;
      var $call162=_atoi($148);
      var $149=$target;
      var $Alignment=(($149+96)|0);
      HEAP32[(($Alignment)>>2)]=$call162;
      var $150=$track_addr;
      var $library163=(($150+76)|0);
      var $151=HEAP32[(($library163)>>2)];
      var $152=$token;
      _ass_msg($151, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str23)|0),HEAP32[(((tempInt)+(4))>>2)]=$152,tempInt));
      __label__ = 86; break;
    case 62: 
      var $153=$tname;
      var $call165=_strcasecmp($153, ((STRING_TABLE.__str24)|0));
      var $cmp166=(($call165)|0)==0;
      if ($cmp166) { __label__ = 63; break; } else { __label__ = 64; break; }
    case 63: 
      var $154=$token;
      var $call169=_atoi($154);
      var $155=$target;
      var $MarginL=(($155+100)|0);
      HEAP32[(($MarginL)>>2)]=$call169;
      var $156=$track_addr;
      var $library170=(($156+76)|0);
      var $157=HEAP32[(($library170)>>2)];
      var $158=$token;
      _ass_msg($157, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str24)|0),HEAP32[(((tempInt)+(4))>>2)]=$158,tempInt));
      __label__ = 85; break;
    case 64: 
      var $159=$tname;
      var $call172=_strcasecmp($159, ((STRING_TABLE.__str25)|0));
      var $cmp173=(($call172)|0)==0;
      if ($cmp173) { __label__ = 65; break; } else { __label__ = 66; break; }
    case 65: 
      var $160=$token;
      var $call176=_atoi($160);
      var $161=$target;
      var $MarginR=(($161+104)|0);
      HEAP32[(($MarginR)>>2)]=$call176;
      var $162=$track_addr;
      var $library177=(($162+76)|0);
      var $163=HEAP32[(($library177)>>2)];
      var $164=$token;
      _ass_msg($163, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str25)|0),HEAP32[(((tempInt)+(4))>>2)]=$164,tempInt));
      __label__ = 84; break;
    case 66: 
      var $165=$tname;
      var $call179=_strcasecmp($165, ((STRING_TABLE.__str26)|0));
      var $cmp180=(($call179)|0)==0;
      if ($cmp180) { __label__ = 67; break; } else { __label__ = 68; break; }
    case 67: 
      var $166=$token;
      var $call183=_atoi($166);
      var $167=$target;
      var $MarginV=(($167+108)|0);
      HEAP32[(($MarginV)>>2)]=$call183;
      var $168=$track_addr;
      var $library184=(($168+76)|0);
      var $169=HEAP32[(($library184)>>2)];
      var $170=$token;
      _ass_msg($169, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str26)|0),HEAP32[(((tempInt)+(4))>>2)]=$170,tempInt));
      __label__ = 83; break;
    case 68: 
      var $171=$tname;
      var $call186=_strcasecmp($171, ((STRING_TABLE.__str27)|0));
      var $cmp187=(($call186)|0)==0;
      if ($cmp187) { __label__ = 69; break; } else { __label__ = 70; break; }
    case 69: 
      var $172=$token;
      var $call190=_atoi($172);
      var $173=$target;
      var $Encoding=(($173+112)|0);
      HEAP32[(($Encoding)>>2)]=$call190;
      var $174=$track_addr;
      var $library191=(($174+76)|0);
      var $175=HEAP32[(($library191)>>2)];
      var $176=$token;
      _ass_msg($175, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str27)|0),HEAP32[(((tempInt)+(4))>>2)]=$176,tempInt));
      __label__ = 82; break;
    case 70: 
      var $177=$tname;
      var $call193=_strcasecmp($177, ((STRING_TABLE.__str28)|0));
      var $cmp194=(($call193)|0)==0;
      if ($cmp194) { __label__ = 71; break; } else { __label__ = 72; break; }
    case 71: 
      var $178=$token;
      var $call197=_ass_strtod($178, 0);
      var $179=$target;
      var $ScaleX=(($179+48)|0);
      (tempDoubleF64[0]=$call197,HEAP32[(($ScaleX)>>2)]=tempDoubleI32[0],HEAP32[((($ScaleX)+(4))>>2)]=tempDoubleI32[1]);
      var $180=$track_addr;
      var $library198=(($180+76)|0);
      var $181=HEAP32[(($library198)>>2)];
      var $182=$token;
      _ass_msg($181, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str28)|0),HEAP32[(((tempInt)+(4))>>2)]=$182,tempInt));
      __label__ = 81; break;
    case 72: 
      var $183=$tname;
      var $call200=_strcasecmp($183, ((STRING_TABLE.__str29)|0));
      var $cmp201=(($call200)|0)==0;
      if ($cmp201) { __label__ = 73; break; } else { __label__ = 74; break; }
    case 73: 
      var $184=$token;
      var $call204=_ass_strtod($184, 0);
      var $185=$target;
      var $ScaleY=(($185+56)|0);
      (tempDoubleF64[0]=$call204,HEAP32[(($ScaleY)>>2)]=tempDoubleI32[0],HEAP32[((($ScaleY)+(4))>>2)]=tempDoubleI32[1]);
      var $186=$track_addr;
      var $library205=(($186+76)|0);
      var $187=HEAP32[(($library205)>>2)];
      var $188=$token;
      _ass_msg($187, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str29)|0),HEAP32[(((tempInt)+(4))>>2)]=$188,tempInt));
      __label__ = 80; break;
    case 74: 
      var $189=$tname;
      var $call207=_strcasecmp($189, ((STRING_TABLE.__str30)|0));
      var $cmp208=(($call207)|0)==0;
      if ($cmp208) { __label__ = 75; break; } else { __label__ = 76; break; }
    case 75: 
      var $190=$token;
      var $call211=_ass_strtod($190, 0);
      var $191=$target;
      var $Outline=(($191+80)|0);
      (tempDoubleF64[0]=$call211,HEAP32[(($Outline)>>2)]=tempDoubleI32[0],HEAP32[((($Outline)+(4))>>2)]=tempDoubleI32[1]);
      var $192=$track_addr;
      var $library212=(($192+76)|0);
      var $193=HEAP32[(($library212)>>2)];
      var $194=$token;
      _ass_msg($193, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str30)|0),HEAP32[(((tempInt)+(4))>>2)]=$194,tempInt));
      __label__ = 79; break;
    case 76: 
      var $195=$tname;
      var $call214=_strcasecmp($195, ((STRING_TABLE.__str31)|0));
      var $cmp215=(($call214)|0)==0;
      if ($cmp215) { __label__ = 77; break; } else { __label__ = 78; break; }
    case 77: 
      var $196=$token;
      var $call218=_ass_strtod($196, 0);
      var $197=$target;
      var $Shadow=(($197+88)|0);
      (tempDoubleF64[0]=$call218,HEAP32[(($Shadow)>>2)]=tempDoubleI32[0],HEAP32[((($Shadow)+(4))>>2)]=tempDoubleI32[1]);
      var $198=$track_addr;
      var $library219=(($198+76)|0);
      var $199=HEAP32[(($library219)>>2)];
      var $200=$token;
      _ass_msg($199, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str31)|0),HEAP32[(((tempInt)+(4))>>2)]=$200,tempInt));
      __label__ = 78; break;
    case 78: 
      __label__ = 79; break;
    case 79: 
      __label__ = 80; break;
    case 80: 
      __label__ = 81; break;
    case 81: 
      __label__ = 82; break;
    case 82: 
      __label__ = 83; break;
    case 83: 
      __label__ = 84; break;
    case 84: 
      __label__ = 85; break;
    case 85: 
      __label__ = 86; break;
    case 86: 
      __label__ = 87; break;
    case 87: 
      __label__ = 88; break;
    case 88: 
      __label__ = 89; break;
    case 89: 
      __label__ = 90; break;
    case 90: 
      __label__ = 91; break;
    case 91: 
      __label__ = 92; break;
    case 92: 
      __label__ = 93; break;
    case 93: 
      __label__ = 94; break;
    case 94: 
      __label__ = 95; break;
    case 95: 
      __label__ = 96; break;
    case 96: 
      __label__ = 97; break;
    case 97: 
      __label__ = 98; break;
    case 98: 
      __label__ = 99; break;
    case 99: 
      __label__ = 100; break;
    case 100: 
      __label__ = 101; break;
    case 101: 
      var $201=$sid;
      var $inc=((($201)+(1))|0);
      $sid=$inc;
      __label__ = 29; break;
    case 102: 
      var $202=$eq;
      HEAP8[($202)]=61;
      var $203=$dt;
      var $tobool243=(($203)|0)!=0;
      if ($tobool243) { __label__ = 103; break; } else { __label__ = 104; break; }
    case 103: 
      var $204=$dt;
      HEAP8[($204)]=46;
      __label__ = 104; break;
    case 104: 
      __label__ = 105; break;
    case 105: 
      var $205=$fs;
      var $incdec_ptr=(($205+4)|0);
      $fs=$incdec_ptr;
      __label__ = 5; break;
    case 106: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_process_force_style["X"]=1;

function _string2color($library, $p) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $library_addr;
  var $p_addr=__stackBase__;
  var $tmp=(__stackBase__)+(4);
  $library_addr=$library;
  HEAP32[(($p_addr)>>2)]=$p;
  var $0=$library_addr;
  var $call=_strtocolor($0, $p_addr, $tmp, 0);
  var $1=HEAP32[(($tmp)>>2)];
  STACKTOP = __stackBase__;
  return $1;
}


function _ass_process_data($track, $data, $size) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $track_addr;
  var $data_addr;
  var $size_addr;
  var $str;
  $track_addr=$track;
  $data_addr=$data;
  $size_addr=$size;
  var $0=$size_addr;
  var $add=((($0)+(1))|0);
  var $call=_malloc($add);
  $str=$call;
  var $1=$str;
  var $2=$data_addr;
  var $3=$size_addr;
  assert($3 % 1 === 0, 'memcpy given ' + $3 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($1, $2, $3, 1);
  var $4=$size_addr;
  var $5=$str;
  var $arrayidx=(($5+$4)|0);
  HEAP8[($arrayidx)]=0;
  var $6=$track_addr;
  var $library=(($6+76)|0);
  var $7=HEAP32[(($library)>>2)];
  var $8=$str;
  _ass_msg($7, 6, ((STRING_TABLE.__str32)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$8,tempInt));
  var $9=$track_addr;
  var $10=$str;
  var $call1=_process_text($9, $10);
  var $11=$str;
  _free($11);
  STACKTOP = __stackBase__;
  return;
}


function _process_text($track, $str) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $track_addr;
      var $str_addr;
      var $p;
      var $q;
      $track_addr=$track;
      $str_addr=$str;
      var $0=$str_addr;
      $p=$0;
      __label__ = 3; break;
    case 3: 
      __label__ = 4; break;
    case 4: 
      var $1=$p;
      var $2=HEAP8[($1)];
      var $conv=(($2 << 24) >> 24);
      var $cmp=(($conv)|0)==13;
      if ($cmp) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $3=$p;
      var $4=HEAP8[($3)];
      var $conv4=(($4 << 24) >> 24);
      var $cmp5=(($conv4)|0)==10;
      if ($cmp5) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $5=$p;
      var $incdec_ptr=(($5+1)|0);
      $p=$incdec_ptr;
      __label__ = 13; break;
    case 7: 
      var $6=$p;
      var $arrayidx=(($6)|0);
      var $7=HEAP8[($arrayidx)];
      var $conv7=(($7 << 24) >> 24);
      var $cmp8=(($conv7)|0)==-17;
      if ($cmp8) { __label__ = 8; break; } else { __label__ = 11; break; }
    case 8: 
      var $8=$p;
      var $arrayidx10=(($8+1)|0);
      var $9=HEAP8[($arrayidx10)];
      var $conv11=(($9 << 24) >> 24);
      var $cmp12=(($conv11)|0)==-69;
      if ($cmp12) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $10=$p;
      var $arrayidx15=(($10+2)|0);
      var $11=HEAP8[($arrayidx15)];
      var $conv16=(($11 << 24) >> 24);
      var $cmp17=(($conv16)|0)==-65;
      if ($cmp17) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $12=$p;
      var $add_ptr=(($12+3)|0);
      $p=$add_ptr;
      __label__ = 12; break;
    case 11: 
      __label__ = 14; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      __label__ = 4; break;
    case 14: 
      var $13=$p;
      $q=$13;
      __label__ = 15; break;
    case 15: 
      var $14=$q;
      var $15=HEAP8[($14)];
      var $conv22=(($15 << 24) >> 24);
      var $cmp23=(($conv22)|0)!=0;
      if ($cmp23) { __label__ = 16; break; } else { var $20 = 0;__label__ = 18; break; }
    case 16: 
      var $16=$q;
      var $17=HEAP8[($16)];
      var $conv26=(($17 << 24) >> 24);
      var $cmp27=(($conv26)|0)!=13;
      if ($cmp27) { __label__ = 17; break; } else { var $20 = 0;__label__ = 18; break; }
    case 17: 
      var $18=$q;
      var $19=HEAP8[($18)];
      var $conv29=(($19 << 24) >> 24);
      var $cmp30=(($conv29)|0)!=10;
      var $20 = $cmp30;__label__ = 18; break;
    case 18: 
      var $20;
      if ($20) { __label__ = 19; break; } else { __label__ = 21; break; }
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $21=$q;
      var $incdec_ptr32=(($21+1)|0);
      $q=$incdec_ptr32;
      __label__ = 15; break;
    case 21: 
      var $22=$q;
      var $23=$p;
      var $cmp33=(($22)|0)==(($23)|0);
      if ($cmp33) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      __label__ = 28; break;
    case 23: 
      var $24=$q;
      var $25=HEAP8[($24)];
      var $conv37=(($25 << 24) >> 24);
      var $cmp38=(($conv37)|0)!=0;
      if ($cmp38) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $26=$q;
      var $incdec_ptr41=(($26+1)|0);
      $q=$incdec_ptr41;
      HEAP8[($26)]=0;
      __label__ = 25; break;
    case 25: 
      var $27=$track_addr;
      var $28=$p;
      var $call=_process_line($27, $28);
      var $29=$q;
      var $30=HEAP8[($29)];
      var $conv43=(($30 << 24) >> 24);
      var $cmp44=(($conv43)|0)==0;
      if ($cmp44) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      __label__ = 28; break;
    case 27: 
      var $31=$q;
      $p=$31;
      __label__ = 3; break;
    case 28: 
      ;
      return 0;
    default: assert(0, "bad label: " + __label__);
  }
}
_process_text["X"]=1;

function _ass_process_codec_private($track, $data, $size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $track_addr;
      var $data_addr;
      var $size_addr;
      $track_addr=$track;
      $data_addr=$data;
      $size_addr=$size;
      var $0=$track_addr;
      var $1=$data_addr;
      var $2=$size_addr;
      _ass_process_data($0, $1, $2);
      var $3=$track_addr;
      var $event_format=(($3+28)|0);
      var $4=HEAP32[(($event_format)>>2)];
      var $tobool=(($4)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $5=$track_addr;
      _event_format_fallback($5);
      __label__ = 4; break;
    case 4: 
      var $6=$track_addr;
      _ass_process_force_style($6);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _check_duplicate_event($track, $ReadOrder) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $track_addr;
      var $ReadOrder_addr;
      var $i;
      $track_addr=$track;
      $ReadOrder_addr=$ReadOrder;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $0=$i;
      var $1=$track_addr;
      var $n_events=(($1+8)|0);
      var $2=HEAP32[(($n_events)>>2)];
      var $sub=((($2)-(1))|0);
      var $cmp=(($0)|0) < (($sub)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $3=$i;
      var $4=$track_addr;
      var $events=(($4+20)|0);
      var $5=HEAP32[(($events)>>2)];
      var $arrayidx=(($5+($3)*(56))|0);
      var $ReadOrder1=(($arrayidx+16)|0);
      var $6=HEAP32[(($ReadOrder1)>>2)];
      var $7=$ReadOrder_addr;
      var $cmp2=(($6)|0)==(($7)|0);
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $retval=1;
      __label__ = 9; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $8=$i;
      var $inc=((($8)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 8: 
      $retval=0;
      __label__ = 9; break;
    case 9: 
      var $9=$retval;
      ;
      return $9;
    default: assert(0, "bad label: " + __label__);
  }
}


function _event_format_fallback($track) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $track_addr;
      $track_addr=$track;
      var $0=$track_addr;
      var $parser_priv=(($0+80)|0);
      var $1=HEAP32[(($parser_priv)>>2)];
      var $state=(($1)|0);
      HEAP32[(($state)>>2)]=3;
      var $2=$track_addr;
      var $track_type=(($2+32)|0);
      var $3=HEAP32[(($track_type)>>2)];
      var $cmp=(($3)|0)==2;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $call=_strdup(((STRING_TABLE.__str73)|0));
      var $4=$track_addr;
      var $event_format=(($4+28)|0);
      HEAP32[(($event_format)>>2)]=$call;
      __label__ = 5; break;
    case 4: 
      var $call1=_strdup(((STRING_TABLE.__str74)|0));
      var $5=$track_addr;
      var $event_format2=(($5+28)|0);
      HEAP32[(($event_format2)>>2)]=$call1;
      __label__ = 5; break;
    case 5: 
      var $6=$track_addr;
      var $library=(($6+76)|0);
      var $7=HEAP32[(($library)>>2)];
      _ass_msg($7, 6, ((STRING_TABLE.__str75)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _ass_process_chunk($track, $data, $size, $timecode$0, $timecode$1, $duration$0, $duration$1) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $track_addr;
      var $data_addr;
      var $size_addr;
      var $timecode_addr=__stackBase__;
      var $duration_addr=(__stackBase__)+(8);
      var $str;
      var $eid;
      var $p=(__stackBase__)+(16);
      var $token;
      var $event;
      $track_addr=$track;
      $data_addr=$data;
      $size_addr=$size;
      var $st$13$0=(($timecode_addr)|0);
      HEAP32[(($st$13$0)>>2)]=$timecode$0;
      var $st$13$1=(($timecode_addr+4)|0);
      HEAP32[(($st$13$1)>>2)]=$timecode$1;
      var $st$17$0=(($duration_addr)|0);
      HEAP32[(($st$17$0)>>2)]=$duration$0;
      var $st$17$1=(($duration_addr+4)|0);
      HEAP32[(($st$17$1)>>2)]=$duration$1;
      var $0=$track_addr;
      var $event_format=(($0+28)|0);
      var $1=HEAP32[(($event_format)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $2=$track_addr;
      var $library=(($2+76)|0);
      var $3=HEAP32[(($library)>>2)];
      _ass_msg($3, 2, ((STRING_TABLE.__str33)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 13; break;
    case 4: 
      var $4=$size_addr;
      var $add=((($4)+(1))|0);
      var $call=_malloc($add);
      $str=$call;
      var $5=$str;
      var $6=$data_addr;
      var $7=$size_addr;
      assert($7 % 1 === 0, 'memcpy given ' + $7 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($5, $6, $7, 1);
      var $8=$size_addr;
      var $9=$str;
      var $arrayidx=(($9+$8)|0);
      HEAP8[($arrayidx)]=0;
      var $10=$track_addr;
      var $library1=(($10+76)|0);
      var $11=HEAP32[(($library1)>>2)];
      var $st$15$0=(($timecode_addr)|0);
      var $12$0=HEAP32[(($st$15$0)>>2)];
      var $st$15$1=(($timecode_addr+4)|0);
      var $12$1=HEAP32[(($st$15$1)>>2)];
      var $st$19$0=(($duration_addr)|0);
      var $13$0=HEAP32[(($st$19$0)>>2)];
      var $st$19$1=(($duration_addr+4)|0);
      var $13$1=HEAP32[(($st$19$1)>>2)];
      var $14=$str;
      var $$emscripten$temp$0=((STRING_TABLE.__str34)|0);
      _ass_msg($11, 6, $$emscripten$temp$0, (tempInt=STACKTOP,STACKTOP += 20,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$12$0,HEAP32[(((tempInt)+(4))>>2)]=$12$1,HEAP32[(((tempInt)+(8))>>2)]=$13$0,HEAP32[(((tempInt)+(12))>>2)]=$13$1,HEAP32[(((tempInt)+(16))>>2)]=$14,tempInt));
      var $15=$track_addr;
      var $call2=_ass_alloc_event($15);
      $eid=$call2;
      var $16=$track_addr;
      var $events=(($16+20)|0);
      var $17=HEAP32[(($events)>>2)];
      var $18=$eid;
      var $add_ptr=(($17+($18)*(56))|0);
      $event=$add_ptr;
      var $19=$str;
      HEAP32[(($p)>>2)]=$19;
      __label__ = 5; break;
    case 5: 
      var $call3=_next_token($p);
      $token=$call3;
      var $20=$token;
      var $tobool4=(($20)|0)!=0;
      if ($tobool4) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      __label__ = 12; break;
    case 7: 
      var $21=$token;
      var $call7=_atoi($21);
      var $22=$event;
      var $ReadOrder=(($22+16)|0);
      HEAP32[(($ReadOrder)>>2)]=$call7;
      var $23=$track_addr;
      var $24=$event;
      var $ReadOrder8=(($24+16)|0);
      var $25=HEAP32[(($ReadOrder8)>>2)];
      var $call9=_check_duplicate_event($23, $25);
      var $tobool10=(($call9)|0)!=0;
      if ($tobool10) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      __label__ = 12; break;
    case 9: 
      var $call13=_next_token($p);
      $token=$call13;
      var $26=$token;
      var $tobool14=(($26)|0)!=0;
      if ($tobool14) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      __label__ = 12; break;
    case 11: 
      var $27=$token;
      var $call17=_atoi($27);
      var $28=$event;
      var $Layer=(($28+20)|0);
      HEAP32[(($Layer)>>2)]=$call17;
      var $29=$track_addr;
      var $30=$event;
      var $31=HEAP32[(($p)>>2)];
      var $call18=_process_event_tail($29, $30, $31, 3);
      var $st$9$0=(($timecode_addr)|0);
      var $32$0=HEAP32[(($st$9$0)>>2)];
      var $st$9$1=(($timecode_addr+4)|0);
      var $32$1=HEAP32[(($st$9$1)>>2)];
      var $33=$event;
      var $Start=(($33)|0);
      var $st$15$0=(($Start)|0);
      HEAP32[(($st$15$0)>>2)]=$32$0;
      var $st$15$1=(($Start+4)|0);
      HEAP32[(($st$15$1)>>2)]=$32$1;
      var $st$19$0=(($duration_addr)|0);
      var $34$0=HEAP32[(($st$19$0)>>2)];
      var $st$19$1=(($duration_addr+4)|0);
      var $34$1=HEAP32[(($st$19$1)>>2)];
      var $35=$event;
      var $Duration=(($35+8)|0);
      var $st$25$0=(($Duration)|0);
      HEAP32[(($st$25$0)>>2)]=$34$0;
      var $st$25$1=(($Duration+4)|0);
      HEAP32[(($st$25$1)>>2)]=$34$1;
      var $36=$str;
      _free($36);
      __label__ = 13; break;
    case 12: 
      var $37=$track_addr;
      var $38=$eid;
      _ass_free_event($37, $38);
      var $39=$track_addr;
      var $n_events=(($39+8)|0);
      var $40=HEAP32[(($n_events)>>2)];
      var $dec=((($40)-(1))|0);
      HEAP32[(($n_events)>>2)]=$dec;
      var $41=$str;
      _free($41);
      __label__ = 13; break;
    case 13: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_process_chunk["X"]=1;

function _next_token($str) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $str_addr;
      var $p=__stackBase__;
      var $start;
      $str_addr=$str;
      var $0=$str_addr;
      var $1=HEAP32[(($0)>>2)];
      HEAP32[(($p)>>2)]=$1;
      _skip_spaces($p);
      var $2=HEAP32[(($p)>>2)];
      var $3=HEAP8[($2)];
      var $conv=(($3 << 24) >> 24);
      var $cmp=(($conv)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $4=HEAP32[(($p)>>2)];
      var $5=$str_addr;
      HEAP32[(($5)>>2)]=$4;
      $retval=0;
      __label__ = 17; break;
    case 4: 
      var $6=HEAP32[(($p)>>2)];
      $start=$6;
      __label__ = 5; break;
    case 5: 
      var $7=HEAP32[(($p)>>2)];
      var $8=HEAP8[($7)];
      var $conv2=(($8 << 24) >> 24);
      var $cmp3=(($conv2)|0)!=0;
      if ($cmp3) { __label__ = 6; break; } else { var $11 = 0;__label__ = 7; break; }
    case 6: 
      var $9=HEAP32[(($p)>>2)];
      var $10=HEAP8[($9)];
      var $conv5=(($10 << 24) >> 24);
      var $cmp6=(($conv5)|0)!=44;
      var $11 = $cmp6;__label__ = 7; break;
    case 7: 
      var $11;
      if ($11) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $12=HEAP32[(($p)>>2)];
      var $incdec_ptr=(($12+1)|0);
      HEAP32[(($p)>>2)]=$incdec_ptr;
      __label__ = 5; break;
    case 10: 
      var $13=HEAP32[(($p)>>2)];
      var $14=HEAP8[($13)];
      var $conv8=(($14 << 24) >> 24);
      var $cmp9=(($conv8)|0)==0;
      if ($cmp9) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $15=HEAP32[(($p)>>2)];
      var $16=$str_addr;
      HEAP32[(($16)>>2)]=$15;
      __label__ = 13; break;
    case 12: 
      var $17=HEAP32[(($p)>>2)];
      HEAP8[($17)]=0;
      var $18=HEAP32[(($p)>>2)];
      var $add_ptr=(($18+1)|0);
      var $19=$str_addr;
      HEAP32[(($19)>>2)]=$add_ptr;
      __label__ = 13; break;
    case 13: 
      var $20=HEAP32[(($p)>>2)];
      var $incdec_ptr13=((($20)-(1))|0);
      HEAP32[(($p)>>2)]=$incdec_ptr13;
      var $21=$start;
      _rskip_spaces($p, $21);
      var $22=HEAPU32[(($p)>>2)];
      var $23=$start;
      var $cmp14=(($22)>>>0) < (($23)>>>0);
      if ($cmp14) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $24=$start;
      HEAP32[(($p)>>2)]=$24;
      __label__ = 16; break;
    case 15: 
      var $25=HEAP32[(($p)>>2)];
      var $incdec_ptr18=(($25+1)|0);
      HEAP32[(($p)>>2)]=$incdec_ptr18;
      __label__ = 16; break;
    case 16: 
      var $26=HEAP32[(($p)>>2)];
      HEAP8[($26)]=0;
      var $27=$start;
      $retval=$27;
      __label__ = 17; break;
    case 17: 
      var $28=$retval;
      STACKTOP = __stackBase__;
      return $28;
    default: assert(0, "bad label: " + __label__);
  }
}
_next_token["X"]=1;

function _process_event_tail($track, $event, $str, $n_ignored) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $track_addr;
      var $event_addr;
      var $str_addr;
      var $n_ignored_addr;
      var $token;
      var $tname;
      var $p=__stackBase__;
      var $i;
      var $target;
      var $format;
      var $q=(__stackBase__)+(4);
      var $sid;
      var $last;
      $track_addr=$track;
      $event_addr=$event;
      $str_addr=$str;
      $n_ignored_addr=$n_ignored;
      var $0=$str_addr;
      HEAP32[(($p)>>2)]=$0;
      var $1=$event_addr;
      $target=$1;
      var $2=$track_addr;
      var $event_format=(($2+28)|0);
      var $3=HEAP32[(($event_format)>>2)];
      var $call=_strdup($3);
      $format=$call;
      var $4=$format;
      HEAP32[(($q)>>2)]=$4;
      var $5=$track_addr;
      var $n_styles=(($5)|0);
      var $6=HEAP32[(($n_styles)>>2)];
      var $cmp=(($6)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $7=$track_addr;
      var $call1=_ass_alloc_style($7);
      $sid=$call1;
      var $8=$sid;
      var $9=$track_addr;
      var $styles=(($9+16)|0);
      var $10=HEAP32[(($styles)>>2)];
      var $arrayidx=(($10+($8)*(120))|0);
      _set_default_style($arrayidx);
      var $11=$sid;
      var $12=$track_addr;
      var $default_style=(($12+68)|0);
      HEAP32[(($default_style)>>2)]=$11;
      __label__ = 4; break;
    case 4: 
      $i=0;
      __label__ = 5; break;
    case 5: 
      var $13=$i;
      var $14=$n_ignored_addr;
      var $cmp2=(($13)|0) < (($14)|0);
      if ($cmp2) { __label__ = 6; break; } else { __label__ = 10; break; }
    case 6: 
      var $call3=_next_token($q);
      $tname=$call3;
      var $15=$tname;
      var $tobool=(($15)|0)!=0;
      if ($tobool) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      __label__ = 10; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $16=$i;
      var $inc=((($16)+(1))|0);
      $i=$inc;
      __label__ = 5; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $call6=_next_token($q);
      $tname=$call6;
      var $17=$tname;
      var $tobool7=(($17)|0)!=0;
      if ($tobool7) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      __label__ = 55; break;
    case 13: 
      var $18=$tname;
      var $call10=_strcasecmp($18, ((STRING_TABLE.__str59)|0));
      var $cmp11=(($call10)|0)==0;
      if ($cmp11) { __label__ = 14; break; } else { __label__ = 20; break; }
    case 14: 
      var $19=HEAP32[(($p)>>2)];
      var $call13=_strdup($19);
      var $20=$event_addr;
      var $Text=(($20+48)|0);
      HEAP32[(($Text)>>2)]=$call13;
      var $21=$event_addr;
      var $Text14=(($21+48)|0);
      var $22=HEAP32[(($Text14)>>2)];
      var $23=HEAP8[($22)];
      var $conv=(($23 << 24) >> 24);
      var $cmp15=(($conv)|0)!=0;
      if ($cmp15) { __label__ = 15; break; } else { __label__ = 19; break; }
    case 15: 
      var $24=$event_addr;
      var $Text18=(($24+48)|0);
      var $25=HEAP32[(($Text18)>>2)];
      var $26=$event_addr;
      var $Text19=(($26+48)|0);
      var $27=HEAP32[(($Text19)>>2)];
      var $call20=_strlen($27);
      var $add_ptr=(($25+$call20)|0);
      var $add_ptr21=((($add_ptr)-(1))|0);
      $last=$add_ptr21;
      var $28=$last;
      var $29=$event_addr;
      var $Text22=(($29+48)|0);
      var $30=HEAPU32[(($Text22)>>2)];
      var $cmp23=(($28)>>>0) >= (($30)>>>0);
      if ($cmp23) { __label__ = 16; break; } else { __label__ = 18; break; }
    case 16: 
      var $31=$last;
      var $32=HEAP8[($31)];
      var $conv25=(($32 << 24) >> 24);
      var $cmp26=(($conv25)|0)==13;
      if ($cmp26) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $33=$last;
      HEAP8[($33)]=0;
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $34=$track_addr;
      var $library=(($34+76)|0);
      var $35=HEAP32[(($library)>>2)];
      var $36=$event_addr;
      var $Text31=(($36+48)|0);
      var $37=HEAP32[(($Text31)>>2)];
      _ass_msg($35, 7, ((STRING_TABLE.__str60)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$37,tempInt));
      var $38=$event_addr;
      var $Start=(($38)|0);
      var $st$9$0=(($Start)|0);
      var $39$0=HEAP32[(($st$9$0)>>2)];
      var $st$9$1=(($Start+4)|0);
      var $39$1=HEAP32[(($st$9$1)>>2)];
      var $40=$event_addr;
      var $Duration=(($40+8)|0);
      var $st$15$0=(($Duration)|0);
      var $41$0=HEAP32[(($st$15$0)>>2)];
      var $st$15$1=(($Duration+4)|0);
      var $41$1=HEAP32[(($st$15$1)>>2)];
      var $sub$0 = (i64Math.subtract($41$0,$41$1,$39$0,$39$1),i64Math.result[0]); var $sub$1 = i64Math.result[1];
      var $st$20$0=(($Duration)|0);
      HEAP32[(($st$20$0)>>2)]=$sub$0;
      var $st$20$1=(($Duration+4)|0);
      HEAP32[(($st$20$1)>>2)]=$sub$1;
      var $42=$format;
      _free($42);
      $retval=0;
      __label__ = 56; break;
    case 20: 
      var $call33=_next_token($p);
      $token=$call33;
      var $43=$token;
      var $tobool34=(($43)|0)!=0;
      if ($tobool34) { __label__ = 22; break; } else { __label__ = 21; break; }
    case 21: 
      __label__ = 55; break;
    case 22: 
      var $44=$tname;
      var $call37=_strcasecmp($44, ((STRING_TABLE.__str61)|0));
      var $cmp38=(($call37)|0)==0;
      if ($cmp38) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      $tname=((STRING_TABLE.__str62)|0);
      __label__ = 24; break;
    case 24: 
      var $45=$tname;
      var $call42=_strcasecmp($45, ((STRING_TABLE.__str63)|0));
      var $cmp43=(($call42)|0)==0;
      if ($cmp43) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $46=$token;
      var $call46=_atoi($46);
      var $47=$target;
      var $Layer=(($47+20)|0);
      HEAP32[(($Layer)>>2)]=$call46;
      var $48=$track_addr;
      var $library47=(($48+76)|0);
      var $49=HEAP32[(($library47)>>2)];
      var $50=$token;
      _ass_msg($49, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str63)|0),HEAP32[(((tempInt)+(4))>>2)]=$50,tempInt));
      __label__ = 54; break;
    case 26: 
      var $51=$tname;
      var $call48=_strcasecmp($51, ((STRING_TABLE.__str64)|0));
      var $cmp49=(($call48)|0)==0;
      if ($cmp49) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $52=$track_addr;
      var $53=$token;
      var $call52=_lookup_style($52, $53);
      var $54=$target;
      var $Style=(($54+24)|0);
      HEAP32[(($Style)>>2)]=$call52;
      var $55=$track_addr;
      var $library53=(($55+76)|0);
      var $56=HEAP32[(($library53)>>2)];
      var $57=$token;
      _ass_msg($56, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str64)|0),HEAP32[(((tempInt)+(4))>>2)]=$57,tempInt));
      __label__ = 53; break;
    case 28: 
      var $58=$tname;
      var $call55=_strcasecmp($58, ((STRING_TABLE.__str65)|0));
      var $cmp56=(($call55)|0)==0;
      if ($cmp56) { __label__ = 29; break; } else { __label__ = 32; break; }
    case 29: 
      var $59=$target;
      var $Name=(($59+28)|0);
      var $60=HEAP32[(($Name)>>2)];
      var $cmp59=(($60)|0)!=0;
      if ($cmp59) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $61=$target;
      var $Name62=(($61+28)|0);
      var $62=HEAP32[(($Name62)>>2)];
      _free($62);
      __label__ = 31; break;
    case 31: 
      var $63=$token;
      var $call64=_strdup($63);
      var $64=$target;
      var $Name65=(($64+28)|0);
      HEAP32[(($Name65)>>2)]=$call64;
      var $65=$track_addr;
      var $library66=(($65+76)|0);
      var $66=HEAP32[(($library66)>>2)];
      var $67=$token;
      _ass_msg($66, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str65)|0),HEAP32[(((tempInt)+(4))>>2)]=$67,tempInt));
      __label__ = 52; break;
    case 32: 
      var $68=$tname;
      var $call68=_strcasecmp($68, ((STRING_TABLE.__str66)|0));
      var $cmp69=(($call68)|0)==0;
      if ($cmp69) { __label__ = 33; break; } else { __label__ = 36; break; }
    case 33: 
      var $69=$target;
      var $Effect=(($69+44)|0);
      var $70=HEAP32[(($Effect)>>2)];
      var $cmp72=(($70)|0)!=0;
      if ($cmp72) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $71=$target;
      var $Effect75=(($71+44)|0);
      var $72=HEAP32[(($Effect75)>>2)];
      _free($72);
      __label__ = 35; break;
    case 35: 
      var $73=$token;
      var $call77=_strdup($73);
      var $74=$target;
      var $Effect78=(($74+44)|0);
      HEAP32[(($Effect78)>>2)]=$call77;
      var $75=$track_addr;
      var $library79=(($75+76)|0);
      var $76=HEAP32[(($library79)>>2)];
      var $77=$token;
      _ass_msg($76, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str66)|0),HEAP32[(((tempInt)+(4))>>2)]=$77,tempInt));
      __label__ = 51; break;
    case 36: 
      var $78=$tname;
      var $call81=_strcasecmp($78, ((STRING_TABLE.__str24)|0));
      var $cmp82=(($call81)|0)==0;
      if ($cmp82) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      var $79=$token;
      var $call85=_atoi($79);
      var $80=$target;
      var $MarginL=(($80+32)|0);
      HEAP32[(($MarginL)>>2)]=$call85;
      var $81=$track_addr;
      var $library86=(($81+76)|0);
      var $82=HEAP32[(($library86)>>2)];
      var $83=$token;
      _ass_msg($82, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str24)|0),HEAP32[(((tempInt)+(4))>>2)]=$83,tempInt));
      __label__ = 50; break;
    case 38: 
      var $84=$tname;
      var $call88=_strcasecmp($84, ((STRING_TABLE.__str25)|0));
      var $cmp89=(($call88)|0)==0;
      if ($cmp89) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $85=$token;
      var $call92=_atoi($85);
      var $86=$target;
      var $MarginR=(($86+36)|0);
      HEAP32[(($MarginR)>>2)]=$call92;
      var $87=$track_addr;
      var $library93=(($87+76)|0);
      var $88=HEAP32[(($library93)>>2)];
      var $89=$token;
      _ass_msg($88, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str25)|0),HEAP32[(((tempInt)+(4))>>2)]=$89,tempInt));
      __label__ = 49; break;
    case 40: 
      var $90=$tname;
      var $call95=_strcasecmp($90, ((STRING_TABLE.__str26)|0));
      var $cmp96=(($call95)|0)==0;
      if ($cmp96) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $91=$token;
      var $call99=_atoi($91);
      var $92=$target;
      var $MarginV=(($92+40)|0);
      HEAP32[(($MarginV)>>2)]=$call99;
      var $93=$track_addr;
      var $library100=(($93+76)|0);
      var $94=HEAP32[(($library100)>>2)];
      var $95=$token;
      _ass_msg($94, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str26)|0),HEAP32[(((tempInt)+(4))>>2)]=$95,tempInt));
      __label__ = 48; break;
    case 42: 
      var $96=$tname;
      var $call102=_strcasecmp($96, ((STRING_TABLE.__str67)|0));
      var $cmp103=(($call102)|0)==0;
      if ($cmp103) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $97=$track_addr;
      var $library106=(($97+76)|0);
      var $98=HEAP32[(($library106)>>2)];
      var $99=$token;
      var $call107=_string2timecode($98, $99);
      var $call107$0=$call107[0];
      var $call107$1=$call107[1];
      var $100=$target;
      var $Start108=(($100)|0);
      var $st$9$0=(($Start108)|0);
      HEAP32[(($st$9$0)>>2)]=$call107$0;
      var $st$9$1=(($Start108+4)|0);
      HEAP32[(($st$9$1)>>2)]=$call107$1;
      var $101=$track_addr;
      var $library109=(($101+76)|0);
      var $102=HEAP32[(($library109)>>2)];
      var $103=$token;
      _ass_msg($102, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str67)|0),HEAP32[(((tempInt)+(4))>>2)]=$103,tempInt));
      __label__ = 47; break;
    case 44: 
      var $104=$tname;
      var $call111=_strcasecmp($104, ((STRING_TABLE.__str62)|0));
      var $cmp112=(($call111)|0)==0;
      if ($cmp112) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $105=$track_addr;
      var $library115=(($105+76)|0);
      var $106=HEAP32[(($library115)>>2)];
      var $107=$token;
      var $call116=_string2timecode($106, $107);
      var $call116$0=$call116[0];
      var $call116$1=$call116[1];
      var $108=$target;
      var $Duration117=(($108+8)|0);
      var $st$9$0=(($Duration117)|0);
      HEAP32[(($st$9$0)>>2)]=$call116$0;
      var $st$9$1=(($Duration117+4)|0);
      HEAP32[(($st$9$1)>>2)]=$call116$1;
      var $109=$track_addr;
      var $library118=(($109+76)|0);
      var $110=HEAP32[(($library118)>>2)];
      var $111=$token;
      _ass_msg($110, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str62)|0),HEAP32[(((tempInt)+(4))>>2)]=$111,tempInt));
      __label__ = 46; break;
    case 46: 
      __label__ = 47; break;
    case 47: 
      __label__ = 48; break;
    case 48: 
      __label__ = 49; break;
    case 49: 
      __label__ = 50; break;
    case 50: 
      __label__ = 51; break;
    case 51: 
      __label__ = 52; break;
    case 52: 
      __label__ = 53; break;
    case 53: 
      __label__ = 54; break;
    case 54: 
      __label__ = 11; break;
    case 55: 
      var $112=$format;
      _free($112);
      $retval=1;
      __label__ = 56; break;
    case 56: 
      var $113=$retval;
      STACKTOP = __stackBase__;
      return $113;
    default: assert(0, "bad label: " + __label__);
  }
}
_process_event_tail["X"]=1;

function _ass_flush_events($track) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $track_addr;
      var $eid;
      $track_addr=$track;
      var $0=$track_addr;
      var $events=(($0+20)|0);
      var $1=HEAP32[(($events)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 8; break; }
    case 3: 
      $eid=0;
      __label__ = 4; break;
    case 4: 
      var $2=$eid;
      var $3=$track_addr;
      var $n_events=(($3+8)|0);
      var $4=HEAP32[(($n_events)>>2)];
      var $cmp=(($2)|0) < (($4)|0);
      if ($cmp) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $5=$track_addr;
      var $6=$eid;
      _ass_free_event($5, $6);
      __label__ = 6; break;
    case 6: 
      var $7=$eid;
      var $inc=((($7)+(1))|0);
      $eid=$inc;
      __label__ = 4; break;
    case 7: 
      var $8=$track_addr;
      var $n_events1=(($8+8)|0);
      HEAP32[(($n_events1)>>2)]=0;
      __label__ = 8; break;
    case 8: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _ass_read_memory($library, $buf, $bufsize, $codepage) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $library_addr;
      var $buf_addr;
      var $bufsize_addr;
      var $codepage_addr;
      var $track;
      var $need_free;
      $library_addr=$library;
      $buf_addr=$buf;
      $bufsize_addr=$bufsize;
      $codepage_addr=$codepage;
      $need_free=0;
      var $0=$buf_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $retval=0;
      __label__ = 14; break;
    case 4: 
      var $1=$codepage_addr;
      var $tobool1=(($1)|0)!=0;
      if ($tobool1) { __label__ = 5; break; } else { __label__ = 9; break; }
    case 5: 
      var $2=$library_addr;
      var $3=$buf_addr;
      var $4=$bufsize_addr;
      var $5=$codepage_addr;
      var $call=_sub_recode($2, $3, $4, $5);
      $buf_addr=$call;
      var $6=$buf_addr;
      var $tobool3=(($6)|0)!=0;
      if ($tobool3) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      $retval=0;
      __label__ = 14; break;
    case 7: 
      $need_free=1;
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $7=$library_addr;
      var $8=$buf_addr;
      var $call7=_parse_memory($7, $8);
      $track=$call7;
      var $9=$need_free;
      var $tobool8=(($9)|0)!=0;
      if ($tobool8) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $10=$buf_addr;
      _free($10);
      __label__ = 11; break;
    case 11: 
      var $11=$track;
      var $tobool11=(($11)|0)!=0;
      if ($tobool11) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      $retval=0;
      __label__ = 14; break;
    case 13: 
      var $12=$library_addr;
      var $13=$track;
      var $n_styles=(($13)|0);
      var $14=HEAP32[(($n_styles)>>2)];
      var $15=$track;
      var $n_events=(($15+8)|0);
      var $16=HEAP32[(($n_events)>>2)];
      _ass_msg($12, 4, ((STRING_TABLE.__str35)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$14,HEAP32[(((tempInt)+(4))>>2)]=$16,tempInt));
      var $17=$track;
      $retval=$17;
      __label__ = 14; break;
    case 14: 
      var $18=$retval;
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_read_memory["X"]=1;

function _parse_memory($library, $buf) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $library_addr;
      var $buf_addr;
      var $track;
      var $i;
      $library_addr=$library;
      $buf_addr=$buf;
      var $0=$library_addr;
      var $call=_ass_new_track($0);
      $track=$call;
      var $1=$track;
      var $2=$buf_addr;
      var $call1=_process_text($1, $2);
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $3=$i;
      var $4=$track;
      var $n_events=(($4+8)|0);
      var $5=HEAP32[(($n_events)>>2)];
      var $cmp=(($3)|0) < (($5)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $6=$i;
      var $7=$i;
      var $8=$track;
      var $events=(($8+20)|0);
      var $9=HEAP32[(($events)>>2)];
      var $arrayidx=(($9+($7)*(56))|0);
      var $ReadOrder=(($arrayidx+16)|0);
      HEAP32[(($ReadOrder)>>2)]=$6;
      __label__ = 5; break;
    case 5: 
      var $10=$i;
      var $inc=((($10)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 6: 
      var $11=$track;
      var $parser_priv=(($11+80)|0);
      var $12=HEAP32[(($parser_priv)>>2)];
      var $fontname=(($12+4)|0);
      var $13=HEAP32[(($fontname)>>2)];
      var $tobool=(($13)|0)!=0;
      if ($tobool) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $14=$track;
      var $call2=_decode_font($14);
      __label__ = 8; break;
    case 8: 
      var $15=$track;
      var $track_type=(($15+32)|0);
      var $16=HEAP32[(($track_type)>>2)];
      var $cmp3=(($16)|0)==0;
      if ($cmp3) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $17=$track;
      _ass_free_track($17);
      $retval=0;
      __label__ = 11; break;
    case 10: 
      var $18=$track;
      _ass_process_force_style($18);
      var $19=$track;
      $retval=$19;
      __label__ = 11; break;
    case 11: 
      var $20=$retval;
      ;
      return $20;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_memory["X"]=1;

function _ass_read_file($library, $fname, $codepage) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $library_addr;
      var $fname_addr;
      var $codepage_addr;
      var $buf;
      var $track;
      var $bufsize=__stackBase__;
      $library_addr=$library;
      $fname_addr=$fname;
      $codepage_addr=$codepage;
      var $0=$library_addr;
      var $1=$fname_addr;
      var $2=$codepage_addr;
      var $call=_read_file_recode($0, $1, $2, $bufsize);
      $buf=$call;
      var $3=$buf;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $retval=0;
      __label__ = 7; break;
    case 4: 
      var $4=$library_addr;
      var $5=$buf;
      var $call1=_parse_memory($4, $5);
      $track=$call1;
      var $6=$buf;
      _free($6);
      var $7=$track;
      var $tobool2=(($7)|0)!=0;
      if ($tobool2) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      $retval=0;
      __label__ = 7; break;
    case 6: 
      var $8=$fname_addr;
      var $call5=_strdup($8);
      var $9=$track;
      var $name=(($9+72)|0);
      HEAP32[(($name)>>2)]=$call5;
      var $10=$library_addr;
      var $11=$fname_addr;
      var $12=$track;
      var $n_styles=(($12)|0);
      var $13=HEAP32[(($n_styles)>>2)];
      var $14=$track;
      var $n_events=(($14+8)|0);
      var $15=HEAP32[(($n_events)>>2)];
      _ass_msg($10, 4, ((STRING_TABLE.__str36)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$11,HEAP32[(((tempInt)+(4))>>2)]=$13,HEAP32[(((tempInt)+(8))>>2)]=$15,tempInt));
      var $16=$track;
      $retval=$16;
      __label__ = 7; break;
    case 7: 
      var $17=$retval;
      STACKTOP = __stackBase__;
      return $17;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_read_file["X"]=1;

function _read_file_recode($library, $fname, $codepage, $size) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $library_addr;
      var $fname_addr;
      var $codepage_addr;
      var $size_addr;
      var $buf;
      var $bufsize=__stackBase__;
      var $tmpbuf;
      $library_addr=$library;
      $fname_addr=$fname;
      $codepage_addr=$codepage;
      $size_addr=$size;
      var $0=$library_addr;
      var $1=$fname_addr;
      var $call=_read_file($0, $1, $bufsize);
      $buf=$call;
      var $2=$buf;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $retval=0;
      __label__ = 9; break;
    case 4: 
      var $3=$codepage_addr;
      var $tobool1=(($3)|0)!=0;
      if ($tobool1) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $4=$library_addr;
      var $5=$buf;
      var $6=HEAP32[(($bufsize)>>2)];
      var $7=$codepage_addr;
      var $call3=_sub_recode($4, $5, $6, $7);
      $tmpbuf=$call3;
      var $8=$buf;
      _free($8);
      var $9=$tmpbuf;
      $buf=$9;
      __label__ = 6; break;
    case 6: 
      var $10=$buf;
      var $tobool5=(($10)|0)!=0;
      if ($tobool5) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      $retval=0;
      __label__ = 9; break;
    case 8: 
      var $11=HEAP32[(($bufsize)>>2)];
      var $12=$size_addr;
      HEAP32[(($12)>>2)]=$11;
      var $13=$buf;
      $retval=$13;
      __label__ = 9; break;
    case 9: 
      var $14=$retval;
      STACKTOP = __stackBase__;
      return $14;
    default: assert(0, "bad label: " + __label__);
  }
}


function _ass_read_styles($track, $fname, $codepage) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $track_addr;
      var $fname_addr;
      var $codepage_addr;
      var $buf;
      var $old_state;
      var $sz=__stackBase__;
      var $tmpbuf;
      $track_addr=$track;
      $fname_addr=$fname;
      $codepage_addr=$codepage;
      var $0=$track_addr;
      var $library=(($0+76)|0);
      var $1=HEAP32[(($library)>>2)];
      var $2=$fname_addr;
      var $call=_read_file($1, $2, $sz);
      $buf=$call;
      var $3=$buf;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      $retval=1;
      __label__ = 9; break;
    case 4: 
      var $4=$codepage_addr;
      var $tobool1=(($4)|0)!=0;
      if ($tobool1) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $5=$track_addr;
      var $library3=(($5+76)|0);
      var $6=HEAP32[(($library3)>>2)];
      var $7=$buf;
      var $8=HEAP32[(($sz)>>2)];
      var $9=$codepage_addr;
      var $call4=_sub_recode($6, $7, $8, $9);
      $tmpbuf=$call4;
      var $10=$buf;
      _free($10);
      var $11=$tmpbuf;
      $buf=$11;
      __label__ = 6; break;
    case 6: 
      var $12=$buf;
      var $tobool6=(($12)|0)!=0;
      if ($tobool6) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      $retval=0;
      __label__ = 9; break;
    case 8: 
      var $13=$track_addr;
      var $parser_priv=(($13+80)|0);
      var $14=HEAP32[(($parser_priv)>>2)];
      var $state=(($14)|0);
      var $15=HEAP32[(($state)>>2)];
      $old_state=$15;
      var $16=$track_addr;
      var $parser_priv9=(($16+80)|0);
      var $17=HEAP32[(($parser_priv9)>>2)];
      var $state10=(($17)|0);
      HEAP32[(($state10)>>2)]=2;
      var $18=$track_addr;
      var $19=$buf;
      var $call11=_process_text($18, $19);
      var $20=$old_state;
      var $21=$track_addr;
      var $parser_priv12=(($21+80)|0);
      var $22=HEAP32[(($parser_priv12)>>2)];
      var $state13=(($22)|0);
      HEAP32[(($state13)>>2)]=$20;
      $retval=0;
      __label__ = 9; break;
    case 9: 
      var $23=$retval;
      STACKTOP = __stackBase__;
      return $23;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_read_styles["X"]=1;

function _ass_new_track($library) {
  ;
  var __label__;

  var $library_addr;
  var $track;
  $library_addr=$library;
  var $call=_calloc(1, 84);
  var $0=$call;
  $track=$0;
  var $1=$library_addr;
  var $2=$track;
  var $library1=(($2+76)|0);
  HEAP32[(($library1)>>2)]=$1;
  var $3=$track;
  var $ScaledBorderAndShadow=(($3+56)|0);
  HEAP32[(($ScaledBorderAndShadow)>>2)]=1;
  var $call2=_calloc(1, 20);
  var $4=$call2;
  var $5=$track;
  var $parser_priv=(($5+80)|0);
  HEAP32[(($parser_priv)>>2)]=$4;
  var $6=$track;
  ;
  return $6;
}


function _sub_recode($library, $data, $size, $codepage) {
  var __stackBase__  = STACKTOP; STACKTOP += 120; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $library_addr;
      var $data_addr;
      var $size_addr;
      var $codepage_addr;
      var $icdsc;
      var $tocp;
      var $outbuf;
      var $cp_tmp;
      var $enca_lang=__stackBase__;
      var $enca_fallback=(__stackBase__)+(4);
      var $osize;
      var $ileft=(__stackBase__)+(104);
      var $oleft=(__stackBase__)+(108);
      var $ip=(__stackBase__)+(112);
      var $op=(__stackBase__)+(116);
      var $rc;
      var $clear;
      var $offset;
      $library_addr=$library;
      $data_addr=$data;
      $size_addr=$size;
      $codepage_addr=$codepage;
      $tocp=((STRING_TABLE.__str51)|0);
      var $0=$codepage_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      ___assert_fail(((STRING_TABLE.__str52)|0), ((STRING_TABLE.__str1)|0), 966, ((STRING_TABLE.___PRETTY_FUNCTION___sub_recode)|0));
      throw "Reached an unreachable!"
      __label__ = 5; break;
    case 5: 
      var $2=$codepage_addr;
      $cp_tmp=$2;
      var $3=$codepage_addr;
      var $arraydecay=(($enca_lang)|0);
      var $arraydecay1=(($enca_fallback)|0);
      var $call=___isoc99_sscanf($3, ((STRING_TABLE.__str53)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$arraydecay,HEAP32[(((tempInt)+(4))>>2)]=$arraydecay1,tempInt));
      var $cmp=(($call)|0)==2;
      if ($cmp) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $4=$codepage_addr;
      var $arraydecay2=(($enca_lang)|0);
      var $arraydecay3=(($enca_fallback)|0);
      var $call4=___isoc99_sscanf($4, ((STRING_TABLE.__str54)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$arraydecay2,HEAP32[(((tempInt)+(4))>>2)]=$arraydecay3,tempInt));
      var $cmp5=(($call4)|0)==2;
      if ($cmp5) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $5=$library_addr;
      var $6=$data_addr;
      var $7=$size_addr;
      var $arraydecay6=(($enca_lang)|0);
      var $arraydecay7=(($enca_fallback)|0);
      var $call8=_ass_guess_buffer_cp($5, $6, $7, $arraydecay6, $arraydecay7);
      $cp_tmp=$call8;
      __label__ = 8; break;
    case 8: 
      var $8=$tocp;
      var $9=$cp_tmp;
      var $call9=_iconv_open($8, $9);
      $icdsc=$call9;
      var $cmp10=(($call9)|0)!=-1;
      if ($cmp10) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $10=$library_addr;
      _ass_msg($10, 6, ((STRING_TABLE.__str55)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 11; break;
    case 10: 
      var $11=$library_addr;
      _ass_msg($11, 1, ((STRING_TABLE.__str56)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 11; break;
    case 11: 
      var $12=$size_addr;
      $osize=$12;
      var $13=$size_addr;
      HEAP32[(($ileft)>>2)]=$13;
      var $14=$size_addr;
      var $sub=((($14)-(1))|0);
      HEAP32[(($oleft)>>2)]=$sub;
      $clear=0;
      var $15=$osize;
      var $call13=_malloc($15);
      $outbuf=$call13;
      var $16=$data_addr;
      HEAP32[(($ip)>>2)]=$16;
      var $17=$outbuf;
      HEAP32[(($op)>>2)]=$17;
      __label__ = 12; break;
    case 12: 
      var $18=HEAP32[(($ileft)>>2)];
      var $tobool14=(($18)|0)!=0;
      if ($tobool14) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $19=$icdsc;
      var $call16=_iconv($19, $ip, $ileft, $op, $oleft);
      $rc=$call16;
      __label__ = 15; break;
    case 14: 
      $clear=1;
      var $20=$icdsc;
      var $call18=_iconv($20, 0, 0, $op, $oleft);
      $rc=$call18;
      __label__ = 15; break;
    case 15: 
      var $21=$rc;
      var $cmp20=(($21)|0)==-1;
      if ($cmp20) { __label__ = 16; break; } else { __label__ = 20; break; }
    case 16: 
      var $call22=___errno_location();
      var $22=HEAP32[(($call22)>>2)];
      var $cmp23=(($22)|0)==7;
      if ($cmp23) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $23=HEAP32[(($op)>>2)];
      var $24=$outbuf;
      var $sub_ptr_lhs_cast=$23;
      var $sub_ptr_rhs_cast=$24;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $offset=$sub_ptr_sub;
      var $25=$outbuf;
      var $26=$osize;
      var $27=$size_addr;
      var $add=((($26)+($27))|0);
      var $call25=_realloc($25, $add);
      $outbuf=$call25;
      var $28=$outbuf;
      var $29=$offset;
      var $add_ptr=(($28+$29)|0);
      HEAP32[(($op)>>2)]=$add_ptr;
      var $30=$size_addr;
      var $31=$osize;
      var $add26=((($31)+($30))|0);
      $osize=$add26;
      var $32=$size_addr;
      var $33=HEAP32[(($oleft)>>2)];
      var $add27=((($33)+($32))|0);
      HEAP32[(($oleft)>>2)]=$add27;
      __label__ = 19; break;
    case 18: 
      var $34=$library_addr;
      _ass_msg($34, 2, ((STRING_TABLE.__str57)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $retval=0;
      __label__ = 27; break;
    case 19: 
      __label__ = 23; break;
    case 20: 
      var $35=$clear;
      var $tobool31=(($35)|0)!=0;
      if ($tobool31) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      __label__ = 24; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 12; break;
    case 24: 
      var $36=$osize;
      var $37=HEAP32[(($oleft)>>2)];
      var $sub35=((($36)-($37))|0);
      var $sub36=((($sub35)-(1))|0);
      var $38=$outbuf;
      var $arrayidx=(($38+$sub36)|0);
      HEAP8[($arrayidx)]=0;
      var $39=$icdsc;
      var $cmp37=(($39)|0)!=-1;
      if ($cmp37) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $40=$icdsc;
      var $call39=_iconv_close($40);
      $icdsc=-1;
      var $41=$library_addr;
      _ass_msg($41, 6, ((STRING_TABLE.__str58)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 26; break;
    case 26: 
      var $42=$outbuf;
      $retval=$42;
      __label__ = 27; break;
    case 27: 
      var $43=$retval;
      STACKTOP = __stackBase__;
      return $43;
    default: assert(0, "bad label: " + __label__);
  }
}
_sub_recode["X"]=1;

function _read_file($library, $fname, $bufsize) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $library_addr;
      var $fname_addr;
      var $bufsize_addr;
      var $res;
      var $sz;
      var $bytes_read;
      var $buf;
      var $fp;
      $library_addr=$library;
      $fname_addr=$fname;
      $bufsize_addr=$bufsize;
      var $0=$fname_addr;
      var $call=_fopen($0, ((STRING_TABLE.__str42)|0));
      $fp=$call;
      var $1=$fp;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $2=$library_addr;
      var $3=$fname_addr;
      _ass_msg($2, 2, ((STRING_TABLE.__str43)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$3,tempInt));
      $retval=0;
      __label__ = 17; break;
    case 4: 
      var $4=$fp;
      var $call1=_fseek($4, 0, 2);
      $res=$call1;
      var $5=$res;
      var $cmp=(($5)|0)==-1;
      if ($cmp) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $6=$library_addr;
      var $7=$fname_addr;
      _ass_msg($6, 2, ((STRING_TABLE.__str44)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$7,tempInt));
      var $8=$fp;
      var $call3=_fclose($8);
      $retval=0;
      __label__ = 17; break;
    case 6: 
      var $9=$fp;
      var $call5=_ftell($9);
      $sz=$call5;
      var $10=$fp;
      _rewind($10);
      var $11=$library_addr;
      var $12=$sz;
      _ass_msg($11, 6, ((STRING_TABLE.__str45)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$12,tempInt));
      var $13=$sz;
      var $add=((($13)+(1))|0);
      var $call6=_malloc($add);
      $buf=$call6;
      var $14=$buf;
      var $tobool7=(($14)|0)!=0;
      if ($tobool7) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      __label__ = 9; break;
    case 8: 
      ___assert_fail(((STRING_TABLE.__str46)|0), ((STRING_TABLE.__str1)|0), 1066, ((STRING_TABLE.___PRETTY_FUNCTION___read_file)|0));
      throw "Reached an unreachable!"
      __label__ = 9; break;
    case 9: 
      $bytes_read=0;
      __label__ = 10; break;
    case 10: 
      var $16=$buf;
      var $17=$bytes_read;
      var $add_ptr=(($16+$17)|0);
      var $18=$sz;
      var $19=$bytes_read;
      var $sub=((($18)-($19))|0);
      var $20=$fp;
      var $call8=_fread($add_ptr, 1, $sub, $20);
      $res=$call8;
      var $21=$res;
      var $cmp9=(($21)|0) <= 0;
      if ($cmp9) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $22=$library_addr;
      var $call11=___errno_location();
      var $23=HEAP32[(($call11)>>2)];
      var $call12=___errno_location();
      var $24=HEAP32[(($call12)>>2)];
      var $call13=_strerror($24);
      _ass_msg($22, 4, ((STRING_TABLE.__str47)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$23,HEAP32[(((tempInt)+(4))>>2)]=$call13,tempInt));
      var $25=$fp;
      var $call14=_fclose($25);
      var $26=$buf;
      _free($26);
      $retval=0;
      __label__ = 17; break;
    case 12: 
      var $27=$res;
      var $28=$bytes_read;
      var $add16=((($28)+($27))|0);
      $bytes_read=$add16;
      __label__ = 13; break;
    case 13: 
      var $29=$sz;
      var $30=$bytes_read;
      var $sub17=((($29)-($30))|0);
      var $cmp18=(($sub17)|0) > 0;
      if ($cmp18) { __label__ = 10; break; } else { __label__ = 14; break; }
    case 14: 
      var $31=$sz;
      var $32=$buf;
      var $arrayidx=(($32+$31)|0);
      HEAP8[($arrayidx)]=0;
      var $33=$fp;
      var $call19=_fclose($33);
      var $34=$bufsize_addr;
      var $tobool20=(($34)|0)!=0;
      if ($tobool20) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $35=$sz;
      var $36=$bufsize_addr;
      HEAP32[(($36)>>2)]=$35;
      __label__ = 16; break;
    case 16: 
      var $37=$buf;
      $retval=$37;
      __label__ = 17; break;
    case 17: 
      var $38=$retval;
      ;
      return $38;
    default: assert(0, "bad label: " + __label__);
  }
}
_read_file["X"]=1;

function _ass_step_sub($track, $now$0, $now$1, $movement) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval=__stackBase__;
      var $track_addr;
      var $now_addr=(__stackBase__)+(8);
      var $movement_addr;
      var $i;
      $track_addr=$track;
      var $st$6$0=(($now_addr)|0);
      HEAP32[(($st$6$0)>>2)]=$now$0;
      var $st$6$1=(($now_addr+4)|0);
      HEAP32[(($st$6$1)>>2)]=$now$1;
      $movement_addr=$movement;
      var $0=$movement_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $$emscripten$temp$0$0=0;
      var $$emscripten$temp$0$1=0;
      var $st$2$0=(($retval)|0);
      HEAP32[(($st$2$0)>>2)]=$$emscripten$temp$0$0;
      var $st$2$1=(($retval+4)|0);
      HEAP32[(($st$2$1)>>2)]=$$emscripten$temp$0$1;
      __label__ = 32; break;
    case 4: 
      var $1=$track_addr;
      var $n_events=(($1+8)|0);
      var $2=HEAP32[(($n_events)>>2)];
      var $cmp1=(($2)|0)==0;
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $$emscripten$temp$1$0=0;
      var $$emscripten$temp$1$1=0;
      var $st$2$0=(($retval)|0);
      HEAP32[(($st$2$0)>>2)]=$$emscripten$temp$1$0;
      var $st$2$1=(($retval+4)|0);
      HEAP32[(($st$2$1)>>2)]=$$emscripten$temp$1$1;
      __label__ = 32; break;
    case 6: 
      var $3=$movement_addr;
      var $cmp4=(($3)|0) < 0;
      if ($cmp4) { __label__ = 7; break; } else { __label__ = 14; break; }
    case 7: 
      $i=0;
      __label__ = 8; break;
    case 8: 
      var $4=$i;
      var $5=$track_addr;
      var $n_events6=(($5+8)|0);
      var $6=HEAP32[(($n_events6)>>2)];
      var $cmp7=(($4)|0) < (($6)|0);
      if ($cmp7) { __label__ = 9; break; } else { var $16 = 0;__label__ = 10; break; }
    case 9: 
      var $7=$i;
      var $8=$track_addr;
      var $events=(($8+20)|0);
      var $9=HEAP32[(($events)>>2)];
      var $arrayidx=(($9+($7)*(56))|0);
      var $Start=(($arrayidx)|0);
      var $st$6$0=(($Start)|0);
      var $10$0=HEAP32[(($st$6$0)>>2)];
      var $st$6$1=(($Start+4)|0);
      var $10$1=HEAP32[(($st$6$1)>>2)];
      var $11=$i;
      var $12=$track_addr;
      var $events8=(($12+20)|0);
      var $13=HEAP32[(($events8)>>2)];
      var $arrayidx9=(($13+($11)*(56))|0);
      var $Duration=(($arrayidx9+8)|0);
      var $st$16$0=(($Duration)|0);
      var $14$0=HEAP32[(($st$16$0)>>2)];
      var $st$16$1=(($Duration+4)|0);
      var $14$1=HEAP32[(($st$16$1)>>2)];
      var $add$0 = (i64Math.add($10$0,$10$1,$14$0,$14$1),i64Math.result[0]); var $add$1 = i64Math.result[1];
      var $st$21$0=(($now_addr)|0);
      var $15$0=HEAP32[(($st$21$0)>>2)];
      var $st$21$1=(($now_addr+4)|0);
      var $15$1=HEAP32[(($st$21$1)>>2)];
      var $cmp10=($add$1|0) <= ($15$1|0) && (($add$1|0) <  ($15$1|0) || ($add$0>>>0) <= ($15$0>>>0));
      var $16 = $cmp10;__label__ = 10; break;
    case 10: 
      var $16;
      if ($16) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $17=$i;
      var $inc=((($17)+(1))|0);
      $i=$inc;
      __label__ = 8; break;
    case 13: 
      __label__ = 21; break;
    case 14: 
      var $18=$track_addr;
      var $n_events11=(($18+8)|0);
      var $19=HEAP32[(($n_events11)>>2)];
      var $sub=((($19)-(1))|0);
      $i=$sub;
      __label__ = 15; break;
    case 15: 
      var $20=$i;
      var $cmp13=(($20)|0) >= 0;
      if ($cmp13) { __label__ = 16; break; } else { var $26 = 0;__label__ = 17; break; }
    case 16: 
      var $21=$i;
      var $22=$track_addr;
      var $events15=(($22+20)|0);
      var $23=HEAP32[(($events15)>>2)];
      var $arrayidx16=(($23+($21)*(56))|0);
      var $Start17=(($arrayidx16)|0);
      var $st$6$0=(($Start17)|0);
      var $24$0=HEAP32[(($st$6$0)>>2)];
      var $st$6$1=(($Start17+4)|0);
      var $24$1=HEAP32[(($st$6$1)>>2)];
      var $st$10$0=(($now_addr)|0);
      var $25$0=HEAP32[(($st$10$0)>>2)];
      var $st$10$1=(($now_addr+4)|0);
      var $25$1=HEAP32[(($st$10$1)>>2)];
      var $cmp18=($24$1|0) > ($25$1|0) || (($24$1|0) == ($25$1|0) && ($24$0>>>0) >  ($25$0>>>0));
      var $26 = $cmp18;__label__ = 17; break;
    case 17: 
      var $26;
      if ($26) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $27=$i;
      var $dec=((($27)-(1))|0);
      $i=$dec;
      __label__ = 15; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $28=$i;
      var $cmp24=(($28)|0) >= -1;
      if ($cmp24) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      __label__ = 24; break;
    case 23: 
      ___assert_fail(((STRING_TABLE.__str37)|0), ((STRING_TABLE.__str1)|0), 1262, ((STRING_TABLE.___PRETTY_FUNCTION___ass_step_sub)|0));
      throw "Reached an unreachable!"
      __label__ = 24; break;
    case 24: 
      var $30=$i;
      var $31=$track_addr;
      var $n_events25=(($31+8)|0);
      var $32=HEAP32[(($n_events25)>>2)];
      var $cmp26=(($30)|0) <= (($32)|0);
      if ($cmp26) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      __label__ = 27; break;
    case 26: 
      ___assert_fail(((STRING_TABLE.__str38)|0), ((STRING_TABLE.__str1)|0), 1263, ((STRING_TABLE.___PRETTY_FUNCTION___ass_step_sub)|0));
      throw "Reached an unreachable!"
      __label__ = 27; break;
    case 27: 
      var $34=$movement_addr;
      var $35=$i;
      var $add30=((($35)+($34))|0);
      $i=$add30;
      var $36=$i;
      var $cmp31=(($36)|0) < 0;
      if ($cmp31) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      $i=0;
      __label__ = 29; break;
    case 29: 
      var $37=$i;
      var $38=$track_addr;
      var $n_events34=(($38+8)|0);
      var $39=HEAP32[(($n_events34)>>2)];
      var $cmp35=(($37)|0) >= (($39)|0);
      if ($cmp35) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $40=$track_addr;
      var $n_events37=(($40+8)|0);
      var $41=HEAP32[(($n_events37)>>2)];
      var $sub38=((($41)-(1))|0);
      $i=$sub38;
      __label__ = 31; break;
    case 31: 
      var $42=$i;
      var $43=$track_addr;
      var $events40=(($43+20)|0);
      var $44=HEAP32[(($events40)>>2)];
      var $arrayidx41=(($44+($42)*(56))|0);
      var $Start42=(($arrayidx41)|0);
      var $st$6$0=(($Start42)|0);
      var $45$0=HEAP32[(($st$6$0)>>2)];
      var $st$6$1=(($Start42+4)|0);
      var $45$1=HEAP32[(($st$6$1)>>2)];
      var $st$10$0=(($now_addr)|0);
      var $46$0=HEAP32[(($st$10$0)>>2)];
      var $st$10$1=(($now_addr+4)|0);
      var $46$1=HEAP32[(($st$10$1)>>2)];
      var $sub43$0 = (i64Math.subtract($45$0,$45$1,$46$0,$46$1),i64Math.result[0]); var $sub43$1 = i64Math.result[1];
      var $st$15$0=(($retval)|0);
      HEAP32[(($st$15$0)>>2)]=$sub43$0;
      var $st$15$1=(($retval+4)|0);
      HEAP32[(($st$15$1)>>2)]=$sub43$1;
      __label__ = 32; break;
    case 32: 
      var $st$0$0=(($retval)|0);
      var $47$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($retval+4)|0);
      var $47$1=HEAP32[(($st$0$1)>>2)];
      STACKTOP = __stackBase__;
      return [$47$0,$47$1];
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_step_sub["X"]=1;

function _decode_chars($c1, $c2, $c3, $c4, $dst, $cnt) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $c1_addr;
      var $c2_addr;
      var $c3_addr;
      var $c4_addr;
      var $dst_addr;
      var $cnt_addr;
      var $value;
      var $bytes=__stackBase__;
      var $i;
      $c1_addr=$c1;
      $c2_addr=$c2;
      $c3_addr=$c3;
      $c4_addr=$c4;
      $dst_addr=$dst;
      $cnt_addr=$cnt;
      var $0=$c1_addr;
      var $conv=(($0)&255);
      var $sub=((($conv)-(33))|0);
      var $shl=$sub << 18;
      var $1=$c2_addr;
      var $conv1=(($1)&255);
      var $sub2=((($conv1)-(33))|0);
      var $shl3=$sub2 << 12;
      var $add=((($shl)+($shl3))|0);
      var $2=$c3_addr;
      var $conv4=(($2)&255);
      var $sub5=((($conv4)-(33))|0);
      var $shl6=$sub5 << 6;
      var $add7=((($add)+($shl6))|0);
      var $3=$c4_addr;
      var $conv8=(($3)&255);
      var $sub9=((($conv8)-(33))|0);
      var $add10=((($add7)+($sub9))|0);
      $value=$add10;
      var $4=$value;
      var $and=$4 & 255;
      var $conv11=(($and) & 255);
      var $arrayidx=(($bytes+2)|0);
      HEAP8[($arrayidx)]=$conv11;
      var $5=$value;
      var $and12=$5 & 65280;
      var $shr=$and12 >>> 8;
      var $conv13=(($shr) & 255);
      var $arrayidx14=(($bytes+1)|0);
      HEAP8[($arrayidx14)]=$conv13;
      var $6=$value;
      var $and15=$6 & 16711680;
      var $shr16=$and15 >>> 16;
      var $conv17=(($shr16) & 255);
      var $arrayidx18=(($bytes)|0);
      HEAP8[($arrayidx18)]=$conv17;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $7=$i;
      var $8=$cnt_addr;
      var $cmp=(($7)|0) < (($8)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $9=$i;
      var $arrayidx20=(($bytes+$9)|0);
      var $10=HEAP8[($arrayidx20)];
      var $11=$dst_addr;
      var $incdec_ptr=(($11+1)|0);
      $dst_addr=$incdec_ptr;
      HEAP8[($11)]=$10;
      __label__ = 5; break;
    case 5: 
      var $12=$i;
      var $inc=((($12)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 6: 
      var $13=$dst_addr;
      STACKTOP = __stackBase__;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}
_decode_chars["X"]=1;

function _skip_spaces($str) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $str_addr;
      var $p;
      $str_addr=$str;
      var $0=$str_addr;
      var $1=HEAP32[(($0)>>2)];
      $p=$1;
      __label__ = 3; break;
    case 3: 
      var $2=$p;
      var $3=HEAP8[($2)];
      var $conv=(($3 << 24) >> 24);
      var $cmp=(($conv)|0)==32;
      if ($cmp) { var $6 = 1;__label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $4=$p;
      var $5=HEAP8[($4)];
      var $conv2=(($5 << 24) >> 24);
      var $cmp3=(($conv2)|0)==9;
      var $6 = $cmp3;__label__ = 5; break;
    case 5: 
      var $6;
      if ($6) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $7=$p;
      var $incdec_ptr=(($7+1)|0);
      $p=$incdec_ptr;
      __label__ = 3; break;
    case 7: 
      var $8=$p;
      var $9=$str_addr;
      HEAP32[(($9)>>2)]=$8;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _rskip_spaces($str, $limit) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $str_addr;
      var $limit_addr;
      var $p;
      $str_addr=$str;
      $limit_addr=$limit;
      var $0=$str_addr;
      var $1=HEAP32[(($0)>>2)];
      $p=$1;
      __label__ = 3; break;
    case 3: 
      var $2=$p;
      var $3=$limit_addr;
      var $cmp=(($2)>>>0) >= (($3)>>>0);
      if ($cmp) { __label__ = 4; break; } else { var $9 = 0;__label__ = 7; break; }
    case 4: 
      var $4=$p;
      var $5=HEAP8[($4)];
      var $conv=(($5 << 24) >> 24);
      var $cmp1=(($conv)|0)==32;
      if ($cmp1) { var $8 = 1;__label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $6=$p;
      var $7=HEAP8[($6)];
      var $conv3=(($7 << 24) >> 24);
      var $cmp4=(($conv3)|0)==9;
      var $8 = $cmp4;__label__ = 6; break;
    case 6: 
      var $8;
      var $9 = $8;__label__ = 7; break;
    case 7: 
      var $9;
      if ($9) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $10=$p;
      var $incdec_ptr=((($10)-(1))|0);
      $p=$incdec_ptr;
      __label__ = 3; break;
    case 9: 
      var $11=$p;
      var $12=$str_addr;
      HEAP32[(($12)>>2)]=$11;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _ass_lazy_track_init($lib, $track) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $lib_addr;
      var $track_addr;
      $lib_addr=$lib;
      $track_addr=$track;
      var $0=$track_addr;
      var $PlayResX=(($0+36)|0);
      var $1=HEAP32[(($PlayResX)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $2=$track_addr;
      var $PlayResY=(($2+40)|0);
      var $3=HEAP32[(($PlayResY)>>2)];
      var $tobool1=(($3)|0)!=0;
      if ($tobool1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 22; break;
    case 5: 
      var $4=$track_addr;
      var $PlayResX2=(($4+36)|0);
      var $5=HEAP32[(($PlayResX2)>>2)];
      var $tobool3=(($5)|0)!=0;
      if ($tobool3) { __label__ = 8; break; } else { __label__ = 6; break; }
    case 6: 
      var $6=$track_addr;
      var $PlayResY5=(($6+40)|0);
      var $7=HEAP32[(($PlayResY5)>>2)];
      var $tobool6=(($7)|0)!=0;
      if ($tobool6) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $8=$lib_addr;
      _ass_msg($8, 2, ((STRING_TABLE.__str39)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $9=$track_addr;
      var $PlayResX8=(($9+36)|0);
      HEAP32[(($PlayResX8)>>2)]=384;
      var $10=$track_addr;
      var $PlayResY9=(($10+40)|0);
      HEAP32[(($PlayResY9)>>2)]=288;
      __label__ = 22; break;
    case 8: 
      var $11=$track_addr;
      var $PlayResY10=(($11+40)|0);
      var $12=HEAP32[(($PlayResY10)>>2)];
      var $tobool11=(($12)|0)!=0;
      if ($tobool11) { __label__ = 11; break; } else { __label__ = 9; break; }
    case 9: 
      var $13=$track_addr;
      var $PlayResX13=(($13+36)|0);
      var $14=HEAP32[(($PlayResX13)>>2)];
      var $cmp=(($14)|0)==1280;
      if ($cmp) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $15=$track_addr;
      var $PlayResY15=(($15+40)|0);
      HEAP32[(($PlayResY15)>>2)]=1024;
      var $16=$lib_addr;
      var $17=$track_addr;
      var $PlayResY16=(($17+40)|0);
      var $18=HEAP32[(($PlayResY16)>>2)];
      _ass_msg($16, 2, ((STRING_TABLE.__str40)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$18,tempInt));
      __label__ = 21; break;
    case 11: 
      var $19=$track_addr;
      var $PlayResY18=(($19+40)|0);
      var $20=HEAP32[(($PlayResY18)>>2)];
      var $tobool19=(($20)|0)!=0;
      if ($tobool19) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $21=$track_addr;
      var $PlayResX21=(($21+36)|0);
      var $22=HEAP32[(($PlayResX21)>>2)];
      var $mul=((($22)*(3))|0);
      var $div=((((($mul)|0))/(4))&-1);
      var $23=$track_addr;
      var $PlayResY22=(($23+40)|0);
      HEAP32[(($PlayResY22)>>2)]=$div;
      var $24=$lib_addr;
      var $25=$track_addr;
      var $PlayResY23=(($25+40)|0);
      var $26=HEAP32[(($PlayResY23)>>2)];
      _ass_msg($24, 2, ((STRING_TABLE.__str40)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$26,tempInt));
      __label__ = 20; break;
    case 13: 
      var $27=$track_addr;
      var $PlayResX25=(($27+36)|0);
      var $28=HEAP32[(($PlayResX25)>>2)];
      var $tobool26=(($28)|0)!=0;
      if ($tobool26) { __label__ = 16; break; } else { __label__ = 14; break; }
    case 14: 
      var $29=$track_addr;
      var $PlayResY28=(($29+40)|0);
      var $30=HEAP32[(($PlayResY28)>>2)];
      var $cmp29=(($30)|0)==1024;
      if ($cmp29) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $31=$track_addr;
      var $PlayResX31=(($31+36)|0);
      HEAP32[(($PlayResX31)>>2)]=1280;
      var $32=$lib_addr;
      var $33=$track_addr;
      var $PlayResX32=(($33+36)|0);
      var $34=HEAP32[(($PlayResX32)>>2)];
      _ass_msg($32, 2, ((STRING_TABLE.__str41)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$34,tempInt));
      __label__ = 19; break;
    case 16: 
      var $35=$track_addr;
      var $PlayResX34=(($35+36)|0);
      var $36=HEAP32[(($PlayResX34)>>2)];
      var $tobool35=(($36)|0)!=0;
      if ($tobool35) { __label__ = 18; break; } else { __label__ = 17; break; }
    case 17: 
      var $37=$track_addr;
      var $PlayResY37=(($37+40)|0);
      var $38=HEAP32[(($PlayResY37)>>2)];
      var $mul38=((($38<<2))|0);
      var $div39=((((($mul38)|0))/(3))&-1);
      var $39=$track_addr;
      var $PlayResX40=(($39+36)|0);
      HEAP32[(($PlayResX40)>>2)]=$div39;
      var $40=$lib_addr;
      var $41=$track_addr;
      var $PlayResX41=(($41+36)|0);
      var $42=HEAP32[(($PlayResX41)>>2)];
      _ass_msg($40, 2, ((STRING_TABLE.__str41)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$42,tempInt));
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_lazy_track_init["X"]=1;

function _set_default_style($style) {
  ;
  var __label__;

  var $style_addr;
  $style_addr=$style;
  var $call=_strdup(((STRING_TABLE.__str71)|0));
  var $0=$style_addr;
  var $Name=(($0)|0);
  HEAP32[(($Name)>>2)]=$call;
  var $call1=_strdup(((STRING_TABLE.__str72)|0));
  var $1=$style_addr;
  var $FontName=(($1+4)|0);
  HEAP32[(($FontName)>>2)]=$call1;
  var $2=$style_addr;
  var $FontSize=(($2+8)|0);
  (tempDoubleF64[0]=18,HEAP32[(($FontSize)>>2)]=tempDoubleI32[0],HEAP32[((($FontSize)+(4))>>2)]=tempDoubleI32[1]);
  var $3=$style_addr;
  var $PrimaryColour=(($3+16)|0);
  HEAP32[(($PrimaryColour)>>2)]=-256;
  var $4=$style_addr;
  var $SecondaryColour=(($4+20)|0);
  HEAP32[(($SecondaryColour)>>2)]=16776960;
  var $5=$style_addr;
  var $OutlineColour=(($5+24)|0);
  HEAP32[(($OutlineColour)>>2)]=0;
  var $6=$style_addr;
  var $BackColour=(($6+28)|0);
  HEAP32[(($BackColour)>>2)]=128;
  var $7=$style_addr;
  var $Bold=(($7+32)|0);
  HEAP32[(($Bold)>>2)]=200;
  var $8=$style_addr;
  var $ScaleX=(($8+48)|0);
  (tempDoubleF64[0]=1,HEAP32[(($ScaleX)>>2)]=tempDoubleI32[0],HEAP32[((($ScaleX)+(4))>>2)]=tempDoubleI32[1]);
  var $9=$style_addr;
  var $ScaleY=(($9+56)|0);
  (tempDoubleF64[0]=1,HEAP32[(($ScaleY)>>2)]=tempDoubleI32[0],HEAP32[((($ScaleY)+(4))>>2)]=tempDoubleI32[1]);
  var $10=$style_addr;
  var $Spacing=(($10+64)|0);
  (tempDoubleF64[0]=0,HEAP32[(($Spacing)>>2)]=tempDoubleI32[0],HEAP32[((($Spacing)+(4))>>2)]=tempDoubleI32[1]);
  var $11=$style_addr;
  var $BorderStyle=(($11+76)|0);
  HEAP32[(($BorderStyle)>>2)]=1;
  var $12=$style_addr;
  var $Outline=(($12+80)|0);
  (tempDoubleF64[0]=2,HEAP32[(($Outline)>>2)]=tempDoubleI32[0],HEAP32[((($Outline)+(4))>>2)]=tempDoubleI32[1]);
  var $13=$style_addr;
  var $Shadow=(($13+88)|0);
  (tempDoubleF64[0]=3,HEAP32[(($Shadow)>>2)]=tempDoubleI32[0],HEAP32[((($Shadow)+(4))>>2)]=tempDoubleI32[1]);
  var $14=$style_addr;
  var $Alignment=(($14+96)|0);
  HEAP32[(($Alignment)>>2)]=2;
  var $15=$style_addr;
  var $MarginV=(($15+108)|0);
  HEAP32[(($MarginV)>>2)]=20;
  var $16=$style_addr;
  var $MarginR=(($16+104)|0);
  HEAP32[(($MarginR)>>2)]=20;
  var $17=$style_addr;
  var $MarginL=(($17+100)|0);
  HEAP32[(($MarginL)>>2)]=20;
  ;
  return;
}
_set_default_style["X"]=1;

function _lookup_style($track, $name) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $track_addr;
      var $name_addr;
      var $i;
      $track_addr=$track;
      $name_addr=$name;
      var $0=$name_addr;
      var $1=HEAP8[($0)];
      var $conv=(($1 << 24) >> 24);
      var $cmp=(($conv)|0)==42;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=$name_addr;
      var $incdec_ptr=(($2+1)|0);
      $name_addr=$incdec_ptr;
      __label__ = 4; break;
    case 4: 
      var $3=$track_addr;
      var $n_styles=(($3)|0);
      var $4=HEAP32[(($n_styles)>>2)];
      var $sub=((($4)-(1))|0);
      $i=$sub;
      __label__ = 5; break;
    case 5: 
      var $5=$i;
      var $cmp2=(($5)|0) >= 0;
      if ($cmp2) { __label__ = 6; break; } else { __label__ = 10; break; }
    case 6: 
      var $6=$i;
      var $7=$track_addr;
      var $styles=(($7+16)|0);
      var $8=HEAP32[(($styles)>>2)];
      var $arrayidx=(($8+($6)*(120))|0);
      var $Name=(($arrayidx)|0);
      var $9=HEAP32[(($Name)>>2)];
      var $10=$name_addr;
      var $call=_strcmp($9, $10);
      var $cmp4=(($call)|0)==0;
      if ($cmp4) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $11=$i;
      $retval=$11;
      __label__ = 11; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $12=$i;
      var $dec=((($12)-(1))|0);
      $i=$dec;
      __label__ = 5; break;
    case 10: 
      var $13=$track_addr;
      var $default_style=(($13+68)|0);
      var $14=HEAP32[(($default_style)>>2)];
      $i=$14;
      var $15=$track_addr;
      var $library=(($15+76)|0);
      var $16=HEAP32[(($library)>>2)];
      var $17=$track_addr;
      var $18=$name_addr;
      var $19=$i;
      var $20=$track_addr;
      var $styles8=(($20+16)|0);
      var $21=HEAP32[(($styles8)>>2)];
      var $arrayidx9=(($21+($19)*(120))|0);
      var $Name10=(($arrayidx9)|0);
      var $22=HEAP32[(($Name10)>>2)];
      _ass_msg($16, 2, ((STRING_TABLE.__str70)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$17,HEAP32[(((tempInt)+(4))>>2)]=$18,HEAP32[(((tempInt)+(8))>>2)]=$22,tempInt));
      var $23=$i;
      $retval=$23;
      __label__ = 11; break;
    case 11: 
      var $24=$retval;
      ;
      return $24;
    default: assert(0, "bad label: " + __label__);
  }
}
_lookup_style["X"]=1;

function _string2timecode($library, $p) {
  var __stackBase__  = STACKTOP; STACKTOP += 32; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval=__stackBase__;
      var $library_addr;
      var $p_addr;
      var $h=(__stackBase__)+(8);
      var $m=(__stackBase__)+(12);
      var $s=(__stackBase__)+(16);
      var $ms=(__stackBase__)+(20);
      var $tm=(__stackBase__)+(24);
      var $res;
      $library_addr=$library;
      $p_addr=$p;
      var $0=$p_addr;
      var $call=___isoc99_sscanf($0, ((STRING_TABLE.__str68)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$h,HEAP32[(((tempInt)+(4))>>2)]=$m,HEAP32[(((tempInt)+(8))>>2)]=$s,HEAP32[(((tempInt)+(12))>>2)]=$ms,tempInt));
      $res=$call;
      var $1=$res;
      var $cmp=(($1)|0) < 4;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=$library_addr;
      _ass_msg($2, 2, ((STRING_TABLE.__str69)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $$emscripten$temp$0$0=0;
      var $$emscripten$temp$0$1=0;
      var $st$4$0=(($retval)|0);
      HEAP32[(($st$4$0)>>2)]=$$emscripten$temp$0$0;
      var $st$4$1=(($retval+4)|0);
      HEAP32[(($st$4$1)>>2)]=$$emscripten$temp$0$1;
      __label__ = 5; break;
    case 4: 
      var $3=HEAP32[(($h)>>2)];
      var $mul=((($3)*(60))|0);
      var $4=HEAP32[(($m)>>2)];
      var $add=((($mul)+($4))|0);
      var $mul1=((($add)*(60))|0);
      var $5=HEAP32[(($s)>>2)];
      var $add2=((($mul1)+($5))|0);
      var $mul3=((($add2)*(1000))|0);
      var $6=HEAP32[(($ms)>>2)];
      var $mul4=((($6)*(10))|0);
      var $add5=((($mul3)+($mul4))|0);
      var $conv$0=$add5;
      var $conv$1=0;
      var $st$13$0=(($tm)|0);
      HEAP32[(($st$13$0)>>2)]=$conv$0;
      var $st$13$1=(($tm+4)|0);
      HEAP32[(($st$13$1)>>2)]=$conv$1;
      var $st$17$0=(($tm)|0);
      var $7$0=HEAP32[(($st$17$0)>>2)];
      var $st$17$1=(($tm+4)|0);
      var $7$1=HEAP32[(($st$17$1)>>2)];
      var $st$21$0=(($retval)|0);
      HEAP32[(($st$21$0)>>2)]=$7$0;
      var $st$21$1=(($retval+4)|0);
      HEAP32[(($st$21$1)>>2)]=$7$1;
      __label__ = 5; break;
    case 5: 
      var $st$0$0=(($retval)|0);
      var $8$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($retval+4)|0);
      var $8$1=HEAP32[(($st$0$1)>>2)];
      STACKTOP = __stackBase__;
      return [$8$0,$8$1];
    default: assert(0, "bad label: " + __label__);
  }
}
_string2timecode["X"]=1;

function _process_line($track, $str) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $track_addr;
      var $str_addr;
      $track_addr=$track;
      $str_addr=$str;
      var $0=$str_addr;
      var $call=_strncasecmp($0, ((STRING_TABLE.__str76)|0), 13);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $1=$track_addr;
      var $parser_priv=(($1+80)|0);
      var $2=HEAP32[(($parser_priv)>>2)];
      var $state=(($2)|0);
      HEAP32[(($state)>>2)]=1;
      __label__ = 23; break;
    case 4: 
      var $3=$str_addr;
      var $call1=_strncasecmp($3, ((STRING_TABLE.__str77)|0), 11);
      var $tobool2=(($call1)|0)!=0;
      if ($tobool2) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $4=$track_addr;
      var $parser_priv4=(($4+80)|0);
      var $5=HEAP32[(($parser_priv4)>>2)];
      var $state5=(($5)|0);
      HEAP32[(($state5)>>2)]=2;
      var $6=$track_addr;
      var $track_type=(($6+32)|0);
      HEAP32[(($track_type)>>2)]=2;
      __label__ = 22; break;
    case 6: 
      var $7=$str_addr;
      var $call7=_strncasecmp($7, ((STRING_TABLE.__str78)|0), 12);
      var $tobool8=(($call7)|0)!=0;
      if ($tobool8) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $8=$track_addr;
      var $parser_priv10=(($8+80)|0);
      var $9=HEAP32[(($parser_priv10)>>2)];
      var $state11=(($9)|0);
      HEAP32[(($state11)>>2)]=2;
      var $10=$track_addr;
      var $track_type12=(($10+32)|0);
      HEAP32[(($track_type12)>>2)]=1;
      __label__ = 21; break;
    case 8: 
      var $11=$str_addr;
      var $call14=_strncasecmp($11, ((STRING_TABLE.__str79)|0), 8);
      var $tobool15=(($call14)|0)!=0;
      if ($tobool15) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $12=$track_addr;
      var $parser_priv17=(($12+80)|0);
      var $13=HEAP32[(($parser_priv17)>>2)];
      var $state18=(($13)|0);
      HEAP32[(($state18)>>2)]=3;
      __label__ = 20; break;
    case 10: 
      var $14=$str_addr;
      var $call20=_strncasecmp($14, ((STRING_TABLE.__str80)|0), 7);
      var $tobool21=(($call20)|0)!=0;
      if ($tobool21) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $15=$track_addr;
      var $parser_priv23=(($15+80)|0);
      var $16=HEAP32[(($parser_priv23)>>2)];
      var $state24=(($16)|0);
      HEAP32[(($state24)>>2)]=4;
      __label__ = 19; break;
    case 12: 
      var $17=$track_addr;
      var $parser_priv26=(($17+80)|0);
      var $18=HEAP32[(($parser_priv26)>>2)];
      var $state27=(($18)|0);
      var $19=HEAP32[(($state27)>>2)];
      if ((($19)|0) == 1) {
        __label__ = 13; break;
      }
      else if ((($19)|0) == 2) {
        __label__ = 14; break;
      }
      else if ((($19)|0) == 3) {
        __label__ = 15; break;
      }
      else if ((($19)|0) == 4) {
        __label__ = 16; break;
      }
      else {
      __label__ = 17; break;
      }
      
    case 13: 
      var $20=$track_addr;
      var $21=$str_addr;
      var $call28=_process_info_line($20, $21);
      __label__ = 18; break;
    case 14: 
      var $22=$track_addr;
      var $23=$str_addr;
      var $call30=_process_styles_line($22, $23);
      __label__ = 18; break;
    case 15: 
      var $24=$track_addr;
      var $25=$str_addr;
      var $call32=_process_events_line($24, $25);
      __label__ = 18; break;
    case 16: 
      var $26=$track_addr;
      var $27=$str_addr;
      var $call34=_process_fonts_line($26, $27);
      __label__ = 18; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $28=$track_addr;
      var $parser_priv39=(($28+80)|0);
      var $29=HEAP32[(($parser_priv39)>>2)];
      var $state40=(($29)|0);
      var $30=HEAP32[(($state40)>>2)];
      var $cmp=(($30)|0)!=4;
      if ($cmp) { __label__ = 24; break; } else { __label__ = 26; break; }
    case 24: 
      var $31=$track_addr;
      var $parser_priv41=(($31+80)|0);
      var $32=HEAP32[(($parser_priv41)>>2)];
      var $fontname=(($32+4)|0);
      var $33=HEAP32[(($fontname)>>2)];
      var $tobool42=(($33)|0)!=0;
      if ($tobool42) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $34=$track_addr;
      var $call44=_decode_font($34);
      __label__ = 26; break;
    case 26: 
      ;
      return 0;
    default: assert(0, "bad label: " + __label__);
  }
}
_process_line["X"]=1;

function _decode_font($track) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $track_addr;
      var $p;
      var $q;
      var $i;
      var $size;
      var $dsize;
      var $buf;
      $track_addr=$track;
      $buf=0;
      var $0=$track_addr;
      var $library=(($0+76)|0);
      var $1=HEAP32[(($library)>>2)];
      var $2=$track_addr;
      var $parser_priv=(($2+80)|0);
      var $3=HEAP32[(($parser_priv)>>2)];
      var $fontdata_used=(($3+16)|0);
      var $4=HEAP32[(($fontdata_used)>>2)];
      _ass_msg($1, 6, ((STRING_TABLE.__str48)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$4,tempInt));
      var $5=$track_addr;
      var $parser_priv1=(($5+80)|0);
      var $6=HEAP32[(($parser_priv1)>>2)];
      var $fontdata_used2=(($6+16)|0);
      var $7=HEAP32[(($fontdata_used2)>>2)];
      $size=$7;
      var $8=$size;
      var $rem=((($8)|0))%(4);
      var $cmp=(($rem)|0)==1;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $9=$track_addr;
      var $library3=(($9+76)|0);
      var $10=HEAP32[(($library3)>>2)];
      _ass_msg($10, 1, ((STRING_TABLE.__str49)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 19; break;
    case 4: 
      var $11=$size;
      var $div=((((($11)|0))/(4))&-1);
      var $mul=((($div)*(3))|0);
      var $add=((($mul)+(2))|0);
      var $call=_malloc($add);
      $buf=$call;
      var $12=$buf;
      $q=$12;
      $i=0;
      var $13=$track_addr;
      var $parser_priv4=(($13+80)|0);
      var $14=HEAP32[(($parser_priv4)>>2)];
      var $fontdata=(($14+8)|0);
      var $15=HEAP32[(($fontdata)>>2)];
      $p=$15;
      __label__ = 5; break;
    case 5: 
      var $16=$i;
      var $17=$size;
      var $div5=((((($17)|0))/(4))&-1);
      var $cmp6=(($16)|0) < (($div5)|0);
      if ($cmp6) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $18=$p;
      var $arrayidx=(($18)|0);
      var $19=HEAP8[($arrayidx)];
      var $20=$p;
      var $arrayidx7=(($20+1)|0);
      var $21=HEAP8[($arrayidx7)];
      var $22=$p;
      var $arrayidx8=(($22+2)|0);
      var $23=HEAP8[($arrayidx8)];
      var $24=$p;
      var $arrayidx9=(($24+3)|0);
      var $25=HEAP8[($arrayidx9)];
      var $26=$q;
      var $call10=_decode_chars($19, $21, $23, $25, $26, 3);
      $q=$call10;
      __label__ = 7; break;
    case 7: 
      var $27=$i;
      var $inc=((($27)+(1))|0);
      $i=$inc;
      var $28=$p;
      var $add_ptr=(($28+4)|0);
      $p=$add_ptr;
      __label__ = 5; break;
    case 8: 
      var $29=$size;
      var $rem11=((($29)|0))%(4);
      var $cmp12=(($rem11)|0)==2;
      if ($cmp12) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $30=$p;
      var $arrayidx14=(($30)|0);
      var $31=HEAP8[($arrayidx14)];
      var $32=$p;
      var $arrayidx15=(($32+1)|0);
      var $33=HEAP8[($arrayidx15)];
      var $34=$q;
      var $call16=_decode_chars($31, $33, 0, 0, $34, 1);
      $q=$call16;
      __label__ = 13; break;
    case 10: 
      var $35=$size;
      var $rem17=((($35)|0))%(4);
      var $cmp18=(($rem17)|0)==3;
      if ($cmp18) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $36=$p;
      var $arrayidx20=(($36)|0);
      var $37=HEAP8[($arrayidx20)];
      var $38=$p;
      var $arrayidx21=(($38+1)|0);
      var $39=HEAP8[($arrayidx21)];
      var $40=$p;
      var $arrayidx22=(($40+2)|0);
      var $41=HEAP8[($arrayidx22)];
      var $42=$q;
      var $call23=_decode_chars($37, $39, $41, 0, $42, 2);
      $q=$call23;
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $43=$q;
      var $44=$buf;
      var $sub_ptr_lhs_cast=$43;
      var $sub_ptr_rhs_cast=$44;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $dsize=$sub_ptr_sub;
      var $45=$dsize;
      var $46=$size;
      var $div26=((((($46)|0))/(4))&-1);
      var $mul27=((($div26)*(3))|0);
      var $add28=((($mul27)+(2))|0);
      var $cmp29=(($45)|0) <= (($add28)|0);
      if ($cmp29) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      __label__ = 16; break;
    case 15: 
      ___assert_fail(((STRING_TABLE.__str50)|0), ((STRING_TABLE.__str1)|0), 704, ((STRING_TABLE.___PRETTY_FUNCTION___decode_font)|0));
      throw "Reached an unreachable!"
      __label__ = 16; break;
    case 16: 
      var $48=$track_addr;
      var $library30=(($48+76)|0);
      var $49=HEAP32[(($library30)>>2)];
      var $extract_fonts=(($49+4)|0);
      var $50=HEAP32[(($extract_fonts)>>2)];
      var $tobool=(($50)|0)!=0;
      if ($tobool) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $51=$track_addr;
      var $library32=(($51+76)|0);
      var $52=HEAP32[(($library32)>>2)];
      var $53=$track_addr;
      var $parser_priv33=(($53+80)|0);
      var $54=HEAP32[(($parser_priv33)>>2)];
      var $fontname=(($54+4)|0);
      var $55=HEAP32[(($fontname)>>2)];
      var $56=$buf;
      var $57=$dsize;
      _ass_add_font($52, $55, $56, $57);
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $58=$buf;
      _free($58);
      var $59=$track_addr;
      var $parser_priv35=(($59+80)|0);
      var $60=HEAP32[(($parser_priv35)>>2)];
      var $fontname36=(($60+4)|0);
      var $61=HEAP32[(($fontname36)>>2)];
      _free($61);
      var $62=$track_addr;
      var $parser_priv37=(($62+80)|0);
      var $63=HEAP32[(($parser_priv37)>>2)];
      var $fontdata38=(($63+8)|0);
      var $64=HEAP32[(($fontdata38)>>2)];
      _free($64);
      var $65=$track_addr;
      var $parser_priv39=(($65+80)|0);
      var $66=HEAP32[(($parser_priv39)>>2)];
      var $fontname40=(($66+4)|0);
      HEAP32[(($fontname40)>>2)]=0;
      var $67=$track_addr;
      var $parser_priv41=(($67+80)|0);
      var $68=HEAP32[(($parser_priv41)>>2)];
      var $fontdata42=(($68+8)|0);
      HEAP32[(($fontdata42)>>2)]=0;
      var $69=$track_addr;
      var $parser_priv43=(($69+80)|0);
      var $70=HEAP32[(($parser_priv43)>>2)];
      var $fontdata_size=(($70+12)|0);
      HEAP32[(($fontdata_size)>>2)]=0;
      var $71=$track_addr;
      var $parser_priv44=(($71+80)|0);
      var $72=HEAP32[(($parser_priv44)>>2)];
      var $fontdata_used45=(($72+16)|0);
      HEAP32[(($fontdata_used45)>>2)]=0;
      STACKTOP = __stackBase__;
      return 0;
    default: assert(0, "bad label: " + __label__);
  }
}
_decode_font["X"]=1;

function _process_info_line($track, $str) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $track_addr;
      var $str_addr;
      var $p;
      $track_addr=$track;
      $str_addr=$str;
      var $0=$str_addr;
      var $call=_strncmp($0, ((STRING_TABLE.__str95)|0), 9);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $1=$str_addr;
      var $add_ptr=(($1+9)|0);
      var $call1=_atoi($add_ptr);
      var $2=$track_addr;
      var $PlayResX=(($2+36)|0);
      HEAP32[(($PlayResX)>>2)]=$call1;
      __label__ = 27; break;
    case 4: 
      var $3=$str_addr;
      var $call2=_strncmp($3, ((STRING_TABLE.__str96)|0), 9);
      var $tobool3=(($call2)|0)!=0;
      if ($tobool3) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $4=$str_addr;
      var $add_ptr5=(($4+9)|0);
      var $call6=_atoi($add_ptr5);
      var $5=$track_addr;
      var $PlayResY=(($5+40)|0);
      HEAP32[(($PlayResY)>>2)]=$call6;
      __label__ = 26; break;
    case 6: 
      var $6=$str_addr;
      var $call8=_strncmp($6, ((STRING_TABLE.__str97)|0), 6);
      var $tobool9=(($call8)|0)!=0;
      if ($tobool9) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $7=$str_addr;
      var $add_ptr11=(($7+6)|0);
      var $call12=_ass_strtod($add_ptr11, 0);
      var $8=$track_addr;
      var $Timer=(($8+44)|0);
      (tempDoubleF64[0]=$call12,HEAP32[(($Timer)>>2)]=tempDoubleI32[0],HEAP32[((($Timer)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 25; break;
    case 8: 
      var $9=$str_addr;
      var $call14=_strncmp($9, ((STRING_TABLE.__str98)|0), 10);
      var $tobool15=(($call14)|0)!=0;
      if ($tobool15) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $10=$str_addr;
      var $add_ptr17=(($10+10)|0);
      var $call18=_atoi($add_ptr17);
      var $11=$track_addr;
      var $WrapStyle=(($11+52)|0);
      HEAP32[(($WrapStyle)>>2)]=$call18;
      __label__ = 24; break;
    case 10: 
      var $12=$str_addr;
      var $call20=_strncmp($12, ((STRING_TABLE.__str99)|0), 22);
      var $tobool21=(($call20)|0)!=0;
      if ($tobool21) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $13=$str_addr;
      var $add_ptr23=(($13+22)|0);
      var $call24=_parse_bool($add_ptr23);
      var $conv=(($call24 << 24) >> 24);
      var $14=$track_addr;
      var $ScaledBorderAndShadow=(($14+56)|0);
      HEAP32[(($ScaledBorderAndShadow)>>2)]=$conv;
      __label__ = 23; break;
    case 12: 
      var $15=$str_addr;
      var $call26=_strncmp($15, ((STRING_TABLE.__str100)|0), 8);
      var $tobool27=(($call26)|0)!=0;
      if ($tobool27) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: 
      var $16=$str_addr;
      var $add_ptr29=(($16+8)|0);
      var $call30=_parse_bool($add_ptr29);
      var $conv31=(($call30 << 24) >> 24);
      var $17=$track_addr;
      var $Kerning=(($17+60)|0);
      HEAP32[(($Kerning)>>2)]=$conv31;
      __label__ = 22; break;
    case 14: 
      var $18=$str_addr;
      var $call33=_strncmp($18, ((STRING_TABLE.__str101)|0), 9);
      var $tobool34=(($call33)|0)!=0;
      if ($tobool34) { __label__ = 21; break; } else { __label__ = 15; break; }
    case 15: 
      var $19=$str_addr;
      var $add_ptr36=(($19+9)|0);
      $p=$add_ptr36;
      __label__ = 16; break;
    case 16: 
      var $20=$p;
      var $21=HEAP8[($20)];
      var $conv37=(($21 << 24) >> 24);
      var $tobool38=(($conv37)|0)!=0;
      if ($tobool38) { __label__ = 17; break; } else { var $26 = 0;__label__ = 18; break; }
    case 17: 
      var $22=$p;
      var $23=HEAP8[($22)];
      var $conv39=(($23 << 24) >> 24);
      var $call40=___ctype_b_loc();
      var $24=HEAP32[(($call40)>>2)];
      var $arrayidx=(($24+($conv39<<1))|0);
      var $25=HEAPU16[(($arrayidx)>>1)];
      var $conv41=(($25)&65535);
      var $and=$conv41 & 8192;
      var $tobool42=(($and)|0)!=0;
      var $26 = $tobool42;__label__ = 18; break;
    case 18: 
      var $26;
      if ($26) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $27=$p;
      var $incdec_ptr=(($27+1)|0);
      $p=$incdec_ptr;
      __label__ = 16; break;
    case 20: 
      var $call43=_malloc(3);
      var $28=$track_addr;
      var $Language=(($28+64)|0);
      HEAP32[(($Language)>>2)]=$call43;
      var $29=$track_addr;
      var $Language44=(($29+64)|0);
      var $30=HEAP32[(($Language44)>>2)];
      var $31=$p;
      var $call45=_strncpy($30, $31, 2);
      var $32=$track_addr;
      var $Language46=(($32+64)|0);
      var $33=HEAP32[(($Language46)>>2)];
      var $arrayidx47=(($33+2)|0);
      HEAP8[($arrayidx47)]=0;
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      ;
      return 0;
    default: assert(0, "bad label: " + __label__);
  }
}
_process_info_line["X"]=1;

function _process_styles_line($track, $str) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $track_addr;
      var $str_addr;
      var $p=__stackBase__;
      var $p6=(__stackBase__)+(4);
      $track_addr=$track;
      $str_addr=$str;
      var $0=$str_addr;
      var $call=_strncmp($0, ((STRING_TABLE.__str85)|0), 7);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $1=$str_addr;
      var $add_ptr=(($1+7)|0);
      HEAP32[(($p)>>2)]=$add_ptr;
      _skip_spaces($p);
      var $2=HEAP32[(($p)>>2)];
      var $call1=_strdup($2);
      var $3=$track_addr;
      var $style_format=(($3+24)|0);
      HEAP32[(($style_format)>>2)]=$call1;
      var $4=$track_addr;
      var $library=(($4+76)|0);
      var $5=HEAP32[(($library)>>2)];
      var $6=$track_addr;
      var $style_format2=(($6+24)|0);
      var $7=HEAP32[(($style_format2)>>2)];
      _ass_msg($5, 7, ((STRING_TABLE.__str89)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$7,tempInt));
      __label__ = 7; break;
    case 4: 
      var $8=$str_addr;
      var $call3=_strncmp($8, ((STRING_TABLE.__str90)|0), 6);
      var $tobool4=(($call3)|0)!=0;
      if ($tobool4) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $9=$str_addr;
      var $add_ptr7=(($9+6)|0);
      HEAP32[(($p6)>>2)]=$add_ptr7;
      _skip_spaces($p6);
      var $10=$track_addr;
      var $11=HEAP32[(($p6)>>2)];
      var $call8=_process_style($10, $11);
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      STACKTOP = __stackBase__;
      return 0;
    default: assert(0, "bad label: " + __label__);
  }
}


function _process_events_line($track, $str) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $track_addr;
      var $str_addr=__stackBase__;
      var $p=(__stackBase__)+(4);
      var $eid;
      var $event;
      $track_addr=$track;
      HEAP32[(($str_addr)>>2)]=$str;
      var $0=HEAP32[(($str_addr)>>2)];
      var $call=_strncmp($0, ((STRING_TABLE.__str85)|0), 7);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $1=HEAP32[(($str_addr)>>2)];
      var $add_ptr=(($1+7)|0);
      HEAP32[(($p)>>2)]=$add_ptr;
      _skip_spaces($p);
      var $2=$track_addr;
      var $event_format=(($2+28)|0);
      var $3=HEAP32[(($event_format)>>2)];
      _free($3);
      var $4=HEAP32[(($p)>>2)];
      var $call1=_strdup($4);
      var $5=$track_addr;
      var $event_format2=(($5+28)|0);
      HEAP32[(($event_format2)>>2)]=$call1;
      var $6=$track_addr;
      var $library=(($6+76)|0);
      var $7=HEAP32[(($library)>>2)];
      var $8=$track_addr;
      var $event_format3=(($8+28)|0);
      var $9=HEAP32[(($event_format3)>>2)];
      _ass_msg($7, 7, ((STRING_TABLE.__str86)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$9,tempInt));
      __label__ = 10; break;
    case 4: 
      var $10=HEAP32[(($str_addr)>>2)];
      var $call4=_strncmp($10, ((STRING_TABLE.__str87)|0), 9);
      var $tobool5=(($call4)|0)!=0;
      if ($tobool5) { __label__ = 8; break; } else { __label__ = 5; break; }
    case 5: 
      var $11=HEAP32[(($str_addr)>>2)];
      var $add_ptr7=(($11+9)|0);
      HEAP32[(($str_addr)>>2)]=$add_ptr7;
      _skip_spaces($str_addr);
      var $12=$track_addr;
      var $call8=_ass_alloc_event($12);
      $eid=$call8;
      var $13=$track_addr;
      var $events=(($13+20)|0);
      var $14=HEAP32[(($events)>>2)];
      var $15=$eid;
      var $add_ptr9=(($14+($15)*(56))|0);
      $event=$add_ptr9;
      var $16=$track_addr;
      var $event_format10=(($16+28)|0);
      var $17=HEAP32[(($event_format10)>>2)];
      var $tobool11=(($17)|0)!=0;
      if ($tobool11) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $18=$track_addr;
      _event_format_fallback($18);
      __label__ = 7; break;
    case 7: 
      var $19=$track_addr;
      var $20=$event;
      var $21=HEAP32[(($str_addr)>>2)];
      var $call13=_process_event_tail($19, $20, $21, 0);
      __label__ = 9; break;
    case 8: 
      var $22=$track_addr;
      var $library15=(($22+76)|0);
      var $23=HEAP32[(($library15)>>2)];
      var $24=HEAP32[(($str_addr)>>2)];
      _ass_msg($23, 6, ((STRING_TABLE.__str88)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$24,tempInt));
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      STACKTOP = __stackBase__;
      return 0;
    default: assert(0, "bad label: " + __label__);
  }
}
_process_events_line["X"]=1;

function _process_fonts_line($track, $str) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $track_addr;
      var $str_addr;
      var $len;
      var $p=__stackBase__;
      $track_addr=$track;
      $str_addr=$str;
      var $0=$str_addr;
      var $call=_strncmp($0, ((STRING_TABLE.__str81)|0), 9);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { __label__ = 6; break; } else { __label__ = 3; break; }
    case 3: 
      var $1=$str_addr;
      var $add_ptr=(($1+9)|0);
      HEAP32[(($p)>>2)]=$add_ptr;
      _skip_spaces($p);
      var $2=$track_addr;
      var $parser_priv=(($2+80)|0);
      var $3=HEAP32[(($parser_priv)>>2)];
      var $fontname=(($3+4)|0);
      var $4=HEAP32[(($fontname)>>2)];
      var $tobool1=(($4)|0)!=0;
      if ($tobool1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $5=$track_addr;
      var $call3=_decode_font($5);
      __label__ = 5; break;
    case 5: 
      var $6=HEAP32[(($p)>>2)];
      var $call4=_strdup($6);
      var $7=$track_addr;
      var $parser_priv5=(($7+80)|0);
      var $8=HEAP32[(($parser_priv5)>>2)];
      var $fontname6=(($8+4)|0);
      HEAP32[(($fontname6)>>2)]=$call4;
      var $9=$track_addr;
      var $library=(($9+76)|0);
      var $10=HEAP32[(($library)>>2)];
      var $11=$track_addr;
      var $parser_priv7=(($11+80)|0);
      var $12=HEAP32[(($parser_priv7)>>2)];
      var $fontname8=(($12+4)|0);
      var $13=HEAP32[(($fontname8)>>2)];
      _ass_msg($10, 6, ((STRING_TABLE.__str82)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$13,tempInt));
      $retval=0;
      __label__ = 13; break;
    case 6: 
      var $14=$track_addr;
      var $parser_priv10=(($14+80)|0);
      var $15=HEAP32[(($parser_priv10)>>2)];
      var $fontname11=(($15+4)|0);
      var $16=HEAP32[(($fontname11)>>2)];
      var $tobool12=(($16)|0)!=0;
      if ($tobool12) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $17=$track_addr;
      var $library14=(($17+76)|0);
      var $18=HEAP32[(($library14)>>2)];
      var $19=$str_addr;
      _ass_msg($18, 6, ((STRING_TABLE.__str83)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$19,tempInt));
      $retval=0;
      __label__ = 13; break;
    case 8: 
      var $20=$str_addr;
      var $call16=_strlen($20);
      $len=$call16;
      var $21=$len;
      var $cmp=(($21)|0) > 80;
      if ($cmp) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $22=$track_addr;
      var $library18=(($22+76)|0);
      var $23=HEAP32[(($library18)>>2)];
      var $24=$len;
      var $25=$str_addr;
      _ass_msg($23, 2, ((STRING_TABLE.__str84)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$24,HEAP32[(((tempInt)+(4))>>2)]=$25,tempInt));
      $retval=0;
      __label__ = 13; break;
    case 10: 
      var $26=$track_addr;
      var $parser_priv20=(($26+80)|0);
      var $27=HEAP32[(($parser_priv20)>>2)];
      var $fontdata_used=(($27+16)|0);
      var $28=HEAP32[(($fontdata_used)>>2)];
      var $29=$len;
      var $add=((($28)+($29))|0);
      var $30=$track_addr;
      var $parser_priv21=(($30+80)|0);
      var $31=HEAP32[(($parser_priv21)>>2)];
      var $fontdata_size=(($31+12)|0);
      var $32=HEAP32[(($fontdata_size)>>2)];
      var $cmp22=(($add)|0) > (($32)|0);
      if ($cmp22) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $33=$track_addr;
      var $parser_priv24=(($33+80)|0);
      var $34=HEAP32[(($parser_priv24)>>2)];
      var $fontdata_size25=(($34+12)|0);
      var $35=HEAP32[(($fontdata_size25)>>2)];
      var $add26=((($35)+(102400))|0);
      HEAP32[(($fontdata_size25)>>2)]=$add26;
      var $36=$track_addr;
      var $parser_priv27=(($36+80)|0);
      var $37=HEAP32[(($parser_priv27)>>2)];
      var $fontdata=(($37+8)|0);
      var $38=HEAP32[(($fontdata)>>2)];
      var $39=$track_addr;
      var $parser_priv28=(($39+80)|0);
      var $40=HEAP32[(($parser_priv28)>>2)];
      var $fontdata_size29=(($40+12)|0);
      var $41=HEAP32[(($fontdata_size29)>>2)];
      var $call30=_realloc($38, $41);
      var $42=$track_addr;
      var $parser_priv31=(($42+80)|0);
      var $43=HEAP32[(($parser_priv31)>>2)];
      var $fontdata32=(($43+8)|0);
      HEAP32[(($fontdata32)>>2)]=$call30;
      __label__ = 12; break;
    case 12: 
      var $44=$track_addr;
      var $parser_priv34=(($44+80)|0);
      var $45=HEAP32[(($parser_priv34)>>2)];
      var $fontdata35=(($45+8)|0);
      var $46=HEAP32[(($fontdata35)>>2)];
      var $47=$track_addr;
      var $parser_priv36=(($47+80)|0);
      var $48=HEAP32[(($parser_priv36)>>2)];
      var $fontdata_used37=(($48+16)|0);
      var $49=HEAP32[(($fontdata_used37)>>2)];
      var $add_ptr38=(($46+$49)|0);
      var $50=$str_addr;
      var $51=$len;
      assert($51 % 1 === 0, 'memcpy given ' + $51 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($add_ptr38, $50, $51, 1);
      var $52=$len;
      var $53=$track_addr;
      var $parser_priv39=(($53+80)|0);
      var $54=HEAP32[(($parser_priv39)>>2)];
      var $fontdata_used40=(($54+16)|0);
      var $55=HEAP32[(($fontdata_used40)>>2)];
      var $add41=((($55)+($52))|0);
      HEAP32[(($fontdata_used40)>>2)]=$add41;
      $retval=0;
      __label__ = 13; break;
    case 13: 
      var $56=$retval;
      STACKTOP = __stackBase__;
      return $56;
    default: assert(0, "bad label: " + __label__);
  }
}
_process_fonts_line["X"]=1;

function _numpad2align($val) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $val_addr;
      var $res;
      var $v;
      $val_addr=$val;
      var $0=$val_addr;
      var $sub=((($0)-(1))|0);
      var $div=((((($sub)|0))/(3))&-1);
      $v=$div;
      var $1=$v;
      var $cmp=(($1)|0)!=0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=$v;
      var $sub1=(((3)-($2))|0);
      $v=$sub1;
      __label__ = 4; break;
    case 4: 
      var $3=$val_addr;
      var $sub2=((($3)-(1))|0);
      var $rem=((($sub2)|0))%(3);
      var $add=((($rem)+(1))|0);
      $res=$add;
      var $4=$v;
      var $mul=((($4<<2))|0);
      var $5=$res;
      var $add3=((($5)+($mul))|0);
      $res=$add3;
      var $6=$res;
      ;
      return $6;
    default: assert(0, "bad label: " + __label__);
  }
}


function _process_style($track, $str) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $track_addr;
      var $str_addr;
      var $token;
      var $tname;
      var $p=__stackBase__;
      var $format;
      var $q=(__stackBase__)+(4);
      var $sid;
      var $style;
      var $target;
      var $sid10;
      $track_addr=$track;
      $str_addr=$str;
      var $0=$str_addr;
      HEAP32[(($p)>>2)]=$0;
      var $1=$track_addr;
      var $style_format=(($1+24)|0);
      var $2=HEAP32[(($style_format)>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { __label__ = 7; break; } else { __label__ = 3; break; }
    case 3: 
      var $3=$track_addr;
      var $track_type=(($3+32)|0);
      var $4=HEAP32[(($track_type)>>2)];
      var $cmp=(($4)|0)==2;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $call=_strdup(((STRING_TABLE.__str91)|0));
      var $5=$track_addr;
      var $style_format2=(($5+24)|0);
      HEAP32[(($style_format2)>>2)]=$call;
      __label__ = 6; break;
    case 5: 
      var $call3=_strdup(((STRING_TABLE.__str92)|0));
      var $6=$track_addr;
      var $style_format4=(($6+24)|0);
      HEAP32[(($style_format4)>>2)]=$call3;
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $7=$track_addr;
      var $style_format6=(($7+24)|0);
      var $8=HEAP32[(($style_format6)>>2)];
      var $call7=_strdup($8);
      $format=$call7;
      HEAP32[(($q)>>2)]=$call7;
      var $9=$track_addr;
      var $n_styles=(($9)|0);
      var $10=HEAP32[(($n_styles)>>2)];
      var $cmp8=(($10)|0)==0;
      if ($cmp8) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $11=$track_addr;
      var $call11=_ass_alloc_style($11);
      $sid10=$call11;
      var $12=$sid10;
      var $13=$track_addr;
      var $styles=(($13+16)|0);
      var $14=HEAP32[(($styles)>>2)];
      var $arrayidx=(($14+($12)*(120))|0);
      _set_default_style($arrayidx);
      var $15=$sid10;
      var $16=$track_addr;
      var $default_style=(($16+68)|0);
      HEAP32[(($default_style)>>2)]=$15;
      __label__ = 9; break;
    case 9: 
      var $17=$track_addr;
      var $library=(($17+76)|0);
      var $18=HEAP32[(($library)>>2)];
      var $19=$track_addr;
      var $20=$str_addr;
      _ass_msg($18, 6, ((STRING_TABLE.__str93)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$19,HEAP32[(((tempInt)+(4))>>2)]=$20,tempInt));
      var $21=$track_addr;
      var $call13=_ass_alloc_style($21);
      $sid=$call13;
      var $22=$track_addr;
      var $styles14=(($22+16)|0);
      var $23=HEAP32[(($styles14)>>2)];
      var $24=$sid;
      var $add_ptr=(($23+($24)*(120))|0);
      $style=$add_ptr;
      var $25=$style;
      $target=$25;
      var $26=$style;
      var $ScaleX=(($26+48)|0);
      (tempDoubleF64[0]=100,HEAP32[(($ScaleX)>>2)]=tempDoubleI32[0],HEAP32[((($ScaleX)+(4))>>2)]=tempDoubleI32[1]);
      var $27=$style;
      var $ScaleY=(($27+56)|0);
      (tempDoubleF64[0]=100,HEAP32[(($ScaleY)>>2)]=tempDoubleI32[0],HEAP32[((($ScaleY)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 10; break;
    case 10: 
      var $call15=_next_token($q);
      $tname=$call15;
      var $28=$tname;
      var $tobool16=(($28)|0)!=0;
      if ($tobool16) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      __label__ = 94; break;
    case 12: 
      var $call19=_next_token($p);
      $token=$call19;
      var $29=$token;
      var $tobool20=(($29)|0)!=0;
      if ($tobool20) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: 
      __label__ = 94; break;
    case 14: 
      var $30=$tname;
      var $call23=_strcasecmp($30, ((STRING_TABLE.__str65)|0));
      var $cmp24=(($call23)|0)==0;
      if ($cmp24) { __label__ = 15; break; } else { __label__ = 21; break; }
    case 15: 
      var $31=$target;
      var $Name=(($31)|0);
      var $32=HEAP32[(($Name)>>2)];
      var $cmp26=(($32)|0)!=0;
      if ($cmp26) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $33=$target;
      var $Name28=(($33)|0);
      var $34=HEAP32[(($Name28)>>2)];
      _free($34);
      __label__ = 17; break;
    case 17: 
      var $35=$token;
      var $call30=_strdup($35);
      var $36=$target;
      var $Name31=(($36)|0);
      HEAP32[(($Name31)>>2)]=$call30;
      var $37=$track_addr;
      var $library32=(($37+76)|0);
      var $38=HEAP32[(($library32)>>2)];
      var $39=$token;
      _ass_msg($38, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str65)|0),HEAP32[(((tempInt)+(4))>>2)]=$39,tempInt));
      var $40=$target;
      var $Name33=(($40)|0);
      var $41=HEAP32[(($Name33)>>2)];
      var $call34=_strcmp($41, ((STRING_TABLE.__str71)|0));
      var $cmp35=(($call34)|0)==0;
      if ($cmp35) { __label__ = 19; break; } else { __label__ = 18; break; }
    case 18: 
      var $42=$target;
      var $Name36=(($42)|0);
      var $43=HEAP32[(($Name36)>>2)];
      var $call37=_strcmp($43, ((STRING_TABLE.__str94)|0));
      var $cmp38=(($call37)|0)==0;
      if ($cmp38) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $44=$sid;
      var $45=$track_addr;
      var $default_style40=(($45+68)|0);
      HEAP32[(($default_style40)>>2)]=$44;
      __label__ = 20; break;
    case 20: 
      __label__ = 93; break;
    case 21: 
      var $46=$tname;
      var $call43=_strcasecmp($46, ((STRING_TABLE.__str9)|0));
      var $cmp44=(($call43)|0)==0;
      if ($cmp44) { __label__ = 22; break; } else { __label__ = 25; break; }
    case 22: 
      var $47=$target;
      var $FontName=(($47+4)|0);
      var $48=HEAP32[(($FontName)>>2)];
      var $cmp46=(($48)|0)!=0;
      if ($cmp46) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $49=$target;
      var $FontName48=(($49+4)|0);
      var $50=HEAP32[(($FontName48)>>2)];
      _free($50);
      __label__ = 24; break;
    case 24: 
      var $51=$token;
      var $call50=_strdup($51);
      var $52=$target;
      var $FontName51=(($52+4)|0);
      HEAP32[(($FontName51)>>2)]=$call50;
      var $53=$track_addr;
      var $library52=(($53+76)|0);
      var $54=HEAP32[(($library52)>>2)];
      var $55=$token;
      _ass_msg($54, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str9)|0),HEAP32[(((tempInt)+(4))>>2)]=$55,tempInt));
      __label__ = 92; break;
    case 25: 
      var $56=$tname;
      var $call54=_strcasecmp($56, ((STRING_TABLE.__str11)|0));
      var $cmp55=(($call54)|0)==0;
      if ($cmp55) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $57=$track_addr;
      var $library57=(($57+76)|0);
      var $58=HEAP32[(($library57)>>2)];
      var $59=$token;
      var $call58=_string2color($58, $59);
      var $60=$target;
      var $PrimaryColour=(($60+16)|0);
      HEAP32[(($PrimaryColour)>>2)]=$call58;
      var $61=$track_addr;
      var $library59=(($61+76)|0);
      var $62=HEAP32[(($library59)>>2)];
      var $63=$token;
      _ass_msg($62, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str11)|0),HEAP32[(((tempInt)+(4))>>2)]=$63,tempInt));
      __label__ = 91; break;
    case 27: 
      var $64=$tname;
      var $call61=_strcasecmp($64, ((STRING_TABLE.__str12)|0));
      var $cmp62=(($call61)|0)==0;
      if ($cmp62) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $65=$track_addr;
      var $library64=(($65+76)|0);
      var $66=HEAP32[(($library64)>>2)];
      var $67=$token;
      var $call65=_string2color($66, $67);
      var $68=$target;
      var $SecondaryColour=(($68+20)|0);
      HEAP32[(($SecondaryColour)>>2)]=$call65;
      var $69=$track_addr;
      var $library66=(($69+76)|0);
      var $70=HEAP32[(($library66)>>2)];
      var $71=$token;
      _ass_msg($70, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str12)|0),HEAP32[(((tempInt)+(4))>>2)]=$71,tempInt));
      __label__ = 90; break;
    case 29: 
      var $72=$tname;
      var $call68=_strcasecmp($72, ((STRING_TABLE.__str13)|0));
      var $cmp69=(($call68)|0)==0;
      if ($cmp69) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $73=$track_addr;
      var $library71=(($73+76)|0);
      var $74=HEAP32[(($library71)>>2)];
      var $75=$token;
      var $call72=_string2color($74, $75);
      var $76=$target;
      var $OutlineColour=(($76+24)|0);
      HEAP32[(($OutlineColour)>>2)]=$call72;
      var $77=$track_addr;
      var $library73=(($77+76)|0);
      var $78=HEAP32[(($library73)>>2)];
      var $79=$token;
      _ass_msg($78, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str13)|0),HEAP32[(((tempInt)+(4))>>2)]=$79,tempInt));
      __label__ = 89; break;
    case 31: 
      var $80=$tname;
      var $call75=_strcasecmp($80, ((STRING_TABLE.__str14)|0));
      var $cmp76=(($call75)|0)==0;
      if ($cmp76) { __label__ = 32; break; } else { __label__ = 35; break; }
    case 32: 
      var $81=$track_addr;
      var $library78=(($81+76)|0);
      var $82=HEAP32[(($library78)>>2)];
      var $83=$token;
      var $call79=_string2color($82, $83);
      var $84=$target;
      var $BackColour=(($84+28)|0);
      HEAP32[(($BackColour)>>2)]=$call79;
      var $85=$track_addr;
      var $library80=(($85+76)|0);
      var $86=HEAP32[(($library80)>>2)];
      var $87=$token;
      _ass_msg($86, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str14)|0),HEAP32[(((tempInt)+(4))>>2)]=$87,tempInt));
      var $88=$track_addr;
      var $track_type81=(($88+32)|0);
      var $89=HEAP32[(($track_type81)>>2)];
      var $cmp82=(($89)|0)==2;
      if ($cmp82) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      var $90=$target;
      var $BackColour84=(($90+28)|0);
      var $91=HEAP32[(($BackColour84)>>2)];
      var $92=$target;
      var $OutlineColour85=(($92+24)|0);
      HEAP32[(($OutlineColour85)>>2)]=$91;
      __label__ = 34; break;
    case 34: 
      __label__ = 88; break;
    case 35: 
      var $93=$tname;
      var $call88=_strcasecmp($93, ((STRING_TABLE.__str15)|0));
      var $cmp89=(($call88)|0)==0;
      if ($cmp89) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $94=$token;
      var $call91=_ass_strtod($94, 0);
      var $95=$target;
      var $FontSize=(($95+8)|0);
      (tempDoubleF64[0]=$call91,HEAP32[(($FontSize)>>2)]=tempDoubleI32[0],HEAP32[((($FontSize)+(4))>>2)]=tempDoubleI32[1]);
      var $96=$track_addr;
      var $library92=(($96+76)|0);
      var $97=HEAP32[(($library92)>>2)];
      var $98=$token;
      _ass_msg($97, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str15)|0),HEAP32[(((tempInt)+(4))>>2)]=$98,tempInt));
      __label__ = 87; break;
    case 37: 
      var $99=$tname;
      var $call94=_strcasecmp($99, ((STRING_TABLE.__str16)|0));
      var $cmp95=(($call94)|0)==0;
      if ($cmp95) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $100=$token;
      var $call97=_atoi($100);
      var $101=$target;
      var $Bold=(($101+32)|0);
      HEAP32[(($Bold)>>2)]=$call97;
      var $102=$track_addr;
      var $library98=(($102+76)|0);
      var $103=HEAP32[(($library98)>>2)];
      var $104=$token;
      _ass_msg($103, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str16)|0),HEAP32[(((tempInt)+(4))>>2)]=$104,tempInt));
      __label__ = 86; break;
    case 39: 
      var $105=$tname;
      var $call100=_strcasecmp($105, ((STRING_TABLE.__str17)|0));
      var $cmp101=(($call100)|0)==0;
      if ($cmp101) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: 
      var $106=$token;
      var $call103=_atoi($106);
      var $107=$target;
      var $Italic=(($107+36)|0);
      HEAP32[(($Italic)>>2)]=$call103;
      var $108=$track_addr;
      var $library104=(($108+76)|0);
      var $109=HEAP32[(($library104)>>2)];
      var $110=$token;
      _ass_msg($109, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str17)|0),HEAP32[(((tempInt)+(4))>>2)]=$110,tempInt));
      __label__ = 85; break;
    case 41: 
      var $111=$tname;
      var $call106=_strcasecmp($111, ((STRING_TABLE.__str18)|0));
      var $cmp107=(($call106)|0)==0;
      if ($cmp107) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      var $112=$token;
      var $call109=_atoi($112);
      var $113=$target;
      var $Underline=(($113+40)|0);
      HEAP32[(($Underline)>>2)]=$call109;
      var $114=$track_addr;
      var $library110=(($114+76)|0);
      var $115=HEAP32[(($library110)>>2)];
      var $116=$token;
      _ass_msg($115, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str18)|0),HEAP32[(((tempInt)+(4))>>2)]=$116,tempInt));
      __label__ = 84; break;
    case 43: 
      var $117=$tname;
      var $call112=_strcasecmp($117, ((STRING_TABLE.__str19)|0));
      var $cmp113=(($call112)|0)==0;
      if ($cmp113) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $118=$token;
      var $call115=_atoi($118);
      var $119=$target;
      var $StrikeOut=(($119+44)|0);
      HEAP32[(($StrikeOut)>>2)]=$call115;
      var $120=$track_addr;
      var $library116=(($120+76)|0);
      var $121=HEAP32[(($library116)>>2)];
      var $122=$token;
      _ass_msg($121, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str19)|0),HEAP32[(((tempInt)+(4))>>2)]=$122,tempInt));
      __label__ = 83; break;
    case 45: 
      var $123=$tname;
      var $call118=_strcasecmp($123, ((STRING_TABLE.__str20)|0));
      var $cmp119=(($call118)|0)==0;
      if ($cmp119) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      var $124=$token;
      var $call121=_ass_strtod($124, 0);
      var $125=$target;
      var $Spacing=(($125+64)|0);
      (tempDoubleF64[0]=$call121,HEAP32[(($Spacing)>>2)]=tempDoubleI32[0],HEAP32[((($Spacing)+(4))>>2)]=tempDoubleI32[1]);
      var $126=$track_addr;
      var $library122=(($126+76)|0);
      var $127=HEAP32[(($library122)>>2)];
      var $128=$token;
      _ass_msg($127, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str20)|0),HEAP32[(((tempInt)+(4))>>2)]=$128,tempInt));
      __label__ = 82; break;
    case 47: 
      var $129=$tname;
      var $call124=_strcasecmp($129, ((STRING_TABLE.__str21)|0));
      var $cmp125=(($call124)|0)==0;
      if ($cmp125) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $130=$token;
      var $call127=_atoi($130);
      var $131=$target;
      var $Angle=(($131+72)|0);
      HEAP32[(($Angle)>>2)]=$call127;
      var $132=$track_addr;
      var $library128=(($132+76)|0);
      var $133=HEAP32[(($library128)>>2)];
      var $134=$token;
      _ass_msg($133, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str21)|0),HEAP32[(((tempInt)+(4))>>2)]=$134,tempInt));
      __label__ = 81; break;
    case 49: 
      var $135=$tname;
      var $call130=_strcasecmp($135, ((STRING_TABLE.__str22)|0));
      var $cmp131=(($call130)|0)==0;
      if ($cmp131) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $136=$token;
      var $call133=_atoi($136);
      var $137=$target;
      var $BorderStyle=(($137+76)|0);
      HEAP32[(($BorderStyle)>>2)]=$call133;
      var $138=$track_addr;
      var $library134=(($138+76)|0);
      var $139=HEAP32[(($library134)>>2)];
      var $140=$token;
      _ass_msg($139, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str22)|0),HEAP32[(((tempInt)+(4))>>2)]=$140,tempInt));
      __label__ = 80; break;
    case 51: 
      var $141=$tname;
      var $call136=_strcasecmp($141, ((STRING_TABLE.__str23)|0));
      var $cmp137=(($call136)|0)==0;
      if ($cmp137) { __label__ = 52; break; } else { __label__ = 55; break; }
    case 52: 
      var $142=$token;
      var $call139=_atoi($142);
      var $143=$target;
      var $Alignment=(($143+96)|0);
      HEAP32[(($Alignment)>>2)]=$call139;
      var $144=$track_addr;
      var $library140=(($144+76)|0);
      var $145=HEAP32[(($library140)>>2)];
      var $146=$token;
      _ass_msg($145, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str23)|0),HEAP32[(((tempInt)+(4))>>2)]=$146,tempInt));
      var $147=$track_addr;
      var $track_type141=(($147+32)|0);
      var $148=HEAP32[(($track_type141)>>2)];
      var $cmp142=(($148)|0)==1;
      if ($cmp142) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      var $149=$target;
      var $Alignment144=(($149+96)|0);
      var $150=HEAP32[(($Alignment144)>>2)];
      var $call145=_numpad2align($150);
      var $151=$target;
      var $Alignment146=(($151+96)|0);
      HEAP32[(($Alignment146)>>2)]=$call145;
      __label__ = 54; break;
    case 54: 
      __label__ = 79; break;
    case 55: 
      var $152=$tname;
      var $call149=_strcasecmp($152, ((STRING_TABLE.__str24)|0));
      var $cmp150=(($call149)|0)==0;
      if ($cmp150) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      var $153=$token;
      var $call152=_atoi($153);
      var $154=$target;
      var $MarginL=(($154+100)|0);
      HEAP32[(($MarginL)>>2)]=$call152;
      var $155=$track_addr;
      var $library153=(($155+76)|0);
      var $156=HEAP32[(($library153)>>2)];
      var $157=$token;
      _ass_msg($156, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str24)|0),HEAP32[(((tempInt)+(4))>>2)]=$157,tempInt));
      __label__ = 78; break;
    case 57: 
      var $158=$tname;
      var $call155=_strcasecmp($158, ((STRING_TABLE.__str25)|0));
      var $cmp156=(($call155)|0)==0;
      if ($cmp156) { __label__ = 58; break; } else { __label__ = 59; break; }
    case 58: 
      var $159=$token;
      var $call158=_atoi($159);
      var $160=$target;
      var $MarginR=(($160+104)|0);
      HEAP32[(($MarginR)>>2)]=$call158;
      var $161=$track_addr;
      var $library159=(($161+76)|0);
      var $162=HEAP32[(($library159)>>2)];
      var $163=$token;
      _ass_msg($162, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str25)|0),HEAP32[(((tempInt)+(4))>>2)]=$163,tempInt));
      __label__ = 77; break;
    case 59: 
      var $164=$tname;
      var $call161=_strcasecmp($164, ((STRING_TABLE.__str26)|0));
      var $cmp162=(($call161)|0)==0;
      if ($cmp162) { __label__ = 60; break; } else { __label__ = 61; break; }
    case 60: 
      var $165=$token;
      var $call164=_atoi($165);
      var $166=$target;
      var $MarginV=(($166+108)|0);
      HEAP32[(($MarginV)>>2)]=$call164;
      var $167=$track_addr;
      var $library165=(($167+76)|0);
      var $168=HEAP32[(($library165)>>2)];
      var $169=$token;
      _ass_msg($168, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str26)|0),HEAP32[(((tempInt)+(4))>>2)]=$169,tempInt));
      __label__ = 76; break;
    case 61: 
      var $170=$tname;
      var $call167=_strcasecmp($170, ((STRING_TABLE.__str27)|0));
      var $cmp168=(($call167)|0)==0;
      if ($cmp168) { __label__ = 62; break; } else { __label__ = 63; break; }
    case 62: 
      var $171=$token;
      var $call170=_atoi($171);
      var $172=$target;
      var $Encoding=(($172+112)|0);
      HEAP32[(($Encoding)>>2)]=$call170;
      var $173=$track_addr;
      var $library171=(($173+76)|0);
      var $174=HEAP32[(($library171)>>2)];
      var $175=$token;
      _ass_msg($174, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str27)|0),HEAP32[(((tempInt)+(4))>>2)]=$175,tempInt));
      __label__ = 75; break;
    case 63: 
      var $176=$tname;
      var $call173=_strcasecmp($176, ((STRING_TABLE.__str28)|0));
      var $cmp174=(($call173)|0)==0;
      if ($cmp174) { __label__ = 64; break; } else { __label__ = 65; break; }
    case 64: 
      var $177=$token;
      var $call176=_ass_strtod($177, 0);
      var $178=$target;
      var $ScaleX177=(($178+48)|0);
      (tempDoubleF64[0]=$call176,HEAP32[(($ScaleX177)>>2)]=tempDoubleI32[0],HEAP32[((($ScaleX177)+(4))>>2)]=tempDoubleI32[1]);
      var $179=$track_addr;
      var $library178=(($179+76)|0);
      var $180=HEAP32[(($library178)>>2)];
      var $181=$token;
      _ass_msg($180, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str28)|0),HEAP32[(((tempInt)+(4))>>2)]=$181,tempInt));
      __label__ = 74; break;
    case 65: 
      var $182=$tname;
      var $call180=_strcasecmp($182, ((STRING_TABLE.__str29)|0));
      var $cmp181=(($call180)|0)==0;
      if ($cmp181) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: 
      var $183=$token;
      var $call183=_ass_strtod($183, 0);
      var $184=$target;
      var $ScaleY184=(($184+56)|0);
      (tempDoubleF64[0]=$call183,HEAP32[(($ScaleY184)>>2)]=tempDoubleI32[0],HEAP32[((($ScaleY184)+(4))>>2)]=tempDoubleI32[1]);
      var $185=$track_addr;
      var $library185=(($185+76)|0);
      var $186=HEAP32[(($library185)>>2)];
      var $187=$token;
      _ass_msg($186, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str29)|0),HEAP32[(((tempInt)+(4))>>2)]=$187,tempInt));
      __label__ = 73; break;
    case 67: 
      var $188=$tname;
      var $call187=_strcasecmp($188, ((STRING_TABLE.__str30)|0));
      var $cmp188=(($call187)|0)==0;
      if ($cmp188) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $189=$token;
      var $call190=_ass_strtod($189, 0);
      var $190=$target;
      var $Outline=(($190+80)|0);
      (tempDoubleF64[0]=$call190,HEAP32[(($Outline)>>2)]=tempDoubleI32[0],HEAP32[((($Outline)+(4))>>2)]=tempDoubleI32[1]);
      var $191=$track_addr;
      var $library191=(($191+76)|0);
      var $192=HEAP32[(($library191)>>2)];
      var $193=$token;
      _ass_msg($192, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str30)|0),HEAP32[(((tempInt)+(4))>>2)]=$193,tempInt));
      __label__ = 72; break;
    case 69: 
      var $194=$tname;
      var $call193=_strcasecmp($194, ((STRING_TABLE.__str31)|0));
      var $cmp194=(($call193)|0)==0;
      if ($cmp194) { __label__ = 70; break; } else { __label__ = 71; break; }
    case 70: 
      var $195=$token;
      var $call196=_ass_strtod($195, 0);
      var $196=$target;
      var $Shadow=(($196+88)|0);
      (tempDoubleF64[0]=$call196,HEAP32[(($Shadow)>>2)]=tempDoubleI32[0],HEAP32[((($Shadow)+(4))>>2)]=tempDoubleI32[1]);
      var $197=$track_addr;
      var $library197=(($197+76)|0);
      var $198=HEAP32[(($library197)>>2)];
      var $199=$token;
      _ass_msg($198, 7, ((STRING_TABLE.__str10)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str31)|0),HEAP32[(((tempInt)+(4))>>2)]=$199,tempInt));
      __label__ = 71; break;
    case 71: 
      __label__ = 72; break;
    case 72: 
      __label__ = 73; break;
    case 73: 
      __label__ = 74; break;
    case 74: 
      __label__ = 75; break;
    case 75: 
      __label__ = 76; break;
    case 76: 
      __label__ = 77; break;
    case 77: 
      __label__ = 78; break;
    case 78: 
      __label__ = 79; break;
    case 79: 
      __label__ = 80; break;
    case 80: 
      __label__ = 81; break;
    case 81: 
      __label__ = 82; break;
    case 82: 
      __label__ = 83; break;
    case 83: 
      __label__ = 84; break;
    case 84: 
      __label__ = 85; break;
    case 85: 
      __label__ = 86; break;
    case 86: 
      __label__ = 87; break;
    case 87: 
      __label__ = 88; break;
    case 88: 
      __label__ = 89; break;
    case 89: 
      __label__ = 90; break;
    case 90: 
      __label__ = 91; break;
    case 91: 
      __label__ = 92; break;
    case 92: 
      __label__ = 93; break;
    case 93: 
      __label__ = 10; break;
    case 94: 
      var $200=$style;
      var $ScaleX221=(($200+48)|0);
      var $201=(tempDoubleI32[0]=HEAP32[(($ScaleX221)>>2)],tempDoubleI32[1]=HEAP32[((($ScaleX221)+(4))>>2)],tempDoubleF64[0]);
      var $div=($201)/(100);
      (tempDoubleF64[0]=$div,HEAP32[(($ScaleX221)>>2)]=tempDoubleI32[0],HEAP32[((($ScaleX221)+(4))>>2)]=tempDoubleI32[1]);
      var $202=$style;
      var $ScaleY222=(($202+56)|0);
      var $203=(tempDoubleI32[0]=HEAP32[(($ScaleY222)>>2)],tempDoubleI32[1]=HEAP32[((($ScaleY222)+(4))>>2)],tempDoubleF64[0]);
      var $div223=($203)/(100);
      (tempDoubleF64[0]=$div223,HEAP32[(($ScaleY222)>>2)]=tempDoubleI32[0],HEAP32[((($ScaleY222)+(4))>>2)]=tempDoubleI32[1]);
      var $204=$style;
      var $Bold224=(($204+32)|0);
      var $205=HEAP32[(($Bold224)>>2)];
      var $tobool225=(($205)|0)!=0;
      var $lnot=$tobool225 ^ 1;
      var $lnot226=$lnot ^ 1;
      var $lnot_ext=(($lnot226)&1);
      var $206=$style;
      var $Bold227=(($206+32)|0);
      HEAP32[(($Bold227)>>2)]=$lnot_ext;
      var $207=$style;
      var $Italic228=(($207+36)|0);
      var $208=HEAP32[(($Italic228)>>2)];
      var $tobool229=(($208)|0)!=0;
      var $lnot230=$tobool229 ^ 1;
      var $lnot232=$lnot230 ^ 1;
      var $lnot_ext233=(($lnot232)&1);
      var $209=$style;
      var $Italic234=(($209+36)|0);
      HEAP32[(($Italic234)>>2)]=$lnot_ext233;
      var $210=$style;
      var $Underline235=(($210+40)|0);
      var $211=HEAP32[(($Underline235)>>2)];
      var $tobool236=(($211)|0)!=0;
      var $lnot237=$tobool236 ^ 1;
      var $lnot239=$lnot237 ^ 1;
      var $lnot_ext240=(($lnot239)&1);
      var $212=$style;
      var $Underline241=(($212+40)|0);
      HEAP32[(($Underline241)>>2)]=$lnot_ext240;
      var $213=$style;
      var $Name242=(($213)|0);
      var $214=HEAP32[(($Name242)>>2)];
      var $tobool243=(($214)|0)!=0;
      if ($tobool243) { __label__ = 96; break; } else { __label__ = 95; break; }
    case 95: 
      var $call245=_strdup(((STRING_TABLE.__str71)|0));
      var $215=$style;
      var $Name246=(($215)|0);
      HEAP32[(($Name246)>>2)]=$call245;
      __label__ = 96; break;
    case 96: 
      var $216=$style;
      var $FontName248=(($216+4)|0);
      var $217=HEAP32[(($FontName248)>>2)];
      var $tobool249=(($217)|0)!=0;
      if ($tobool249) { __label__ = 98; break; } else { __label__ = 97; break; }
    case 97: 
      var $call251=_strdup(((STRING_TABLE.__str72)|0));
      var $218=$style;
      var $FontName252=(($218+4)|0);
      HEAP32[(($FontName252)>>2)]=$call251;
      __label__ = 98; break;
    case 98: 
      var $219=$format;
      _free($219);
      STACKTOP = __stackBase__;
      return 0;
    default: assert(0, "bad label: " + __label__);
  }
}
_process_style["X"]=1;

function _ass_cache_create($hash_func, $compare_func, $destruct_func, $size_func, $key_size, $value_size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $hash_func_addr;
      var $compare_func_addr;
      var $destruct_func_addr;
      var $size_func_addr;
      var $key_size_addr;
      var $value_size_addr;
      var $cache;
      $hash_func_addr=$hash_func;
      $compare_func_addr=$compare_func;
      $destruct_func_addr=$destruct_func;
      $size_func_addr=$size_func;
      $key_size_addr=$key_size;
      $value_size_addr=$value_size;
      var $call=_calloc(1, 48);
      var $0=$call;
      $cache=$0;
      var $1=$cache;
      var $buckets=(($1)|0);
      HEAP32[(($buckets)>>2)]=65535;
      var $2=$cache;
      var $hash_func1=(($2+8)|0);
      HEAP32[(($hash_func1)>>2)]=2;
      var $3=$cache;
      var $compare_func2=(($3+16)|0);
      HEAP32[(($compare_func2)>>2)]=4;
      var $4=$cache;
      var $destruct_func3=(($4+20)|0);
      HEAP32[(($destruct_func3)>>2)]=6;
      var $5=$size_func_addr;
      var $6=$cache;
      var $size_func4=(($6+12)|0);
      HEAP32[(($size_func4)>>2)]=$5;
      var $7=$hash_func_addr;
      var $tobool=(($7)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $8=$hash_func_addr;
      var $9=$cache;
      var $hash_func5=(($9+8)|0);
      HEAP32[(($hash_func5)>>2)]=$8;
      __label__ = 4; break;
    case 4: 
      var $10=$compare_func_addr;
      var $tobool6=(($10)|0)!=0;
      if ($tobool6) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $11=$compare_func_addr;
      var $12=$cache;
      var $compare_func8=(($12+16)|0);
      HEAP32[(($compare_func8)>>2)]=$11;
      __label__ = 6; break;
    case 6: 
      var $13=$destruct_func_addr;
      var $tobool10=(($13)|0)!=0;
      if ($tobool10) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $14=$destruct_func_addr;
      var $15=$cache;
      var $destruct_func12=(($15+20)|0);
      HEAP32[(($destruct_func12)>>2)]=$14;
      __label__ = 8; break;
    case 8: 
      var $16=$key_size_addr;
      var $17=$cache;
      var $key_size14=(($17+24)|0);
      HEAP32[(($key_size14)>>2)]=$16;
      var $18=$value_size_addr;
      var $19=$cache;
      var $value_size15=(($19+28)|0);
      HEAP32[(($value_size15)>>2)]=$18;
      var $20=$cache;
      var $buckets16=(($20)|0);
      var $21=HEAP32[(($buckets16)>>2)];
      var $call17=_calloc($21, 4);
      var $22=$call17;
      var $23=$cache;
      var $map=(($23+4)|0);
      HEAP32[(($map)>>2)]=$22;
      var $24=$cache;
      ;
      return $24;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_cache_create["X"]=1;

function _hash_simple($key, $key_size) {
  ;
  var __label__;

  var $key_addr;
  var $key_size_addr;
  $key_addr=$key;
  $key_size_addr=$key_size;
  var $0=$key_addr;
  var $1=$key_size_addr;
  var $call=_fnv_32a_buf($0, $1, -2128831035);
  ;
  return $call;
}


function _compare_simple($a, $b, $key_size) {
  ;
  var __label__;

  var $a_addr;
  var $b_addr;
  var $key_size_addr;
  $a_addr=$a;
  $b_addr=$b;
  $key_size_addr=$key_size;
  var $0=$a_addr;
  var $1=$b_addr;
  var $2=$key_size_addr;
  var $call=_memcmp($0, $1, $2);
  var $cmp=(($call)|0)==0;
  var $conv=(($cmp)&1);
  ;
  return $conv;
}


function _destruct_simple($key, $value) {
  ;
  var __label__;

  var $key_addr;
  var $value_addr;
  $key_addr=$key;
  $value_addr=$value;
  var $0=$key_addr;
  _free($0);
  var $1=$value_addr;
  _free($1);
  ;
  return;
}


function _ass_cache_stats($cache, $size, $hits, $misses, $count) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $cache_addr;
      var $size_addr;
      var $hits_addr;
      var $misses_addr;
      var $count_addr;
      $cache_addr=$cache;
      $size_addr=$size;
      $hits_addr=$hits;
      $misses_addr=$misses;
      $count_addr=$count;
      var $0=$size_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $1=$cache_addr;
      var $cache_size=(($1+32)|0);
      var $2=HEAP32[(($cache_size)>>2)];
      var $3=$size_addr;
      HEAP32[(($3)>>2)]=$2;
      __label__ = 4; break;
    case 4: 
      var $4=$hits_addr;
      var $tobool1=(($4)|0)!=0;
      if ($tobool1) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $5=$cache_addr;
      var $hits3=(($5+36)|0);
      var $6=HEAP32[(($hits3)>>2)];
      var $7=$hits_addr;
      HEAP32[(($7)>>2)]=$6;
      __label__ = 6; break;
    case 6: 
      var $8=$misses_addr;
      var $tobool5=(($8)|0)!=0;
      if ($tobool5) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $9=$cache_addr;
      var $misses7=(($9+40)|0);
      var $10=HEAP32[(($misses7)>>2)];
      var $11=$misses_addr;
      HEAP32[(($11)>>2)]=$10;
      __label__ = 8; break;
    case 8: 
      var $12=$count_addr;
      var $tobool9=(($12)|0)!=0;
      if ($tobool9) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $13=$cache_addr;
      var $items=(($13+44)|0);
      var $14=HEAP32[(($items)>>2)];
      var $15=$count_addr;
      HEAP32[(($15)>>2)]=$14;
      __label__ = 10; break;
    case 10: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _glyph_metrics_compare($key1, $key2, $key_size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $key1_addr;
      var $key2_addr;
      var $key_size_addr;
      var $a;
      var $b;
      $key1_addr=$key1;
      $key2_addr=$key2;
      $key_size_addr=$key_size;
      var $0=$key1_addr;
      var $1=$0;
      $a=$1;
      var $2=$key2_addr;
      var $3=$2;
      $b=$3;
      var $4=$a;
      var $font=(($4)|0);
      var $5=HEAP32[(($font)>>2)];
      var $6=$b;
      var $font1=(($6)|0);
      var $7=HEAP32[(($font1)>>2)];
      var $cmp=(($5)|0)==(($7)|0);
      if ($cmp) { __label__ = 3; break; } else { var $28 = 0;__label__ = 9; break; }
    case 3: 
      var $8=$a;
      var $size=(($8+4)|0);
      var $9=(tempDoubleI32[0]=HEAP32[(($size)>>2)],tempDoubleI32[1]=HEAP32[((($size)+(4))>>2)],tempDoubleF64[0]);
      var $10=$b;
      var $size2=(($10+4)|0);
      var $11=(tempDoubleI32[0]=HEAP32[(($size2)>>2)],tempDoubleI32[1]=HEAP32[((($size2)+(4))>>2)],tempDoubleF64[0]);
      var $cmp3=$9 == $11;
      if ($cmp3) { __label__ = 4; break; } else { var $28 = 0;__label__ = 9; break; }
    case 4: 
      var $12=$a;
      var $face_index=(($12+12)|0);
      var $13=HEAP32[(($face_index)>>2)];
      var $14=$b;
      var $face_index5=(($14+12)|0);
      var $15=HEAP32[(($face_index5)>>2)];
      var $cmp6=(($13)|0)==(($15)|0);
      if ($cmp6) { __label__ = 5; break; } else { var $28 = 0;__label__ = 9; break; }
    case 5: 
      var $16=$a;
      var $glyph_index=(($16+16)|0);
      var $17=HEAP32[(($glyph_index)>>2)];
      var $18=$b;
      var $glyph_index8=(($18+16)|0);
      var $19=HEAP32[(($glyph_index8)>>2)];
      var $cmp9=(($17)|0)==(($19)|0);
      if ($cmp9) { __label__ = 6; break; } else { var $28 = 0;__label__ = 9; break; }
    case 6: 
      var $20=$a;
      var $scale_x=(($20+20)|0);
      var $21=HEAP32[(($scale_x)>>2)];
      var $22=$b;
      var $scale_x11=(($22+20)|0);
      var $23=HEAP32[(($scale_x11)>>2)];
      var $cmp12=(($21)|0)==(($23)|0);
      if ($cmp12) { __label__ = 7; break; } else { var $28 = 0;__label__ = 9; break; }
    case 7: 
      var $24=$a;
      var $scale_y=(($24+24)|0);
      var $25=HEAP32[(($scale_y)>>2)];
      var $26=$b;
      var $scale_y14=(($26+24)|0);
      var $27=HEAP32[(($scale_y14)>>2)];
      var $cmp15=(($25)|0)==(($27)|0);
      if ($cmp15) { __label__ = 8; break; } else { var $28 = 0;__label__ = 9; break; }
    case 8: 
      var $28 = 1;__label__ = 9; break;
    case 9: 
      var $28;
      var $land_ext=(($28)&1);
      ;
      return $land_ext;
    default: assert(0, "bad label: " + __label__);
  }
}
_glyph_metrics_compare["X"]=1;

function _ass_cache_put($cache, $key, $value) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $cache_addr;
      var $key_addr;
      var $value_addr;
      var $bucket;
      var $item;
      $cache_addr=$cache;
      $key_addr=$key;
      $value_addr=$value;
      var $0=$cache_addr;
      var $hash_func=(($0+8)|0);
      var $1=HEAP32[(($hash_func)>>2)];
      var $2=$key_addr;
      var $3=$cache_addr;
      var $key_size=(($3+24)|0);
      var $4=HEAP32[(($key_size)>>2)];
      var $call=FUNCTION_TABLE[$1]($2, $4);
      var $5=$cache_addr;
      var $buckets=(($5)|0);
      var $6=HEAPU32[(($buckets)>>2)];
      var $rem=((($call)>>>0))%((($6)>>>0));
      $bucket=$rem;
      var $7=$bucket;
      var $8=$cache_addr;
      var $map=(($8+4)|0);
      var $9=HEAP32[(($map)>>2)];
      var $arrayidx=(($9+($7<<2))|0);
      $item=$arrayidx;
      __label__ = 3; break;
    case 3: 
      var $10=$item;
      var $11=HEAP32[(($10)>>2)];
      var $tobool=(($11)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $12=$item;
      var $13=HEAP32[(($12)>>2)];
      var $next=(($13+8)|0);
      $item=$next;
      __label__ = 3; break;
    case 5: 
      var $call1=_calloc(1, 12);
      var $14=$call1;
      var $15=$item;
      HEAP32[(($15)>>2)]=$14;
      var $16=$cache_addr;
      var $key_size2=(($16+24)|0);
      var $17=HEAP32[(($key_size2)>>2)];
      var $call3=_malloc($17);
      var $18=$item;
      var $19=HEAP32[(($18)>>2)];
      var $key4=(($19)|0);
      HEAP32[(($key4)>>2)]=$call3;
      var $20=$cache_addr;
      var $value_size=(($20+28)|0);
      var $21=HEAP32[(($value_size)>>2)];
      var $call5=_malloc($21);
      var $22=$item;
      var $23=HEAP32[(($22)>>2)];
      var $value6=(($23+4)|0);
      HEAP32[(($value6)>>2)]=$call5;
      var $24=$item;
      var $25=HEAP32[(($24)>>2)];
      var $key7=(($25)|0);
      var $26=HEAP32[(($key7)>>2)];
      var $27=$key_addr;
      var $28=$cache_addr;
      var $key_size8=(($28+24)|0);
      var $29=HEAP32[(($key_size8)>>2)];
      assert($29 % 1 === 0, 'memcpy given ' + $29 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($26, $27, $29, 1);
      var $30=$item;
      var $31=HEAP32[(($30)>>2)];
      var $value9=(($31+4)|0);
      var $32=HEAP32[(($value9)>>2)];
      var $33=$value_addr;
      var $34=$cache_addr;
      var $value_size10=(($34+28)|0);
      var $35=HEAP32[(($value_size10)>>2)];
      assert($35 % 1 === 0, 'memcpy given ' + $35 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($32, $33, $35, 1);
      var $36=$cache_addr;
      var $items=(($36+44)|0);
      var $37=HEAP32[(($items)>>2)];
      var $inc=((($37)+(1))|0);
      HEAP32[(($items)>>2)]=$inc;
      var $38=$cache_addr;
      var $size_func=(($38+12)|0);
      var $39=HEAP32[(($size_func)>>2)];
      var $tobool11=(($39)|0)!=0;
      if ($tobool11) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $40=$cache_addr;
      var $size_func12=(($40+12)|0);
      var $41=HEAP32[(($size_func12)>>2)];
      var $42=$value_addr;
      var $43=$cache_addr;
      var $value_size13=(($43+28)|0);
      var $44=HEAP32[(($value_size13)>>2)];
      var $call14=FUNCTION_TABLE[$41]($42, $44);
      var $45=$cache_addr;
      var $cache_size=(($45+32)|0);
      var $46=HEAP32[(($cache_size)>>2)];
      var $add=((($46)+($call14))|0);
      HEAP32[(($cache_size)>>2)]=$add;
      __label__ = 8; break;
    case 7: 
      var $47=$cache_addr;
      var $cache_size15=(($47+32)|0);
      var $48=HEAP32[(($cache_size15)>>2)];
      var $inc16=((($48)+(1))|0);
      HEAP32[(($cache_size15)>>2)]=$inc16;
      __label__ = 8; break;
    case 8: 
      var $49=$item;
      var $50=HEAP32[(($49)>>2)];
      var $value17=(($50+4)|0);
      var $51=HEAP32[(($value17)>>2)];
      ;
      return $51;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_cache_put["X"]=1;

function _ass_cache_get($cache, $key) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $cache_addr;
      var $key_addr;
      var $bucket;
      var $item;
      $cache_addr=$cache;
      $key_addr=$key;
      var $0=$cache_addr;
      var $hash_func=(($0+8)|0);
      var $1=HEAP32[(($hash_func)>>2)];
      var $2=$key_addr;
      var $3=$cache_addr;
      var $key_size=(($3+24)|0);
      var $4=HEAP32[(($key_size)>>2)];
      var $call=FUNCTION_TABLE[$1]($2, $4);
      var $5=$cache_addr;
      var $buckets=(($5)|0);
      var $6=HEAPU32[(($buckets)>>2)];
      var $rem=((($call)>>>0))%((($6)>>>0));
      $bucket=$rem;
      var $7=$bucket;
      var $8=$cache_addr;
      var $map=(($8+4)|0);
      var $9=HEAP32[(($map)>>2)];
      var $arrayidx=(($9+($7<<2))|0);
      var $10=HEAP32[(($arrayidx)>>2)];
      $item=$10;
      __label__ = 3; break;
    case 3: 
      var $11=$item;
      var $tobool=(($11)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $12=$cache_addr;
      var $compare_func=(($12+16)|0);
      var $13=HEAP32[(($compare_func)>>2)];
      var $14=$key_addr;
      var $15=$item;
      var $key1=(($15)|0);
      var $16=HEAP32[(($key1)>>2)];
      var $17=$cache_addr;
      var $key_size2=(($17+24)|0);
      var $18=HEAP32[(($key_size2)>>2)];
      var $call3=FUNCTION_TABLE[$13]($14, $16, $18);
      var $tobool4=(($call3)|0)!=0;
      if ($tobool4) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $19=$cache_addr;
      var $hits=(($19+36)|0);
      var $20=HEAP32[(($hits)>>2)];
      var $inc=((($20)+(1))|0);
      HEAP32[(($hits)>>2)]=$inc;
      var $21=$item;
      var $value=(($21+4)|0);
      var $22=HEAP32[(($value)>>2)];
      $retval=$22;
      __label__ = 8; break;
    case 6: 
      var $23=$item;
      var $next=(($23+8)|0);
      var $24=HEAP32[(($next)>>2)];
      $item=$24;
      __label__ = 3; break;
    case 7: 
      var $25=$cache_addr;
      var $misses=(($25+40)|0);
      var $26=HEAP32[(($misses)>>2)];
      var $inc5=((($26)+(1))|0);
      HEAP32[(($misses)>>2)]=$inc5;
      $retval=0;
      __label__ = 8; break;
    case 8: 
      var $27=$retval;
      ;
      return $27;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_cache_get["X"]=1;

function _ass_cache_empty($cache, $max_size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $cache_addr;
      var $max_size_addr;
      var $i;
      var $item;
      var $next;
      $cache_addr=$cache;
      $max_size_addr=$max_size;
      var $0=$cache_addr;
      var $cache_size=(($0+32)|0);
      var $1=HEAPU32[(($cache_size)>>2)];
      var $2=$max_size_addr;
      var $cmp=(($1)>>>0) < (($2)>>>0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=0;
      __label__ = 12; break;
    case 4: 
      $i=0;
      __label__ = 5; break;
    case 5: 
      var $3=$i;
      var $4=$cache_addr;
      var $buckets=(($4)|0);
      var $5=HEAPU32[(($buckets)>>2)];
      var $cmp1=(($3)>>>0) < (($5)>>>0);
      if ($cmp1) { __label__ = 6; break; } else { __label__ = 11; break; }
    case 6: 
      var $6=$i;
      var $7=$cache_addr;
      var $map=(($7+4)|0);
      var $8=HEAP32[(($map)>>2)];
      var $arrayidx=(($8+($6<<2))|0);
      var $9=HEAP32[(($arrayidx)>>2)];
      $item=$9;
      __label__ = 7; break;
    case 7: 
      var $10=$item;
      var $tobool=(($10)|0)!=0;
      if ($tobool) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $11=$item;
      var $next2=(($11+8)|0);
      var $12=HEAP32[(($next2)>>2)];
      $next=$12;
      var $13=$cache_addr;
      var $destruct_func=(($13+20)|0);
      var $14=HEAP32[(($destruct_func)>>2)];
      var $15=$item;
      var $key=(($15)|0);
      var $16=HEAP32[(($key)>>2)];
      var $17=$item;
      var $value=(($17+4)|0);
      var $18=HEAP32[(($value)>>2)];
      FUNCTION_TABLE[$14]($16, $18);
      var $19=$item;
      var $20=$19;
      _free($20);
      var $21=$next;
      $item=$21;
      __label__ = 7; break;
    case 9: 
      var $22=$i;
      var $23=$cache_addr;
      var $map3=(($23+4)|0);
      var $24=HEAP32[(($map3)>>2)];
      var $arrayidx4=(($24+($22<<2))|0);
      HEAP32[(($arrayidx4)>>2)]=0;
      __label__ = 10; break;
    case 10: 
      var $25=$i;
      var $inc=((($25)+(1))|0);
      $i=$inc;
      __label__ = 5; break;
    case 11: 
      var $26=$cache_addr;
      var $cache_size5=(($26+32)|0);
      HEAP32[(($cache_size5)>>2)]=0;
      var $27=$cache_addr;
      var $misses=(($27+40)|0);
      HEAP32[(($misses)>>2)]=0;
      var $28=$cache_addr;
      var $hits=(($28+36)|0);
      HEAP32[(($hits)>>2)]=0;
      var $29=$cache_addr;
      var $items=(($29+44)|0);
      HEAP32[(($items)>>2)]=0;
      $retval=1;
      __label__ = 12; break;
    case 12: 
      var $30=$retval;
      ;
      return $30;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_cache_empty["X"]=1;

function _ass_cache_done($cache) {
  ;
  var __label__;

  var $cache_addr;
  $cache_addr=$cache;
  var $0=$cache_addr;
  var $call=_ass_cache_empty($0, 0);
  var $1=$cache_addr;
  var $map=(($1+4)|0);
  var $2=HEAP32[(($map)>>2)];
  var $3=$2;
  _free($3);
  var $4=$cache_addr;
  var $5=$4;
  _free($5);
  ;
  return;
}


function _ass_font_cache_create() {
  ;
  var __label__;

  var $call=_ass_cache_create(8, 10, 12, 0, 20, 108);
  ;
  return $call;
}


function _font_hash($buf, $len) {
  ;
  var __label__;

  var $buf_addr;
  var $len_addr;
  var $desc;
  var $hval;
  $buf_addr=$buf;
  $len_addr=$len;
  var $0=$buf_addr;
  var $1=$0;
  $desc=$1;
  var $2=$desc;
  var $family=(($2)|0);
  var $3=HEAP32[(($family)>>2)];
  var $call=_fnv_32a_str($3, -2128831035);
  $hval=$call;
  var $4=$desc;
  var $bold=(($4+4)|0);
  var $5=$bold;
  var $6=$hval;
  var $call1=_fnv_32a_buf($5, 4, $6);
  $hval=$call1;
  var $7=$desc;
  var $italic=(($7+8)|0);
  var $8=$italic;
  var $9=$hval;
  var $call2=_fnv_32a_buf($8, 4, $9);
  $hval=$call2;
  var $10=$desc;
  var $treat_family_as_pattern=(($10+12)|0);
  var $11=$treat_family_as_pattern;
  var $12=$hval;
  var $call3=_fnv_32a_buf($11, 4, $12);
  $hval=$call3;
  var $13=$desc;
  var $vertical=(($13+16)|0);
  var $14=$vertical;
  var $15=$hval;
  var $call4=_fnv_32a_buf($14, 4, $15);
  $hval=$call4;
  var $16=$hval;
  ;
  return $16;
}


function _font_compare($key1, $key2, $key_size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $key1_addr;
      var $key2_addr;
      var $key_size_addr;
      var $a;
      var $b;
      $key1_addr=$key1;
      $key2_addr=$key2;
      $key_size_addr=$key_size;
      var $0=$key1_addr;
      var $1=$0;
      $a=$1;
      var $2=$key2_addr;
      var $3=$2;
      $b=$3;
      var $4=$a;
      var $family=(($4)|0);
      var $5=HEAP32[(($family)>>2)];
      var $6=$b;
      var $family1=(($6)|0);
      var $7=HEAP32[(($family1)>>2)];
      var $call=_strcmp($5, $7);
      var $cmp=(($call)|0)!=0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=0;
      __label__ = 13; break;
    case 4: 
      var $8=$a;
      var $bold=(($8+4)|0);
      var $9=HEAP32[(($bold)>>2)];
      var $10=$b;
      var $bold2=(($10+4)|0);
      var $11=HEAP32[(($bold2)>>2)];
      var $cmp3=(($9)|0)!=(($11)|0);
      if ($cmp3) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $retval=0;
      __label__ = 13; break;
    case 6: 
      var $12=$a;
      var $italic=(($12+8)|0);
      var $13=HEAP32[(($italic)>>2)];
      var $14=$b;
      var $italic6=(($14+8)|0);
      var $15=HEAP32[(($italic6)>>2)];
      var $cmp7=(($13)|0)!=(($15)|0);
      if ($cmp7) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $retval=0;
      __label__ = 13; break;
    case 8: 
      var $16=$a;
      var $treat_family_as_pattern=(($16+12)|0);
      var $17=HEAP32[(($treat_family_as_pattern)>>2)];
      var $18=$b;
      var $treat_family_as_pattern10=(($18+12)|0);
      var $19=HEAP32[(($treat_family_as_pattern10)>>2)];
      var $cmp11=(($17)|0)!=(($19)|0);
      if ($cmp11) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $retval=0;
      __label__ = 13; break;
    case 10: 
      var $20=$a;
      var $vertical=(($20+16)|0);
      var $21=HEAP32[(($vertical)>>2)];
      var $22=$b;
      var $vertical14=(($22+16)|0);
      var $23=HEAP32[(($vertical14)>>2)];
      var $cmp15=(($21)|0)!=(($23)|0);
      if ($cmp15) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      $retval=0;
      __label__ = 13; break;
    case 12: 
      $retval=1;
      __label__ = 13; break;
    case 13: 
      var $24=$retval;
      ;
      return $24;
    default: assert(0, "bad label: " + __label__);
  }
}
_font_compare["X"]=1;

function _font_destruct($key, $value) {
  ;
  var __label__;

  var $key_addr;
  var $value_addr;
  $key_addr=$key;
  $value_addr=$value;
  var $0=$value_addr;
  var $1=$0;
  _ass_font_free($1);
  var $2=$key_addr;
  _free($2);
  ;
  return;
}


function _ass_outline_cache_create() {
  ;
  var __label__;

  var $call=_ass_cache_create(14, 16, 18, 0, 56, 44);
  ;
  return $call;
}


function _outline_hash($key, $key_size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $key_addr;
      var $key_size_addr;
      var $k;
      $key_addr=$key;
      $key_size_addr=$key_size;
      var $0=$key_addr;
      var $1=$0;
      $k=$1;
      var $2=$k;
      var $type=(($2)|0);
      var $3=HEAP32[(($type)>>2)];
      if ((($3)|0) == 0) {
        __label__ = 3; break;
      }
      else if ((($3)|0) == 1) {
        __label__ = 4; break;
      }
      else {
      __label__ = 5; break;
      }
      
    case 3: 
      var $4=$k;
      var $u=(($4+4)|0);
      var $5=$u;
      var $6=$key_size_addr;
      var $call=_glyph_hash($5, $6);
      $retval=$call;
      __label__ = 6; break;
    case 4: 
      var $7=$k;
      var $u2=(($7+4)|0);
      var $8=$u2;
      var $9=$key_size_addr;
      var $call3=_drawing_hash($8, $9);
      $retval=$call3;
      __label__ = 6; break;
    case 5: 
      $retval=0;
      __label__ = 6; break;
    case 6: 
      var $10=$retval;
      ;
      return $10;
    default: assert(0, "bad label: " + __label__);
  }
}


function _outline_compare($a, $b, $key_size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $a_addr;
      var $b_addr;
      var $key_size_addr;
      var $ak;
      var $bk;
      $a_addr=$a;
      $b_addr=$b;
      $key_size_addr=$key_size;
      var $0=$a_addr;
      var $1=$0;
      $ak=$1;
      var $2=$b_addr;
      var $3=$2;
      $bk=$3;
      var $4=$ak;
      var $type=(($4)|0);
      var $5=HEAP32[(($type)>>2)];
      var $6=$bk;
      var $type1=(($6)|0);
      var $7=HEAP32[(($type1)>>2)];
      var $cmp=(($5)|0)!=(($7)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=0;
      __label__ = 8; break;
    case 4: 
      var $8=$ak;
      var $type2=(($8)|0);
      var $9=HEAP32[(($type2)>>2)];
      if ((($9)|0) == 0) {
        __label__ = 5; break;
      }
      else if ((($9)|0) == 1) {
        __label__ = 6; break;
      }
      else {
      __label__ = 7; break;
      }
      
    case 5: 
      var $10=$ak;
      var $u=(($10+4)|0);
      var $11=$u;
      var $12=$bk;
      var $u3=(($12+4)|0);
      var $13=$u3;
      var $14=$key_size_addr;
      var $call=_glyph_compare($11, $13, $14);
      $retval=$call;
      __label__ = 8; break;
    case 6: 
      var $15=$ak;
      var $u5=(($15+4)|0);
      var $16=$u5;
      var $17=$bk;
      var $u6=(($17+4)|0);
      var $18=$u6;
      var $19=$key_size_addr;
      var $call7=_drawing_compare($16, $18, $19);
      $retval=$call7;
      __label__ = 8; break;
    case 7: 
      $retval=0;
      __label__ = 8; break;
    case 8: 
      var $20=$retval;
      ;
      return $20;
    default: assert(0, "bad label: " + __label__);
  }
}
_outline_compare["X"]=1;

function _outline_destruct($key, $value) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $key_addr;
      var $value_addr;
      var $v;
      var $k;
      $key_addr=$key;
      $value_addr=$value;
      var $0=$value_addr;
      var $1=$0;
      $v=$1;
      var $2=$key_addr;
      var $3=$2;
      $k=$3;
      var $4=$v;
      var $outline=(($4+4)|0);
      var $5=HEAP32[(($outline)>>2)];
      var $tobool=(($5)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $6=$v;
      var $lib=(($6)|0);
      var $7=HEAP32[(($lib)>>2)];
      var $8=$v;
      var $outline1=(($8+4)|0);
      var $9=HEAP32[(($outline1)>>2)];
      _outline_free($7, $9);
      __label__ = 4; break;
    case 4: 
      var $10=$v;
      var $border=(($10+8)|0);
      var $11=HEAP32[(($border)>>2)];
      var $tobool2=(($11)|0)!=0;
      if ($tobool2) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $12=$v;
      var $lib4=(($12)|0);
      var $13=HEAP32[(($lib4)>>2)];
      var $14=$v;
      var $border5=(($14+8)|0);
      var $15=HEAP32[(($border5)>>2)];
      _outline_free($13, $15);
      __label__ = 6; break;
    case 6: 
      var $16=$k;
      var $type=(($16)|0);
      var $17=HEAP32[(($type)>>2)];
      var $cmp=(($17)|0)==1;
      if ($cmp) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $18=$k;
      var $u=(($18+4)|0);
      var $drawing=$u;
      var $text=(($drawing+32)|0);
      var $19=HEAP32[(($text)>>2)];
      _free($19);
      __label__ = 8; break;
    case 8: 
      var $20=$key_addr;
      _free($20);
      var $21=$value_addr;
      _free($21);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_outline_destruct["X"]=1;

function _ass_glyph_metrics_cache_create() {
  ;
  var __label__;

  var $call=_ass_cache_create(20, 22, 0, 0, 28, 32);
  ;
  return $call;
}


function _glyph_metrics_hash($buf, $len) {
  ;
  var __label__;

  var $buf_addr;
  var $len_addr;
  var $p;
  var $hval;
  $buf_addr=$buf;
  $len_addr=$len;
  var $0=$buf_addr;
  var $1=$0;
  $p=$1;
  $hval=-2128831035;
  var $2=$p;
  var $font=(($2)|0);
  var $3=$font;
  var $4=$hval;
  var $call=_fnv_32a_buf($3, 4, $4);
  $hval=$call;
  var $5=$p;
  var $size=(($5+4)|0);
  var $6=$size;
  var $7=$hval;
  var $call1=_fnv_32a_buf($6, 8, $7);
  $hval=$call1;
  var $8=$p;
  var $face_index=(($8+12)|0);
  var $9=$face_index;
  var $10=$hval;
  var $call2=_fnv_32a_buf($9, 4, $10);
  $hval=$call2;
  var $11=$p;
  var $glyph_index=(($11+16)|0);
  var $12=$glyph_index;
  var $13=$hval;
  var $call3=_fnv_32a_buf($12, 4, $13);
  $hval=$call3;
  var $14=$p;
  var $scale_x=(($14+20)|0);
  var $15=$scale_x;
  var $16=$hval;
  var $call4=_fnv_32a_buf($15, 4, $16);
  $hval=$call4;
  var $17=$p;
  var $scale_y=(($17+24)|0);
  var $18=$scale_y;
  var $19=$hval;
  var $call5=_fnv_32a_buf($18, 4, $19);
  $hval=$call5;
  var $20=$hval;
  ;
  return $20;
}


function _ass_bitmap_cache_create() {
  ;
  var __label__;

  var $call=_ass_cache_create(24, 26, 28, 30, 64, 12);
  ;
  return $call;
}


function _bitmap_hash($key, $key_size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $key_addr;
      var $key_size_addr;
      var $k;
      $key_addr=$key;
      $key_size_addr=$key_size;
      var $0=$key_addr;
      var $1=$0;
      $k=$1;
      var $2=$k;
      var $type=(($2)|0);
      var $3=HEAP32[(($type)>>2)];
      if ((($3)|0) == 0) {
        __label__ = 3; break;
      }
      else if ((($3)|0) == 1) {
        __label__ = 4; break;
      }
      else {
      __label__ = 5; break;
      }
      
    case 3: 
      var $4=$k;
      var $u=(($4+4)|0);
      var $5=$u;
      var $6=$key_size_addr;
      var $call=_outline_bitmap_hash($5, $6);
      $retval=$call;
      __label__ = 6; break;
    case 4: 
      var $7=$k;
      var $u2=(($7+4)|0);
      var $8=$u2;
      var $9=$key_size_addr;
      var $call3=_clip_bitmap_hash($8, $9);
      $retval=$call3;
      __label__ = 6; break;
    case 5: 
      $retval=0;
      __label__ = 6; break;
    case 6: 
      var $10=$retval;
      ;
      return $10;
    default: assert(0, "bad label: " + __label__);
  }
}


function _bitmap_size($value, $value_size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $value_addr;
      var $value_size_addr;
      var $val;
      $value_addr=$value;
      $value_size_addr=$value_size;
      var $0=$value_addr;
      var $1=$0;
      $val=$1;
      var $2=$val;
      var $bm_o=(($2+4)|0);
      var $3=HEAP32[(($bm_o)>>2)];
      var $tobool=(($3)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $4=$val;
      var $bm_o1=(($4+4)|0);
      var $5=HEAP32[(($bm_o1)>>2)];
      var $w=(($5+8)|0);
      var $6=HEAP32[(($w)>>2)];
      var $7=$val;
      var $bm_o2=(($7+4)|0);
      var $8=HEAP32[(($bm_o2)>>2)];
      var $h=(($8+12)|0);
      var $9=HEAP32[(($h)>>2)];
      var $mul=((($6)*($9))|0);
      var $mul3=((($mul)*(3))|0);
      $retval=$mul3;
      __label__ = 8; break;
    case 4: 
      var $10=$val;
      var $bm=(($10)|0);
      var $11=HEAP32[(($bm)>>2)];
      var $tobool4=(($11)|0)!=0;
      if ($tobool4) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $12=$val;
      var $bm6=(($12)|0);
      var $13=HEAP32[(($bm6)>>2)];
      var $w7=(($13+8)|0);
      var $14=HEAP32[(($w7)>>2)];
      var $15=$val;
      var $bm8=(($15)|0);
      var $16=HEAP32[(($bm8)>>2)];
      var $h9=(($16+12)|0);
      var $17=HEAP32[(($h9)>>2)];
      var $mul10=((($14)*($17))|0);
      var $mul11=((($mul10)*(3))|0);
      $retval=$mul11;
      __label__ = 8; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      $retval=0;
      __label__ = 8; break;
    case 8: 
      var $18=$retval;
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}
_bitmap_size["X"]=1;

function _composite_compare($key1, $key2, $key_size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $key1_addr;
      var $key2_addr;
      var $key_size_addr;
      var $a;
      var $b;
      $key1_addr=$key1;
      $key2_addr=$key2;
      $key_size_addr=$key_size;
      var $0=$key1_addr;
      var $1=$0;
      $a=$1;
      var $2=$key2_addr;
      var $3=$2;
      $b=$3;
      var $4=$a;
      var $aw=(($4)|0);
      var $5=HEAP32[(($aw)>>2)];
      var $6=$b;
      var $aw1=(($6)|0);
      var $7=HEAP32[(($aw1)>>2)];
      var $cmp=(($5)|0)==(($7)|0);
      if ($cmp) { __label__ = 3; break; } else { var $52 = 0;__label__ = 15; break; }
    case 3: 
      var $8=$a;
      var $ah=(($8+4)|0);
      var $9=HEAP32[(($ah)>>2)];
      var $10=$b;
      var $ah2=(($10+4)|0);
      var $11=HEAP32[(($ah2)>>2)];
      var $cmp3=(($9)|0)==(($11)|0);
      if ($cmp3) { __label__ = 4; break; } else { var $52 = 0;__label__ = 15; break; }
    case 4: 
      var $12=$a;
      var $bw=(($12+8)|0);
      var $13=HEAP32[(($bw)>>2)];
      var $14=$b;
      var $bw5=(($14+8)|0);
      var $15=HEAP32[(($bw5)>>2)];
      var $cmp6=(($13)|0)==(($15)|0);
      if ($cmp6) { __label__ = 5; break; } else { var $52 = 0;__label__ = 15; break; }
    case 5: 
      var $16=$a;
      var $bh=(($16+12)|0);
      var $17=HEAP32[(($bh)>>2)];
      var $18=$b;
      var $bh8=(($18+12)|0);
      var $19=HEAP32[(($bh8)>>2)];
      var $cmp9=(($17)|0)==(($19)|0);
      if ($cmp9) { __label__ = 6; break; } else { var $52 = 0;__label__ = 15; break; }
    case 6: 
      var $20=$a;
      var $ax=(($20+16)|0);
      var $21=HEAP32[(($ax)>>2)];
      var $22=$b;
      var $ax11=(($22+16)|0);
      var $23=HEAP32[(($ax11)>>2)];
      var $cmp12=(($21)|0)==(($23)|0);
      if ($cmp12) { __label__ = 7; break; } else { var $52 = 0;__label__ = 15; break; }
    case 7: 
      var $24=$a;
      var $ay=(($24+20)|0);
      var $25=HEAP32[(($ay)>>2)];
      var $26=$b;
      var $ay14=(($26+20)|0);
      var $27=HEAP32[(($ay14)>>2)];
      var $cmp15=(($25)|0)==(($27)|0);
      if ($cmp15) { __label__ = 8; break; } else { var $52 = 0;__label__ = 15; break; }
    case 8: 
      var $28=$a;
      var $bx=(($28+24)|0);
      var $29=HEAP32[(($bx)>>2)];
      var $30=$b;
      var $bx17=(($30+24)|0);
      var $31=HEAP32[(($bx17)>>2)];
      var $cmp18=(($29)|0)==(($31)|0);
      if ($cmp18) { __label__ = 9; break; } else { var $52 = 0;__label__ = 15; break; }
    case 9: 
      var $32=$a;
      var $by=(($32+28)|0);
      var $33=HEAP32[(($by)>>2)];
      var $34=$b;
      var $by20=(($34+28)|0);
      var $35=HEAP32[(($by20)>>2)];
      var $cmp21=(($33)|0)==(($35)|0);
      if ($cmp21) { __label__ = 10; break; } else { var $52 = 0;__label__ = 15; break; }
    case 10: 
      var $36=$a;
      var $as=(($36+32)|0);
      var $37=HEAP32[(($as)>>2)];
      var $38=$b;
      var $as23=(($38+32)|0);
      var $39=HEAP32[(($as23)>>2)];
      var $cmp24=(($37)|0)==(($39)|0);
      if ($cmp24) { __label__ = 11; break; } else { var $52 = 0;__label__ = 15; break; }
    case 11: 
      var $40=$a;
      var $bs=(($40+36)|0);
      var $41=HEAP32[(($bs)>>2)];
      var $42=$b;
      var $bs26=(($42+36)|0);
      var $43=HEAP32[(($bs26)>>2)];
      var $cmp27=(($41)|0)==(($43)|0);
      if ($cmp27) { __label__ = 12; break; } else { var $52 = 0;__label__ = 15; break; }
    case 12: 
      var $44=$a;
      var $a29=(($44+40)|0);
      var $45=HEAP32[(($a29)>>2)];
      var $46=$b;
      var $a30=(($46+40)|0);
      var $47=HEAP32[(($a30)>>2)];
      var $cmp31=(($45)|0)==(($47)|0);
      if ($cmp31) { __label__ = 13; break; } else { var $52 = 0;__label__ = 15; break; }
    case 13: 
      var $48=$a;
      var $b33=(($48+44)|0);
      var $49=HEAP32[(($b33)>>2)];
      var $50=$b;
      var $b34=(($50+44)|0);
      var $51=HEAP32[(($b34)>>2)];
      var $cmp35=(($49)|0)==(($51)|0);
      if ($cmp35) { __label__ = 14; break; } else { var $52 = 0;__label__ = 15; break; }
    case 14: 
      var $52 = 1;__label__ = 15; break;
    case 15: 
      var $52;
      var $land_ext=(($52)&1);
      ;
      return $land_ext;
    default: assert(0, "bad label: " + __label__);
  }
}
_composite_compare["X"]=1;

function _fnv_32a_buf($buf, $len, $hval) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $buf_addr;
      var $len_addr;
      var $hval_addr;
      var $bp;
      var $be;
      $buf_addr=$buf;
      $len_addr=$len;
      $hval_addr=$hval;
      var $0=$buf_addr;
      $bp=$0;
      var $1=$bp;
      var $2=$len_addr;
      var $add_ptr=(($1+$2)|0);
      $be=$add_ptr;
      __label__ = 3; break;
    case 3: 
      var $3=$bp;
      var $4=$be;
      var $cmp=(($3)>>>0) < (($4)>>>0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $5=$bp;
      var $incdec_ptr=(($5+1)|0);
      $bp=$incdec_ptr;
      var $6=HEAPU8[($5)];
      var $conv=(($6)&255);
      var $7=$hval_addr;
      var $xor=$7 ^ $conv;
      $hval_addr=$xor;
      var $8=$hval_addr;
      var $shl=$8 << 1;
      var $9=$hval_addr;
      var $shl1=$9 << 4;
      var $add=((($shl)+($shl1))|0);
      var $10=$hval_addr;
      var $shl2=$10 << 7;
      var $add3=((($add)+($shl2))|0);
      var $11=$hval_addr;
      var $shl4=$11 << 8;
      var $add5=((($add3)+($shl4))|0);
      var $12=$hval_addr;
      var $shl6=$12 << 24;
      var $add7=((($add5)+($shl6))|0);
      var $13=$hval_addr;
      var $add8=((($13)+($add7))|0);
      $hval_addr=$add8;
      __label__ = 3; break;
    case 5: 
      var $14=$hval_addr;
      ;
      return $14;
    default: assert(0, "bad label: " + __label__);
  }
}


function _outline_bitmap_compare($key1, $key2, $key_size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $key1_addr;
      var $key2_addr;
      var $key_size_addr;
      var $a;
      var $b;
      $key1_addr=$key1;
      $key2_addr=$key2;
      $key_size_addr=$key_size;
      var $0=$key1_addr;
      var $1=$0;
      $a=$1;
      var $2=$key2_addr;
      var $3=$2;
      $b=$3;
      var $4=$a;
      var $outline=(($4)|0);
      var $5=HEAP32[(($outline)>>2)];
      var $6=$b;
      var $outline1=(($6)|0);
      var $7=HEAP32[(($outline1)>>2)];
      var $cmp=(($5)|0)==(($7)|0);
      if ($cmp) { __label__ = 3; break; } else { var $60 = 0;__label__ = 17; break; }
    case 3: 
      var $8=$a;
      var $be=(($8+4)|0);
      var $9=HEAP8[($be)];
      var $conv=(($9 << 24) >> 24);
      var $10=$b;
      var $be2=(($10+4)|0);
      var $11=HEAP8[($be2)];
      var $conv3=(($11 << 24) >> 24);
      var $cmp4=(($conv)|0)==(($conv3)|0);
      if ($cmp4) { __label__ = 4; break; } else { var $60 = 0;__label__ = 17; break; }
    case 4: 
      var $12=$a;
      var $blur=(($12+8)|0);
      var $13=(tempDoubleI32[0]=HEAP32[(($blur)>>2)],tempDoubleI32[1]=HEAP32[((($blur)+(4))>>2)],tempDoubleF64[0]);
      var $14=$b;
      var $blur7=(($14+8)|0);
      var $15=(tempDoubleI32[0]=HEAP32[(($blur7)>>2)],tempDoubleI32[1]=HEAP32[((($blur7)+(4))>>2)],tempDoubleF64[0]);
      var $cmp8=$13 == $15;
      if ($cmp8) { __label__ = 5; break; } else { var $60 = 0;__label__ = 17; break; }
    case 5: 
      var $16=$a;
      var $frx=(($16+16)|0);
      var $17=HEAP32[(($frx)>>2)];
      var $18=$b;
      var $frx11=(($18+16)|0);
      var $19=HEAP32[(($frx11)>>2)];
      var $cmp12=(($17)|0)==(($19)|0);
      if ($cmp12) { __label__ = 6; break; } else { var $60 = 0;__label__ = 17; break; }
    case 6: 
      var $20=$a;
      var $fry=(($20+20)|0);
      var $21=HEAP32[(($fry)>>2)];
      var $22=$b;
      var $fry15=(($22+20)|0);
      var $23=HEAP32[(($fry15)>>2)];
      var $cmp16=(($21)|0)==(($23)|0);
      if ($cmp16) { __label__ = 7; break; } else { var $60 = 0;__label__ = 17; break; }
    case 7: 
      var $24=$a;
      var $frz=(($24+24)|0);
      var $25=HEAP32[(($frz)>>2)];
      var $26=$b;
      var $frz19=(($26+24)|0);
      var $27=HEAP32[(($frz19)>>2)];
      var $cmp20=(($25)|0)==(($27)|0);
      if ($cmp20) { __label__ = 8; break; } else { var $60 = 0;__label__ = 17; break; }
    case 8: 
      var $28=$a;
      var $fax=(($28+28)|0);
      var $29=HEAP32[(($fax)>>2)];
      var $30=$b;
      var $fax23=(($30+28)|0);
      var $31=HEAP32[(($fax23)>>2)];
      var $cmp24=(($29)|0)==(($31)|0);
      if ($cmp24) { __label__ = 9; break; } else { var $60 = 0;__label__ = 17; break; }
    case 9: 
      var $32=$a;
      var $fay=(($32+32)|0);
      var $33=HEAP32[(($fay)>>2)];
      var $34=$b;
      var $fay27=(($34+32)|0);
      var $35=HEAP32[(($fay27)>>2)];
      var $cmp28=(($33)|0)==(($35)|0);
      if ($cmp28) { __label__ = 10; break; } else { var $60 = 0;__label__ = 17; break; }
    case 10: 
      var $36=$a;
      var $shift_x=(($36+36)|0);
      var $37=HEAP32[(($shift_x)>>2)];
      var $38=$b;
      var $shift_x31=(($38+36)|0);
      var $39=HEAP32[(($shift_x31)>>2)];
      var $cmp32=(($37)|0)==(($39)|0);
      if ($cmp32) { __label__ = 11; break; } else { var $60 = 0;__label__ = 17; break; }
    case 11: 
      var $40=$a;
      var $shift_y=(($40+40)|0);
      var $41=HEAP32[(($shift_y)>>2)];
      var $42=$b;
      var $shift_y35=(($42+40)|0);
      var $43=HEAP32[(($shift_y35)>>2)];
      var $cmp36=(($41)|0)==(($43)|0);
      if ($cmp36) { __label__ = 12; break; } else { var $60 = 0;__label__ = 17; break; }
    case 12: 
      var $44=$a;
      var $advance=(($44+44)|0);
      var $x=(($advance)|0);
      var $45=HEAP32[(($x)>>2)];
      var $46=$b;
      var $advance39=(($46+44)|0);
      var $x40=(($advance39)|0);
      var $47=HEAP32[(($x40)>>2)];
      var $cmp41=(($45)|0)==(($47)|0);
      if ($cmp41) { __label__ = 13; break; } else { var $60 = 0;__label__ = 17; break; }
    case 13: 
      var $48=$a;
      var $advance44=(($48+44)|0);
      var $y=(($advance44+4)|0);
      var $49=HEAP32[(($y)>>2)];
      var $50=$b;
      var $advance45=(($50+44)|0);
      var $y46=(($advance45+4)|0);
      var $51=HEAP32[(($y46)>>2)];
      var $cmp47=(($49)|0)==(($51)|0);
      if ($cmp47) { __label__ = 14; break; } else { var $60 = 0;__label__ = 17; break; }
    case 14: 
      var $52=$a;
      var $shadow_offset=(($52+52)|0);
      var $x50=(($shadow_offset)|0);
      var $53=HEAP32[(($x50)>>2)];
      var $54=$b;
      var $shadow_offset51=(($54+52)|0);
      var $x52=(($shadow_offset51)|0);
      var $55=HEAP32[(($x52)>>2)];
      var $cmp53=(($53)|0)==(($55)|0);
      if ($cmp53) { __label__ = 15; break; } else { var $60 = 0;__label__ = 17; break; }
    case 15: 
      var $56=$a;
      var $shadow_offset56=(($56+52)|0);
      var $y57=(($shadow_offset56+4)|0);
      var $57=HEAP32[(($y57)>>2)];
      var $58=$b;
      var $shadow_offset58=(($58+52)|0);
      var $y59=(($shadow_offset58+4)|0);
      var $59=HEAP32[(($y59)>>2)];
      var $cmp60=(($57)|0)==(($59)|0);
      if ($cmp60) { __label__ = 16; break; } else { var $60 = 0;__label__ = 17; break; }
    case 16: 
      var $60 = 1;__label__ = 17; break;
    case 17: 
      var $60;
      var $land_ext=(($60)&1);
      ;
      return $land_ext;
    default: assert(0, "bad label: " + __label__);
  }
}
_outline_bitmap_compare["X"]=1;

function _fnv_32a_str($str, $hval) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $str_addr;
      var $hval_addr;
      var $s;
      $str_addr=$str;
      $hval_addr=$hval;
      var $0=$str_addr;
      $s=$0;
      __label__ = 3; break;
    case 3: 
      var $1=$s;
      var $2=HEAP8[($1)];
      var $tobool=(($2 << 24) >> 24)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $3=$s;
      var $incdec_ptr=(($3+1)|0);
      $s=$incdec_ptr;
      var $4=HEAPU8[($3)];
      var $conv=(($4)&255);
      var $5=$hval_addr;
      var $xor=$5 ^ $conv;
      $hval_addr=$xor;
      var $6=$hval_addr;
      var $shl=$6 << 1;
      var $7=$hval_addr;
      var $shl1=$7 << 4;
      var $add=((($shl)+($shl1))|0);
      var $8=$hval_addr;
      var $shl2=$8 << 7;
      var $add3=((($add)+($shl2))|0);
      var $9=$hval_addr;
      var $shl4=$9 << 8;
      var $add5=((($add3)+($shl4))|0);
      var $10=$hval_addr;
      var $shl6=$10 << 24;
      var $add7=((($add5)+($shl6))|0);
      var $11=$hval_addr;
      var $add8=((($11)+($add7))|0);
      $hval_addr=$add8;
      __label__ = 3; break;
    case 5: 
      var $12=$hval_addr;
      ;
      return $12;
    default: assert(0, "bad label: " + __label__);
  }
}


function _bitmap_compare($a, $b, $key_size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $a_addr;
      var $b_addr;
      var $key_size_addr;
      var $ak;
      var $bk;
      $a_addr=$a;
      $b_addr=$b;
      $key_size_addr=$key_size;
      var $0=$a_addr;
      var $1=$0;
      $ak=$1;
      var $2=$b_addr;
      var $3=$2;
      $bk=$3;
      var $4=$ak;
      var $type=(($4)|0);
      var $5=HEAP32[(($type)>>2)];
      var $6=$bk;
      var $type1=(($6)|0);
      var $7=HEAP32[(($type1)>>2)];
      var $cmp=(($5)|0)!=(($7)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=0;
      __label__ = 8; break;
    case 4: 
      var $8=$ak;
      var $type2=(($8)|0);
      var $9=HEAP32[(($type2)>>2)];
      if ((($9)|0) == 0) {
        __label__ = 5; break;
      }
      else if ((($9)|0) == 1) {
        __label__ = 6; break;
      }
      else {
      __label__ = 7; break;
      }
      
    case 5: 
      var $10=$ak;
      var $u=(($10+4)|0);
      var $11=$u;
      var $12=$bk;
      var $u3=(($12+4)|0);
      var $13=$u3;
      var $14=$key_size_addr;
      var $call=_outline_bitmap_compare($11, $13, $14);
      $retval=$call;
      __label__ = 8; break;
    case 6: 
      var $15=$ak;
      var $u5=(($15+4)|0);
      var $16=$u5;
      var $17=$bk;
      var $u6=(($17+4)|0);
      var $18=$u6;
      var $19=$key_size_addr;
      var $call7=_clip_bitmap_compare($16, $18, $19);
      $retval=$call7;
      __label__ = 8; break;
    case 7: 
      $retval=0;
      __label__ = 8; break;
    case 8: 
      var $20=$retval;
      ;
      return $20;
    default: assert(0, "bad label: " + __label__);
  }
}
_bitmap_compare["X"]=1;

function _bitmap_destruct($key, $value) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $key_addr;
      var $value_addr;
      var $v;
      var $k;
      $key_addr=$key;
      $value_addr=$value;
      var $0=$value_addr;
      var $1=$0;
      $v=$1;
      var $2=$key_addr;
      var $3=$2;
      $k=$3;
      var $4=$v;
      var $bm=(($4)|0);
      var $5=HEAP32[(($bm)>>2)];
      var $tobool=(($5)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $6=$v;
      var $bm1=(($6)|0);
      var $7=HEAP32[(($bm1)>>2)];
      _ass_free_bitmap($7);
      __label__ = 4; break;
    case 4: 
      var $8=$v;
      var $bm_o=(($8+4)|0);
      var $9=HEAP32[(($bm_o)>>2)];
      var $tobool2=(($9)|0)!=0;
      if ($tobool2) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $10=$v;
      var $bm_o4=(($10+4)|0);
      var $11=HEAP32[(($bm_o4)>>2)];
      _ass_free_bitmap($11);
      __label__ = 6; break;
    case 6: 
      var $12=$v;
      var $bm_s=(($12+8)|0);
      var $13=HEAP32[(($bm_s)>>2)];
      var $tobool6=(($13)|0)!=0;
      if ($tobool6) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $14=$v;
      var $bm_s8=(($14+8)|0);
      var $15=HEAP32[(($bm_s8)>>2)];
      _ass_free_bitmap($15);
      __label__ = 8; break;
    case 8: 
      var $16=$k;
      var $type=(($16)|0);
      var $17=HEAP32[(($type)>>2)];
      var $cmp=(($17)|0)==1;
      if ($cmp) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $18=$k;
      var $u=(($18+4)|0);
      var $clip=$u;
      var $text=(($clip)|0);
      var $19=HEAP32[(($text)>>2)];
      _free($19);
      __label__ = 10; break;
    case 10: 
      var $20=$key_addr;
      _free($20);
      var $21=$value_addr;
      _free($21);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_bitmap_destruct["X"]=1;

function _ass_composite_cache_create() {
  ;
  var __label__;

  var $call=_ass_cache_create(32, 34, 36, 0, 48, 8);
  ;
  return $call;
}


function _composite_hash($buf, $len) {
  ;
  var __label__;

  var $buf_addr;
  var $len_addr;
  var $p;
  var $hval;
  $buf_addr=$buf;
  $len_addr=$len;
  var $0=$buf_addr;
  var $1=$0;
  $p=$1;
  $hval=-2128831035;
  var $2=$p;
  var $aw=(($2)|0);
  var $3=$aw;
  var $4=$hval;
  var $call=_fnv_32a_buf($3, 4, $4);
  $hval=$call;
  var $5=$p;
  var $ah=(($5+4)|0);
  var $6=$ah;
  var $7=$hval;
  var $call1=_fnv_32a_buf($6, 4, $7);
  $hval=$call1;
  var $8=$p;
  var $bw=(($8+8)|0);
  var $9=$bw;
  var $10=$hval;
  var $call2=_fnv_32a_buf($9, 4, $10);
  $hval=$call2;
  var $11=$p;
  var $bh=(($11+12)|0);
  var $12=$bh;
  var $13=$hval;
  var $call3=_fnv_32a_buf($12, 4, $13);
  $hval=$call3;
  var $14=$p;
  var $ax=(($14+16)|0);
  var $15=$ax;
  var $16=$hval;
  var $call4=_fnv_32a_buf($15, 4, $16);
  $hval=$call4;
  var $17=$p;
  var $ay=(($17+20)|0);
  var $18=$ay;
  var $19=$hval;
  var $call5=_fnv_32a_buf($18, 4, $19);
  $hval=$call5;
  var $20=$p;
  var $bx=(($20+24)|0);
  var $21=$bx;
  var $22=$hval;
  var $call6=_fnv_32a_buf($21, 4, $22);
  $hval=$call6;
  var $23=$p;
  var $by=(($23+28)|0);
  var $24=$by;
  var $25=$hval;
  var $call7=_fnv_32a_buf($24, 4, $25);
  $hval=$call7;
  var $26=$p;
  var $as=(($26+32)|0);
  var $27=$as;
  var $28=$hval;
  var $call8=_fnv_32a_buf($27, 4, $28);
  $hval=$call8;
  var $29=$p;
  var $bs=(($29+36)|0);
  var $30=$bs;
  var $31=$hval;
  var $call9=_fnv_32a_buf($30, 4, $31);
  $hval=$call9;
  var $32=$p;
  var $a=(($32+40)|0);
  var $33=$a;
  var $34=$hval;
  var $call10=_fnv_32a_buf($33, 4, $34);
  $hval=$call10;
  var $35=$p;
  var $b=(($35+44)|0);
  var $36=$b;
  var $37=$hval;
  var $call11=_fnv_32a_buf($36, 4, $37);
  $hval=$call11;
  var $38=$hval;
  ;
  return $38;
}
_composite_hash["X"]=1;

function _composite_destruct($key, $value) {
  ;
  var __label__;

  var $key_addr;
  var $value_addr;
  var $v;
  $key_addr=$key;
  $value_addr=$value;
  var $0=$value_addr;
  var $1=$0;
  $v=$1;
  var $2=$v;
  var $a=(($2)|0);
  var $3=HEAP32[(($a)>>2)];
  _free($3);
  var $4=$v;
  var $b=(($4+4)|0);
  var $5=HEAP32[(($b)>>2)];
  _free($5);
  var $6=$key_addr;
  _free($6);
  var $7=$value_addr;
  _free($7);
  ;
  return;
}


function _clip_bitmap_compare($key1, $key2, $key_size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $key1_addr;
      var $key2_addr;
      var $key_size_addr;
      var $a;
      var $b;
      $key1_addr=$key1;
      $key2_addr=$key2;
      $key_size_addr=$key_size;
      var $0=$key1_addr;
      var $1=$0;
      $a=$1;
      var $2=$key2_addr;
      var $3=$2;
      $b=$3;
      var $4=$a;
      var $text=(($4)|0);
      var $5=HEAP32[(($text)>>2)];
      var $6=$b;
      var $text1=(($6)|0);
      var $7=HEAP32[(($text1)>>2)];
      var $call=_strcmp($5, $7);
      var $cmp=(($call)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { var $8 = 0;__label__ = 4; break; }
    case 3: 
      var $8 = 1;__label__ = 4; break;
    case 4: 
      var $8;
      var $land_ext=(($8)&1);
      ;
      return $land_ext;
    default: assert(0, "bad label: " + __label__);
  }
}


function _outline_bitmap_hash($buf, $len) {
  ;
  var __label__;

  var $buf_addr;
  var $len_addr;
  var $p;
  var $hval;
  $buf_addr=$buf;
  $len_addr=$len;
  var $0=$buf_addr;
  var $1=$0;
  $p=$1;
  $hval=-2128831035;
  var $2=$p;
  var $outline=(($2)|0);
  var $3=$outline;
  var $4=$hval;
  var $call=_fnv_32a_buf($3, 4, $4);
  $hval=$call;
  var $5=$p;
  var $be=(($5+4)|0);
  var $6=$hval;
  var $call1=_fnv_32a_buf($be, 1, $6);
  $hval=$call1;
  var $7=$p;
  var $blur=(($7+8)|0);
  var $8=$blur;
  var $9=$hval;
  var $call2=_fnv_32a_buf($8, 8, $9);
  $hval=$call2;
  var $10=$p;
  var $frx=(($10+16)|0);
  var $11=$frx;
  var $12=$hval;
  var $call3=_fnv_32a_buf($11, 4, $12);
  $hval=$call3;
  var $13=$p;
  var $fry=(($13+20)|0);
  var $14=$fry;
  var $15=$hval;
  var $call4=_fnv_32a_buf($14, 4, $15);
  $hval=$call4;
  var $16=$p;
  var $frz=(($16+24)|0);
  var $17=$frz;
  var $18=$hval;
  var $call5=_fnv_32a_buf($17, 4, $18);
  $hval=$call5;
  var $19=$p;
  var $fax=(($19+28)|0);
  var $20=$fax;
  var $21=$hval;
  var $call6=_fnv_32a_buf($20, 4, $21);
  $hval=$call6;
  var $22=$p;
  var $fay=(($22+32)|0);
  var $23=$fay;
  var $24=$hval;
  var $call7=_fnv_32a_buf($23, 4, $24);
  $hval=$call7;
  var $25=$p;
  var $shift_x=(($25+36)|0);
  var $26=$shift_x;
  var $27=$hval;
  var $call8=_fnv_32a_buf($26, 4, $27);
  $hval=$call8;
  var $28=$p;
  var $shift_y=(($28+40)|0);
  var $29=$shift_y;
  var $30=$hval;
  var $call9=_fnv_32a_buf($29, 4, $30);
  $hval=$call9;
  var $31=$p;
  var $advance=(($31+44)|0);
  var $x=(($advance)|0);
  var $32=$x;
  var $33=$hval;
  var $call10=_fnv_32a_buf($32, 4, $33);
  $hval=$call10;
  var $34=$p;
  var $advance11=(($34+44)|0);
  var $y=(($advance11+4)|0);
  var $35=$y;
  var $36=$hval;
  var $call12=_fnv_32a_buf($35, 4, $36);
  $hval=$call12;
  var $37=$p;
  var $shadow_offset=(($37+52)|0);
  var $x13=(($shadow_offset)|0);
  var $38=$x13;
  var $39=$hval;
  var $call14=_fnv_32a_buf($38, 4, $39);
  $hval=$call14;
  var $40=$p;
  var $shadow_offset15=(($40+52)|0);
  var $y16=(($shadow_offset15+4)|0);
  var $41=$y16;
  var $42=$hval;
  var $call17=_fnv_32a_buf($41, 4, $42);
  $hval=$call17;
  var $43=$hval;
  ;
  return $43;
}
_outline_bitmap_hash["X"]=1;

function _clip_bitmap_hash($buf, $len) {
  ;
  var __label__;

  var $buf_addr;
  var $len_addr;
  var $p;
  var $hval;
  $buf_addr=$buf;
  $len_addr=$len;
  var $0=$buf_addr;
  var $1=$0;
  $p=$1;
  $hval=-2128831035;
  var $2=$p;
  var $text=(($2)|0);
  var $3=HEAP32[(($text)>>2)];
  var $4=$hval;
  var $call=_fnv_32a_str($3, $4);
  $hval=$call;
  var $5=$hval;
  ;
  return $5;
}


function _double_to_d6($x) {
  ;
  var __label__;

  var $x_addr;
  $x_addr=$x;
  var $0=$x_addr;
  var $mul=($0)*(64);
  var $conv=(($mul)&-1);
  ;
  return $conv;
}


function _glyph_compare($key1, $key2, $key_size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $key1_addr;
      var $key2_addr;
      var $key_size_addr;
      var $a;
      var $b;
      $key1_addr=$key1;
      $key2_addr=$key2;
      $key_size_addr=$key_size;
      var $0=$key1_addr;
      var $1=$0;
      $a=$1;
      var $2=$key2_addr;
      var $3=$2;
      $b=$3;
      var $4=$a;
      var $font=(($4)|0);
      var $5=HEAP32[(($font)>>2)];
      var $6=$b;
      var $font1=(($6)|0);
      var $7=HEAP32[(($font1)>>2)];
      var $cmp=(($5)|0)==(($7)|0);
      if ($cmp) { __label__ = 3; break; } else { var $52 = 0;__label__ = 15; break; }
    case 3: 
      var $8=$a;
      var $size=(($8+4)|0);
      var $9=(tempDoubleI32[0]=HEAP32[(($size)>>2)],tempDoubleI32[1]=HEAP32[((($size)+(4))>>2)],tempDoubleF64[0]);
      var $10=$b;
      var $size2=(($10+4)|0);
      var $11=(tempDoubleI32[0]=HEAP32[(($size2)>>2)],tempDoubleI32[1]=HEAP32[((($size2)+(4))>>2)],tempDoubleF64[0]);
      var $cmp3=$9 == $11;
      if ($cmp3) { __label__ = 4; break; } else { var $52 = 0;__label__ = 15; break; }
    case 4: 
      var $12=$a;
      var $face_index=(($12+12)|0);
      var $13=HEAP32[(($face_index)>>2)];
      var $14=$b;
      var $face_index5=(($14+12)|0);
      var $15=HEAP32[(($face_index5)>>2)];
      var $cmp6=(($13)|0)==(($15)|0);
      if ($cmp6) { __label__ = 5; break; } else { var $52 = 0;__label__ = 15; break; }
    case 5: 
      var $16=$a;
      var $glyph_index=(($16+16)|0);
      var $17=HEAP32[(($glyph_index)>>2)];
      var $18=$b;
      var $glyph_index8=(($18+16)|0);
      var $19=HEAP32[(($glyph_index8)>>2)];
      var $cmp9=(($17)|0)==(($19)|0);
      if ($cmp9) { __label__ = 6; break; } else { var $52 = 0;__label__ = 15; break; }
    case 6: 
      var $20=$a;
      var $bold=(($20+20)|0);
      var $21=HEAP32[(($bold)>>2)];
      var $22=$b;
      var $bold11=(($22+20)|0);
      var $23=HEAP32[(($bold11)>>2)];
      var $cmp12=(($21)|0)==(($23)|0);
      if ($cmp12) { __label__ = 7; break; } else { var $52 = 0;__label__ = 15; break; }
    case 7: 
      var $24=$a;
      var $italic=(($24+24)|0);
      var $25=HEAP32[(($italic)>>2)];
      var $26=$b;
      var $italic14=(($26+24)|0);
      var $27=HEAP32[(($italic14)>>2)];
      var $cmp15=(($25)|0)==(($27)|0);
      if ($cmp15) { __label__ = 8; break; } else { var $52 = 0;__label__ = 15; break; }
    case 8: 
      var $28=$a;
      var $scale_x=(($28+28)|0);
      var $29=HEAP32[(($scale_x)>>2)];
      var $30=$b;
      var $scale_x17=(($30+28)|0);
      var $31=HEAP32[(($scale_x17)>>2)];
      var $cmp18=(($29)|0)==(($31)|0);
      if ($cmp18) { __label__ = 9; break; } else { var $52 = 0;__label__ = 15; break; }
    case 9: 
      var $32=$a;
      var $scale_y=(($32+32)|0);
      var $33=HEAP32[(($scale_y)>>2)];
      var $34=$b;
      var $scale_y20=(($34+32)|0);
      var $35=HEAP32[(($scale_y20)>>2)];
      var $cmp21=(($33)|0)==(($35)|0);
      if ($cmp21) { __label__ = 10; break; } else { var $52 = 0;__label__ = 15; break; }
    case 10: 
      var $36=$a;
      var $outline=(($36+36)|0);
      var $x=(($outline)|0);
      var $37=HEAP32[(($x)>>2)];
      var $38=$b;
      var $outline23=(($38+36)|0);
      var $x24=(($outline23)|0);
      var $39=HEAP32[(($x24)>>2)];
      var $cmp25=(($37)|0)==(($39)|0);
      if ($cmp25) { __label__ = 11; break; } else { var $52 = 0;__label__ = 15; break; }
    case 11: 
      var $40=$a;
      var $outline27=(($40+36)|0);
      var $y=(($outline27+4)|0);
      var $41=HEAP32[(($y)>>2)];
      var $42=$b;
      var $outline28=(($42+36)|0);
      var $y29=(($outline28+4)|0);
      var $43=HEAP32[(($y29)>>2)];
      var $cmp30=(($41)|0)==(($43)|0);
      if ($cmp30) { __label__ = 12; break; } else { var $52 = 0;__label__ = 15; break; }
    case 12: 
      var $44=$a;
      var $flags=(($44+44)|0);
      var $45=HEAP32[(($flags)>>2)];
      var $46=$b;
      var $flags32=(($46+44)|0);
      var $47=HEAP32[(($flags32)>>2)];
      var $cmp33=(($45)|0)==(($47)|0);
      if ($cmp33) { __label__ = 13; break; } else { var $52 = 0;__label__ = 15; break; }
    case 13: 
      var $48=$a;
      var $border_style=(($48+48)|0);
      var $49=HEAP32[(($border_style)>>2)];
      var $50=$b;
      var $border_style35=(($50+48)|0);
      var $51=HEAP32[(($border_style35)>>2)];
      var $cmp36=(($49)|0)==(($51)|0);
      if ($cmp36) { __label__ = 14; break; } else { var $52 = 0;__label__ = 15; break; }
    case 14: 
      var $52 = 1;__label__ = 15; break;
    case 15: 
      var $52;
      var $land_ext=(($52)&1);
      ;
      return $land_ext;
    default: assert(0, "bad label: " + __label__);
  }
}
_glyph_compare["X"]=1;

function _ass_font_set_transform($font, $scale_x, $scale_y, $v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $font_addr;
      var $scale_x_addr;
      var $scale_y_addr;
      var $v_addr;
      $font_addr=$font;
      $scale_x_addr=$scale_x;
      $scale_y_addr=$scale_y;
      $v_addr=$v;
      var $0=$scale_x_addr;
      var $1=$font_addr;
      var $scale_x1=(($1+76)|0);
      (tempDoubleF64[0]=$0,HEAP32[(($scale_x1)>>2)]=tempDoubleI32[0],HEAP32[((($scale_x1)+(4))>>2)]=tempDoubleI32[1]);
      var $2=$scale_y_addr;
      var $3=$font_addr;
      var $scale_y2=(($3+84)|0);
      (tempDoubleF64[0]=$2,HEAP32[(($scale_y2)>>2)]=tempDoubleI32[0],HEAP32[((($scale_y2)+(4))>>2)]=tempDoubleI32[1]);
      var $4=$v_addr;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $5=$v_addr;
      var $x=(($5)|0);
      var $6=HEAP32[(($x)>>2)];
      var $7=$font_addr;
      var $v3=(($7+92)|0);
      var $x4=(($v3)|0);
      HEAP32[(($x4)>>2)]=$6;
      var $8=$v_addr;
      var $y=(($8+4)|0);
      var $9=HEAP32[(($y)>>2)];
      var $10=$font_addr;
      var $v5=(($10+92)|0);
      var $y6=(($v5+4)|0);
      HEAP32[(($y6)>>2)]=$9;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _drawing_compare($key1, $key2, $key_size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $key1_addr;
      var $key2_addr;
      var $key_size_addr;
      var $a;
      var $b;
      $key1_addr=$key1;
      $key2_addr=$key2;
      $key_size_addr=$key_size;
      var $0=$key1_addr;
      var $1=$0;
      $a=$1;
      var $2=$key2_addr;
      var $3=$2;
      $b=$3;
      var $4=$a;
      var $scale_x=(($4)|0);
      var $5=HEAP32[(($scale_x)>>2)];
      var $6=$b;
      var $scale_x1=(($6)|0);
      var $7=HEAP32[(($scale_x1)>>2)];
      var $cmp=(($5)|0)==(($7)|0);
      if ($cmp) { __label__ = 3; break; } else { var $40 = 0;__label__ = 12; break; }
    case 3: 
      var $8=$a;
      var $scale_y=(($8+4)|0);
      var $9=HEAP32[(($scale_y)>>2)];
      var $10=$b;
      var $scale_y2=(($10+4)|0);
      var $11=HEAP32[(($scale_y2)>>2)];
      var $cmp3=(($9)|0)==(($11)|0);
      if ($cmp3) { __label__ = 4; break; } else { var $40 = 0;__label__ = 12; break; }
    case 4: 
      var $12=$a;
      var $pbo=(($12+8)|0);
      var $13=HEAP32[(($pbo)>>2)];
      var $14=$b;
      var $pbo5=(($14+8)|0);
      var $15=HEAP32[(($pbo5)>>2)];
      var $cmp6=(($13)|0)==(($15)|0);
      if ($cmp6) { __label__ = 5; break; } else { var $40 = 0;__label__ = 12; break; }
    case 5: 
      var $16=$a;
      var $outline=(($16+12)|0);
      var $x=(($outline)|0);
      var $17=HEAP32[(($x)>>2)];
      var $18=$b;
      var $outline8=(($18+12)|0);
      var $x9=(($outline8)|0);
      var $19=HEAP32[(($x9)>>2)];
      var $cmp10=(($17)|0)==(($19)|0);
      if ($cmp10) { __label__ = 6; break; } else { var $40 = 0;__label__ = 12; break; }
    case 6: 
      var $20=$a;
      var $outline12=(($20+12)|0);
      var $y=(($outline12+4)|0);
      var $21=HEAP32[(($y)>>2)];
      var $22=$b;
      var $outline13=(($22+12)|0);
      var $y14=(($outline13+4)|0);
      var $23=HEAP32[(($y14)>>2)];
      var $cmp15=(($21)|0)==(($23)|0);
      if ($cmp15) { __label__ = 7; break; } else { var $40 = 0;__label__ = 12; break; }
    case 7: 
      var $24=$a;
      var $border_style=(($24+20)|0);
      var $25=HEAP32[(($border_style)>>2)];
      var $26=$b;
      var $border_style17=(($26+20)|0);
      var $27=HEAP32[(($border_style17)>>2)];
      var $cmp18=(($25)|0)==(($27)|0);
      if ($cmp18) { __label__ = 8; break; } else { var $40 = 0;__label__ = 12; break; }
    case 8: 
      var $28=$a;
      var $scale=(($28+24)|0);
      var $29=HEAP32[(($scale)>>2)];
      var $30=$b;
      var $scale20=(($30+24)|0);
      var $31=HEAP32[(($scale20)>>2)];
      var $cmp21=(($29)|0)==(($31)|0);
      if ($cmp21) { __label__ = 9; break; } else { var $40 = 0;__label__ = 12; break; }
    case 9: 
      var $32=$a;
      var $hash=(($32+28)|0);
      var $33=HEAP32[(($hash)>>2)];
      var $34=$b;
      var $hash23=(($34+28)|0);
      var $35=HEAP32[(($hash23)>>2)];
      var $cmp24=(($33)|0)==(($35)|0);
      if ($cmp24) { __label__ = 10; break; } else { var $40 = 0;__label__ = 12; break; }
    case 10: 
      var $36=$a;
      var $text=(($36+32)|0);
      var $37=HEAP32[(($text)>>2)];
      var $38=$b;
      var $text26=(($38+32)|0);
      var $39=HEAP32[(($text26)>>2)];
      var $call=_strcmp($37, $39);
      var $cmp27=(($call)|0)==0;
      if ($cmp27) { __label__ = 11; break; } else { var $40 = 0;__label__ = 12; break; }
    case 11: 
      var $40 = 1;__label__ = 12; break;
    case 12: 
      var $40;
      var $land_ext=(($40)&1);
      ;
      return $land_ext;
    default: assert(0, "bad label: " + __label__);
  }
}
_drawing_compare["X"]=1;

function _glyph_hash($buf, $len) {
  ;
  var __label__;

  var $buf_addr;
  var $len_addr;
  var $p;
  var $hval;
  $buf_addr=$buf;
  $len_addr=$len;
  var $0=$buf_addr;
  var $1=$0;
  $p=$1;
  $hval=-2128831035;
  var $2=$p;
  var $font=(($2)|0);
  var $3=$font;
  var $4=$hval;
  var $call=_fnv_32a_buf($3, 4, $4);
  $hval=$call;
  var $5=$p;
  var $size=(($5+4)|0);
  var $6=$size;
  var $7=$hval;
  var $call1=_fnv_32a_buf($6, 8, $7);
  $hval=$call1;
  var $8=$p;
  var $face_index=(($8+12)|0);
  var $9=$face_index;
  var $10=$hval;
  var $call2=_fnv_32a_buf($9, 4, $10);
  $hval=$call2;
  var $11=$p;
  var $glyph_index=(($11+16)|0);
  var $12=$glyph_index;
  var $13=$hval;
  var $call3=_fnv_32a_buf($12, 4, $13);
  $hval=$call3;
  var $14=$p;
  var $bold=(($14+20)|0);
  var $15=$bold;
  var $16=$hval;
  var $call4=_fnv_32a_buf($15, 4, $16);
  $hval=$call4;
  var $17=$p;
  var $italic=(($17+24)|0);
  var $18=$italic;
  var $19=$hval;
  var $call5=_fnv_32a_buf($18, 4, $19);
  $hval=$call5;
  var $20=$p;
  var $scale_x=(($20+28)|0);
  var $21=$scale_x;
  var $22=$hval;
  var $call6=_fnv_32a_buf($21, 4, $22);
  $hval=$call6;
  var $23=$p;
  var $scale_y=(($23+32)|0);
  var $24=$scale_y;
  var $25=$hval;
  var $call7=_fnv_32a_buf($24, 4, $25);
  $hval=$call7;
  var $26=$p;
  var $outline=(($26+36)|0);
  var $x=(($outline)|0);
  var $27=$x;
  var $28=$hval;
  var $call8=_fnv_32a_buf($27, 4, $28);
  $hval=$call8;
  var $29=$p;
  var $outline9=(($29+36)|0);
  var $y=(($outline9+4)|0);
  var $30=$y;
  var $31=$hval;
  var $call10=_fnv_32a_buf($30, 4, $31);
  $hval=$call10;
  var $32=$p;
  var $flags=(($32+44)|0);
  var $33=$flags;
  var $34=$hval;
  var $call11=_fnv_32a_buf($33, 4, $34);
  $hval=$call11;
  var $35=$p;
  var $border_style=(($35+48)|0);
  var $36=$border_style;
  var $37=$hval;
  var $call12=_fnv_32a_buf($36, 4, $37);
  $hval=$call12;
  var $38=$hval;
  ;
  return $38;
}
_glyph_hash["X"]=1;

function _drawing_hash($buf, $len) {
  ;
  var __label__;

  var $buf_addr;
  var $len_addr;
  var $p;
  var $hval;
  $buf_addr=$buf;
  $len_addr=$len;
  var $0=$buf_addr;
  var $1=$0;
  $p=$1;
  $hval=-2128831035;
  var $2=$p;
  var $scale_x=(($2)|0);
  var $3=$scale_x;
  var $4=$hval;
  var $call=_fnv_32a_buf($3, 4, $4);
  $hval=$call;
  var $5=$p;
  var $scale_y=(($5+4)|0);
  var $6=$scale_y;
  var $7=$hval;
  var $call1=_fnv_32a_buf($6, 4, $7);
  $hval=$call1;
  var $8=$p;
  var $pbo=(($8+8)|0);
  var $9=$pbo;
  var $10=$hval;
  var $call2=_fnv_32a_buf($9, 4, $10);
  $hval=$call2;
  var $11=$p;
  var $outline=(($11+12)|0);
  var $x=(($outline)|0);
  var $12=$x;
  var $13=$hval;
  var $call3=_fnv_32a_buf($12, 4, $13);
  $hval=$call3;
  var $14=$p;
  var $outline4=(($14+12)|0);
  var $y=(($outline4+4)|0);
  var $15=$y;
  var $16=$hval;
  var $call5=_fnv_32a_buf($15, 4, $16);
  $hval=$call5;
  var $17=$p;
  var $border_style=(($17+20)|0);
  var $18=$border_style;
  var $19=$hval;
  var $call6=_fnv_32a_buf($18, 4, $19);
  $hval=$call6;
  var $20=$p;
  var $scale=(($20+24)|0);
  var $21=$scale;
  var $22=$hval;
  var $call7=_fnv_32a_buf($21, 4, $22);
  $hval=$call7;
  var $23=$p;
  var $hash=(($23+28)|0);
  var $24=$hash;
  var $25=$hval;
  var $call8=_fnv_32a_buf($24, 4, $25);
  $hval=$call8;
  var $26=$p;
  var $text=(($26+32)|0);
  var $27=HEAP32[(($text)>>2)];
  var $28=$hval;
  var $call9=_fnv_32a_str($27, $28);
  $hval=$call9;
  var $29=$hval;
  ;
  return $29;
}
_drawing_hash["X"]=1;

function _ass_font_new($font_cache, $library, $ftlibrary, $fc_priv, $desc) {
  var __stackBase__  = STACKTOP; STACKTOP += 108; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $font_cache_addr;
      var $library_addr;
      var $ftlibrary_addr;
      var $fc_priv_addr;
      var $desc_addr;
      var $error;
      var $fontp;
      var $font=__stackBase__;
      $font_cache_addr=$font_cache;
      $library_addr=$library;
      $ftlibrary_addr=$ftlibrary;
      $fc_priv_addr=$fc_priv;
      $desc_addr=$desc;
      var $0=$font_cache_addr;
      var $1=$desc_addr;
      var $2=$1;
      var $call=_ass_cache_get($0, $2);
      var $3=$call;
      $fontp=$3;
      var $4=$fontp;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $5=$fontp;
      $retval=$5;
      __label__ = 7; break;
    case 4: 
      var $6=$library_addr;
      var $library1=(($font+20)|0);
      HEAP32[(($library1)>>2)]=$6;
      var $7=$ftlibrary_addr;
      var $ftlibrary2=(($font+24)|0);
      HEAP32[(($ftlibrary2)>>2)]=$7;
      var $shaper_priv=(($font+68)|0);
      HEAP32[(($shaper_priv)>>2)]=0;
      var $n_faces=(($font+72)|0);
      HEAP32[(($n_faces)>>2)]=0;
      var $8=$desc_addr;
      var $family=(($8)|0);
      var $9=HEAP32[(($family)>>2)];
      var $call3=_strdup($9);
      var $desc4=(($font)|0);
      var $family5=(($desc4)|0);
      HEAP32[(($family5)>>2)]=$call3;
      var $10=$desc_addr;
      var $treat_family_as_pattern=(($10+12)|0);
      var $11=HEAP32[(($treat_family_as_pattern)>>2)];
      var $desc6=(($font)|0);
      var $treat_family_as_pattern7=(($desc6+12)|0);
      HEAP32[(($treat_family_as_pattern7)>>2)]=$11;
      var $12=$desc_addr;
      var $bold=(($12+4)|0);
      var $13=HEAP32[(($bold)>>2)];
      var $desc8=(($font)|0);
      var $bold9=(($desc8+4)|0);
      HEAP32[(($bold9)>>2)]=$13;
      var $14=$desc_addr;
      var $italic=(($14+8)|0);
      var $15=HEAP32[(($italic)>>2)];
      var $desc10=(($font)|0);
      var $italic11=(($desc10+8)|0);
      HEAP32[(($italic11)>>2)]=$15;
      var $16=$desc_addr;
      var $vertical=(($16+16)|0);
      var $17=HEAP32[(($vertical)>>2)];
      var $desc12=(($font)|0);
      var $vertical13=(($desc12+16)|0);
      HEAP32[(($vertical13)>>2)]=$17;
      var $scale_y=(($font+84)|0);
      (tempDoubleF64[0]=1,HEAP32[(($scale_y)>>2)]=tempDoubleI32[0],HEAP32[((($scale_y)+(4))>>2)]=tempDoubleI32[1]);
      var $scale_x=(($font+76)|0);
      (tempDoubleF64[0]=1,HEAP32[(($scale_x)>>2)]=tempDoubleI32[0],HEAP32[((($scale_x)+(4))>>2)]=tempDoubleI32[1]);
      var $v=(($font+92)|0);
      var $y=(($v+4)|0);
      HEAP32[(($y)>>2)]=0;
      var $v14=(($font+92)|0);
      var $x=(($v14)|0);
      HEAP32[(($x)>>2)]=0;
      var $size=(($font+100)|0);
      (tempDoubleF64[0]=0,HEAP32[(($size)>>2)]=tempDoubleI32[0],HEAP32[((($size)+(4))>>2)]=tempDoubleI32[1]);
      var $18=$fc_priv_addr;
      var $call15=_add_face($18, $font, 0);
      $error=$call15;
      var $19=$error;
      var $cmp=(($19)|0)==-1;
      if ($cmp) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $desc17=(($font)|0);
      var $family18=(($desc17)|0);
      var $20=HEAP32[(($family18)>>2)];
      _free($20);
      $retval=0;
      __label__ = 7; break;
    case 6: 
      var $21=$font_cache_addr;
      var $desc19=(($font)|0);
      var $22=$desc19;
      var $23=$font;
      var $call20=_ass_cache_put($21, $22, $23);
      var $24=$call20;
      $retval=$24;
      __label__ = 7; break;
    case 7: 
      var $25=$retval;
      STACKTOP = __stackBase__;
      return $25;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_font_new["X"]=1;

function _add_face($fc_priv, $font, $ch) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $fc_priv_addr;
      var $font_addr;
      var $ch_addr;
      var $path;
      var $index=__stackBase__;
      var $face=(__stackBase__)+(4);
      var $error;
      var $mem_idx;
      $fc_priv_addr=$fc_priv;
      $font_addr=$font;
      $ch_addr=$ch;
      var $0=$font_addr;
      var $n_faces=(($0+72)|0);
      var $1=HEAP32[(($n_faces)>>2)];
      var $cmp=(($1)|0)==10;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=-1;
      __label__ = 14; break;
    case 4: 
      var $2=$font_addr;
      var $library=(($2+20)|0);
      var $3=HEAP32[(($library)>>2)];
      var $4=$fc_priv_addr;
      var $5=$4;
      var $6=$font_addr;
      var $desc=(($6)|0);
      var $family=(($desc)|0);
      var $7=HEAP32[(($family)>>2)];
      var $8=$font_addr;
      var $desc1=(($8)|0);
      var $treat_family_as_pattern=(($desc1+12)|0);
      var $9=HEAP32[(($treat_family_as_pattern)>>2)];
      var $10=$font_addr;
      var $desc2=(($10)|0);
      var $bold=(($desc2+4)|0);
      var $11=HEAP32[(($bold)>>2)];
      var $12=$font_addr;
      var $desc3=(($12)|0);
      var $italic=(($desc3+8)|0);
      var $13=HEAP32[(($italic)>>2)];
      var $14=$ch_addr;
      var $call=_fontconfig_select($3, $5, $7, $9, $11, $13, $index, $14);
      $path=$call;
      var $15=$path;
      var $tobool=(($15)|0)!=0;
      if ($tobool) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      $retval=-1;
      __label__ = 14; break;
    case 6: 
      var $16=$font_addr;
      var $library6=(($16+20)|0);
      var $17=HEAP32[(($library6)>>2)];
      var $18=$path;
      var $call7=_find_font($17, $18);
      $mem_idx=$call7;
      var $19=$mem_idx;
      var $cmp8=(($19)|0) >= 0;
      if ($cmp8) { __label__ = 7; break; } else { __label__ = 10; break; }
    case 7: 
      var $20=$font_addr;
      var $ftlibrary=(($20+24)|0);
      var $21=HEAP32[(($ftlibrary)>>2)];
      var $22=$mem_idx;
      var $23=$font_addr;
      var $library10=(($23+20)|0);
      var $24=HEAP32[(($library10)>>2)];
      var $fontdata=(($24+12)|0);
      var $25=HEAP32[(($fontdata)>>2)];
      var $arrayidx=(($25+($22)*(12))|0);
      var $data=(($arrayidx+4)|0);
      var $26=HEAP32[(($data)>>2)];
      var $27=$mem_idx;
      var $28=$font_addr;
      var $library11=(($28+20)|0);
      var $29=HEAP32[(($library11)>>2)];
      var $fontdata12=(($29+12)|0);
      var $30=HEAP32[(($fontdata12)>>2)];
      var $arrayidx13=(($30+($27)*(12))|0);
      var $size=(($arrayidx13+8)|0);
      var $31=HEAP32[(($size)>>2)];
      var $32=HEAP32[(($index)>>2)];
      var $call14=_FT_New_Memory_Face($21, $26, $31, $32, $face);
      $error=$call14;
      var $33=$error;
      var $tobool15=(($33)|0)!=0;
      if ($tobool15) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $34=$font_addr;
      var $library17=(($34+20)|0);
      var $35=HEAP32[(($library17)>>2)];
      var $36=$path;
      _ass_msg($35, 2, ((STRING_TABLE.__str4106)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$36,tempInt));
      var $37=$path;
      _free($37);
      $retval=-1;
      __label__ = 14; break;
    case 9: 
      __label__ = 13; break;
    case 10: 
      var $38=$font_addr;
      var $ftlibrary19=(($38+24)|0);
      var $39=HEAP32[(($ftlibrary19)>>2)];
      var $40=$path;
      var $41=HEAP32[(($index)>>2)];
      var $call20=_FT_New_Face($39, $40, $41, $face);
      $error=$call20;
      var $42=$error;
      var $tobool21=(($42)|0)!=0;
      if ($tobool21) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $43=$font_addr;
      var $library23=(($43+20)|0);
      var $44=HEAP32[(($library23)>>2)];
      var $45=$path;
      var $46=HEAP32[(($index)>>2)];
      _ass_msg($44, 2, ((STRING_TABLE.__str5107)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$45,HEAP32[(((tempInt)+(4))>>2)]=$46,tempInt));
      var $47=$path;
      _free($47);
      $retval=-1;
      __label__ = 14; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $48=$font_addr;
      var $library26=(($48+20)|0);
      var $49=HEAP32[(($library26)>>2)];
      var $50=HEAP32[(($face)>>2)];
      _charmap_magic($49, $50);
      var $51=HEAP32[(($face)>>2)];
      _buggy_font_workaround($51);
      var $52=HEAP32[(($face)>>2)];
      var $53=$font_addr;
      var $n_faces27=(($53+72)|0);
      var $54=HEAP32[(($n_faces27)>>2)];
      var $inc=((($54)+(1))|0);
      HEAP32[(($n_faces27)>>2)]=$inc;
      var $55=$font_addr;
      var $faces=(($55+28)|0);
      var $arrayidx28=(($faces+($54<<2))|0);
      HEAP32[(($arrayidx28)>>2)]=$52;
      var $56=HEAP32[(($face)>>2)];
      var $57=$font_addr;
      var $size29=(($57+100)|0);
      var $58=(tempDoubleI32[0]=HEAP32[(($size29)>>2)],tempDoubleI32[1]=HEAP32[((($size29)+(4))>>2)],tempDoubleF64[0]);
      _ass_face_set_size($56, $58);
      var $59=$path;
      _free($59);
      var $60=$font_addr;
      var $n_faces30=(($60+72)|0);
      var $61=HEAP32[(($n_faces30)>>2)];
      var $sub=((($61)-(1))|0);
      $retval=$sub;
      __label__ = 14; break;
    case 14: 
      var $62=$retval;
      STACKTOP = __stackBase__;
      return $62;
    default: assert(0, "bad label: " + __label__);
  }
}
_add_face["X"]=1;

function _ass_face_set_size($face, $size) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $face_addr;
      var $size_addr;
      var $hori;
      var $os2;
      var $mscale;
      var $rq=__stackBase__;
      var $m;
      var $hori_height;
      var $os2_height;
      $face_addr=$face;
      $size_addr=$size;
      var $0=$face_addr;
      var $call=_FT_Get_Sfnt_Table($0, 3);
      var $1=$call;
      $hori=$1;
      var $2=$face_addr;
      var $call1=_FT_Get_Sfnt_Table($2, 2);
      var $3=$call1;
      $os2=$3;
      $mscale=1;
      var $4=$face_addr;
      var $size2=(($4+88)|0);
      var $5=HEAP32[(($size2)>>2)];
      var $metrics=(($5+12)|0);
      $m=$metrics;
      var $6=$hori;
      var $tobool=(($6)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 8; break; }
    case 3: 
      var $7=$os2;
      var $tobool3=(($7)|0)!=0;
      if ($tobool3) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $8=$hori;
      var $Ascender=(($8+4)|0);
      var $9=HEAP16[(($Ascender)>>1)];
      var $conv=(($9 << 16) >> 16);
      var $10=$hori;
      var $Descender=(($10+6)|0);
      var $11=HEAP16[(($Descender)>>1)];
      var $conv4=(($11 << 16) >> 16);
      var $sub=((($conv)-($conv4))|0);
      $hori_height=$sub;
      var $12=$os2;
      var $usWinAscent=(($12+76)|0);
      var $13=HEAPU16[(($usWinAscent)>>1)];
      var $conv5=(($13)&65535);
      var $14=$os2;
      var $usWinDescent=(($14+78)|0);
      var $15=HEAPU16[(($usWinDescent)>>1)];
      var $conv6=(($15)&65535);
      var $add=((($conv5)+($conv6))|0);
      $os2_height=$add;
      var $16=$hori_height;
      var $tobool7=(($16)|0)!=0;
      if ($tobool7) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $17=$os2_height;
      var $tobool9=(($17)|0)!=0;
      if ($tobool9) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $18=$hori_height;
      var $conv11=(($18)|0);
      var $19=$os2_height;
      var $conv12=(($19)|0);
      var $div=($conv11)/($conv12);
      $mscale=$div;
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $20=$rq;
      HEAP32[(($20)>>2)]=0; HEAP32[((($20)+(4))>>2)]=0; HEAP32[((($20)+(8))>>2)]=0; HEAP32[((($20)+(12))>>2)]=0; HEAP32[((($20)+(16))>>2)]=0;
      var $type=(($rq)|0);
      HEAP32[(($type)>>2)]=1;
      var $width=(($rq+4)|0);
      HEAP32[(($width)>>2)]=0;
      var $21=$size_addr;
      var $22=$mscale;
      var $mul=($21)*($22);
      var $call14=_double_to_d6($mul);
      var $height=(($rq+8)|0);
      HEAP32[(($height)>>2)]=$call14;
      var $vertResolution=(($rq+16)|0);
      HEAP32[(($vertResolution)>>2)]=0;
      var $horiResolution=(($rq+12)|0);
      HEAP32[(($horiResolution)>>2)]=0;
      var $23=$face_addr;
      var $call15=_FT_Request_Size($23, $rq);
      var $24=$mscale;
      var $25=$m;
      var $ascender=(($25+12)|0);
      var $26=HEAP32[(($ascender)>>2)];
      var $conv16=(($26)|0);
      var $div17=($conv16)/($24);
      var $conv18=(($div17)&-1);
      HEAP32[(($ascender)>>2)]=$conv18;
      var $27=$mscale;
      var $28=$m;
      var $descender=(($28+16)|0);
      var $29=HEAP32[(($descender)>>2)];
      var $conv19=(($29)|0);
      var $div20=($conv19)/($27);
      var $conv21=(($div20)&-1);
      HEAP32[(($descender)>>2)]=$conv21;
      var $30=$mscale;
      var $31=$m;
      var $height22=(($31+20)|0);
      var $32=HEAP32[(($height22)>>2)];
      var $conv23=(($32)|0);
      var $div24=($conv23)/($30);
      var $conv25=(($div24)&-1);
      HEAP32[(($height22)>>2)]=$conv25;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_face_set_size["X"]=1;

function _ass_font_set_size($font, $size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $font_addr;
      var $size_addr;
      var $i;
      $font_addr=$font;
      $size_addr=$size;
      var $0=$font_addr;
      var $size1=(($0+100)|0);
      var $1=(tempDoubleI32[0]=HEAP32[(($size1)>>2)],tempDoubleI32[1]=HEAP32[((($size1)+(4))>>2)],tempDoubleF64[0]);
      var $2=$size_addr;
      var $cmp=$1 != $2;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 8; break; }
    case 3: 
      var $3=$size_addr;
      var $4=$font_addr;
      var $size2=(($4+100)|0);
      (tempDoubleF64[0]=$3,HEAP32[(($size2)>>2)]=tempDoubleI32[0],HEAP32[((($size2)+(4))>>2)]=tempDoubleI32[1]);
      $i=0;
      __label__ = 4; break;
    case 4: 
      var $5=$i;
      var $6=$font_addr;
      var $n_faces=(($6+72)|0);
      var $7=HEAP32[(($n_faces)>>2)];
      var $cmp3=(($5)|0) < (($7)|0);
      if ($cmp3) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $8=$i;
      var $9=$font_addr;
      var $faces=(($9+28)|0);
      var $arrayidx=(($faces+($8<<2))|0);
      var $10=HEAP32[(($arrayidx)>>2)];
      var $11=$size_addr;
      _ass_face_set_size($10, $11);
      __label__ = 6; break;
    case 6: 
      var $12=$i;
      var $inc=((($12)+(1))|0);
      $i=$inc;
      __label__ = 4; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _double_to_d16($x) {
  ;
  var __label__;

  var $x_addr;
  $x_addr=$x;
  var $0=$x_addr;
  var $mul=($0)*(65536);
  var $conv=(($mul)&-1);
  ;
  return $conv;
}


function _ass_font_get_asc_desc($font, $ch, $asc, $desc) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $font_addr;
      var $ch_addr;
      var $asc_addr;
      var $desc_addr;
      var $i;
      var $face;
      var $os2;
      var $y_scale;
      $font_addr=$font;
      $ch_addr=$ch;
      $asc_addr=$asc;
      $desc_addr=$desc;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $0=$i;
      var $1=$font_addr;
      var $n_faces=(($1+72)|0);
      var $2=HEAP32[(($n_faces)>>2)];
      var $cmp=(($0)|0) < (($2)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 11; break; }
    case 4: 
      var $3=$i;
      var $4=$font_addr;
      var $faces=(($4+28)|0);
      var $arrayidx=(($faces+($3<<2))|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      $face=$5;
      var $6=$face;
      var $call=_FT_Get_Sfnt_Table($6, 2);
      var $7=$call;
      $os2=$7;
      var $8=$face;
      var $9=$ch_addr;
      var $call1=_FT_Get_Char_Index($8, $9);
      var $tobool=(($call1)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { __label__ = 9; break; }
    case 5: 
      var $10=$face;
      var $size=(($10+88)|0);
      var $11=HEAP32[(($size)>>2)];
      var $metrics=(($11+12)|0);
      var $y_scale2=(($metrics+8)|0);
      var $12=HEAP32[(($y_scale2)>>2)];
      $y_scale=$12;
      var $13=$os2;
      var $tobool3=(($13)|0)!=0;
      if ($tobool3) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $14=$os2;
      var $usWinAscent=(($14+76)|0);
      var $15=HEAPU16[(($usWinAscent)>>1)];
      var $conv=(($15)&65535);
      var $16=$y_scale;
      var $call5=_FT_MulFix($conv, $16);
      var $17=$asc_addr;
      HEAP32[(($17)>>2)]=$call5;
      var $18=$os2;
      var $usWinDescent=(($18+78)|0);
      var $19=HEAPU16[(($usWinDescent)>>1)];
      var $conv6=(($19)&65535);
      var $20=$y_scale;
      var $call7=_FT_MulFix($conv6, $20);
      var $21=$desc_addr;
      HEAP32[(($21)>>2)]=$call7;
      __label__ = 8; break;
    case 7: 
      var $22=$face;
      var $ascender=(($22+70)|0);
      var $23=HEAP16[(($ascender)>>1)];
      var $conv8=(($23 << 16) >> 16);
      var $24=$y_scale;
      var $call9=_FT_MulFix($conv8, $24);
      var $25=$asc_addr;
      HEAP32[(($25)>>2)]=$call9;
      var $26=$face;
      var $descender=(($26+72)|0);
      var $27=HEAP16[(($descender)>>1)];
      var $conv10=(($27 << 16) >> 16);
      var $sub=(((-$conv10))|0);
      var $28=$y_scale;
      var $call11=_FT_MulFix($sub, $28);
      var $29=$desc_addr;
      HEAP32[(($29)>>2)]=$call11;
      __label__ = 8; break;
    case 8: 
      __label__ = 12; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $30=$i;
      var $inc=((($30)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 11: 
      var $31=$desc_addr;
      HEAP32[(($31)>>2)]=0;
      var $32=$asc_addr;
      HEAP32[(($32)>>2)]=0;
      __label__ = 12; break;
    case 12: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_font_get_asc_desc["X"]=1;

function _outline_copy($lib, $source, $dest) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $lib_addr;
      var $source_addr;
      var $dest_addr;
      $lib_addr=$lib;
      $source_addr=$source;
      $dest_addr=$dest;
      var $0=$source_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $1=$dest_addr;
      HEAP32[(($1)>>2)]=0;
      __label__ = 5; break;
    case 4: 
      var $call=_calloc(1, 20);
      var $2=$call;
      var $3=$dest_addr;
      HEAP32[(($3)>>2)]=$2;
      var $4=$lib_addr;
      var $5=$source_addr;
      var $n_points=(($5+2)|0);
      var $6=HEAP16[(($n_points)>>1)];
      var $conv=(($6 << 16) >> 16);
      var $7=$source_addr;
      var $n_contours=(($7)|0);
      var $8=HEAP16[(($n_contours)>>1)];
      var $conv1=(($8 << 16) >> 16);
      var $9=$dest_addr;
      var $10=HEAP32[(($9)>>2)];
      var $call2=_FT_Outline_New($4, $conv, $conv1, $10);
      var $11=$source_addr;
      var $12=$dest_addr;
      var $13=HEAP32[(($12)>>2)];
      var $call3=_FT_Outline_Copy($11, $13);
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _outline_free($lib, $outline) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $lib_addr;
      var $outline_addr;
      $lib_addr=$lib;
      $outline_addr=$outline;
      var $0=$outline_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $1=$lib_addr;
      var $2=$outline_addr;
      var $call=_FT_Outline_Done($1, $2);
      __label__ = 4; break;
    case 4: 
      var $3=$outline_addr;
      var $4=$3;
      _free($4);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _ass_font_get_index($fcpriv, $font, $symbol, $face_index, $glyph_index) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $fcpriv_addr;
      var $font_addr;
      var $symbol_addr;
      var $face_index_addr;
      var $glyph_index_addr;
      var $index;
      var $i;
      var $face;
      var $face_idx;
      var $i32;
      $fcpriv_addr=$fcpriv;
      $font_addr=$font;
      $symbol_addr=$symbol;
      $face_index_addr=$face_index;
      $glyph_index_addr=$glyph_index;
      $index=0;
      $face=0;
      var $0=$glyph_index_addr;
      HEAP32[(($0)>>2)]=0;
      var $1=$symbol_addr;
      var $cmp=(($1)>>>0) < 32;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=$face_index_addr;
      HEAP32[(($2)>>2)]=0;
      $retval=0;
      __label__ = 37; break;
    case 4: 
      var $3=$symbol_addr;
      var $cmp1=(($3)|0)==160;
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $symbol_addr=32;
      __label__ = 6; break;
    case 6: 
      var $4=$font_addr;
      var $n_faces=(($4+72)|0);
      var $5=HEAP32[(($n_faces)>>2)];
      var $cmp4=(($5)|0)==0;
      if ($cmp4) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $6=$face_index_addr;
      HEAP32[(($6)>>2)]=0;
      $retval=0;
      __label__ = 37; break;
    case 8: 
      var $7=$face_index_addr;
      var $8=HEAP32[(($7)>>2)];
      var $9=$font_addr;
      var $n_faces7=(($9+72)|0);
      var $10=HEAP32[(($n_faces7)>>2)];
      var $cmp8=(($8)|0) < (($10)|0);
      if ($cmp8) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $11=$face_index_addr;
      var $12=HEAP32[(($11)>>2)];
      var $13=$font_addr;
      var $faces=(($13+28)|0);
      var $arrayidx=(($faces+($12<<2))|0);
      var $14=HEAP32[(($arrayidx)>>2)];
      $face=$14;
      var $15=$face;
      var $16=$symbol_addr;
      var $call=_FT_Get_Char_Index($15, $16);
      $index=$call;
      __label__ = 10; break;
    case 10: 
      $i=0;
      __label__ = 11; break;
    case 11: 
      var $17=$i;
      var $18=$font_addr;
      var $n_faces11=(($18+72)|0);
      var $19=HEAP32[(($n_faces11)>>2)];
      var $cmp12=(($17)|0) < (($19)|0);
      if ($cmp12) { __label__ = 12; break; } else { var $21 = 0;__label__ = 13; break; }
    case 12: 
      var $20=$index;
      var $cmp13=(($20)|0)==0;
      var $21 = $cmp13;__label__ = 13; break;
    case 13: 
      var $21;
      if ($21) { __label__ = 14; break; } else { __label__ = 18; break; }
    case 14: 
      var $22=$i;
      var $23=$font_addr;
      var $faces14=(($23+28)|0);
      var $arrayidx15=(($faces14+($22<<2))|0);
      var $24=HEAP32[(($arrayidx15)>>2)];
      $face=$24;
      var $25=$face;
      var $26=$symbol_addr;
      var $call16=_FT_Get_Char_Index($25, $26);
      $index=$call16;
      var $27=$index;
      var $tobool=(($27)|0)!=0;
      if ($tobool) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $28=$i;
      var $29=$face_index_addr;
      HEAP32[(($29)>>2)]=$28;
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $30=$i;
      var $inc=((($30)+(1))|0);
      $i=$inc;
      __label__ = 11; break;
    case 18: 
      var $31=$index;
      var $cmp19=(($31)|0)==0;
      if ($cmp19) { __label__ = 19; break; } else { __label__ = 33; break; }
    case 19: 
      var $32=$font_addr;
      var $library=(($32+20)|0);
      var $33=HEAP32[(($library)>>2)];
      var $34=$symbol_addr;
      var $35=$font_addr;
      var $desc=(($35)|0);
      var $family=(($desc)|0);
      var $36=HEAP32[(($family)>>2)];
      var $37=$font_addr;
      var $desc21=(($37)|0);
      var $bold=(($desc21+4)|0);
      var $38=HEAP32[(($bold)>>2)];
      var $39=$font_addr;
      var $desc22=(($39)|0);
      var $italic=(($desc22+8)|0);
      var $40=HEAP32[(($italic)>>2)];
      _ass_msg($33, 4, ((STRING_TABLE.__str102)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$34,HEAP32[(((tempInt)+(4))>>2)]=$36,HEAP32[(((tempInt)+(8))>>2)]=$38,HEAP32[(((tempInt)+(12))>>2)]=$40,tempInt));
      var $41=$fcpriv_addr;
      var $42=$font_addr;
      var $43=$symbol_addr;
      var $call23=_add_face($41, $42, $43);
      var $44=$face_index_addr;
      HEAP32[(($44)>>2)]=$call23;
      $face_idx=$call23;
      var $45=$face_idx;
      var $cmp24=(($45)|0) >= 0;
      if ($cmp24) { __label__ = 20; break; } else { __label__ = 32; break; }
    case 20: 
      var $46=$face_idx;
      var $47=$font_addr;
      var $faces26=(($47+28)|0);
      var $arrayidx27=(($faces26+($46<<2))|0);
      var $48=HEAP32[(($arrayidx27)>>2)];
      $face=$48;
      var $49=$face;
      var $50=$symbol_addr;
      var $call28=_FT_Get_Char_Index($49, $50);
      $index=$call28;
      var $51=$index;
      var $cmp29=(($51)|0)==0;
      if ($cmp29) { __label__ = 21; break; } else { __label__ = 29; break; }
    case 21: 
      var $52=$face;
      var $num_charmaps=(($52+36)|0);
      var $53=HEAP32[(($num_charmaps)>>2)];
      var $cmp30=(($53)|0) > 0;
      if ($cmp30) { __label__ = 22; break; } else { __label__ = 29; break; }
    case 22: 
      var $54=$font_addr;
      var $library33=(($54+20)|0);
      var $55=HEAP32[(($library33)>>2)];
      var $56=$symbol_addr;
      _ass_msg($55, 2, ((STRING_TABLE.__str1103)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$56,tempInt));
      $i32=0;
      __label__ = 23; break;
    case 23: 
      var $57=$i32;
      var $58=$face;
      var $num_charmaps35=(($58+36)|0);
      var $59=HEAP32[(($num_charmaps35)>>2)];
      var $cmp36=(($57)|0) < (($59)|0);
      if ($cmp36) { __label__ = 24; break; } else { __label__ = 28; break; }
    case 24: 
      var $60=$face;
      var $61=$i32;
      var $62=$face;
      var $charmaps=(($62+40)|0);
      var $63=HEAP32[(($charmaps)>>2)];
      var $arrayidx38=(($63+($61<<2))|0);
      var $64=HEAP32[(($arrayidx38)>>2)];
      var $call39=_FT_Set_Charmap($60, $64);
      var $65=$face;
      var $66=$symbol_addr;
      var $call40=_FT_Get_Char_Index($65, $66);
      $index=$call40;
      var $cmp41=(($call40)|0)!=0;
      if ($cmp41) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      __label__ = 28; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $67=$i32;
      var $inc45=((($67)+(1))|0);
      $i32=$inc45;
      __label__ = 23; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $68=$index;
      var $cmp48=(($68)|0)==0;
      if ($cmp48) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $69=$font_addr;
      var $library50=(($69+20)|0);
      var $70=HEAP32[(($library50)>>2)];
      var $71=$symbol_addr;
      var $72=$font_addr;
      var $desc51=(($72)|0);
      var $family52=(($desc51)|0);
      var $73=HEAP32[(($family52)>>2)];
      var $74=$font_addr;
      var $desc53=(($74)|0);
      var $bold54=(($desc53+4)|0);
      var $75=HEAP32[(($bold54)>>2)];
      var $76=$font_addr;
      var $desc55=(($76)|0);
      var $italic56=(($desc55+8)|0);
      var $77=HEAP32[(($italic56)>>2)];
      _ass_msg($70, 1, ((STRING_TABLE.__str2104)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$71,HEAP32[(((tempInt)+(4))>>2)]=$73,HEAP32[(((tempInt)+(8))>>2)]=$75,HEAP32[(((tempInt)+(12))>>2)]=$77,tempInt));
      __label__ = 31; break;
    case 31: 
      __label__ = 32; break;
    case 32: 
      __label__ = 33; break;
    case 33: 
      var $78=$face_index_addr;
      var $79=HEAP32[(($78)>>2)];
      var $cmp60=(($79)|0) > 0;
      if ($cmp60) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $80=$face_index_addr;
      var $81=HEAP32[(($80)>>2)];
      var $cond = $81;__label__ = 36; break;
    case 35: 
      var $cond = 0;__label__ = 36; break;
    case 36: 
      var $cond;
      var $82=$face_index_addr;
      HEAP32[(($82)>>2)]=$cond;
      var $83=$index;
      var $84=$glyph_index_addr;
      HEAP32[(($84)>>2)]=$83;
      $retval=1;
      __label__ = 37; break;
    case 37: 
      var $85=$retval;
      ;
      return $85;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_font_get_index["X"]=1;

function _ass_font_get_glyph($fontconfig_priv, $font, $ch, $face_index, $index, $hinting, $deco) {
  var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $fontconfig_priv_addr;
      var $font_addr;
      var $ch_addr;
      var $face_index_addr;
      var $index_addr;
      var $hinting_addr;
      var $deco_addr;
      var $error;
      var $glyph=__stackBase__;
      var $face;
      var $flags;
      var $vertical;
      var $m=(__stackBase__)+(4);
      var $os2;
      var $desc34;
      var $scale=(__stackBase__)+(20);
      var $outl;
      $fontconfig_priv_addr=$fontconfig_priv;
      $font_addr=$font;
      $ch_addr=$ch;
      $face_index_addr=$face_index;
      $index_addr=$index;
      $hinting_addr=$hinting;
      $deco_addr=$deco;
      var $0=$face_index_addr;
      var $1=$font_addr;
      var $faces=(($1+28)|0);
      var $arrayidx=(($faces+($0<<2))|0);
      var $2=HEAP32[(($arrayidx)>>2)];
      $face=$2;
      $flags=0;
      var $3=$font_addr;
      var $desc=(($3)|0);
      var $vertical1=(($desc+16)|0);
      var $4=HEAP32[(($vertical1)>>2)];
      $vertical=$4;
      $flags=2568;
      var $5=$hinting_addr;
      if ((($5)|0) == 0) {
        __label__ = 3; break;
      }
      else if ((($5)|0) == 1) {
        __label__ = 4; break;
      }
      else if ((($5)|0) == 2) {
        __label__ = 5; break;
      }
      else if ((($5)|0) == 3) {
        __label__ = 6; break;
      }
      else {
      __label__ = 7; break;
      }
      
    case 3: 
      var $6=$flags;
      var $or=$6 | 2;
      $flags=$or;
      __label__ = 7; break;
    case 4: 
      var $7=$flags;
      var $or3=$7 | 65568;
      $flags=$or3;
      __label__ = 7; break;
    case 5: 
      var $8=$flags;
      var $or5=$8 | 32;
      $flags=$or5;
      __label__ = 7; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $9=$face;
      var $10=$index_addr;
      var $11=$flags;
      var $call=_FT_Load_Glyph($9, $10, $11);
      $error=$call;
      var $12=$error;
      var $tobool=(($12)|0)!=0;
      if ($tobool) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $13=$font_addr;
      var $library=(($13+20)|0);
      var $14=HEAP32[(($library)>>2)];
      var $15=$index_addr;
      _ass_msg($14, 2, ((STRING_TABLE.__str3105)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$15,tempInt));
      $retval=0;
      __label__ = 23; break;
    case 9: 
      var $16=$face;
      var $style_flags=(($16+12)|0);
      var $17=HEAP32[(($style_flags)>>2)];
      var $and=$17 & 1;
      var $tobool7=(($and)|0)!=0;
      if ($tobool7) { __label__ = 12; break; } else { __label__ = 10; break; }
    case 10: 
      var $18=$font_addr;
      var $desc8=(($18)|0);
      var $italic=(($desc8+8)|0);
      var $19=HEAPU32[(($italic)>>2)];
      var $cmp=(($19)>>>0) > 55;
      if ($cmp) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $20=$face;
      var $glyph10=(($20+84)|0);
      var $21=HEAP32[(($glyph10)>>2)];
      _FT_GlyphSlot_Oblique($21);
      __label__ = 12; break;
    case 12: 
      var $22=$face;
      var $style_flags12=(($22+12)|0);
      var $23=HEAP32[(($style_flags12)>>2)];
      var $and13=$23 & 2;
      var $tobool14=(($and13)|0)!=0;
      if ($tobool14) { __label__ = 15; break; } else { __label__ = 13; break; }
    case 13: 
      var $24=$font_addr;
      var $desc16=(($24)|0);
      var $bold=(($desc16+4)|0);
      var $25=HEAPU32[(($bold)>>2)];
      var $cmp17=(($25)>>>0) > 80;
      if ($cmp17) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $26=$face;
      var $glyph19=(($26+84)|0);
      var $27=HEAP32[(($glyph19)>>2)];
      _ass_glyph_embolden($27);
      __label__ = 15; break;
    case 15: 
      var $28=$face;
      var $glyph21=(($28+84)|0);
      var $29=HEAP32[(($glyph21)>>2)];
      var $call22=_FT_Get_Glyph($29, $glyph);
      $error=$call22;
      var $30=$error;
      var $tobool23=(($30)|0)!=0;
      if ($tobool23) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $31=$font_addr;
      var $library25=(($31+20)|0);
      var $32=HEAP32[(($library25)>>2)];
      var $33=$index_addr;
      _ass_msg($32, 2, ((STRING_TABLE.__str3105)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$33,tempInt));
      $retval=0;
      __label__ = 23; break;
    case 17: 
      var $34=$vertical;
      var $tobool27=(($34)|0)!=0;
      if ($tobool27) { __label__ = 18; break; } else { __label__ = 22; break; }
    case 18: 
      var $35=$ch_addr;
      var $cmp29=(($35)>>>0) >= 753;
      if ($cmp29) { __label__ = 19; break; } else { __label__ = 22; break; }
    case 19: 
      var $xx=(($m)|0);
      HEAP32[(($xx)>>2)]=0;
      var $xy=(($m+4)|0);
      var $call31=_double_to_d16(-1);
      HEAP32[(($xy)>>2)]=$call31;
      var $yx=(($m+8)|0);
      var $call32=_double_to_d16(1);
      HEAP32[(($yx)>>2)]=$call32;
      var $yy=(($m+12)|0);
      HEAP32[(($yy)>>2)]=0;
      var $36=$face;
      var $call33=_FT_Get_Sfnt_Table($36, 2);
      var $37=$call33;
      $os2=$37;
      $desc34=0;
      var $38=$os2;
      var $tobool35=(($38)|0)!=0;
      if ($tobool35) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $39=$os2;
      var $sTypoDescender=(($39+72)|0);
      var $40=HEAP16[(($sTypoDescender)>>1)];
      var $conv=(($40 << 16) >> 16);
      var $41=$face;
      var $size=(($41+88)|0);
      var $42=HEAP32[(($size)>>2)];
      var $metrics=(($42+12)|0);
      var $y_scale=(($metrics+8)|0);
      var $43=HEAP32[(($y_scale)>>2)];
      var $call37=_FT_MulFix($conv, $43);
      $desc34=$call37;
      __label__ = 21; break;
    case 21: 
      var $44=HEAP32[(($glyph)>>2)];
      var $45=$44;
      var $outline=(($45+20)|0);
      var $46=$desc34;
      var $sub=(((-$46))|0);
      _FT_Outline_Translate($outline, 0, $sub);
      var $47=HEAP32[(($glyph)>>2)];
      var $48=$47;
      var $outline39=(($48+20)|0);
      _FT_Outline_Transform($outline39, $m);
      var $49=HEAP32[(($glyph)>>2)];
      var $50=$49;
      var $outline40=(($50+20)|0);
      var $51=$face;
      var $glyph41=(($51+84)|0);
      var $52=HEAP32[(($glyph41)>>2)];
      var $metrics42=(($52+24)|0);
      var $vertAdvance=(($metrics42+28)|0);
      var $53=HEAP32[(($vertAdvance)>>2)];
      var $54=$desc34;
      _FT_Outline_Translate($outline40, $53, $54);
      var $55=$face;
      var $glyph43=(($55+84)|0);
      var $56=HEAP32[(($glyph43)>>2)];
      var $linearVertAdvance=(($56+60)|0);
      var $57=HEAP32[(($linearVertAdvance)>>2)];
      var $58=HEAP32[(($glyph)>>2)];
      var $advance=(($58+12)|0);
      var $x=(($advance)|0);
      HEAP32[(($x)>>2)]=$57;
      __label__ = 22; break;
    case 22: 
      var $xx45=(($scale)|0);
      var $59=$font_addr;
      var $scale_x=(($59+76)|0);
      var $60=(tempDoubleI32[0]=HEAP32[(($scale_x)>>2)],tempDoubleI32[1]=HEAP32[((($scale_x)+(4))>>2)],tempDoubleF64[0]);
      var $call46=_double_to_d16($60);
      HEAP32[(($xx45)>>2)]=$call46;
      var $xy47=(($scale+4)|0);
      HEAP32[(($xy47)>>2)]=0;
      var $yx48=(($scale+8)|0);
      HEAP32[(($yx48)>>2)]=0;
      var $yy49=(($scale+12)|0);
      var $61=$font_addr;
      var $scale_y=(($61+84)|0);
      var $62=(tempDoubleI32[0]=HEAP32[(($scale_y)>>2)],tempDoubleI32[1]=HEAP32[((($scale_y)+(4))>>2)],tempDoubleF64[0]);
      var $call50=_double_to_d16($62);
      HEAP32[(($yy49)>>2)]=$call50;
      var $63=HEAP32[(($glyph)>>2)];
      var $64=$63;
      var $outline51=(($64+20)|0);
      $outl=$outline51;
      var $65=$outl;
      _FT_Outline_Transform($65, $scale);
      var $66=$outl;
      var $67=$font_addr;
      var $v=(($67+92)|0);
      var $x52=(($v)|0);
      var $68=HEAP32[(($x52)>>2)];
      var $69=$font_addr;
      var $v53=(($69+92)|0);
      var $y=(($v53+4)|0);
      var $70=HEAP32[(($y)>>2)];
      _FT_Outline_Translate($66, $68, $70);
      var $71=$font_addr;
      var $scale_x54=(($71+76)|0);
      var $72=(tempDoubleI32[0]=HEAP32[(($scale_x54)>>2)],tempDoubleI32[1]=HEAP32[((($scale_x54)+(4))>>2)],tempDoubleF64[0]);
      var $73=HEAP32[(($glyph)>>2)];
      var $advance55=(($73+12)|0);
      var $x56=(($advance55)|0);
      var $74=HEAP32[(($x56)>>2)];
      var $conv57=(($74)|0);
      var $mul=($conv57)*($72);
      var $conv58=(($mul)&-1);
      HEAP32[(($x56)>>2)]=$conv58;
      var $75=$face;
      var $76=$font_addr;
      var $77=HEAP32[(($glyph)>>2)];
      var $78=$deco_addr;
      var $and59=$78 & 1;
      var $79=$deco_addr;
      var $and60=$79 & 2;
      var $call61=_ass_strike_outline_glyph($75, $76, $77, $and59, $and60);
      var $80=HEAP32[(($glyph)>>2)];
      $retval=$80;
      __label__ = 23; break;
    case 23: 
      var $81=$retval;
      STACKTOP = __stackBase__;
      return $81;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_font_get_glyph["X"]=1;

function _ass_glyph_embolden($slot) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $slot_addr;
      var $str;
      $slot_addr=$slot;
      var $0=$slot_addr;
      var $format=(($0+72)|0);
      var $1=HEAP32[(($format)>>2)];
      var $cmp=(($1)|0)!=1869968492;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      var $2=$slot_addr;
      var $face=(($2+4)|0);
      var $3=HEAP32[(($face)>>2)];
      var $units_per_EM=(($3+68)|0);
      var $4=HEAPU16[(($units_per_EM)>>1)];
      var $conv=(($4)&65535);
      var $5=$slot_addr;
      var $face1=(($5+4)|0);
      var $6=HEAP32[(($face1)>>2)];
      var $size=(($6+88)|0);
      var $7=HEAP32[(($size)>>2)];
      var $metrics=(($7+12)|0);
      var $y_scale=(($metrics+8)|0);
      var $8=HEAP32[(($y_scale)>>2)];
      var $call=_FT_MulFix($conv, $8);
      var $div=((((($call)|0))/(64))&-1);
      $str=$div;
      var $9=$slot_addr;
      var $outline=(($9+108)|0);
      var $10=$str;
      var $call2=_FT_Outline_Embolden($outline, $10);
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _ass_strike_outline_glyph($face, $font, $glyph, $under, $through) {
  var __stackBase__  = STACKTOP; STACKTOP += 64; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $face_addr;
      var $font_addr;
      var $glyph_addr;
      var $under_addr;
      var $through_addr;
      var $os2;
      var $ps;
      var $ol;
      var $bear;
      var $advance;
      var $y_scale;
      var $i;
      var $dir;
      var $pos;
      var $size43;
      var $points61=__stackBase__;
      var $pos118;
      var $size119;
      var $points140=(__stackBase__)+(32);
      $face_addr=$face;
      $font_addr=$font;
      $glyph_addr=$glyph;
      $under_addr=$under;
      $through_addr=$through;
      var $0=$face_addr;
      var $call=_FT_Get_Sfnt_Table($0, 2);
      var $1=$call;
      $os2=$1;
      var $2=$face_addr;
      var $call1=_FT_Get_Sfnt_Table($2, 5);
      var $3=$call1;
      $ps=$3;
      var $4=$glyph_addr;
      var $5=$4;
      var $outline=(($5+20)|0);
      $ol=$outline;
      var $6=$under_addr;
      var $tobool=(($6)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { __label__ = 3; break; }
    case 3: 
      var $7=$through_addr;
      var $tobool2=(($7)|0)!=0;
      if ($tobool2) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      $retval=0;
      __label__ = 43; break;
    case 5: 
      var $8=$under_addr;
      var $tobool3=(($8)|0)!=0;
      var $cond=$tobool3 ? 4 : 0;
      var $9=$through_addr;
      var $tobool4=(($9)|0)!=0;
      var $cond5=$tobool4 ? 4 : 0;
      var $add=((($cond)+($cond5))|0);
      $i=$add;
      var $10=$ol;
      var $points=(($10+4)|0);
      var $11=HEAP32[(($points)>>2)];
      var $12=$11;
      var $13=$ol;
      var $n_points=(($13+2)|0);
      var $14=HEAP16[(($n_points)>>1)];
      var $conv=(($14 << 16) >> 16);
      var $15=$i;
      var $add6=((($conv)+($15))|0);
      var $mul=((($add6<<3))|0);
      var $call7=_realloc($12, $mul);
      var $16=$call7;
      var $17=$ol;
      var $points8=(($17+4)|0);
      HEAP32[(($points8)>>2)]=$16;
      var $18=$ol;
      var $tags=(($18+8)|0);
      var $19=HEAP32[(($tags)>>2)];
      var $20=$ol;
      var $n_points9=(($20+2)|0);
      var $21=HEAP16[(($n_points9)>>1)];
      var $conv10=(($21 << 16) >> 16);
      var $22=$i;
      var $add11=((($conv10)+($22))|0);
      var $call12=_realloc($19, $add11);
      var $23=$ol;
      var $tags13=(($23+8)|0);
      HEAP32[(($tags13)>>2)]=$call12;
      var $24=$under_addr;
      var $tobool14=(($24)|0)!=0;
      var $lnot=$tobool14 ^ 1;
      var $lnot15=$lnot ^ 1;
      var $lnot_ext=(($lnot15)&1);
      var $25=$through_addr;
      var $tobool16=(($25)|0)!=0;
      var $lnot17=$tobool16 ^ 1;
      var $lnot19=$lnot17 ^ 1;
      var $lnot_ext20=(($lnot19)&1);
      var $add21=((($lnot_ext)+($lnot_ext20))|0);
      $i=$add21;
      var $26=$ol;
      var $contours=(($26+12)|0);
      var $27=HEAP32[(($contours)>>2)];
      var $28=$27;
      var $29=$ol;
      var $n_contours=(($29)|0);
      var $30=HEAP16[(($n_contours)>>1)];
      var $conv22=(($30 << 16) >> 16);
      var $31=$i;
      var $add23=((($conv22)+($31))|0);
      var $mul24=((($add23<<1))|0);
      var $call25=_realloc($28, $mul24);
      var $32=$call25;
      var $33=$ol;
      var $contours26=(($33+12)|0);
      HEAP32[(($contours26)>>2)]=$32;
      var $34=$face_addr;
      var $glyph27=(($34+84)|0);
      var $35=HEAP32[(($glyph27)>>2)];
      var $metrics=(($35+24)|0);
      var $horiBearingX=(($metrics+8)|0);
      var $36=HEAP32[(($horiBearingX)>>2)];
      var $cmp=(($36)|0) > 0;
      if ($cmp) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $cond32 = 0;__label__ = 8; break;
    case 7: 
      var $37=$face_addr;
      var $glyph29=(($37+84)|0);
      var $38=HEAP32[(($glyph29)>>2)];
      var $metrics30=(($38+24)|0);
      var $horiBearingX31=(($metrics30+8)|0);
      var $39=HEAP32[(($horiBearingX31)>>2)];
      var $cond32 = $39;__label__ = 8; break;
    case 8: 
      var $cond32;
      $bear=$cond32;
      var $40=$glyph_addr;
      var $advance33=(($40+12)|0);
      var $x=(($advance33)|0);
      var $41=HEAP32[(($x)>>2)];
      var $call34=_d16_to_d6($41);
      var $add35=((($call34)+(32))|0);
      $advance=$add35;
      var $42=$face_addr;
      var $size=(($42+88)|0);
      var $43=HEAP32[(($size)>>2)];
      var $metrics36=(($43+12)|0);
      var $y_scale37=(($metrics36+8)|0);
      var $44=HEAP32[(($y_scale37)>>2)];
      $y_scale=$44;
      var $45=$ol;
      var $call38=_FT_Outline_Get_Orientation($45);
      $dir=$call38;
      var $46=$under_addr;
      var $tobool39=(($46)|0)!=0;
      if ($tobool39) { __label__ = 9; break; } else { __label__ = 25; break; }
    case 9: 
      var $47=$ps;
      var $tobool41=(($47)|0)!=0;
      if ($tobool41) { __label__ = 10; break; } else { __label__ = 25; break; }
    case 10: 
      var $48=$ps;
      var $underlinePosition=(($48+8)|0);
      var $49=HEAP16[(($underlinePosition)>>1)];
      var $conv44=(($49 << 16) >> 16);
      var $50=$y_scale;
      var $conv45=(($50)|0);
      var $51=$font_addr;
      var $scale_y=(($51+84)|0);
      var $52=(tempDoubleI32[0]=HEAP32[(($scale_y)>>2)],tempDoubleI32[1]=HEAP32[((($scale_y)+(4))>>2)],tempDoubleF64[0]);
      var $mul46=($conv45)*($52);
      var $conv47=(($mul46)&-1);
      var $call48=_FT_MulFix($conv44, $conv47);
      $pos=$call48;
      var $53=$ps;
      var $underlineThickness=(($53+10)|0);
      var $54=HEAP16[(($underlineThickness)>>1)];
      var $conv49=(($54 << 16) >> 16);
      var $55=$y_scale;
      var $conv50=(($55)|0);
      var $56=$font_addr;
      var $scale_y51=(($56+84)|0);
      var $57=(tempDoubleI32[0]=HEAP32[(($scale_y51)>>2)],tempDoubleI32[1]=HEAP32[((($scale_y51)+(4))>>2)],tempDoubleF64[0]);
      var $mul52=($conv50)*($57);
      var $div=($mul52)/(2);
      var $conv53=(($div)&-1);
      var $call54=_FT_MulFix($conv49, $conv53);
      $size43=$call54;
      var $58=$pos;
      var $cmp55=(($58)|0) > 0;
      if ($cmp55) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $59=$size43;
      var $cmp57=(($59)|0) <= 0;
      if ($cmp57) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      $retval=1;
      __label__ = 43; break;
    case 13: 
      var $arrayinit_begin=(($points61)|0);
      var $x62=(($arrayinit_begin)|0);
      var $60=$bear;
      HEAP32[(($x62)>>2)]=$60;
      var $y=(($arrayinit_begin+4)|0);
      var $61=$pos;
      var $62=$size43;
      var $add63=((($61)+($62))|0);
      HEAP32[(($y)>>2)]=$add63;
      var $arrayinit_element=(($arrayinit_begin+8)|0);
      var $x64=(($arrayinit_element)|0);
      var $63=$advance;
      HEAP32[(($x64)>>2)]=$63;
      var $y65=(($arrayinit_element+4)|0);
      var $64=$pos;
      var $65=$size43;
      var $add66=((($64)+($65))|0);
      HEAP32[(($y65)>>2)]=$add66;
      var $arrayinit_element67=(($arrayinit_element+8)|0);
      var $x68=(($arrayinit_element67)|0);
      var $66=$advance;
      HEAP32[(($x68)>>2)]=$66;
      var $y69=(($arrayinit_element67+4)|0);
      var $67=$pos;
      var $68=$size43;
      var $sub=((($67)-($68))|0);
      HEAP32[(($y69)>>2)]=$sub;
      var $arrayinit_element70=(($arrayinit_element67+8)|0);
      var $x71=(($arrayinit_element70)|0);
      var $69=$bear;
      HEAP32[(($x71)>>2)]=$69;
      var $y72=(($arrayinit_element70+4)|0);
      var $70=$pos;
      var $71=$size43;
      var $sub73=((($70)-($71))|0);
      HEAP32[(($y72)>>2)]=$sub73;
      var $72=$dir;
      var $cmp74=(($72)|0)==0;
      if ($cmp74) { __label__ = 14; break; } else { __label__ = 19; break; }
    case 14: 
      $i=0;
      __label__ = 15; break;
    case 15: 
      var $73=$i;
      var $cmp77=(($73)|0) < 4;
      if ($cmp77) { __label__ = 16; break; } else { __label__ = 18; break; }
    case 16: 
      var $74=$ol;
      var $n_points79=(($74+2)|0);
      var $75=HEAP16[(($n_points79)>>1)];
      var $idxprom=(($75 << 16) >> 16);
      var $76=$ol;
      var $points80=(($76+4)|0);
      var $77=HEAP32[(($points80)>>2)];
      var $arrayidx=(($77+($idxprom<<3))|0);
      var $78=$i;
      var $arrayidx81=(($points61+($78<<3))|0);
      var $79=$arrayidx;
      var $80=$arrayidx81;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($79)>>2)]=HEAP32[(($80)>>2)];HEAP32[((($79)+(4))>>2)]=HEAP32[((($80)+(4))>>2)];
      var $81=$ol;
      var $n_points82=(($81+2)|0);
      var $82=HEAP16[(($n_points82)>>1)];
      var $inc=((($82)+(1))&65535);
      HEAP16[(($n_points82)>>1)]=$inc;
      var $idxprom83=(($82 << 16) >> 16);
      var $83=$ol;
      var $tags84=(($83+8)|0);
      var $84=HEAP32[(($tags84)>>2)];
      var $arrayidx85=(($84+$idxprom83)|0);
      HEAP8[($arrayidx85)]=1;
      __label__ = 17; break;
    case 17: 
      var $85=$i;
      var $inc86=((($85)+(1))|0);
      $i=$inc86;
      __label__ = 15; break;
    case 18: 
      __label__ = 24; break;
    case 19: 
      $i=3;
      __label__ = 20; break;
    case 20: 
      var $86=$i;
      var $cmp88=(($86)|0) >= 0;
      if ($cmp88) { __label__ = 21; break; } else { __label__ = 23; break; }
    case 21: 
      var $87=$ol;
      var $n_points91=(($87+2)|0);
      var $88=HEAP16[(($n_points91)>>1)];
      var $idxprom92=(($88 << 16) >> 16);
      var $89=$ol;
      var $points93=(($89+4)|0);
      var $90=HEAP32[(($points93)>>2)];
      var $arrayidx94=(($90+($idxprom92<<3))|0);
      var $91=$i;
      var $arrayidx95=(($points61+($91<<3))|0);
      var $92=$arrayidx94;
      var $93=$arrayidx95;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($92)>>2)]=HEAP32[(($93)>>2)];HEAP32[((($92)+(4))>>2)]=HEAP32[((($93)+(4))>>2)];
      var $94=$ol;
      var $n_points96=(($94+2)|0);
      var $95=HEAP16[(($n_points96)>>1)];
      var $inc97=((($95)+(1))&65535);
      HEAP16[(($n_points96)>>1)]=$inc97;
      var $idxprom98=(($95 << 16) >> 16);
      var $96=$ol;
      var $tags99=(($96+8)|0);
      var $97=HEAP32[(($tags99)>>2)];
      var $arrayidx100=(($97+$idxprom98)|0);
      HEAP8[($arrayidx100)]=1;
      __label__ = 22; break;
    case 22: 
      var $98=$i;
      var $dec=((($98)-(1))|0);
      $i=$dec;
      __label__ = 20; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      var $99=$ol;
      var $n_points104=(($99+2)|0);
      var $100=HEAP16[(($n_points104)>>1)];
      var $conv105=(($100 << 16) >> 16);
      var $sub106=((($conv105)-(1))|0);
      var $conv107=(($sub106) & 65535);
      var $101=$ol;
      var $n_contours108=(($101)|0);
      var $102=HEAP16[(($n_contours108)>>1)];
      var $inc109=((($102)+(1))&65535);
      HEAP16[(($n_contours108)>>1)]=$inc109;
      var $idxprom110=(($102 << 16) >> 16);
      var $103=$ol;
      var $contours111=(($103+12)|0);
      var $104=HEAP32[(($contours111)>>2)];
      var $arrayidx112=(($104+($idxprom110<<1))|0);
      HEAP16[(($arrayidx112)>>1)]=$conv107;
      __label__ = 25; break;
    case 25: 
      var $105=$through_addr;
      var $tobool114=(($105)|0)!=0;
      if ($tobool114) { __label__ = 26; break; } else { __label__ = 42; break; }
    case 26: 
      var $106=$os2;
      var $tobool116=(($106)|0)!=0;
      if ($tobool116) { __label__ = 27; break; } else { __label__ = 42; break; }
    case 27: 
      var $107=$os2;
      var $yStrikeoutPosition=(($107+28)|0);
      var $108=HEAP16[(($yStrikeoutPosition)>>1)];
      var $conv120=(($108 << 16) >> 16);
      var $109=$y_scale;
      var $conv121=(($109)|0);
      var $110=$font_addr;
      var $scale_y122=(($110+84)|0);
      var $111=(tempDoubleI32[0]=HEAP32[(($scale_y122)>>2)],tempDoubleI32[1]=HEAP32[((($scale_y122)+(4))>>2)],tempDoubleF64[0]);
      var $mul123=($conv121)*($111);
      var $conv124=(($mul123)&-1);
      var $call125=_FT_MulFix($conv120, $conv124);
      $pos118=$call125;
      var $112=$os2;
      var $yStrikeoutSize=(($112+26)|0);
      var $113=HEAP16[(($yStrikeoutSize)>>1)];
      var $conv126=(($113 << 16) >> 16);
      var $114=$y_scale;
      var $conv127=(($114)|0);
      var $115=$font_addr;
      var $scale_y128=(($115+84)|0);
      var $116=(tempDoubleI32[0]=HEAP32[(($scale_y128)>>2)],tempDoubleI32[1]=HEAP32[((($scale_y128)+(4))>>2)],tempDoubleF64[0]);
      var $mul129=($conv127)*($116);
      var $div130=($mul129)/(2);
      var $conv131=(($div130)&-1);
      var $call132=_FT_MulFix($conv126, $conv131);
      $size119=$call132;
      var $117=$pos118;
      var $cmp133=(($117)|0) < 0;
      if ($cmp133) { __label__ = 29; break; } else { __label__ = 28; break; }
    case 28: 
      var $118=$size119;
      var $cmp136=(($118)|0) <= 0;
      if ($cmp136) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      $retval=1;
      __label__ = 43; break;
    case 30: 
      var $arrayinit_begin141=(($points140)|0);
      var $x142=(($arrayinit_begin141)|0);
      var $119=$bear;
      HEAP32[(($x142)>>2)]=$119;
      var $y143=(($arrayinit_begin141+4)|0);
      var $120=$pos118;
      var $121=$size119;
      var $add144=((($120)+($121))|0);
      HEAP32[(($y143)>>2)]=$add144;
      var $arrayinit_element145=(($arrayinit_begin141+8)|0);
      var $x146=(($arrayinit_element145)|0);
      var $122=$advance;
      HEAP32[(($x146)>>2)]=$122;
      var $y147=(($arrayinit_element145+4)|0);
      var $123=$pos118;
      var $124=$size119;
      var $add148=((($123)+($124))|0);
      HEAP32[(($y147)>>2)]=$add148;
      var $arrayinit_element149=(($arrayinit_element145+8)|0);
      var $x150=(($arrayinit_element149)|0);
      var $125=$advance;
      HEAP32[(($x150)>>2)]=$125;
      var $y151=(($arrayinit_element149+4)|0);
      var $126=$pos118;
      var $127=$size119;
      var $sub152=((($126)-($127))|0);
      HEAP32[(($y151)>>2)]=$sub152;
      var $arrayinit_element153=(($arrayinit_element149+8)|0);
      var $x154=(($arrayinit_element153)|0);
      var $128=$bear;
      HEAP32[(($x154)>>2)]=$128;
      var $y155=(($arrayinit_element153+4)|0);
      var $129=$pos118;
      var $130=$size119;
      var $sub156=((($129)-($130))|0);
      HEAP32[(($y155)>>2)]=$sub156;
      var $131=$dir;
      var $cmp157=(($131)|0)==0;
      if ($cmp157) { __label__ = 31; break; } else { __label__ = 36; break; }
    case 31: 
      $i=0;
      __label__ = 32; break;
    case 32: 
      var $132=$i;
      var $cmp161=(($132)|0) < 4;
      if ($cmp161) { __label__ = 33; break; } else { __label__ = 35; break; }
    case 33: 
      var $133=$ol;
      var $n_points164=(($133+2)|0);
      var $134=HEAP16[(($n_points164)>>1)];
      var $idxprom165=(($134 << 16) >> 16);
      var $135=$ol;
      var $points166=(($135+4)|0);
      var $136=HEAP32[(($points166)>>2)];
      var $arrayidx167=(($136+($idxprom165<<3))|0);
      var $137=$i;
      var $arrayidx168=(($points140+($137<<3))|0);
      var $138=$arrayidx167;
      var $139=$arrayidx168;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($138)>>2)]=HEAP32[(($139)>>2)];HEAP32[((($138)+(4))>>2)]=HEAP32[((($139)+(4))>>2)];
      var $140=$ol;
      var $n_points169=(($140+2)|0);
      var $141=HEAP16[(($n_points169)>>1)];
      var $inc170=((($141)+(1))&65535);
      HEAP16[(($n_points169)>>1)]=$inc170;
      var $idxprom171=(($141 << 16) >> 16);
      var $142=$ol;
      var $tags172=(($142+8)|0);
      var $143=HEAP32[(($tags172)>>2)];
      var $arrayidx173=(($143+$idxprom171)|0);
      HEAP8[($arrayidx173)]=1;
      __label__ = 34; break;
    case 34: 
      var $144=$i;
      var $inc175=((($144)+(1))|0);
      $i=$inc175;
      __label__ = 32; break;
    case 35: 
      __label__ = 41; break;
    case 36: 
      $i=3;
      __label__ = 37; break;
    case 37: 
      var $145=$i;
      var $cmp179=(($145)|0) >= 0;
      if ($cmp179) { __label__ = 38; break; } else { __label__ = 40; break; }
    case 38: 
      var $146=$ol;
      var $n_points182=(($146+2)|0);
      var $147=HEAP16[(($n_points182)>>1)];
      var $idxprom183=(($147 << 16) >> 16);
      var $148=$ol;
      var $points184=(($148+4)|0);
      var $149=HEAP32[(($points184)>>2)];
      var $arrayidx185=(($149+($idxprom183<<3))|0);
      var $150=$i;
      var $arrayidx186=(($points140+($150<<3))|0);
      var $151=$arrayidx185;
      var $152=$arrayidx186;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($151)>>2)]=HEAP32[(($152)>>2)];HEAP32[((($151)+(4))>>2)]=HEAP32[((($152)+(4))>>2)];
      var $153=$ol;
      var $n_points187=(($153+2)|0);
      var $154=HEAP16[(($n_points187)>>1)];
      var $inc188=((($154)+(1))&65535);
      HEAP16[(($n_points187)>>1)]=$inc188;
      var $idxprom189=(($154 << 16) >> 16);
      var $155=$ol;
      var $tags190=(($155+8)|0);
      var $156=HEAP32[(($tags190)>>2)];
      var $arrayidx191=(($156+$idxprom189)|0);
      HEAP8[($arrayidx191)]=1;
      __label__ = 39; break;
    case 39: 
      var $157=$i;
      var $dec193=((($157)-(1))|0);
      $i=$dec193;
      __label__ = 37; break;
    case 40: 
      __label__ = 41; break;
    case 41: 
      var $158=$ol;
      var $n_points196=(($158+2)|0);
      var $159=HEAP16[(($n_points196)>>1)];
      var $conv197=(($159 << 16) >> 16);
      var $sub198=((($conv197)-(1))|0);
      var $conv199=(($sub198) & 65535);
      var $160=$ol;
      var $n_contours200=(($160)|0);
      var $161=HEAP16[(($n_contours200)>>1)];
      var $inc201=((($161)+(1))&65535);
      HEAP16[(($n_contours200)>>1)]=$inc201;
      var $idxprom202=(($161 << 16) >> 16);
      var $162=$ol;
      var $contours203=(($162+12)|0);
      var $163=HEAP32[(($contours203)>>2)];
      var $arrayidx204=(($163+($idxprom202<<1))|0);
      HEAP16[(($arrayidx204)>>1)]=$conv199;
      __label__ = 42; break;
    case 42: 
      $retval=0;
      __label__ = 43; break;
    case 43: 
      var $164=$retval;
      STACKTOP = __stackBase__;
      return $164;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_strike_outline_glyph["X"]=1;

function _ass_font_get_kerning($agg_result, $font, $c1, $c2) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $font_addr;
      var $c1_addr;
      var $c2_addr;
      var $v=__stackBase__;
      var $i;
      var $face;
      var $i1;
      var $i2;
      $font_addr=$font;
      $c1_addr=$c1;
      $c2_addr=$c2;
      var $0=$v;
      HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0;
      var $1=$font_addr;
      var $desc=(($1)|0);
      var $vertical=(($desc+16)|0);
      var $2=HEAP32[(($vertical)>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $3=$agg_result;
      var $4=$v;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];
      __label__ = 17; break;
    case 4: 
      $i=0;
      __label__ = 5; break;
    case 5: 
      var $5=$i;
      var $6=$font_addr;
      var $n_faces=(($6+72)|0);
      var $7=HEAP32[(($n_faces)>>2)];
      var $cmp=(($5)|0) < (($7)|0);
      if ($cmp) { __label__ = 6; break; } else { __label__ = 16; break; }
    case 6: 
      var $8=$i;
      var $9=$font_addr;
      var $faces=(($9+28)|0);
      var $arrayidx=(($faces+($8<<2))|0);
      var $10=HEAP32[(($arrayidx)>>2)];
      $face=$10;
      var $11=$face;
      var $12=$c1_addr;
      var $call=_FT_Get_Char_Index($11, $12);
      $i1=$call;
      var $13=$face;
      var $14=$c2_addr;
      var $call1=_FT_Get_Char_Index($13, $14);
      $i2=$call1;
      var $15=$i1;
      var $tobool2=(($15)|0)!=0;
      if ($tobool2) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $16=$i2;
      var $tobool3=(($16)|0)!=0;
      if ($tobool3) { __label__ = 8; break; } else { __label__ = 11; break; }
    case 8: 
      var $17=$face;
      var $face_flags=(($17+8)|0);
      var $18=HEAP32[(($face_flags)>>2)];
      var $and=$18 & 64;
      var $tobool5=(($and)|0)!=0;
      if ($tobool5) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $19=$face;
      var $20=$i1;
      var $21=$i2;
      var $call7=_FT_Get_Kerning($19, $20, $21, 0, $v);
      __label__ = 10; break;
    case 10: 
      var $22=$agg_result;
      var $23=$v;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($22)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];
      __label__ = 17; break;
    case 11: 
      var $24=$i1;
      var $tobool10=(($24)|0)!=0;
      if ($tobool10) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $25=$i2;
      var $tobool11=(($25)|0)!=0;
      if ($tobool11) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $26=$agg_result;
      var $27=$v;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];
      __label__ = 17; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $28=$i;
      var $inc=((($28)+(1))|0);
      $i=$inc;
      __label__ = 5; break;
    case 16: 
      var $29=$agg_result;
      var $30=$v;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($29)>>2)]=HEAP32[(($30)>>2)];HEAP32[((($29)+(4))>>2)]=HEAP32[((($30)+(4))>>2)];
      __label__ = 17; break;
    case 17: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_font_get_kerning["X"]=1;

function _ass_font_free($font) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $font_addr;
      var $i;
      $font_addr=$font;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $0=$i;
      var $1=$font_addr;
      var $n_faces=(($1+72)|0);
      var $2=HEAP32[(($n_faces)>>2)];
      var $cmp=(($0)|0) < (($2)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $3=$i;
      var $4=$font_addr;
      var $faces=(($4+28)|0);
      var $arrayidx=(($faces+($3<<2))|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      var $tobool=(($5)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $6=$i;
      var $7=$font_addr;
      var $faces1=(($7+28)|0);
      var $arrayidx2=(($faces1+($6<<2))|0);
      var $8=HEAP32[(($arrayidx2)>>2)];
      var $call=_FT_Done_Face($8);
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $9=$i;
      var $inc=((($9)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 8: 
      var $10=$font_addr;
      var $shaper_priv=(($10+68)|0);
      var $11=HEAP32[(($shaper_priv)>>2)];
      var $tobool3=(($11)|0)!=0;
      if ($tobool3) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $12=$font_addr;
      var $shaper_priv5=(($12+68)|0);
      var $13=HEAP32[(($shaper_priv5)>>2)];
      _ass_shaper_font_data_free($13);
      __label__ = 10; break;
    case 10: 
      var $14=$font_addr;
      var $desc=(($14)|0);
      var $family=(($desc)|0);
      var $15=HEAP32[(($family)>>2)];
      _free($15);
      var $16=$font_addr;
      var $17=$16;
      _free($17);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _d16_to_d6($x) {
  ;
  var __label__;

  var $x_addr;
  $x_addr=$x;
  var $0=$x_addr;
  var $add=((($0)+(512))|0);
  var $shr=$add >> 10;
  ;
  return $shr;
}


function _get_contour_cbox($box, $points, $start, $end) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $box_addr;
      var $points_addr;
      var $start_addr;
      var $end_addr;
      var $i;
      $box_addr=$box;
      $points_addr=$points;
      $start_addr=$start;
      $end_addr=$end;
      var $0=$box_addr;
      var $yMin=(($0+4)|0);
      HEAP32[(($yMin)>>2)]=2147483647;
      var $1=$box_addr;
      var $xMin=(($1)|0);
      HEAP32[(($xMin)>>2)]=2147483647;
      var $2=$box_addr;
      var $yMax=(($2+12)|0);
      HEAP32[(($yMax)>>2)]=-2147483648;
      var $3=$box_addr;
      var $xMax=(($3+8)|0);
      HEAP32[(($xMax)>>2)]=-2147483648;
      var $4=$start_addr;
      $i=$4;
      __label__ = 3; break;
    case 3: 
      var $5=$i;
      var $6=$end_addr;
      var $cmp=(($5)|0) <= (($6)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 18; break; }
    case 4: 
      var $7=$i;
      var $8=$points_addr;
      var $arrayidx=(($8+($7<<3))|0);
      var $x=(($arrayidx)|0);
      var $9=HEAP32[(($x)>>2)];
      var $10=$box_addr;
      var $xMin1=(($10)|0);
      var $11=HEAP32[(($xMin1)>>2)];
      var $cmp2=(($9)|0) < (($11)|0);
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $12=$i;
      var $13=$points_addr;
      var $arrayidx3=(($13+($12<<3))|0);
      var $x4=(($arrayidx3)|0);
      var $14=HEAP32[(($x4)>>2)];
      var $cond = $14;__label__ = 7; break;
    case 6: 
      var $15=$box_addr;
      var $xMin5=(($15)|0);
      var $16=HEAP32[(($xMin5)>>2)];
      var $cond = $16;__label__ = 7; break;
    case 7: 
      var $cond;
      var $17=$box_addr;
      var $xMin6=(($17)|0);
      HEAP32[(($xMin6)>>2)]=$cond;
      var $18=$i;
      var $19=$points_addr;
      var $arrayidx7=(($19+($18<<3))|0);
      var $x8=(($arrayidx7)|0);
      var $20=HEAP32[(($x8)>>2)];
      var $21=$box_addr;
      var $xMax9=(($21+8)|0);
      var $22=HEAP32[(($xMax9)>>2)];
      var $cmp10=(($20)|0) > (($22)|0);
      if ($cmp10) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $23=$i;
      var $24=$points_addr;
      var $arrayidx12=(($24+($23<<3))|0);
      var $x13=(($arrayidx12)|0);
      var $25=HEAP32[(($x13)>>2)];
      var $cond17 = $25;__label__ = 10; break;
    case 9: 
      var $26=$box_addr;
      var $xMax15=(($26+8)|0);
      var $27=HEAP32[(($xMax15)>>2)];
      var $cond17 = $27;__label__ = 10; break;
    case 10: 
      var $cond17;
      var $28=$box_addr;
      var $xMax18=(($28+8)|0);
      HEAP32[(($xMax18)>>2)]=$cond17;
      var $29=$i;
      var $30=$points_addr;
      var $arrayidx19=(($30+($29<<3))|0);
      var $y=(($arrayidx19+4)|0);
      var $31=HEAP32[(($y)>>2)];
      var $32=$box_addr;
      var $yMin20=(($32+4)|0);
      var $33=HEAP32[(($yMin20)>>2)];
      var $cmp21=(($31)|0) < (($33)|0);
      if ($cmp21) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $34=$i;
      var $35=$points_addr;
      var $arrayidx23=(($35+($34<<3))|0);
      var $y24=(($arrayidx23+4)|0);
      var $36=HEAP32[(($y24)>>2)];
      var $cond28 = $36;__label__ = 13; break;
    case 12: 
      var $37=$box_addr;
      var $yMin26=(($37+4)|0);
      var $38=HEAP32[(($yMin26)>>2)];
      var $cond28 = $38;__label__ = 13; break;
    case 13: 
      var $cond28;
      var $39=$box_addr;
      var $yMin29=(($39+4)|0);
      HEAP32[(($yMin29)>>2)]=$cond28;
      var $40=$i;
      var $41=$points_addr;
      var $arrayidx30=(($41+($40<<3))|0);
      var $y31=(($arrayidx30+4)|0);
      var $42=HEAP32[(($y31)>>2)];
      var $43=$box_addr;
      var $yMax32=(($43+12)|0);
      var $44=HEAP32[(($yMax32)>>2)];
      var $cmp33=(($42)|0) > (($44)|0);
      if ($cmp33) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $45=$i;
      var $46=$points_addr;
      var $arrayidx35=(($46+($45<<3))|0);
      var $y36=(($arrayidx35+4)|0);
      var $47=HEAP32[(($y36)>>2)];
      var $cond40 = $47;__label__ = 16; break;
    case 15: 
      var $48=$box_addr;
      var $yMax38=(($48+12)|0);
      var $49=HEAP32[(($yMax38)>>2)];
      var $cond40 = $49;__label__ = 16; break;
    case 16: 
      var $cond40;
      var $50=$box_addr;
      var $yMax41=(($50+12)|0);
      HEAP32[(($yMax41)>>2)]=$cond40;
      __label__ = 17; break;
    case 17: 
      var $51=$i;
      var $inc=((($51)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 18: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_get_contour_cbox["X"]=1;

function _get_contour_direction($points, $start, $end) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $points_addr;
      var $start_addr;
      var $end_addr;
      var $i;
      var $sum=__stackBase__;
      var $x;
      var $y;
      $points_addr=$points;
      $start_addr=$start;
      $end_addr=$end;
      var $$emscripten$temp$0$0=0;
      var $$emscripten$temp$0$1=0;
      var $st$12$0=(($sum)|0);
      HEAP32[(($st$12$0)>>2)]=$$emscripten$temp$0$0;
      var $st$12$1=(($sum+4)|0);
      HEAP32[(($st$12$1)>>2)]=$$emscripten$temp$0$1;
      var $0=$start_addr;
      var $1=$points_addr;
      var $arrayidx=(($1+($0<<3))|0);
      var $x1=(($arrayidx)|0);
      var $2=HEAP32[(($x1)>>2)];
      $x=$2;
      var $3=$start_addr;
      var $4=$points_addr;
      var $arrayidx2=(($4+($3<<3))|0);
      var $y3=(($arrayidx2+4)|0);
      var $5=HEAP32[(($y3)>>2)];
      $y=$5;
      var $6=$start_addr;
      var $add=((($6)+(1))|0);
      $i=$add;
      __label__ = 3; break;
    case 3: 
      var $7=$i;
      var $8=$end_addr;
      var $cmp=(($7)|0) <= (($8)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $9=$x;
      var $10=$i;
      var $11=$points_addr;
      var $arrayidx4=(($11+($10<<3))|0);
      var $y5=(($arrayidx4+4)|0);
      var $12=HEAP32[(($y5)>>2)];
      var $13=$y;
      var $sub=((($12)-($13))|0);
      var $mul=((($9)*($sub))|0);
      var $14=$y;
      var $15=$i;
      var $16=$points_addr;
      var $arrayidx6=(($16+($15<<3))|0);
      var $x7=(($arrayidx6)|0);
      var $17=HEAP32[(($x7)>>2)];
      var $18=$x;
      var $sub8=((($17)-($18))|0);
      var $mul9=((($14)*($sub8))|0);
      var $sub10=((($mul)-($mul9))|0);
      var $conv$0=$sub10;
      var $conv$1=(($sub10|0) < 0 ? -1 : 0);
      var $st$21$0=(($sum)|0);
      var $19$0=HEAP32[(($st$21$0)>>2)];
      var $st$21$1=(($sum+4)|0);
      var $19$1=HEAP32[(($st$21$1)>>2)];
      var $add11$0 = (i64Math.add($19$0,$19$1,$conv$0,$conv$1),i64Math.result[0]); var $add11$1 = i64Math.result[1];
      var $st$26$0=(($sum)|0);
      HEAP32[(($st$26$0)>>2)]=$add11$0;
      var $st$26$1=(($sum+4)|0);
      HEAP32[(($st$26$1)>>2)]=$add11$1;
      var $20=$i;
      var $21=$points_addr;
      var $arrayidx12=(($21+($20<<3))|0);
      var $x13=(($arrayidx12)|0);
      var $22=HEAP32[(($x13)>>2)];
      $x=$22;
      var $23=$i;
      var $24=$points_addr;
      var $arrayidx14=(($24+($23<<3))|0);
      var $y15=(($arrayidx14+4)|0);
      var $25=HEAP32[(($y15)>>2)];
      $y=$25;
      __label__ = 5; break;
    case 5: 
      var $26=$i;
      var $inc=((($26)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 6: 
      var $27=$x;
      var $28=$start_addr;
      var $29=$points_addr;
      var $arrayidx16=(($29+($28<<3))|0);
      var $y17=(($arrayidx16+4)|0);
      var $30=HEAP32[(($y17)>>2)];
      var $31=$y;
      var $sub18=((($30)-($31))|0);
      var $mul19=((($27)*($sub18))|0);
      var $32=$y;
      var $33=$start_addr;
      var $34=$points_addr;
      var $arrayidx20=(($34+($33<<3))|0);
      var $x21=(($arrayidx20)|0);
      var $35=HEAP32[(($x21)>>2)];
      var $36=$x;
      var $sub22=((($35)-($36))|0);
      var $mul23=((($32)*($sub22))|0);
      var $sub24=((($mul19)-($mul23))|0);
      var $conv25$0=$sub24;
      var $conv25$1=(($sub24|0) < 0 ? -1 : 0);
      var $st$21$0=(($sum)|0);
      var $37$0=HEAP32[(($st$21$0)>>2)];
      var $st$21$1=(($sum+4)|0);
      var $37$1=HEAP32[(($st$21$1)>>2)];
      var $add26$0 = (i64Math.add($37$0,$37$1,$conv25$0,$conv25$1),i64Math.result[0]); var $add26$1 = i64Math.result[1];
      var $st$26$0=(($sum)|0);
      HEAP32[(($st$26$0)>>2)]=$add26$0;
      var $st$26$1=(($sum+4)|0);
      HEAP32[(($st$26$1)>>2)]=$add26$1;
      var $st$30$0=(($sum)|0);
      var $38$0=HEAP32[(($st$30$0)>>2)];
      var $st$30$1=(($sum+4)|0);
      var $38$1=HEAP32[(($st$30$1)>>2)];
      var $$emscripten$temp$1$0=0;
      var $$emscripten$temp$1$1=0;
      var $cmp27=($38$1|0) > ($$emscripten$temp$1$1|0) || (($38$1|0) == ($$emscripten$temp$1$1|0) && ($38$0>>>0) >  ($$emscripten$temp$1$0>>>0));
      var $conv28=(($cmp27)&1);
      STACKTOP = __stackBase__;
      return $conv28;
    default: assert(0, "bad label: " + __label__);
  }
}
_get_contour_direction["X"]=1;

function _fix_freetype_stroker($outline, $border_x, $border_y) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $outline_addr;
      var $border_x_addr;
      var $border_y_addr;
      var $nc;
      var $begin;
      var $stop;
      var $modified;
      var $valid_cont;
      var $start;
      var $end;
      var $boxes;
      var $i;
      var $j;
      var $inside_direction;
      var $dir;
      var $temp=__stackBase__;
      var $temp2;
      var $box=(__stackBase__)+(8);
      var $width;
      var $height;
      var $p;
      var $c;
      $outline_addr=$outline;
      $border_x_addr=$border_x;
      $border_y_addr=$border_y;
      var $0=$outline_addr;
      var $n_contours=(($0)|0);
      var $1=HEAP16[(($n_contours)>>1)];
      var $conv=(($1 << 16) >> 16);
      $nc=$conv;
      $modified=0;
      var $2=$nc;
      var $call=_malloc($2);
      $valid_cont=$call;
      $start=0;
      $end=-1;
      var $3=$nc;
      var $mul=((($3<<4))|0);
      var $call1=_malloc($mul);
      var $4=$call1;
      $boxes=$4;
      var $5=$outline_addr;
      var $call2=_FT_Outline_Get_Orientation($5);
      var $cmp=(($call2)|0)==0;
      var $conv3=(($cmp)&1);
      $inside_direction=$conv3;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $6=$i;
      var $7=$nc;
      var $cmp4=(($6)|0) < (($7)|0);
      if ($cmp4) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $8=$end;
      var $add=((($8)+(1))|0);
      $start=$add;
      var $9=$i;
      var $10=$outline_addr;
      var $contours=(($10+12)|0);
      var $11=HEAP32[(($contours)>>2)];
      var $arrayidx=(($11+($9<<1))|0);
      var $12=HEAP16[(($arrayidx)>>1)];
      var $conv6=(($12 << 16) >> 16);
      $end=$conv6;
      var $13=$i;
      var $14=$boxes;
      var $arrayidx7=(($14+($13<<4))|0);
      var $15=$outline_addr;
      var $points=(($15+4)|0);
      var $16=HEAP32[(($points)>>2)];
      var $17=$start;
      var $18=$end;
      _get_contour_cbox($arrayidx7, $16, $17, $18);
      __label__ = 5; break;
    case 5: 
      var $19=$i;
      var $inc=((($19)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 6: 
      $end=-1;
      $i=0;
      __label__ = 7; break;
    case 7: 
      var $20=$i;
      var $21=$nc;
      var $cmp9=(($20)|0) < (($21)|0);
      if ($cmp9) { __label__ = 8; break; } else { __label__ = 33; break; }
    case 8: 
      var $22=$end;
      var $add12=((($22)+(1))|0);
      $start=$add12;
      var $23=$i;
      var $24=$outline_addr;
      var $contours13=(($24+12)|0);
      var $25=HEAP32[(($contours13)>>2)];
      var $arrayidx14=(($25+($23<<1))|0);
      var $26=HEAP16[(($arrayidx14)>>1)];
      var $conv15=(($26 << 16) >> 16);
      $end=$conv15;
      var $27=$outline_addr;
      var $points16=(($27+4)|0);
      var $28=HEAP32[(($points16)>>2)];
      var $29=$start;
      var $30=$end;
      var $call17=_get_contour_direction($28, $29, $30);
      $dir=$call17;
      var $31=$i;
      var $32=$valid_cont;
      var $arrayidx18=(($32+$31)|0);
      HEAP8[($arrayidx18)]=1;
      var $33=$dir;
      var $34=$inside_direction;
      var $cmp19=(($33)|0)==(($34)|0);
      if ($cmp19) { __label__ = 9; break; } else { __label__ = 25; break; }
    case 9: 
      $j=0;
      __label__ = 10; break;
    case 10: 
      var $35=$j;
      var $36=$nc;
      var $cmp22=(($35)|0) < (($36)|0);
      if ($cmp22) { __label__ = 11; break; } else { __label__ = 20; break; }
    case 11: 
      var $37=$i;
      var $38=$j;
      var $cmp25=(($37)|0)==(($38)|0);
      if ($cmp25) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      __label__ = 19; break;
    case 13: 
      var $39=$i;
      var $40=$boxes;
      var $arrayidx28=(($40+($39<<4))|0);
      var $xMin=(($arrayidx28)|0);
      var $41=HEAP32[(($xMin)>>2)];
      var $42=$j;
      var $43=$boxes;
      var $arrayidx29=(($43+($42<<4))|0);
      var $xMin30=(($arrayidx29)|0);
      var $44=HEAP32[(($xMin30)>>2)];
      var $cmp31=(($41)|0) >= (($44)|0);
      if ($cmp31) { __label__ = 14; break; } else { __label__ = 18; break; }
    case 14: 
      var $45=$i;
      var $46=$boxes;
      var $arrayidx33=(($46+($45<<4))|0);
      var $xMax=(($arrayidx33+8)|0);
      var $47=HEAP32[(($xMax)>>2)];
      var $48=$j;
      var $49=$boxes;
      var $arrayidx34=(($49+($48<<4))|0);
      var $xMax35=(($arrayidx34+8)|0);
      var $50=HEAP32[(($xMax35)>>2)];
      var $cmp36=(($47)|0) <= (($50)|0);
      if ($cmp36) { __label__ = 15; break; } else { __label__ = 18; break; }
    case 15: 
      var $51=$i;
      var $52=$boxes;
      var $arrayidx39=(($52+($51<<4))|0);
      var $yMin=(($arrayidx39+4)|0);
      var $53=HEAP32[(($yMin)>>2)];
      var $54=$j;
      var $55=$boxes;
      var $arrayidx40=(($55+($54<<4))|0);
      var $yMin41=(($arrayidx40+4)|0);
      var $56=HEAP32[(($yMin41)>>2)];
      var $cmp42=(($53)|0) >= (($56)|0);
      if ($cmp42) { __label__ = 16; break; } else { __label__ = 18; break; }
    case 16: 
      var $57=$i;
      var $58=$boxes;
      var $arrayidx45=(($58+($57<<4))|0);
      var $yMax=(($arrayidx45+12)|0);
      var $59=HEAP32[(($yMax)>>2)];
      var $60=$j;
      var $61=$boxes;
      var $arrayidx46=(($61+($60<<4))|0);
      var $yMax47=(($arrayidx46+12)|0);
      var $62=HEAP32[(($yMax47)>>2)];
      var $cmp48=(($59)|0) <= (($62)|0);
      if ($cmp48) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      __label__ = 26; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $63=$j;
      var $inc53=((($63)+(1))|0);
      $j=$inc53;
      __label__ = 10; break;
    case 20: 
      $j=0;
      __label__ = 21; break;
    case 21: 
      var $64=$j;
      var $65=$end;
      var $add56=((($65)+(1))|0);
      var $66=$start;
      var $sub=((($add56)-($66))|0);
      var $div=((((($sub)|0))/(2))&-1);
      var $cmp57=(($64)|0) < (($div)|0);
      if ($cmp57) { __label__ = 22; break; } else { __label__ = 24; break; }
    case 22: 
      var $67=$start;
      var $68=$j;
      var $add60=((($67)+($68))|0);
      var $69=$outline_addr;
      var $points61=(($69+4)|0);
      var $70=HEAP32[(($points61)>>2)];
      var $arrayidx62=(($70+($add60<<3))|0);
      var $71=$temp;
      var $72=$arrayidx62;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($71)>>2)]=HEAP32[(($72)>>2)];HEAP32[((($71)+(4))>>2)]=HEAP32[((($72)+(4))>>2)];
      var $73=$start;
      var $74=$j;
      var $add63=((($73)+($74))|0);
      var $75=$outline_addr;
      var $tags=(($75+8)|0);
      var $76=HEAP32[(($tags)>>2)];
      var $arrayidx64=(($76+$add63)|0);
      var $77=HEAP8[($arrayidx64)];
      $temp2=$77;
      var $78=$start;
      var $79=$j;
      var $add65=((($78)+($79))|0);
      var $80=$outline_addr;
      var $points66=(($80+4)|0);
      var $81=HEAP32[(($points66)>>2)];
      var $arrayidx67=(($81+($add65<<3))|0);
      var $82=$end;
      var $83=$j;
      var $sub68=((($82)-($83))|0);
      var $84=$outline_addr;
      var $points69=(($84+4)|0);
      var $85=HEAP32[(($points69)>>2)];
      var $arrayidx70=(($85+($sub68<<3))|0);
      var $86=$arrayidx67;
      var $87=$arrayidx70;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($86)>>2)]=HEAP32[(($87)>>2)];HEAP32[((($86)+(4))>>2)]=HEAP32[((($87)+(4))>>2)];
      var $88=$end;
      var $89=$j;
      var $sub71=((($88)-($89))|0);
      var $90=$outline_addr;
      var $points72=(($90+4)|0);
      var $91=HEAP32[(($points72)>>2)];
      var $arrayidx73=(($91+($sub71<<3))|0);
      var $92=$arrayidx73;
      var $93=$temp;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($92)>>2)]=HEAP32[(($93)>>2)];HEAP32[((($92)+(4))>>2)]=HEAP32[((($93)+(4))>>2)];
      var $94=$end;
      var $95=$j;
      var $sub74=((($94)-($95))|0);
      var $96=$outline_addr;
      var $tags75=(($96+8)|0);
      var $97=HEAP32[(($tags75)>>2)];
      var $arrayidx76=(($97+$sub74)|0);
      var $98=HEAP8[($arrayidx76)];
      var $99=$start;
      var $100=$j;
      var $add77=((($99)+($100))|0);
      var $101=$outline_addr;
      var $tags78=(($101+8)|0);
      var $102=HEAP32[(($tags78)>>2)];
      var $arrayidx79=(($102+$add77)|0);
      HEAP8[($arrayidx79)]=$98;
      var $103=$temp2;
      var $104=$end;
      var $105=$j;
      var $sub80=((($104)-($105))|0);
      var $106=$outline_addr;
      var $tags81=(($106+8)|0);
      var $107=HEAP32[(($tags81)>>2)];
      var $arrayidx82=(($107+$sub80)|0);
      HEAP8[($arrayidx82)]=$103;
      __label__ = 23; break;
    case 23: 
      var $108=$j;
      var $inc84=((($108)+(1))|0);
      $j=$inc84;
      __label__ = 21; break;
    case 24: 
      var $109=$dir;
      var $xor=$109 ^ 1;
      $dir=$xor;
      __label__ = 25; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      var $110=$dir;
      var $111=$inside_direction;
      var $cmp87=(($110)|0)==(($111)|0);
      if ($cmp87) { __label__ = 27; break; } else { __label__ = 31; break; }
    case 27: 
      var $112=$outline_addr;
      var $points90=(($112+4)|0);
      var $113=HEAP32[(($points90)>>2)];
      var $114=$start;
      var $115=$end;
      _get_contour_cbox($box, $113, $114, $115);
      var $xMax91=(($box+8)|0);
      var $116=HEAP32[(($xMax91)>>2)];
      var $xMin92=(($box)|0);
      var $117=HEAP32[(($xMin92)>>2)];
      var $sub93=((($116)-($117))|0);
      $width=$sub93;
      var $yMax94=(($box+12)|0);
      var $118=HEAP32[(($yMax94)>>2)];
      var $yMin95=(($box+4)|0);
      var $119=HEAP32[(($yMin95)>>2)];
      var $sub96=((($118)-($119))|0);
      $height=$sub96;
      var $120=$width;
      var $121=$border_x_addr;
      var $mul97=((($121<<1))|0);
      var $cmp98=(($120)|0) < (($mul97)|0);
      if ($cmp98) { __label__ = 29; break; } else { __label__ = 28; break; }
    case 28: 
      var $122=$height;
      var $123=$border_y_addr;
      var $mul100=((($123<<1))|0);
      var $cmp101=(($122)|0) < (($mul100)|0);
      if ($cmp101) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $124=$i;
      var $125=$valid_cont;
      var $arrayidx104=(($125+$124)|0);
      HEAP8[($arrayidx104)]=0;
      $modified=1;
      __label__ = 30; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      __label__ = 32; break;
    case 32: 
      var $126=$i;
      var $inc108=((($126)+(1))|0);
      $i=$inc108;
      __label__ = 7; break;
    case 33: 
      var $127=$modified;
      var $tobool=(($127 << 24) >> 24)!=0;
      if ($tobool) { __label__ = 34; break; } else { __label__ = 48; break; }
    case 34: 
      $p=0;
      $c=0;
      $i=0;
      __label__ = 35; break;
    case 35: 
      var $128=$i;
      var $129=$nc;
      var $cmp112=(($128)|0) < (($129)|0);
      if ($cmp112) { __label__ = 36; break; } else { __label__ = 47; break; }
    case 36: 
      var $130=$i;
      var $131=$valid_cont;
      var $arrayidx115=(($131+$130)|0);
      var $132=HEAP8[($arrayidx115)];
      var $tobool116=(($132 << 24) >> 24)!=0;
      if ($tobool116) { __label__ = 38; break; } else { __label__ = 37; break; }
    case 37: 
      __label__ = 46; break;
    case 38: 
      var $133=$i;
      var $cmp119=(($133)|0)==0;
      if ($cmp119) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $cond = 0;__label__ = 41; break;
    case 40: 
      var $134=$i;
      var $sub121=((($134)-(1))|0);
      var $135=$outline_addr;
      var $contours122=(($135+12)|0);
      var $136=HEAP32[(($contours122)>>2)];
      var $arrayidx123=(($136+($sub121<<1))|0);
      var $137=HEAP16[(($arrayidx123)>>1)];
      var $conv124=(($137 << 16) >> 16);
      var $add125=((($conv124)+(1))|0);
      var $cond = $add125;__label__ = 41; break;
    case 41: 
      var $cond;
      $begin=$cond;
      var $138=$i;
      var $139=$outline_addr;
      var $contours126=(($139+12)|0);
      var $140=HEAP32[(($contours126)>>2)];
      var $arrayidx127=(($140+($138<<1))|0);
      var $141=HEAP16[(($arrayidx127)>>1)];
      var $conv128=(($141 << 16) >> 16);
      $stop=$conv128;
      var $142=$begin;
      $j=$142;
      __label__ = 42; break;
    case 42: 
      var $143=$j;
      var $144=$stop;
      var $cmp130=(($143)|0) <= (($144)|0);
      if ($cmp130) { __label__ = 43; break; } else { __label__ = 45; break; }
    case 43: 
      var $145=$j;
      var $146=$outline_addr;
      var $points133=(($146+4)|0);
      var $147=HEAP32[(($points133)>>2)];
      var $arrayidx134=(($147+($145<<3))|0);
      var $x=(($arrayidx134)|0);
      var $148=HEAP32[(($x)>>2)];
      var $149=$p;
      var $150=$outline_addr;
      var $points135=(($150+4)|0);
      var $151=HEAP32[(($points135)>>2)];
      var $arrayidx136=(($151+($149<<3))|0);
      var $x137=(($arrayidx136)|0);
      HEAP32[(($x137)>>2)]=$148;
      var $152=$j;
      var $153=$outline_addr;
      var $points138=(($153+4)|0);
      var $154=HEAP32[(($points138)>>2)];
      var $arrayidx139=(($154+($152<<3))|0);
      var $y=(($arrayidx139+4)|0);
      var $155=HEAP32[(($y)>>2)];
      var $156=$p;
      var $157=$outline_addr;
      var $points140=(($157+4)|0);
      var $158=HEAP32[(($points140)>>2)];
      var $arrayidx141=(($158+($156<<3))|0);
      var $y142=(($arrayidx141+4)|0);
      HEAP32[(($y142)>>2)]=$155;
      var $159=$j;
      var $160=$outline_addr;
      var $tags143=(($160+8)|0);
      var $161=HEAP32[(($tags143)>>2)];
      var $arrayidx144=(($161+$159)|0);
      var $162=HEAP8[($arrayidx144)];
      var $163=$p;
      var $164=$outline_addr;
      var $tags145=(($164+8)|0);
      var $165=HEAP32[(($tags145)>>2)];
      var $arrayidx146=(($165+$163)|0);
      HEAP8[($arrayidx146)]=$162;
      var $166=$p;
      var $inc147=((($166)+(1))|0);
      $p=$inc147;
      __label__ = 44; break;
    case 44: 
      var $167=$j;
      var $inc149=((($167)+(1))|0);
      $j=$inc149;
      __label__ = 42; break;
    case 45: 
      var $168=$p;
      var $sub151=((($168)-(1))|0);
      var $conv152=(($sub151) & 65535);
      var $169=$c;
      var $170=$outline_addr;
      var $contours153=(($170+12)|0);
      var $171=HEAP32[(($contours153)>>2)];
      var $arrayidx154=(($171+($169<<1))|0);
      HEAP16[(($arrayidx154)>>1)]=$conv152;
      var $172=$c;
      var $inc155=((($172)+(1))|0);
      $c=$inc155;
      __label__ = 46; break;
    case 46: 
      var $173=$i;
      var $inc157=((($173)+(1))|0);
      $i=$inc157;
      __label__ = 35; break;
    case 47: 
      var $174=$p;
      var $conv159=(($174) & 65535);
      var $175=$outline_addr;
      var $n_points=(($175+2)|0);
      HEAP16[(($n_points)>>1)]=$conv159;
      var $176=$c;
      var $conv160=(($176) & 65535);
      var $177=$outline_addr;
      var $n_contours161=(($177)|0);
      HEAP16[(($n_contours161)>>1)]=$conv160;
      __label__ = 48; break;
    case 48: 
      var $178=$boxes;
      var $179=$178;
      _free($179);
      var $180=$valid_cont;
      _free($180);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_fix_freetype_stroker["X"]=1;

function _find_font($library, $name) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $library_addr;
      var $name_addr;
      var $i;
      $library_addr=$library;
      $name_addr=$name;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $0=$i;
      var $1=$library_addr;
      var $num_fontdata=(($1+16)|0);
      var $2=HEAP32[(($num_fontdata)>>2)];
      var $cmp=(($0)|0) < (($2)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $3=$name_addr;
      var $4=$i;
      var $5=$library_addr;
      var $fontdata=(($5+12)|0);
      var $6=HEAP32[(($fontdata)>>2)];
      var $arrayidx=(($6+($4)*(12))|0);
      var $name1=(($arrayidx)|0);
      var $7=HEAP32[(($name1)>>2)];
      var $call=_strcasecmp($3, $7);
      var $cmp2=(($call)|0)==0;
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $8=$i;
      $retval=$8;
      __label__ = 9; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $9=$i;
      var $inc=((($9)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 8: 
      $retval=-1;
      __label__ = 9; break;
    case 9: 
      var $10=$retval;
      ;
      return $10;
    default: assert(0, "bad label: " + __label__);
  }
}


function _charmap_magic($library, $face) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $library_addr;
      var $face_addr;
      var $i;
      var $ms_cmap;
      var $cmap;
      var $pid;
      var $eid;
      var $cmap18;
      $library_addr=$library;
      $face_addr=$face;
      $ms_cmap=-1;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $0=$i;
      var $1=$face_addr;
      var $num_charmaps=(($1+36)|0);
      var $2=HEAP32[(($num_charmaps)>>2)];
      var $cmp=(($0)|0) < (($2)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 14; break; }
    case 4: 
      var $3=$i;
      var $4=$face_addr;
      var $charmaps=(($4+40)|0);
      var $5=HEAP32[(($charmaps)>>2)];
      var $arrayidx=(($5+($3<<2))|0);
      var $6=HEAP32[(($arrayidx)>>2)];
      $cmap=$6;
      var $7=$cmap;
      var $platform_id=(($7+8)|0);
      var $8=HEAPU16[(($platform_id)>>1)];
      var $conv=(($8)&65535);
      $pid=$conv;
      var $9=$cmap;
      var $encoding_id=(($9+10)|0);
      var $10=HEAPU16[(($encoding_id)>>1)];
      var $conv1=(($10)&65535);
      $eid=$conv1;
      var $11=$pid;
      var $cmp2=(($11)|0)==3;
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $12=$eid;
      var $cmp4=(($12)|0)==1;
      if ($cmp4) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $13=$eid;
      var $cmp6=(($13)|0)==10;
      if ($cmp6) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $14=$face_addr;
      var $15=$cmap;
      var $call=_FT_Set_Charmap($14, $15);
      __label__ = 20; break;
    case 8: 
      var $16=$pid;
      var $cmp8=(($16)|0)==3;
      if ($cmp8) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $17=$ms_cmap;
      var $cmp11=(($17)|0) < 0;
      if ($cmp11) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $18=$i;
      $ms_cmap=$18;
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $19=$i;
      var $inc=((($19)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 14: 
      var $20=$ms_cmap;
      var $cmp15=(($20)|0) >= 0;
      if ($cmp15) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $21=$ms_cmap;
      var $22=$face_addr;
      var $charmaps19=(($22+40)|0);
      var $23=HEAP32[(($charmaps19)>>2)];
      var $arrayidx20=(($23+($21<<2))|0);
      var $24=HEAP32[(($arrayidx20)>>2)];
      $cmap18=$24;
      var $25=$face_addr;
      var $26=$cmap18;
      var $call21=_FT_Set_Charmap($25, $26);
      __label__ = 20; break;
    case 16: 
      var $27=$face_addr;
      var $charmap=(($27+92)|0);
      var $28=HEAP32[(($charmap)>>2)];
      var $tobool=(($28)|0)!=0;
      if ($tobool) { __label__ = 20; break; } else { __label__ = 17; break; }
    case 17: 
      var $29=$face_addr;
      var $num_charmaps24=(($29+36)|0);
      var $30=HEAP32[(($num_charmaps24)>>2)];
      var $cmp25=(($30)|0)==0;
      if ($cmp25) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $31=$library_addr;
      _ass_msg($31, 2, ((STRING_TABLE.__str6108)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 20; break;
    case 19: 
      var $32=$library_addr;
      _ass_msg($32, 2, ((STRING_TABLE.__str7109)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $33=$face_addr;
      var $34=$face_addr;
      var $charmaps29=(($34+40)|0);
      var $35=HEAP32[(($charmaps29)>>2)];
      var $arrayidx30=(($35)|0);
      var $36=HEAP32[(($arrayidx30)>>2)];
      var $call31=_FT_Set_Charmap($33, $36);
      __label__ = 20; break;
    case 20: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_charmap_magic["X"]=1;

function _buggy_font_workaround($face) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $face_addr;
      var $os2;
      $face_addr=$face;
      var $0=$face_addr;
      var $ascender=(($0+70)|0);
      var $1=HEAP16[(($ascender)>>1)];
      var $conv=(($1 << 16) >> 16);
      var $2=$face_addr;
      var $descender=(($2+72)|0);
      var $3=HEAP16[(($descender)>>1)];
      var $conv1=(($3 << 16) >> 16);
      var $add=((($conv)+($conv1))|0);
      var $cmp=(($add)|0)==0;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $4=$face_addr;
      var $height=(($4+74)|0);
      var $5=HEAP16[(($height)>>1)];
      var $conv3=(($5 << 16) >> 16);
      var $cmp4=(($conv3)|0)==0;
      if ($cmp4) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $6=$face_addr;
      var $call=_FT_Get_Sfnt_Table($6, 2);
      var $7=$call;
      $os2=$7;
      var $8=$os2;
      var $tobool=(($8)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $9=$os2;
      var $sTypoAscender=(($9+70)|0);
      var $10=HEAP16[(($sTypoAscender)>>1)];
      var $11=$face_addr;
      var $ascender7=(($11+70)|0);
      HEAP16[(($ascender7)>>1)]=$10;
      var $12=$os2;
      var $sTypoDescender=(($12+72)|0);
      var $13=HEAP16[(($sTypoDescender)>>1)];
      var $14=$face_addr;
      var $descender8=(($14+72)|0);
      HEAP16[(($descender8)>>1)]=$13;
      var $15=$face_addr;
      var $ascender9=(($15+70)|0);
      var $16=HEAP16[(($ascender9)>>1)];
      var $conv10=(($16 << 16) >> 16);
      var $17=$face_addr;
      var $descender11=(($17+72)|0);
      var $18=HEAP16[(($descender11)>>1)];
      var $conv12=(($18 << 16) >> 16);
      var $sub=((($conv10)-($conv12))|0);
      var $conv13=(($sub) & 65535);
      var $19=$face_addr;
      var $height14=(($19+74)|0);
      HEAP16[(($height14)>>1)]=$conv13;
      __label__ = 7; break;
    case 6: 
      var $20=$face_addr;
      var $bbox=(($20+52)|0);
      var $yMax=(($bbox+12)|0);
      var $21=HEAP32[(($yMax)>>2)];
      var $conv15=(($21) & 65535);
      var $22=$face_addr;
      var $ascender16=(($22+70)|0);
      HEAP16[(($ascender16)>>1)]=$conv15;
      var $23=$face_addr;
      var $bbox17=(($23+52)|0);
      var $yMin=(($bbox17+4)|0);
      var $24=HEAP32[(($yMin)>>2)];
      var $conv18=(($24) & 65535);
      var $25=$face_addr;
      var $descender19=(($25+72)|0);
      HEAP16[(($descender19)>>1)]=$conv18;
      var $26=$face_addr;
      var $ascender20=(($26+70)|0);
      var $27=HEAP16[(($ascender20)>>1)];
      var $conv21=(($27 << 16) >> 16);
      var $28=$face_addr;
      var $descender22=(($28+72)|0);
      var $29=HEAP16[(($descender22)>>1)];
      var $conv23=(($29 << 16) >> 16);
      var $sub24=((($conv21)-($conv23))|0);
      var $conv25=(($sub24) & 65535);
      var $30=$face_addr;
      var $height26=(($30+74)|0);
      HEAP16[(($height26)>>1)]=$conv25;
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_buggy_font_workaround["X"]=1;

function _fontconfig_select($library, $priv, $family, $treat_family_as_pattern, $bold, $italic, $index, $code) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $library_addr;
      var $priv_addr;
      var $family_addr;
      var $treat_family_as_pattern_addr;
      var $bold_addr;
      var $italic_addr;
      var $index_addr;
      var $code_addr;
      var $res;
      $library_addr=$library;
      $priv_addr=$priv;
      $family_addr=$family;
      $treat_family_as_pattern_addr=$treat_family_as_pattern;
      $bold_addr=$bold;
      $italic_addr=$italic;
      $index_addr=$index;
      $code_addr=$code;
      $res=0;
      var $0=$priv_addr;
      var $config=(($0)|0);
      var $1=HEAP32[(($config)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 7; break; } else { __label__ = 3; break; }
    case 3: 
      var $2=$priv_addr;
      var $index_default=(($2+12)|0);
      var $3=HEAP32[(($index_default)>>2)];
      var $4=$index_addr;
      HEAP32[(($4)>>2)]=$3;
      var $5=$priv_addr;
      var $path_default=(($5+8)|0);
      var $6=HEAP32[(($path_default)>>2)];
      var $tobool1=(($6)|0)!=0;
      if ($tobool1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $7=$priv_addr;
      var $path_default2=(($7+8)|0);
      var $8=HEAP32[(($path_default2)>>2)];
      var $call=_strdup($8);
      var $cond = $call;__label__ = 6; break;
    case 5: 
      var $cond = 0;__label__ = 6; break;
    case 6: 
      var $cond;
      $res=$cond;
      var $9=$res;
      $retval=$9;
      __label__ = 25; break;
    case 7: 
      var $10=$family_addr;
      var $tobool3=(($10)|0)!=0;
      if ($tobool3) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $11=$family_addr;
      var $12=HEAP8[($11)];
      var $conv=(($12 << 24) >> 24);
      var $tobool4=(($conv)|0)!=0;
      if ($tobool4) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $13=$library_addr;
      var $14=$priv_addr;
      var $15=$family_addr;
      var $16=$treat_family_as_pattern_addr;
      var $17=$bold_addr;
      var $18=$italic_addr;
      var $19=$index_addr;
      var $20=$code_addr;
      var $call6=_select_font($13, $14, $15, $16, $17, $18, $19, $20);
      $res=$call6;
      __label__ = 10; break;
    case 10: 
      var $21=$res;
      var $tobool8=(($21)|0)!=0;
      if ($tobool8) { __label__ = 15; break; } else { __label__ = 11; break; }
    case 11: 
      var $22=$priv_addr;
      var $family_default=(($22+4)|0);
      var $23=HEAP32[(($family_default)>>2)];
      var $tobool10=(($23)|0)!=0;
      if ($tobool10) { __label__ = 12; break; } else { __label__ = 15; break; }
    case 12: 
      var $24=$library_addr;
      var $25=$priv_addr;
      var $26=$priv_addr;
      var $family_default12=(($26+4)|0);
      var $27=HEAP32[(($family_default12)>>2)];
      var $28=$bold_addr;
      var $29=$italic_addr;
      var $30=$index_addr;
      var $31=$code_addr;
      var $call13=_select_font($24, $25, $27, 0, $28, $29, $30, $31);
      $res=$call13;
      var $32=$res;
      var $tobool14=(($32)|0)!=0;
      if ($tobool14) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $33=$library_addr;
      var $34=$family_addr;
      var $35=$bold_addr;
      var $36=$italic_addr;
      var $37=$res;
      var $38=$index_addr;
      var $39=HEAP32[(($38)>>2)];
      _ass_msg($33, 2, ((STRING_TABLE.__str114)|0), (tempInt=STACKTOP,STACKTOP += 20,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$34,HEAP32[(((tempInt)+(4))>>2)]=$35,HEAP32[(((tempInt)+(8))>>2)]=$36,HEAP32[(((tempInt)+(12))>>2)]=$37,HEAP32[(((tempInt)+(16))>>2)]=$39,tempInt));
      __label__ = 14; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $40=$res;
      var $tobool18=(($40)|0)!=0;
      if ($tobool18) { __label__ = 18; break; } else { __label__ = 16; break; }
    case 16: 
      var $41=$priv_addr;
      var $path_default20=(($41+8)|0);
      var $42=HEAP32[(($path_default20)>>2)];
      var $tobool21=(($42)|0)!=0;
      if ($tobool21) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $43=$priv_addr;
      var $path_default23=(($43+8)|0);
      var $44=HEAP32[(($path_default23)>>2)];
      var $call24=_strdup($44);
      $res=$call24;
      var $45=$priv_addr;
      var $index_default25=(($45+12)|0);
      var $46=HEAP32[(($index_default25)>>2)];
      var $47=$index_addr;
      HEAP32[(($47)>>2)]=$46;
      var $48=$library_addr;
      var $49=$family_addr;
      var $50=$bold_addr;
      var $51=$italic_addr;
      var $52=$res;
      var $53=$index_addr;
      var $54=HEAP32[(($53)>>2)];
      _ass_msg($48, 2, ((STRING_TABLE.__str1115)|0), (tempInt=STACKTOP,STACKTOP += 20,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$49,HEAP32[(((tempInt)+(4))>>2)]=$50,HEAP32[(((tempInt)+(8))>>2)]=$51,HEAP32[(((tempInt)+(12))>>2)]=$52,HEAP32[(((tempInt)+(16))>>2)]=$54,tempInt));
      __label__ = 18; break;
    case 18: 
      var $55=$res;
      var $tobool27=(($55)|0)!=0;
      if ($tobool27) { __label__ = 22; break; } else { __label__ = 19; break; }
    case 19: 
      var $56=$library_addr;
      var $57=$priv_addr;
      var $58=$bold_addr;
      var $59=$italic_addr;
      var $60=$index_addr;
      var $61=$code_addr;
      var $call29=_select_font($56, $57, ((STRING_TABLE.__str2116)|0), 0, $58, $59, $60, $61);
      $res=$call29;
      var $62=$res;
      var $tobool30=(($62)|0)!=0;
      if ($tobool30) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $63=$library_addr;
      var $64=$family_addr;
      var $65=$bold_addr;
      var $66=$italic_addr;
      var $67=$res;
      var $68=$index_addr;
      var $69=HEAP32[(($68)>>2)];
      _ass_msg($63, 2, ((STRING_TABLE.__str3117)|0), (tempInt=STACKTOP,STACKTOP += 20,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$64,HEAP32[(((tempInt)+(4))>>2)]=$65,HEAP32[(((tempInt)+(8))>>2)]=$66,HEAP32[(((tempInt)+(12))>>2)]=$67,HEAP32[(((tempInt)+(16))>>2)]=$69,tempInt));
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      var $70=$res;
      var $tobool34=(($70)|0)!=0;
      if ($tobool34) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $71=$library_addr;
      var $72=$family_addr;
      var $73=$bold_addr;
      var $74=$italic_addr;
      var $75=$res;
      var $76=$index_addr;
      var $77=HEAP32[(($76)>>2)];
      _ass_msg($71, 6, ((STRING_TABLE.__str4118)|0), (tempInt=STACKTOP,STACKTOP += 20,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$72,HEAP32[(((tempInt)+(4))>>2)]=$73,HEAP32[(((tempInt)+(8))>>2)]=$74,HEAP32[(((tempInt)+(12))>>2)]=$75,HEAP32[(((tempInt)+(16))>>2)]=$77,tempInt));
      __label__ = 24; break;
    case 24: 
      var $78=$res;
      $retval=$78;
      __label__ = 25; break;
    case 25: 
      var $79=$retval;
      ;
      return $79;
    default: assert(0, "bad label: " + __label__);
  }
}
_fontconfig_select["X"]=1;

function _select_font($library, $priv, $family, $treat_family_as_pattern, $bold, $italic, $index, $code) {
  var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $library_addr;
      var $priv_addr;
      var $family_addr;
      var $treat_family_as_pattern_addr;
      var $bold_addr;
      var $italic_addr;
      var $index_addr;
      var $code_addr;
      var $rc;
      var $result=__stackBase__;
      var $pat;
      var $rpat;
      var $r_index=(__stackBase__)+(4);
      var $r_slant=(__stackBase__)+(8);
      var $r_weight=(__stackBase__)+(12);
      var $r_family=(__stackBase__)+(16);
      var $r_style=(__stackBase__)+(20);
      var $r_file=(__stackBase__)+(24);
      var $r_fullname=(__stackBase__)+(28);
      var $r_outline=(__stackBase__)+(32);
      var $r_embolden=(__stackBase__)+(36);
      var $r_charset=(__stackBase__)+(40);
      var $ffullname;
      var $fsorted;
      var $fset;
      var $curf;
      var $retval1;
      var $family_cnt;
      var $s;
      var $p;
      var $curp;
      var $curp45;
      var $curp57;
      $library_addr=$library;
      $priv_addr=$priv;
      $family_addr=$family;
      $treat_family_as_pattern_addr=$treat_family_as_pattern;
      $bold_addr=$bold;
      $italic_addr=$italic;
      $index_addr=$index;
      $code_addr=$code;
      $pat=0;
      $rpat=0;
      $ffullname=0;
      $fsorted=0;
      $fset=0;
      $retval1=0;
      $family_cnt=0;
      var $0=$index_addr;
      HEAP32[(($0)>>2)]=0;
      var $1=$treat_family_as_pattern_addr;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=$family_addr;
      var $call=_FcNameParse($2);
      $pat=$call;
      __label__ = 5; break;
    case 4: 
      var $call2=_FcPatternCreate();
      $pat=$call2;
      __label__ = 5; break;
    case 5: 
      var $3=$pat;
      var $tobool3=(($3)|0)!=0;
      if ($tobool3) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      __label__ = 78; break;
    case 7: 
      var $4=$treat_family_as_pattern_addr;
      var $tobool6=(($4)|0)!=0;
      if ($tobool6) { __label__ = 15; break; } else { __label__ = 8; break; }
    case 8: 
      var $5=$pat;
      var $6=$family_addr;
      var $call8=_FcPatternAddString($5, ((STRING_TABLE.__str15129)|0), $6);
      $family_cnt=1;
      var $7=$family_addr;
      var $call9=_strdup($7);
      $s=$call9;
      var $8=$s;
      var $9=$s;
      var $call10=_strlen($9);
      var $add_ptr=(($8+$call10)|0);
      $p=$add_ptr;
      __label__ = 9; break;
    case 9: 
      var $10=$p;
      var $incdec_ptr=((($10)-(1))|0);
      $p=$incdec_ptr;
      var $11=$s;
      var $cmp=(($incdec_ptr)>>>0) > (($11)>>>0);
      if ($cmp) { __label__ = 10; break; } else { __label__ = 14; break; }
    case 10: 
      var $12=$p;
      var $13=HEAP8[($12)];
      var $conv=(($13 << 24) >> 24);
      var $cmp11=(($conv)|0)==32;
      if ($cmp11) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $14=$p;
      var $15=HEAP8[($14)];
      var $conv13=(($15 << 24) >> 24);
      var $cmp14=(($conv13)|0)==45;
      if ($cmp14) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $16=$p;
      HEAP8[($16)]=0;
      var $17=$pat;
      var $18=$s;
      var $call17=_FcPatternAddString($17, ((STRING_TABLE.__str15129)|0), $18);
      var $19=$family_cnt;
      var $inc=((($19)+(1))|0);
      $family_cnt=$inc;
      __label__ = 13; break;
    case 13: 
      __label__ = 9; break;
    case 14: 
      var $20=$s;
      _free($20);
      __label__ = 15; break;
    case 15: 
      var $21=$pat;
      var $call20=_FcPatternAddBool($21, ((STRING_TABLE.__str16130)|0), 1);
      var $22=$pat;
      var $23=$italic_addr;
      var $call21=_FcPatternAddInteger($22, ((STRING_TABLE.__str17131)|0), $23);
      var $24=$pat;
      var $25=$bold_addr;
      var $call22=_FcPatternAddInteger($24, ((STRING_TABLE.__str18132)|0), $25);
      var $26=$pat;
      _FcDefaultSubstitute($26);
      var $27=$priv_addr;
      var $config=(($27)|0);
      var $28=HEAP32[(($config)>>2)];
      var $29=$pat;
      var $call23=_FcConfigSubstitute($28, $29, 0);
      $rc=$call23;
      var $30=$rc;
      var $tobool24=(($30)|0)!=0;
      if ($tobool24) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      __label__ = 78; break;
    case 17: 
      var $31=$priv_addr;
      var $config27=(($31)|0);
      var $32=HEAP32[(($config27)>>2)];
      var $33=$pat;
      var $call28=_FcFontSort($32, $33, 1, 0, $result);
      $fsorted=$call28;
      var $34=$library_addr;
      var $35=$priv_addr;
      var $36=$family_addr;
      var $37=$bold_addr;
      var $38=$italic_addr;
      var $call29=_match_fullname($34, $35, $36, $37, $38);
      $ffullname=$call29;
      var $39=$fsorted;
      var $tobool30=(($39)|0)!=0;
      if ($tobool30) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $40=$ffullname;
      var $tobool32=(($40)|0)!=0;
      if ($tobool32) { __label__ = 20; break; } else { __label__ = 19; break; }
    case 19: 
      __label__ = 78; break;
    case 20: 
      var $call35=_FcFontSetCreate();
      $fset=$call35;
      $curf=0;
      __label__ = 21; break;
    case 21: 
      var $41=$curf;
      var $42=$ffullname;
      var $nfont=(($42)|0);
      var $43=HEAP32[(($nfont)>>2)];
      var $cmp36=(($41)|0) < (($43)|0);
      if ($cmp36) { __label__ = 22; break; } else { __label__ = 24; break; }
    case 22: 
      var $44=$curf;
      var $45=$ffullname;
      var $fonts=(($45+8)|0);
      var $46=HEAP32[(($fonts)>>2)];
      var $arrayidx=(($46+($44<<2))|0);
      var $47=HEAP32[(($arrayidx)>>2)];
      $curp=$47;
      var $48=$curp;
      _FcPatternReference($48);
      var $49=$fset;
      var $50=$curp;
      var $call38=_FcFontSetAdd($49, $50);
      __label__ = 23; break;
    case 23: 
      var $51=$curf;
      var $inc39=((($51)+(1))|0);
      $curf=$inc39;
      __label__ = 21; break;
    case 24: 
      $curf=0;
      __label__ = 25; break;
    case 25: 
      var $52=$curf;
      var $53=$fsorted;
      var $nfont41=(($53)|0);
      var $54=HEAP32[(($nfont41)>>2)];
      var $cmp42=(($52)|0) < (($54)|0);
      if ($cmp42) { __label__ = 26; break; } else { __label__ = 28; break; }
    case 26: 
      var $55=$curf;
      var $56=$fsorted;
      var $fonts46=(($56+8)|0);
      var $57=HEAP32[(($fonts46)>>2)];
      var $arrayidx47=(($57+($55<<2))|0);
      var $58=HEAP32[(($arrayidx47)>>2)];
      $curp45=$58;
      var $59=$curp45;
      _FcPatternReference($59);
      var $60=$fset;
      var $61=$curp45;
      var $call48=_FcFontSetAdd($60, $61);
      __label__ = 27; break;
    case 27: 
      var $62=$curf;
      var $inc50=((($62)+(1))|0);
      $curf=$inc50;
      __label__ = 25; break;
    case 28: 
      $curf=0;
      __label__ = 29; break;
    case 29: 
      var $63=$curf;
      var $64=$fset;
      var $nfont53=(($64)|0);
      var $65=HEAP32[(($nfont53)>>2)];
      var $cmp54=(($63)|0) < (($65)|0);
      if ($cmp54) { __label__ = 30; break; } else { __label__ = 42; break; }
    case 30: 
      var $66=$curf;
      var $67=$fset;
      var $fonts58=(($67+8)|0);
      var $68=HEAP32[(($fonts58)>>2)];
      var $arrayidx59=(($68+($66<<2))|0);
      var $69=HEAP32[(($arrayidx59)>>2)];
      $curp57=$69;
      var $70=$curp57;
      var $call60=_FcPatternGetBool($70, ((STRING_TABLE.__str16130)|0), 0, $r_outline);
      HEAP32[(($result)>>2)]=$call60;
      var $71=HEAP32[(($result)>>2)];
      var $cmp61=(($71)|0)!=0;
      if ($cmp61) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      __label__ = 41; break;
    case 32: 
      var $72=HEAP32[(($r_outline)>>2)];
      var $cmp65=(($72)|0)!=1;
      if ($cmp65) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      __label__ = 41; break;
    case 34: 
      var $73=$code_addr;
      var $tobool69=(($73)|0)!=0;
      if ($tobool69) { __label__ = 36; break; } else { __label__ = 35; break; }
    case 35: 
      __label__ = 42; break;
    case 36: 
      var $74=$curp57;
      var $call72=_FcPatternGetCharSet($74, ((STRING_TABLE.__str19133)|0), 0, $r_charset);
      HEAP32[(($result)>>2)]=$call72;
      var $75=HEAP32[(($result)>>2)];
      var $cmp73=(($75)|0)!=0;
      if ($cmp73) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      __label__ = 41; break;
    case 38: 
      var $76=HEAP32[(($r_charset)>>2)];
      var $77=$code_addr;
      var $call77=_FcCharSetHasChar($76, $77);
      var $tobool78=(($call77)|0)!=0;
      if ($tobool78) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      __label__ = 42; break;
    case 40: 
      __label__ = 41; break;
    case 41: 
      var $78=$curf;
      var $inc82=((($78)+(1))|0);
      $curf=$inc82;
      __label__ = 29; break;
    case 42: 
      var $79=$curf;
      var $80=$fset;
      var $nfont84=(($80)|0);
      var $81=HEAP32[(($nfont84)>>2)];
      var $cmp85=(($79)|0) >= (($81)|0);
      if ($cmp85) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      __label__ = 78; break;
    case 44: 
      var $82=$treat_family_as_pattern_addr;
      var $tobool89=(($82)|0)!=0;
      if ($tobool89) { __label__ = 50; break; } else { __label__ = 45; break; }
    case 45: 
      __label__ = 46; break;
    case 46: 
      var $83=$family_cnt;
      var $cmp92=(($83)|0) > 1;
      if ($cmp92) { __label__ = 47; break; } else { __label__ = 49; break; }
    case 47: 
      var $84=$pat;
      var $85=$family_cnt;
      var $sub=((($85)-(1))|0);
      var $call95=_FcPatternRemove($84, ((STRING_TABLE.__str15129)|0), $sub);
      __label__ = 48; break;
    case 48: 
      var $86=$family_cnt;
      var $dec=((($86)-(1))|0);
      $family_cnt=$dec;
      __label__ = 46; break;
    case 49: 
      __label__ = 50; break;
    case 50: 
      var $87=$priv_addr;
      var $config99=(($87)|0);
      var $88=HEAP32[(($config99)>>2)];
      var $89=$pat;
      var $90=$curf;
      var $91=$fset;
      var $fonts100=(($91+8)|0);
      var $92=HEAP32[(($fonts100)>>2)];
      var $arrayidx101=(($92+($90<<2))|0);
      var $93=HEAP32[(($arrayidx101)>>2)];
      var $call102=_FcFontRenderPrepare($88, $89, $93);
      $rpat=$call102;
      var $94=$rpat;
      var $tobool103=(($94)|0)!=0;
      if ($tobool103) { __label__ = 52; break; } else { __label__ = 51; break; }
    case 51: 
      __label__ = 78; break;
    case 52: 
      var $95=$rpat;
      var $call106=_FcPatternGetInteger($95, ((STRING_TABLE.__str20134)|0), 0, $r_index);
      HEAP32[(($result)>>2)]=$call106;
      var $96=HEAP32[(($result)>>2)];
      var $cmp107=(($96)|0)!=0;
      if ($cmp107) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      __label__ = 78; break;
    case 54: 
      var $97=HEAP32[(($r_index)>>2)];
      var $98=$index_addr;
      HEAP32[(($98)>>2)]=$97;
      var $99=$rpat;
      var $call111=_FcPatternGetString($99, ((STRING_TABLE.__str21135)|0), 0, $r_file);
      HEAP32[(($result)>>2)]=$call111;
      var $100=HEAP32[(($result)>>2)];
      var $cmp112=(($100)|0)!=0;
      if ($cmp112) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: 
      __label__ = 78; break;
    case 56: 
      var $101=HEAP32[(($r_file)>>2)];
      var $call116=_strdup($101);
      $retval1=$call116;
      var $102=$rpat;
      var $call117=_FcPatternGetString($102, ((STRING_TABLE.__str15129)|0), 0, $r_family);
      HEAP32[(($result)>>2)]=$call117;
      var $103=HEAP32[(($result)>>2)];
      var $cmp118=(($103)|0)!=0;
      if ($cmp118) { __label__ = 57; break; } else { __label__ = 58; break; }
    case 57: 
      HEAP32[(($r_family)>>2)]=0;
      __label__ = 58; break;
    case 58: 
      var $104=$rpat;
      var $call122=_FcPatternGetString($104, ((STRING_TABLE.__str22136)|0), 0, $r_fullname);
      HEAP32[(($result)>>2)]=$call122;
      var $105=HEAP32[(($result)>>2)];
      var $cmp123=(($105)|0)!=0;
      if ($cmp123) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      HEAP32[(($r_fullname)>>2)]=0;
      __label__ = 60; break;
    case 60: 
      var $106=$treat_family_as_pattern_addr;
      var $tobool127=(($106)|0)!=0;
      if ($tobool127) { __label__ = 69; break; } else { __label__ = 61; break; }
    case 61: 
      var $107=HEAP32[(($r_family)>>2)];
      var $tobool128=(($107)|0)!=0;
      if ($tobool128) { __label__ = 62; break; } else { __label__ = 63; break; }
    case 62: 
      var $108=HEAP32[(($r_family)>>2)];
      var $109=$family_addr;
      var $call130=_strcasecmp($108, $109);
      var $cmp131=(($call130)|0)==0;
      if ($cmp131) { __label__ = 69; break; } else { __label__ = 63; break; }
    case 63: 
      var $110=HEAP32[(($r_fullname)>>2)];
      var $tobool134=(($110)|0)!=0;
      if ($tobool134) { __label__ = 64; break; } else { __label__ = 65; break; }
    case 64: 
      var $111=HEAP32[(($r_fullname)>>2)];
      var $112=$family_addr;
      var $call136=_strcasecmp($111, $112);
      var $cmp137=(($call136)|0)==0;
      if ($cmp137) { __label__ = 69; break; } else { __label__ = 65; break; }
    case 65: 
      var $113=$library_addr;
      var $114=HEAP32[(($r_fullname)>>2)];
      var $tobool140=(($114)|0)!=0;
      if ($tobool140) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: 
      var $115=HEAP32[(($r_fullname)>>2)];
      var $cond = $115;__label__ = 68; break;
    case 67: 
      var $116=HEAP32[(($r_family)>>2)];
      var $cond = $116;__label__ = 68; break;
    case 68: 
      var $cond;
      var $117=$family_addr;
      _ass_msg($113, 2, ((STRING_TABLE.__str23137)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$cond,HEAP32[(((tempInt)+(4))>>2)]=$117,tempInt));
      __label__ = 69; break;
    case 69: 
      var $118=$rpat;
      var $call142=_FcPatternGetString($118, ((STRING_TABLE.__str24138)|0), 0, $r_style);
      HEAP32[(($result)>>2)]=$call142;
      var $119=HEAP32[(($result)>>2)];
      var $cmp143=(($119)|0)!=0;
      if ($cmp143) { __label__ = 70; break; } else { __label__ = 71; break; }
    case 70: 
      HEAP32[(($r_style)>>2)]=0;
      __label__ = 71; break;
    case 71: 
      var $120=$rpat;
      var $call147=_FcPatternGetInteger($120, ((STRING_TABLE.__str17131)|0), 0, $r_slant);
      HEAP32[(($result)>>2)]=$call147;
      var $121=HEAP32[(($result)>>2)];
      var $cmp148=(($121)|0)!=0;
      if ($cmp148) { __label__ = 72; break; } else { __label__ = 73; break; }
    case 72: 
      HEAP32[(($r_slant)>>2)]=0;
      __label__ = 73; break;
    case 73: 
      var $122=$rpat;
      var $call152=_FcPatternGetInteger($122, ((STRING_TABLE.__str18132)|0), 0, $r_weight);
      HEAP32[(($result)>>2)]=$call152;
      var $123=HEAP32[(($result)>>2)];
      var $cmp153=(($123)|0)!=0;
      if ($cmp153) { __label__ = 74; break; } else { __label__ = 75; break; }
    case 74: 
      HEAP32[(($r_weight)>>2)]=0;
      __label__ = 75; break;
    case 75: 
      var $124=$rpat;
      var $call157=_FcPatternGetBool($124, ((STRING_TABLE.__str25139)|0), 0, $r_embolden);
      HEAP32[(($result)>>2)]=$call157;
      var $125=HEAP32[(($result)>>2)];
      var $cmp158=(($125)|0)!=0;
      if ($cmp158) { __label__ = 76; break; } else { __label__ = 77; break; }
    case 76: 
      HEAP32[(($r_embolden)>>2)]=0;
      __label__ = 77; break;
    case 77: 
      var $126=$library_addr;
      var $127=HEAP32[(($r_family)>>2)];
      var $128=HEAP32[(($r_style)>>2)];
      var $129=HEAP32[(($r_fullname)>>2)];
      var $130=HEAP32[(($r_slant)>>2)];
      var $131=HEAP32[(($r_weight)>>2)];
      var $132=HEAP32[(($r_embolden)>>2)];
      var $tobool162=(($132)|0)!=0;
      var $cond163=$tobool162 ? (((STRING_TABLE.__str27141)|0)) : (((__str28142)|0));
      _ass_msg($126, 6, ((STRING_TABLE.__str26140)|0), (tempInt=STACKTOP,STACKTOP += 24,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$127,HEAP32[(((tempInt)+(4))>>2)]=$128,HEAP32[(((tempInt)+(8))>>2)]=$129,HEAP32[(((tempInt)+(12))>>2)]=$130,HEAP32[(((tempInt)+(16))>>2)]=$131,HEAP32[(((tempInt)+(20))>>2)]=$cond163,tempInt));
      __label__ = 78; break;
    case 78: 
      var $133=$pat;
      var $tobool164=(($133)|0)!=0;
      if ($tobool164) { __label__ = 79; break; } else { __label__ = 80; break; }
    case 79: 
      var $134=$pat;
      _FcPatternDestroy($134);
      __label__ = 80; break;
    case 80: 
      var $135=$rpat;
      var $tobool167=(($135)|0)!=0;
      if ($tobool167) { __label__ = 81; break; } else { __label__ = 82; break; }
    case 81: 
      var $136=$rpat;
      _FcPatternDestroy($136);
      __label__ = 82; break;
    case 82: 
      var $137=$fsorted;
      var $tobool170=(($137)|0)!=0;
      if ($tobool170) { __label__ = 83; break; } else { __label__ = 84; break; }
    case 83: 
      var $138=$fsorted;
      _FcFontSetDestroy($138);
      __label__ = 84; break;
    case 84: 
      var $139=$ffullname;
      var $tobool173=(($139)|0)!=0;
      if ($tobool173) { __label__ = 85; break; } else { __label__ = 86; break; }
    case 85: 
      var $140=$ffullname;
      _FcFontSetDestroy($140);
      __label__ = 86; break;
    case 86: 
      var $141=$fset;
      var $tobool176=(($141)|0)!=0;
      if ($tobool176) { __label__ = 87; break; } else { __label__ = 88; break; }
    case 87: 
      var $142=$fset;
      _FcFontSetDestroy($142);
      __label__ = 88; break;
    case 88: 
      var $143=$retval1;
      STACKTOP = __stackBase__;
      return $143;
    default: assert(0, "bad label: " + __label__);
  }
}
_select_font["X"]=1;

function _fontconfig_init($library, $ftlibrary, $family, $path, $fc, $config, $update) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $library_addr;
      var $ftlibrary_addr;
      var $family_addr;
      var $path_addr;
      var $fc_addr;
      var $config_addr;
      var $update_addr;
      var $rc;
      var $priv;
      var $dir;
      var $i;
      $library_addr=$library;
      $ftlibrary_addr=$ftlibrary;
      $family_addr=$family;
      $path_addr=$path;
      $fc_addr=$fc;
      $config_addr=$config;
      $update_addr=$update;
      var $call=_calloc(1, 16);
      var $0=$call;
      $priv=$0;
      var $1=$library_addr;
      var $fonts_dir=(($1)|0);
      var $2=HEAP32[(($fonts_dir)>>2)];
      $dir=$2;
      var $3=$fc_addr;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $4=$library_addr;
      _ass_msg($4, 2, ((STRING_TABLE.__str5119)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 24; break;
    case 4: 
      var $call1=_FcConfigCreate();
      var $5=$priv;
      var $config2=(($5)|0);
      HEAP32[(($config2)>>2)]=$call1;
      var $6=$priv;
      var $config3=(($6)|0);
      var $7=HEAP32[(($config3)>>2)];
      var $8=$config_addr;
      var $call4=_FcConfigParseAndLoad($7, $8, 1);
      $rc=$call4;
      var $9=$rc;
      var $tobool5=(($9)|0)!=0;
      if ($tobool5) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $10=$library_addr;
      _ass_msg($10, 2, ((STRING_TABLE.__str6120)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $11=$priv;
      var $config7=(($11)|0);
      var $12=HEAP32[(($config7)>>2)];
      _FcConfigDestroy($12);
      var $call8=_FcInitLoadConfig();
      var $13=$priv;
      var $config9=(($13)|0);
      HEAP32[(($config9)>>2)]=$call8;
      var $14=$rc;
      var $inc=((($14)+(1))|0);
      $rc=$inc;
      __label__ = 6; break;
    case 6: 
      var $15=$rc;
      var $tobool11=(($15)|0)!=0;
      if ($tobool11) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $16=$update_addr;
      var $tobool12=(($16)|0)!=0;
      if ($tobool12) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $17=$priv;
      var $config14=(($17)|0);
      var $18=HEAP32[(($config14)>>2)];
      var $call15=_FcConfigBuildFonts($18);
      __label__ = 9; break;
    case 9: 
      var $19=$rc;
      var $tobool17=(($19)|0)!=0;
      if ($tobool17) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $20=$priv;
      var $config18=(($20)|0);
      var $21=HEAP32[(($config18)>>2)];
      var $tobool19=(($21)|0)!=0;
      if ($tobool19) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $22=$library_addr;
      _ass_msg($22, 0, ((STRING_TABLE.__str7121)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $23=$priv;
      var $config21=(($23)|0);
      var $24=HEAP32[(($config21)>>2)];
      _FcConfigDestroy($24);
      __label__ = 24; break;
    case 12: 
      $i=0;
      __label__ = 13; break;
    case 13: 
      var $25=$i;
      var $26=$library_addr;
      var $num_fontdata=(($26+16)|0);
      var $27=HEAP32[(($num_fontdata)>>2)];
      var $cmp=(($25)|0) < (($27)|0);
      if ($cmp) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $28=$priv;
      var $29=$library_addr;
      var $30=$ftlibrary_addr;
      var $31=$i;
      _process_fontdata($28, $29, $30, $31);
      __label__ = 15; break;
    case 15: 
      var $32=$i;
      var $inc23=((($32)+(1))|0);
      $i=$inc23;
      __label__ = 13; break;
    case 16: 
      var $33=$dir;
      var $tobool24=(($33)|0)!=0;
      if ($tobool24) { __label__ = 17; break; } else { __label__ = 20; break; }
    case 17: 
      var $34=$library_addr;
      _ass_msg($34, 6, ((STRING_TABLE.__str8122)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $35=$priv;
      var $config26=(($35)|0);
      var $36=HEAP32[(($config26)>>2)];
      var $37=$dir;
      var $call27=_FcConfigAppFontAddDir($36, $37);
      $rc=$call27;
      var $38=$rc;
      var $tobool28=(($38)|0)!=0;
      if ($tobool28) { __label__ = 19; break; } else { __label__ = 18; break; }
    case 18: 
      var $39=$library_addr;
      _ass_msg($39, 2, ((STRING_TABLE.__str9123)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str10124)|0),tempInt));
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $40=$family_addr;
      var $tobool32=(($40)|0)!=0;
      if ($tobool32) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $41=$family_addr;
      var $call33=_strdup($41);
      var $cond = $call33;__label__ = 23; break;
    case 22: 
      var $cond = 0;__label__ = 23; break;
    case 23: 
      var $cond;
      var $42=$priv;
      var $family_default=(($42+4)|0);
      HEAP32[(($family_default)>>2)]=$cond;
      __label__ = 24; break;
    case 24: 
      var $43=$path_addr;
      var $tobool34=(($43)|0)!=0;
      if ($tobool34) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $44=$path_addr;
      var $call36=_strdup($44);
      var $cond39 = $call36;__label__ = 27; break;
    case 26: 
      var $cond39 = 0;__label__ = 27; break;
    case 27: 
      var $cond39;
      var $45=$priv;
      var $path_default=(($45+8)|0);
      HEAP32[(($path_default)>>2)]=$cond39;
      var $46=$priv;
      var $index_default=(($46+12)|0);
      HEAP32[(($index_default)>>2)]=0;
      var $47=$priv;
      ;
      return $47;
    default: assert(0, "bad label: " + __label__);
  }
}
_fontconfig_init["X"]=1;

function _process_fontdata($priv, $library, $ftlibrary, $idx) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $priv_addr;
      var $library_addr;
      var $ftlibrary_addr;
      var $idx_addr;
      var $rc;
      var $name;
      var $data;
      var $data_size;
      var $face=__stackBase__;
      var $pattern;
      var $fset;
      var $res;
      var $face_index;
      var $num_faces;
      $priv_addr=$priv;
      $library_addr=$library;
      $ftlibrary_addr=$ftlibrary;
      $idx_addr=$idx;
      var $0=$idx_addr;
      var $1=$library_addr;
      var $fontdata=(($1+12)|0);
      var $2=HEAP32[(($fontdata)>>2)];
      var $arrayidx=(($2+($0)*(12))|0);
      var $name1=(($arrayidx)|0);
      var $3=HEAP32[(($name1)>>2)];
      $name=$3;
      var $4=$idx_addr;
      var $5=$library_addr;
      var $fontdata2=(($5+12)|0);
      var $6=HEAP32[(($fontdata2)>>2)];
      var $arrayidx3=(($6+($4)*(12))|0);
      var $data4=(($arrayidx3+4)|0);
      var $7=HEAP32[(($data4)>>2)];
      $data=$7;
      var $8=$idx_addr;
      var $9=$library_addr;
      var $fontdata5=(($9+12)|0);
      var $10=HEAP32[(($fontdata5)>>2)];
      var $arrayidx6=(($10+($8)*(12))|0);
      var $size=(($arrayidx6+8)|0);
      var $11=HEAP32[(($size)>>2)];
      $data_size=$11;
      $num_faces=1;
      $face_index=0;
      __label__ = 3; break;
    case 3: 
      var $12=$face_index;
      var $13=$num_faces;
      var $cmp=(($12)|0) < (($13)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 14; break; }
    case 4: 
      var $14=$ftlibrary_addr;
      var $15=$data;
      var $16=$data_size;
      var $17=$face_index;
      var $call=_FT_New_Memory_Face($14, $15, $16, $17, $face);
      $rc=$call;
      var $18=$rc;
      var $tobool=(($18)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $19=$library_addr;
      var $20=$name;
      _ass_msg($19, 2, ((STRING_TABLE.__str11125)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$20,tempInt));
      __label__ = 14; break;
    case 6: 
      var $21=HEAP32[(($face)>>2)];
      var $num_faces7=(($21)|0);
      var $22=HEAP32[(($num_faces7)>>2)];
      $num_faces=$22;
      var $23=HEAP32[(($face)>>2)];
      var $24=$name;
      var $25=$face_index;
      var $26=$priv_addr;
      var $config=(($26)|0);
      var $27=HEAP32[(($config)>>2)];
      var $call8=_FcConfigGetBlanks($27);
      var $call9=_FcFreeTypeQueryFace($23, $24, $25, $call8);
      $pattern=$call9;
      var $28=$pattern;
      var $tobool10=(($28)|0)!=0;
      if ($tobool10) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $29=$library_addr;
      _ass_msg($29, 2, ((STRING_TABLE.__str9123)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str12126)|0),tempInt));
      var $30=HEAP32[(($face)>>2)];
      var $call12=_FT_Done_Face($30);
      __label__ = 14; break;
    case 8: 
      var $31=$priv_addr;
      var $config14=(($31)|0);
      var $32=HEAP32[(($config14)>>2)];
      var $call15=_FcConfigGetFonts($32, 0);
      $fset=$call15;
      var $33=$fset;
      var $tobool16=(($33)|0)!=0;
      if ($tobool16) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $34=$library_addr;
      _ass_msg($34, 2, ((STRING_TABLE.__str9123)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str13127)|0),tempInt));
      var $35=HEAP32[(($face)>>2)];
      var $call18=_FT_Done_Face($35);
      __label__ = 14; break;
    case 10: 
      var $36=$fset;
      var $37=$pattern;
      var $call20=_FcFontSetAdd($36, $37);
      $res=$call20;
      var $38=$res;
      var $tobool21=(($38)|0)!=0;
      if ($tobool21) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $39=$library_addr;
      _ass_msg($39, 2, ((STRING_TABLE.__str9123)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str14128)|0),tempInt));
      var $40=HEAP32[(($face)>>2)];
      var $call23=_FT_Done_Face($40);
      __label__ = 14; break;
    case 12: 
      var $41=HEAP32[(($face)>>2)];
      var $call25=_FT_Done_Face($41);
      __label__ = 13; break;
    case 13: 
      var $42=$face_index;
      var $inc=((($42)+(1))|0);
      $face_index=$inc;
      __label__ = 3; break;
    case 14: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_process_fontdata["X"]=1;

function _fontconfig_update($priv) {
  ;
  var __label__;

  var $priv_addr;
  $priv_addr=$priv;
  var $0=$priv_addr;
  var $config=(($0)|0);
  var $1=HEAP32[(($config)>>2)];
  var $call=_FcConfigBuildFonts($1);
  ;
  return $call;
}


function _fontconfig_done($priv) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $priv_addr;
      $priv_addr=$priv;
      var $0=$priv_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $1=$priv_addr;
      var $config=(($1)|0);
      var $2=HEAP32[(($config)>>2)];
      var $tobool1=(($2)|0)!=0;
      if ($tobool1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $3=$priv_addr;
      var $config3=(($3)|0);
      var $4=HEAP32[(($config3)>>2)];
      _FcConfigDestroy($4);
      __label__ = 5; break;
    case 5: 
      var $5=$priv_addr;
      var $path_default=(($5+8)|0);
      var $6=HEAP32[(($path_default)>>2)];
      _free($6);
      var $7=$priv_addr;
      var $family_default=(($7+4)|0);
      var $8=HEAP32[(($family_default)>>2)];
      _free($8);
      __label__ = 6; break;
    case 6: 
      var $9=$priv_addr;
      var $10=$9;
      _free($10);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _match_fullname($lib, $priv, $family, $bold, $italic) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $lib_addr;
      var $priv_addr;
      var $family_addr;
      var $bold_addr;
      var $italic_addr;
      var $sets=__stackBase__;
      var $result;
      var $nsets;
      var $i;
      var $fi;
      var $set;
      var $pat;
      var $fullname=(__stackBase__)+(8);
      var $pi;
      var $at=(__stackBase__)+(12);
      var $ol=(__stackBase__)+(16);
      $lib_addr=$lib;
      $priv_addr=$priv;
      $family_addr=$family;
      $bold_addr=$bold;
      $italic_addr=$italic;
      var $call=_FcFontSetCreate();
      $result=$call;
      $nsets=0;
      var $0=$priv_addr;
      var $config=(($0)|0);
      var $1=HEAP32[(($config)>>2)];
      var $call1=_FcConfigGetFonts($1, 0);
      var $2=$nsets;
      var $arrayidx=(($sets+($2<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$call1;
      var $tobool=(($call1)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $3=$nsets;
      var $inc=((($3)+(1))|0);
      $nsets=$inc;
      __label__ = 4; break;
    case 4: 
      var $4=$priv_addr;
      var $config2=(($4)|0);
      var $5=HEAP32[(($config2)>>2)];
      var $call3=_FcConfigGetFonts($5, 1);
      var $6=$nsets;
      var $arrayidx4=(($sets+($6<<2))|0);
      HEAP32[(($arrayidx4)>>2)]=$call3;
      var $tobool5=(($call3)|0)!=0;
      if ($tobool5) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $7=$nsets;
      var $inc7=((($7)+(1))|0);
      $nsets=$inc7;
      __label__ = 6; break;
    case 6: 
      $i=0;
      __label__ = 7; break;
    case 7: 
      var $8=$i;
      var $9=$nsets;
      var $cmp=(($8)|0) < (($9)|0);
      if ($cmp) { __label__ = 8; break; } else { __label__ = 28; break; }
    case 8: 
      var $10=$i;
      var $arrayidx9=(($sets+($10<<2))|0);
      var $11=HEAP32[(($arrayidx9)>>2)];
      $set=$11;
      $fi=0;
      __label__ = 9; break;
    case 9: 
      var $12=$fi;
      var $13=$set;
      var $nfont=(($13)|0);
      var $14=HEAP32[(($nfont)>>2)];
      var $cmp11=(($12)|0) < (($14)|0);
      if ($cmp11) { __label__ = 10; break; } else { __label__ = 26; break; }
    case 10: 
      var $15=$fi;
      var $16=$set;
      var $fonts=(($16+8)|0);
      var $17=HEAP32[(($fonts)>>2)];
      var $arrayidx13=(($17+($15<<2))|0);
      var $18=HEAP32[(($arrayidx13)>>2)];
      $pat=$18;
      $pi=0;
      __label__ = 11; break;
    case 11: 
      var $19=$pat;
      var $20=$pi;
      var $inc14=((($20)+(1))|0);
      $pi=$inc14;
      var $call15=_FcPatternGetString($19, ((STRING_TABLE.__str22136)|0), $20, $fullname);
      var $cmp16=(($call15)|0)==0;
      if ($cmp16) { __label__ = 12; break; } else { __label__ = 24; break; }
    case 12: 
      var $21=$pat;
      var $call17=_FcPatternGetBool($21, ((STRING_TABLE.__str16130)|0), 0, $ol);
      var $cmp18=(($call17)|0)!=0;
      if ($cmp18) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: 
      var $22=HEAP32[(($ol)>>2)];
      var $cmp19=(($22)|0)!=1;
      if ($cmp19) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      __label__ = 11; break;
    case 15: 
      var $23=$pat;
      var $call22=_FcPatternGetInteger($23, ((STRING_TABLE.__str17131)|0), 0, $at);
      var $cmp23=(($call22)|0)!=0;
      if ($cmp23) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      var $24=HEAPU32[(($at)>>2)];
      var $25=$italic_addr;
      var $cmp25=(($24)>>>0) < (($25)>>>0);
      if ($cmp25) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      __label__ = 11; break;
    case 18: 
      var $26=$pat;
      var $call28=_FcPatternGetInteger($26, ((STRING_TABLE.__str18132)|0), 0, $at);
      var $cmp29=(($call28)|0)!=0;
      if ($cmp29) { __label__ = 20; break; } else { __label__ = 19; break; }
    case 19: 
      var $27=HEAPU32[(($at)>>2)];
      var $28=$bold_addr;
      var $cmp31=(($27)>>>0) < (($28)>>>0);
      if ($cmp31) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      __label__ = 11; break;
    case 21: 
      var $29=HEAP32[(($fullname)>>2)];
      var $30=$family_addr;
      var $call34=_strcasecmp($29, $30);
      var $cmp35=(($call34)|0)==0;
      if ($cmp35) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $31=$result;
      var $32=$pat;
      var $call37=_FcPatternDuplicate($32);
      var $call38=_FcFontSetAdd($31, $call37);
      __label__ = 24; break;
    case 23: 
      __label__ = 11; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      var $33=$fi;
      var $inc40=((($33)+(1))|0);
      $fi=$inc40;
      __label__ = 9; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $34=$i;
      var $inc42=((($34)+(1))|0);
      $i=$inc42;
      __label__ = 7; break;
    case 28: 
      var $35=$result;
      STACKTOP = __stackBase__;
      return $35;
    default: assert(0, "bad label: " + __label__);
  }
}
_match_fullname["X"]=1;

function _ass_renderer_init($library) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $library_addr;
      var $error;
      var $ft=__stackBase__;
      var $priv;
      var $vmajor=(__stackBase__)+(4);
      var $vminor=(__stackBase__)+(8);
      var $vpatch=(__stackBase__)+(12);
      $library_addr=$library;
      $priv=0;
      var $call=_FT_Init_FreeType($ft);
      $error=$call;
      var $0=$error;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $1=$library_addr;
      _ass_msg($1, 0, ((STRING_TABLE.__str145)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE.__str1146)|0),tempInt));
      __label__ = 7; break;
    case 4: 
      var $2=HEAP32[(($ft)>>2)];
      _FT_Library_Version($2, $vmajor, $vminor, $vpatch);
      var $3=$library_addr;
      var $4=HEAP32[(($vmajor)>>2)];
      var $5=HEAP32[(($vminor)>>2)];
      var $6=HEAP32[(($vpatch)>>2)];
      _ass_msg($3, 6, ((STRING_TABLE.__str2147)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$4,HEAP32[(((tempInt)+(4))>>2)]=$5,HEAP32[(((tempInt)+(8))>>2)]=$6,tempInt));
      var $call1=_calloc(1, 528);
      var $7=$call1;
      $priv=$7;
      var $8=$priv;
      var $tobool2=(($8)|0)!=0;
      if ($tobool2) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $9=HEAP32[(($ft)>>2)];
      var $call4=_FT_Done_FreeType($9);
      __label__ = 7; break;
    case 6: 
      var $call6=_ass_synth_init(100);
      var $10=$priv;
      var $synth_priv=(($10+92)|0);
      HEAP32[(($synth_priv)>>2)]=$call6;
      var $11=$library_addr;
      var $12=$priv;
      var $library7=(($12)|0);
      HEAP32[(($library7)>>2)]=$11;
      var $13=HEAP32[(($ft)>>2)];
      var $14=$priv;
      var $ftlibrary=(($14+4)|0);
      HEAP32[(($ftlibrary)>>2)]=$13;
      var $call8=_ass_font_cache_create();
      var $15=$priv;
      var $cache=(($15+496)|0);
      var $font_cache=(($cache)|0);
      HEAP32[(($font_cache)>>2)]=$call8;
      var $call9=_ass_bitmap_cache_create();
      var $16=$priv;
      var $cache10=(($16+496)|0);
      var $bitmap_cache=(($cache10+8)|0);
      HEAP32[(($bitmap_cache)>>2)]=$call9;
      var $call11=_ass_composite_cache_create();
      var $17=$priv;
      var $cache12=(($17+496)|0);
      var $composite_cache=(($cache12+12)|0);
      HEAP32[(($composite_cache)>>2)]=$call11;
      var $call13=_ass_outline_cache_create();
      var $18=$priv;
      var $cache14=(($18+496)|0);
      var $outline_cache=(($cache14+4)|0);
      HEAP32[(($outline_cache)>>2)]=$call13;
      var $19=$priv;
      var $cache15=(($19+496)|0);
      var $glyph_max=(($cache15+16)|0);
      HEAP32[(($glyph_max)>>2)]=1000;
      var $20=$priv;
      var $cache16=(($20+496)|0);
      var $bitmap_max_size=(($cache16+20)|0);
      HEAP32[(($bitmap_max_size)>>2)]=31457280;
      var $21=$priv;
      var $text_info=(($21+464)|0);
      var $max_glyphs=(($text_info+24)|0);
      HEAP32[(($max_glyphs)>>2)]=1024;
      var $22=$priv;
      var $text_info17=(($22+464)|0);
      var $max_lines=(($text_info17+28)|0);
      HEAP32[(($max_lines)>>2)]=64;
      var $call18=_calloc(1024, 328);
      var $23=$call18;
      var $24=$priv;
      var $text_info19=(($24+464)|0);
      var $glyphs=(($text_info19)|0);
      HEAP32[(($glyphs)>>2)]=$23;
      var $call20=_calloc(64, 24);
      var $25=$call20;
      var $26=$priv;
      var $text_info21=(($26+464)|0);
      var $lines=(($text_info21+8)|0);
      HEAP32[(($lines)>>2)]=$25;
      var $27=$priv;
      var $settings=(($27+12)|0);
      var $font_size_coeff=(($settings+8)|0);
      (tempDoubleF64[0]=1,HEAP32[(($font_size_coeff)>>2)]=tempDoubleI32[0],HEAP32[((($font_size_coeff)+(4))>>2)]=tempDoubleI32[1]);
      var $call22=_ass_shaper_new(0);
      var $28=$priv;
      var $shaper=(($28+96)|0);
      HEAP32[(($shaper)>>2)]=$call22;
      var $29=$library_addr;
      _ass_shaper_info($29);
      var $30=$priv;
      var $settings23=(($30+12)|0);
      var $shaper24=(($settings23+64)|0);
      HEAP32[(($shaper24)>>2)]=0;
      __label__ = 7; break;
    case 7: 
      var $31=$priv;
      var $tobool25=(($31)|0)!=0;
      if ($tobool25) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $32=$library_addr;
      _ass_msg($32, 6, ((STRING_TABLE.__str3148)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 10; break;
    case 9: 
      var $33=$library_addr;
      _ass_msg($33, 1, ((STRING_TABLE.__str4149)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 10; break;
    case 10: 
      var $34=$priv;
      STACKTOP = __stackBase__;
      return $34;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_renderer_init["X"]=1;

function _ass_renderer_done($render_priv) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      $render_priv_addr=$render_priv;
      var $0=$render_priv_addr;
      var $cache=(($0+496)|0);
      var $font_cache=(($cache)|0);
      var $1=HEAP32[(($font_cache)>>2)];
      _ass_cache_done($1);
      var $2=$render_priv_addr;
      var $cache1=(($2+496)|0);
      var $bitmap_cache=(($cache1+8)|0);
      var $3=HEAP32[(($bitmap_cache)>>2)];
      _ass_cache_done($3);
      var $4=$render_priv_addr;
      var $cache2=(($4+496)|0);
      var $composite_cache=(($cache2+12)|0);
      var $5=HEAP32[(($composite_cache)>>2)];
      _ass_cache_done($5);
      var $6=$render_priv_addr;
      var $cache3=(($6+496)|0);
      var $outline_cache=(($cache3+4)|0);
      var $7=HEAP32[(($outline_cache)>>2)];
      _ass_cache_done($7);
      var $8=$render_priv_addr;
      var $images_root=(($8+100)|0);
      var $9=HEAP32[(($images_root)>>2)];
      _ass_free_images($9);
      var $10=$render_priv_addr;
      var $prev_images_root=(($10+104)|0);
      var $11=HEAP32[(($prev_images_root)>>2)];
      _ass_free_images($11);
      var $12=$render_priv_addr;
      var $state=(($12+176)|0);
      var $stroker=(($state+28)|0);
      var $13=HEAP32[(($stroker)>>2)];
      var $tobool=(($13)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $14=$render_priv_addr;
      var $state4=(($14+176)|0);
      var $stroker5=(($state4+28)|0);
      var $15=HEAP32[(($stroker5)>>2)];
      _FT_Stroker_Done($15);
      var $16=$render_priv_addr;
      var $state6=(($16+176)|0);
      var $stroker7=(($state6+28)|0);
      HEAP32[(($stroker7)>>2)]=0;
      __label__ = 4; break;
    case 4: 
      var $17=$render_priv_addr;
      var $ftlibrary=(($17+4)|0);
      var $18=HEAP32[(($ftlibrary)>>2)];
      var $tobool8=(($18)|0)!=0;
      if ($tobool8) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $19=$render_priv_addr;
      var $ftlibrary10=(($19+4)|0);
      var $20=HEAP32[(($ftlibrary10)>>2)];
      var $call=_FT_Done_FreeType($20);
      __label__ = 6; break;
    case 6: 
      var $21=$render_priv_addr;
      var $fontconfig_priv=(($21+8)|0);
      var $22=HEAP32[(($fontconfig_priv)>>2)];
      var $tobool12=(($22)|0)!=0;
      if ($tobool12) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $23=$render_priv_addr;
      var $fontconfig_priv14=(($23+8)|0);
      var $24=HEAP32[(($fontconfig_priv14)>>2)];
      _fontconfig_done($24);
      __label__ = 8; break;
    case 8: 
      var $25=$render_priv_addr;
      var $synth_priv=(($25+92)|0);
      var $26=HEAP32[(($synth_priv)>>2)];
      var $tobool16=(($26)|0)!=0;
      if ($tobool16) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $27=$render_priv_addr;
      var $synth_priv18=(($27+92)|0);
      var $28=HEAP32[(($synth_priv18)>>2)];
      _ass_synth_done($28);
      __label__ = 10; break;
    case 10: 
      var $29=$render_priv_addr;
      var $shaper=(($29+96)|0);
      var $30=HEAP32[(($shaper)>>2)];
      _ass_shaper_free($30);
      var $31=$render_priv_addr;
      var $eimg=(($31+108)|0);
      var $32=HEAP32[(($eimg)>>2)];
      var $33=$32;
      _free($33);
      var $34=$render_priv_addr;
      var $text_info=(($34+464)|0);
      var $glyphs=(($text_info)|0);
      var $35=HEAP32[(($glyphs)>>2)];
      var $36=$35;
      _free($36);
      var $37=$render_priv_addr;
      var $text_info20=(($37+464)|0);
      var $lines=(($text_info20+8)|0);
      var $38=HEAP32[(($lines)>>2)];
      var $39=$38;
      _free($39);
      var $40=$render_priv_addr;
      var $settings=(($40+12)|0);
      var $default_font=(($settings+68)|0);
      var $41=HEAP32[(($default_font)>>2)];
      _free($41);
      var $42=$render_priv_addr;
      var $settings21=(($42+12)|0);
      var $default_family=(($settings21+72)|0);
      var $43=HEAP32[(($default_family)>>2)];
      _free($43);
      var $44=$render_priv_addr;
      _free_list_clear($44);
      var $45=$render_priv_addr;
      var $46=$45;
      _free($46);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_renderer_done["X"]=1;

function _ass_free_images($img) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $img_addr;
      var $next;
      $img_addr=$img;
      __label__ = 3; break;
    case 3: 
      var $0=$img_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $1=$img_addr;
      var $next1=(($1+28)|0);
      var $2=HEAP32[(($next1)>>2)];
      $next=$2;
      var $3=$img_addr;
      var $4=$3;
      _free($4);
      var $5=$next;
      $img_addr=$5;
      __label__ = 3; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _free_list_clear($render_priv) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      var $item;
      var $oi;
      $render_priv_addr=$render_priv;
      var $0=$render_priv_addr;
      var $free_head=(($0+520)|0);
      var $1=HEAP32[(($free_head)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $2=$render_priv_addr;
      var $free_head1=(($2+520)|0);
      var $3=HEAP32[(($free_head1)>>2)];
      $item=$3;
      __label__ = 4; break;
    case 4: 
      var $4=$item;
      var $tobool2=(($4)|0)!=0;
      if ($tobool2) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $5=$item;
      $oi=$5;
      var $6=$item;
      var $object=(($6)|0);
      var $7=HEAP32[(($object)>>2)];
      _free($7);
      var $8=$item;
      var $next=(($8+4)|0);
      var $9=HEAP32[(($next)>>2)];
      $item=$9;
      var $10=$oi;
      var $11=$10;
      _free($11);
      __label__ = 4; break;
    case 6: 
      var $12=$render_priv_addr;
      var $free_head3=(($12+520)|0);
      HEAP32[(($free_head3)>>2)]=0;
      __label__ = 7; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _reset_render_context($render_priv) {
  ;
  var __label__;

  var $render_priv_addr;
  $render_priv_addr=$render_priv;
  var $0=$render_priv_addr;
  var $state=(($0+176)|0);
  var $style=(($state+4)|0);
  var $1=HEAP32[(($style)>>2)];
  var $PrimaryColour=(($1+16)|0);
  var $2=HEAP32[(($PrimaryColour)>>2)];
  var $3=$render_priv_addr;
  var $state1=(($3+176)|0);
  var $c=(($state1+156)|0);
  var $arrayidx=(($c)|0);
  HEAP32[(($arrayidx)>>2)]=$2;
  var $4=$render_priv_addr;
  var $state2=(($4+176)|0);
  var $style3=(($state2+4)|0);
  var $5=HEAP32[(($style3)>>2)];
  var $SecondaryColour=(($5+20)|0);
  var $6=HEAP32[(($SecondaryColour)>>2)];
  var $7=$render_priv_addr;
  var $state4=(($7+176)|0);
  var $c5=(($state4+156)|0);
  var $arrayidx6=(($c5+4)|0);
  HEAP32[(($arrayidx6)>>2)]=$6;
  var $8=$render_priv_addr;
  var $state7=(($8+176)|0);
  var $style8=(($state7+4)|0);
  var $9=HEAP32[(($style8)>>2)];
  var $OutlineColour=(($9+24)|0);
  var $10=HEAP32[(($OutlineColour)>>2)];
  var $11=$render_priv_addr;
  var $state9=(($11+176)|0);
  var $c10=(($state9+156)|0);
  var $arrayidx11=(($c10+8)|0);
  HEAP32[(($arrayidx11)>>2)]=$10;
  var $12=$render_priv_addr;
  var $state12=(($12+176)|0);
  var $style13=(($state12+4)|0);
  var $13=HEAP32[(($style13)>>2)];
  var $BackColour=(($13+28)|0);
  var $14=HEAP32[(($BackColour)>>2)];
  var $15=$render_priv_addr;
  var $state14=(($15+176)|0);
  var $c15=(($state14+156)|0);
  var $arrayidx16=(($c15+12)|0);
  HEAP32[(($arrayidx16)>>2)]=$14;
  var $16=$render_priv_addr;
  var $state17=(($16+176)|0);
  var $style18=(($state17+4)|0);
  var $17=HEAP32[(($style18)>>2)];
  var $Underline=(($17+40)|0);
  var $18=HEAP32[(($Underline)>>2)];
  var $tobool=(($18)|0)!=0;
  var $cond=$tobool ? 1 : 0;
  var $19=$render_priv_addr;
  var $state19=(($19+176)|0);
  var $style20=(($state19+4)|0);
  var $20=HEAP32[(($style20)>>2)];
  var $StrikeOut=(($20+44)|0);
  var $21=HEAP32[(($StrikeOut)>>2)];
  var $tobool21=(($21)|0)!=0;
  var $cond22=$tobool21 ? 2 : 0;
  var $or=$cond | $cond22;
  var $22=$render_priv_addr;
  var $state23=(($22+176)|0);
  var $flags=(($state23+24)|0);
  HEAP32[(($flags)>>2)]=$or;
  var $23=$render_priv_addr;
  var $state24=(($23+176)|0);
  var $style25=(($state24+4)|0);
  var $24=HEAP32[(($style25)>>2)];
  var $FontSize=(($24+8)|0);
  var $25=(tempDoubleI32[0]=HEAP32[(($FontSize)>>2)],tempDoubleI32[1]=HEAP32[((($FontSize)+(4))>>2)],tempDoubleF64[0]);
  var $26=$render_priv_addr;
  var $state26=(($26+176)|0);
  var $font_size=(($state26+16)|0);
  (tempDoubleF64[0]=$25,HEAP32[(($font_size)>>2)]=tempDoubleI32[0],HEAP32[((($font_size)+(4))>>2)]=tempDoubleI32[1]);
  var $27=$render_priv_addr;
  var $state27=(($27+176)|0);
  var $family=(($state27+264)|0);
  var $28=HEAP32[(($family)>>2)];
  _free($28);
  var $29=$render_priv_addr;
  var $state28=(($29+176)|0);
  var $family29=(($state28+264)|0);
  HEAP32[(($family29)>>2)]=0;
  var $30=$render_priv_addr;
  var $state30=(($30+176)|0);
  var $style31=(($state30+4)|0);
  var $31=HEAP32[(($style31)>>2)];
  var $FontName=(($31+4)|0);
  var $32=HEAP32[(($FontName)>>2)];
  var $call=_strdup($32);
  var $33=$render_priv_addr;
  var $state32=(($33+176)|0);
  var $family33=(($state32+264)|0);
  HEAP32[(($family33)>>2)]=$call;
  var $34=$render_priv_addr;
  var $state34=(($34+176)|0);
  var $style35=(($state34+4)|0);
  var $35=HEAP32[(($style35)>>2)];
  var $treat_fontname_as_pattern=(($35+116)|0);
  var $36=HEAP32[(($treat_fontname_as_pattern)>>2)];
  var $37=$render_priv_addr;
  var $state36=(($37+176)|0);
  var $treat_family_as_pattern=(($state36+276)|0);
  HEAP32[(($treat_family_as_pattern)>>2)]=$36;
  var $38=$render_priv_addr;
  var $state37=(($38+176)|0);
  var $style38=(($state37+4)|0);
  var $39=HEAP32[(($style38)>>2)];
  var $Bold=(($39+32)|0);
  var $40=HEAP32[(($Bold)>>2)];
  var $41=$render_priv_addr;
  var $state39=(($41+176)|0);
  var $bold=(($state39+268)|0);
  HEAP32[(($bold)>>2)]=$40;
  var $42=$render_priv_addr;
  var $state40=(($42+176)|0);
  var $style41=(($state40+4)|0);
  var $43=HEAP32[(($style41)>>2)];
  var $Italic=(($43+36)|0);
  var $44=HEAP32[(($Italic)>>2)];
  var $45=$render_priv_addr;
  var $state42=(($45+176)|0);
  var $italic=(($state42+272)|0);
  HEAP32[(($italic)>>2)]=$44;
  var $46=$render_priv_addr;
  _update_font($46);
  var $47=$render_priv_addr;
  _change_border($47, -1, -1);
  var $48=$render_priv_addr;
  var $state43=(($48+176)|0);
  var $style44=(($state43+4)|0);
  var $49=HEAP32[(($style44)>>2)];
  var $ScaleX=(($49+48)|0);
  var $50=(tempDoubleI32[0]=HEAP32[(($ScaleX)>>2)],tempDoubleI32[1]=HEAP32[((($ScaleX)+(4))>>2)],tempDoubleF64[0]);
  var $51=$render_priv_addr;
  var $state45=(($51+176)|0);
  var $scale_x=(($state45+116)|0);
  (tempDoubleF64[0]=$50,HEAP32[(($scale_x)>>2)]=tempDoubleI32[0],HEAP32[((($scale_x)+(4))>>2)]=tempDoubleI32[1]);
  var $52=$render_priv_addr;
  var $state46=(($52+176)|0);
  var $style47=(($state46+4)|0);
  var $53=HEAP32[(($style47)>>2)];
  var $ScaleY=(($53+56)|0);
  var $54=(tempDoubleI32[0]=HEAP32[(($ScaleY)>>2)],tempDoubleI32[1]=HEAP32[((($ScaleY)+(4))>>2)],tempDoubleF64[0]);
  var $55=$render_priv_addr;
  var $state48=(($55+176)|0);
  var $scale_y=(($state48+124)|0);
  (tempDoubleF64[0]=$54,HEAP32[(($scale_y)>>2)]=tempDoubleI32[0],HEAP32[((($scale_y)+(4))>>2)]=tempDoubleI32[1]);
  var $56=$render_priv_addr;
  var $state49=(($56+176)|0);
  var $style50=(($state49+4)|0);
  var $57=HEAP32[(($style50)>>2)];
  var $Spacing=(($57+64)|0);
  var $58=(tempDoubleI32[0]=HEAP32[(($Spacing)>>2)],tempDoubleI32[1]=HEAP32[((($Spacing)+(4))>>2)],tempDoubleF64[0]);
  var $59=$render_priv_addr;
  var $state51=(($59+176)|0);
  var $hspacing=(($state51+132)|0);
  (tempDoubleF64[0]=$58,HEAP32[(($hspacing)>>2)]=tempDoubleI32[0],HEAP32[((($hspacing)+(4))>>2)]=tempDoubleI32[1]);
  var $60=$render_priv_addr;
  var $state52=(($60+176)|0);
  var $be=(($state52+196)|0);
  HEAP8[($be)]=0;
  var $61=$render_priv_addr;
  var $state53=(($61+176)|0);
  var $blur=(($state53+200)|0);
  (tempDoubleF64[0]=0,HEAP32[(($blur)>>2)]=tempDoubleI32[0],HEAP32[((($blur)+(4))>>2)]=tempDoubleI32[1]);
  var $62=$render_priv_addr;
  var $state54=(($62+176)|0);
  var $style55=(($state54+4)|0);
  var $63=HEAP32[(($style55)>>2)];
  var $Shadow=(($63+88)|0);
  var $64=(tempDoubleI32[0]=HEAP32[(($Shadow)>>2)],tempDoubleI32[1]=HEAP32[((($Shadow)+(4))>>2)],tempDoubleF64[0]);
  var $65=$render_priv_addr;
  var $state56=(($65+176)|0);
  var $shadow_x=(($state56+208)|0);
  (tempDoubleF64[0]=$64,HEAP32[(($shadow_x)>>2)]=tempDoubleI32[0],HEAP32[((($shadow_x)+(4))>>2)]=tempDoubleI32[1]);
  var $66=$render_priv_addr;
  var $state57=(($66+176)|0);
  var $style58=(($state57+4)|0);
  var $67=HEAP32[(($style58)>>2)];
  var $Shadow59=(($67+88)|0);
  var $68=(tempDoubleI32[0]=HEAP32[(($Shadow59)>>2)],tempDoubleI32[1]=HEAP32[((($Shadow59)+(4))>>2)],tempDoubleF64[0]);
  var $69=$render_priv_addr;
  var $state60=(($69+176)|0);
  var $shadow_y=(($state60+216)|0);
  (tempDoubleF64[0]=$68,HEAP32[(($shadow_y)>>2)]=tempDoubleI32[0],HEAP32[((($shadow_y)+(4))>>2)]=tempDoubleI32[1]);
  var $70=$render_priv_addr;
  var $state61=(($70+176)|0);
  var $fry=(($state61+44)|0);
  (tempDoubleF64[0]=0,HEAP32[(($fry)>>2)]=tempDoubleI32[0],HEAP32[((($fry)+(4))>>2)]=tempDoubleI32[1]);
  var $71=$render_priv_addr;
  var $state62=(($71+176)|0);
  var $frx=(($state62+36)|0);
  (tempDoubleF64[0]=0,HEAP32[(($frx)>>2)]=tempDoubleI32[0],HEAP32[((($frx)+(4))>>2)]=tempDoubleI32[1]);
  var $72=$render_priv_addr;
  var $state63=(($72+176)|0);
  var $style64=(($state63+4)|0);
  var $73=HEAP32[(($style64)>>2)];
  var $Angle=(($73+72)|0);
  var $74=HEAP32[(($Angle)>>2)];
  var $conv=(($74)|0);
  var $mul=($conv)*(3.141592653589793);
  var $div=($mul)/(180);
  var $75=$render_priv_addr;
  var $state65=(($75+176)|0);
  var $frz=(($state65+52)|0);
  (tempDoubleF64[0]=$div,HEAP32[(($frz)>>2)]=tempDoubleI32[0],HEAP32[((($frz)+(4))>>2)]=tempDoubleI32[1]);
  var $76=$render_priv_addr;
  var $state66=(($76+176)|0);
  var $fay=(($state66+68)|0);
  (tempDoubleF64[0]=0,HEAP32[(($fay)>>2)]=tempDoubleI32[0],HEAP32[((($fay)+(4))>>2)]=tempDoubleI32[1]);
  var $77=$render_priv_addr;
  var $state67=(($77+176)|0);
  var $fax=(($state67+60)|0);
  (tempDoubleF64[0]=0,HEAP32[(($fax)>>2)]=tempDoubleI32[0],HEAP32[((($fax)+(4))>>2)]=tempDoubleI32[1]);
  var $78=$render_priv_addr;
  var $track=(($78+140)|0);
  var $79=HEAP32[(($track)>>2)];
  var $WrapStyle=(($79+52)|0);
  var $80=HEAP32[(($WrapStyle)>>2)];
  var $81=$render_priv_addr;
  var $state68=(($81+176)|0);
  var $wrap_style=(($state68+280)|0);
  HEAP32[(($wrap_style)>>2)]=$80;
  var $82=$render_priv_addr;
  var $state69=(($82+176)|0);
  var $style70=(($state69+4)|0);
  var $83=HEAP32[(($style70)>>2)];
  var $Encoding=(($83+112)|0);
  var $84=HEAP32[(($Encoding)>>2)];
  var $85=$render_priv_addr;
  var $state71=(($85+176)|0);
  var $font_encoding=(($state71+284)|0);
  HEAP32[(($font_encoding)>>2)]=$84;
  ;
  return;
}
_reset_render_context["X"]=1;

function _ass_render_frame($priv, $track, $now$0, $now$1, $detect_change) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $priv_addr;
      var $track_addr;
      var $now_addr=__stackBase__;
      var $detect_change_addr;
      var $i;
      var $cnt;
      var $rc;
      var $last;
      var $tail;
      var $event;
      var $cur;
      $priv_addr=$priv;
      $track_addr=$track;
      var $st$14$0=(($now_addr)|0);
      HEAP32[(($st$14$0)>>2)]=$now$0;
      var $st$14$1=(($now_addr+4)|0);
      HEAP32[(($st$14$1)>>2)]=$now$1;
      $detect_change_addr=$detect_change;
      var $0=$priv_addr;
      var $1=$track_addr;
      var $st$21$0=(($now_addr)|0);
      var $2$0=HEAP32[(($st$21$0)>>2)];
      var $st$21$1=(($now_addr+4)|0);
      var $2$1=HEAP32[(($st$21$1)>>2)];
      var $call=_ass_start_frame($0, $1, $2$0, $2$1);
      var $call$0=$call[0];
      $rc=$call;
      var $3=$rc;
      var $cmp=(($3)|0)!=0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=0;
      __label__ = 33; break;
    case 4: 
      $cnt=0;
      $i=0;
      __label__ = 5; break;
    case 5: 
      var $4=$i;
      var $5=$track_addr;
      var $n_events=(($5+8)|0);
      var $6=HEAP32[(($n_events)>>2)];
      var $cmp1=(($4)|0) < (($6)|0);
      if ($cmp1) { __label__ = 6; break; } else { __label__ = 15; break; }
    case 6: 
      var $7=$track_addr;
      var $events=(($7+20)|0);
      var $8=HEAP32[(($events)>>2)];
      var $9=$i;
      var $add_ptr=(($8+($9)*(56))|0);
      $event=$add_ptr;
      var $10=$event;
      var $Start=(($10)|0);
      var $st$8$0=(($Start)|0);
      var $11$0=HEAP32[(($st$8$0)>>2)];
      var $st$8$1=(($Start+4)|0);
      var $11$1=HEAP32[(($st$8$1)>>2)];
      var $st$12$0=(($now_addr)|0);
      var $12$0=HEAP32[(($st$12$0)>>2)];
      var $st$12$1=(($now_addr+4)|0);
      var $12$1=HEAP32[(($st$12$1)>>2)];
      var $cmp2=($11$1|0) <= ($12$1|0) && (($11$1|0) <  ($12$1|0) || ($11$0>>>0) <= ($12$0>>>0));
      if ($cmp2) { __label__ = 7; break; } else { __label__ = 13; break; }
    case 7: 
      var $st$0$0=(($now_addr)|0);
      var $13$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($now_addr+4)|0);
      var $13$1=HEAP32[(($st$0$1)>>2)];
      var $14=$event;
      var $Start3=(($14)|0);
      var $st$6$0=(($Start3)|0);
      var $15$0=HEAP32[(($st$6$0)>>2)];
      var $st$6$1=(($Start3+4)|0);
      var $15$1=HEAP32[(($st$6$1)>>2)];
      var $16=$event;
      var $Duration=(($16+8)|0);
      var $st$12$0=(($Duration)|0);
      var $17$0=HEAP32[(($st$12$0)>>2)];
      var $st$12$1=(($Duration+4)|0);
      var $17$1=HEAP32[(($st$12$1)>>2)];
      var $add$0 = (i64Math.add($15$0,$15$1,$17$0,$17$1),i64Math.result[0]); var $add$1 = i64Math.result[1];
      var $cmp4=($13$1|0) < ($add$1|0) || (($13$1|0) == ($add$1|0) && ($13$0>>>0) <  ($add$0>>>0));
      if ($cmp4) { __label__ = 8; break; } else { __label__ = 13; break; }
    case 8: 
      var $18=$cnt;
      var $19=$priv_addr;
      var $eimg_size=(($19+112)|0);
      var $20=HEAP32[(($eimg_size)>>2)];
      var $cmp6=(($18)|0) >= (($20)|0);
      if ($cmp6) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $21=$priv_addr;
      var $eimg_size8=(($21+112)|0);
      var $22=HEAP32[(($eimg_size8)>>2)];
      var $add9=((($22)+(100))|0);
      HEAP32[(($eimg_size8)>>2)]=$add9;
      var $23=$priv_addr;
      var $eimg=(($23+108)|0);
      var $24=HEAP32[(($eimg)>>2)];
      var $25=$24;
      var $26=$priv_addr;
      var $eimg_size10=(($26+112)|0);
      var $27=HEAP32[(($eimg_size10)>>2)];
      var $mul=((($27<<5))|0);
      var $call11=_realloc($25, $mul);
      var $28=$call11;
      var $29=$priv_addr;
      var $eimg12=(($29+108)|0);
      HEAP32[(($eimg12)>>2)]=$28;
      __label__ = 10; break;
    case 10: 
      var $30=$priv_addr;
      var $31=$event;
      var $32=$priv_addr;
      var $eimg14=(($32+108)|0);
      var $33=HEAP32[(($eimg14)>>2)];
      var $34=$cnt;
      var $add_ptr15=(($33+($34<<5))|0);
      var $call16=_ass_render_event($30, $31, $add_ptr15);
      $rc=$call16;
      var $35=$rc;
      var $tobool=(($35)|0)!=0;
      if ($tobool) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $36=$cnt;
      var $inc=((($36)+(1))|0);
      $cnt=$inc;
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $37=$i;
      var $inc20=((($37)+(1))|0);
      $i=$inc20;
      __label__ = 5; break;
    case 15: 
      var $38=$priv_addr;
      var $eimg21=(($38+108)|0);
      var $39=HEAP32[(($eimg21)>>2)];
      var $40=$39;
      var $41=$cnt;
      _qsort($40, $41, 32, 38);
      var $42=$priv_addr;
      var $eimg22=(($42+108)|0);
      var $43=HEAP32[(($eimg22)>>2)];
      $last=$43;
      $i=1;
      __label__ = 16; break;
    case 16: 
      var $44=$i;
      var $45=$cnt;
      var $cmp24=(($44)|0) < (($45)|0);
      if ($cmp24) { __label__ = 17; break; } else { __label__ = 21; break; }
    case 17: 
      var $46=$last;
      var $event26=(($46+28)|0);
      var $47=HEAP32[(($event26)>>2)];
      var $Layer=(($47+20)|0);
      var $48=HEAP32[(($Layer)>>2)];
      var $49=$i;
      var $50=$priv_addr;
      var $eimg27=(($50+108)|0);
      var $51=HEAP32[(($eimg27)>>2)];
      var $arrayidx=(($51+($49<<5))|0);
      var $event28=(($arrayidx+28)|0);
      var $52=HEAP32[(($event28)>>2)];
      var $Layer29=(($52+20)|0);
      var $53=HEAP32[(($Layer29)>>2)];
      var $cmp30=(($48)|0)!=(($53)|0);
      if ($cmp30) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $54=$priv_addr;
      var $55=$last;
      var $56=$priv_addr;
      var $eimg32=(($56+108)|0);
      var $57=HEAP32[(($eimg32)>>2)];
      var $58=$i;
      var $add_ptr33=(($57+($58<<5))|0);
      var $59=$last;
      var $sub_ptr_lhs_cast=$add_ptr33;
      var $sub_ptr_rhs_cast=$59;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(32))&-1);
      _fix_collisions($54, $55, $sub_ptr_div);
      var $60=$priv_addr;
      var $eimg34=(($60+108)|0);
      var $61=HEAP32[(($eimg34)>>2)];
      var $62=$i;
      var $add_ptr35=(($61+($62<<5))|0);
      $last=$add_ptr35;
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $63=$i;
      var $inc38=((($63)+(1))|0);
      $i=$inc38;
      __label__ = 16; break;
    case 21: 
      var $64=$cnt;
      var $cmp40=(($64)|0) > 0;
      if ($cmp40) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $65=$priv_addr;
      var $66=$last;
      var $67=$priv_addr;
      var $eimg42=(($67+108)|0);
      var $68=HEAP32[(($eimg42)>>2)];
      var $69=$cnt;
      var $add_ptr43=(($68+($69<<5))|0);
      var $70=$last;
      var $sub_ptr_lhs_cast44=$add_ptr43;
      var $sub_ptr_rhs_cast45=$70;
      var $sub_ptr_sub46=((($sub_ptr_lhs_cast44)-($sub_ptr_rhs_cast45))|0);
      var $sub_ptr_div47=((((($sub_ptr_sub46)|0))/(32))&-1);
      _fix_collisions($65, $66, $sub_ptr_div47);
      __label__ = 23; break;
    case 23: 
      var $71=$priv_addr;
      var $images_root=(($71+100)|0);
      $tail=$images_root;
      $i=0;
      __label__ = 24; break;
    case 24: 
      var $72=$i;
      var $73=$cnt;
      var $cmp50=(($72)|0) < (($73)|0);
      if ($cmp50) { __label__ = 25; break; } else { __label__ = 30; break; }
    case 25: 
      var $74=$i;
      var $75=$priv_addr;
      var $eimg52=(($75+108)|0);
      var $76=HEAP32[(($eimg52)>>2)];
      var $arrayidx53=(($76+($74<<5))|0);
      var $imgs=(($arrayidx53)|0);
      var $77=HEAP32[(($imgs)>>2)];
      $cur=$77;
      __label__ = 26; break;
    case 26: 
      var $78=$cur;
      var $tobool54=(($78)|0)!=0;
      if ($tobool54) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $79=$cur;
      var $80=$tail;
      HEAP32[(($80)>>2)]=$79;
      var $81=$cur;
      var $next=(($81+28)|0);
      $tail=$next;
      var $82=$cur;
      var $next55=(($82+28)|0);
      var $83=HEAP32[(($next55)>>2)];
      $cur=$83;
      __label__ = 26; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $84=$i;
      var $inc57=((($84)+(1))|0);
      $i=$inc57;
      __label__ = 24; break;
    case 30: 
      var $85=$detect_change_addr;
      var $tobool59=(($85)|0)!=0;
      if ($tobool59) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $86=$priv_addr;
      var $call61=_ass_detect_change($86);
      var $87=$detect_change_addr;
      HEAP32[(($87)>>2)]=$call61;
      __label__ = 32; break;
    case 32: 
      var $88=$priv_addr;
      var $prev_images_root=(($88+104)|0);
      var $89=HEAP32[(($prev_images_root)>>2)];
      _ass_free_images($89);
      var $90=$priv_addr;
      var $prev_images_root63=(($90+104)|0);
      HEAP32[(($prev_images_root63)>>2)]=0;
      var $91=$priv_addr;
      var $images_root64=(($91+100)|0);
      var $92=HEAP32[(($images_root64)>>2)];
      $retval=$92;
      __label__ = 33; break;
    case 33: 
      var $93=$retval;
      STACKTOP = __stackBase__;
      return $93;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_render_frame["X"]=1;

function _ass_start_frame($render_priv, $track, $now$0, $now$1) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $render_priv_addr;
      var $track_addr;
      var $now_addr=__stackBase__;
      var $settings_priv;
      $render_priv_addr=$render_priv;
      $track_addr=$track;
      var $st$7$0=(($now_addr)|0);
      HEAP32[(($st$7$0)>>2)]=$now$0;
      var $st$7$1=(($now_addr+4)|0);
      HEAP32[(($st$7$1)>>2)]=$now$1;
      var $0=$render_priv_addr;
      var $settings=(($0+12)|0);
      $settings_priv=$settings;
      var $1=$render_priv_addr;
      var $settings1=(($1+12)|0);
      var $frame_width=(($settings1)|0);
      var $2=HEAP32[(($frame_width)>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { __label__ = 3; break; }
    case 3: 
      var $3=$render_priv_addr;
      var $settings2=(($3+12)|0);
      var $frame_height=(($settings2+4)|0);
      var $4=HEAP32[(($frame_height)>>2)];
      var $tobool3=(($4)|0)!=0;
      if ($tobool3) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      $retval=1;
      __label__ = 17; break;
    case 5: 
      var $5=$render_priv_addr;
      var $library=(($5)|0);
      var $6=HEAP32[(($library)>>2)];
      var $7=$track_addr;
      var $library4=(($7+76)|0);
      var $8=HEAP32[(($library4)>>2)];
      var $cmp=(($6)|0)!=(($8)|0);
      if ($cmp) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $retval=1;
      __label__ = 17; break;
    case 7: 
      var $9=$render_priv_addr;
      var $fontconfig_priv=(($9+8)|0);
      var $10=HEAP32[(($fontconfig_priv)>>2)];
      var $tobool7=(($10)|0)!=0;
      if ($tobool7) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      $retval=1;
      __label__ = 17; break;
    case 9: 
      var $11=$render_priv_addr;
      _free_list_clear($11);
      var $12=$track_addr;
      var $n_events=(($12+8)|0);
      var $13=HEAP32[(($n_events)>>2)];
      var $cmp10=(($13)|0)==0;
      if ($cmp10) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      $retval=1;
      __label__ = 17; break;
    case 11: 
      var $14=$track_addr;
      var $15=$render_priv_addr;
      var $track13=(($15+140)|0);
      HEAP32[(($track13)>>2)]=$14;
      var $st$4$0=(($now_addr)|0);
      var $16$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($now_addr+4)|0);
      var $16$1=HEAP32[(($st$4$1)>>2)];
      var $17=$render_priv_addr;
      var $time=(($17+144)|0);
      var $st$10$0=(($time)|0);
      HEAP32[(($st$10$0)>>2)]=$16$0;
      var $st$10$1=(($time+4)|0);
      HEAP32[(($st$10$1)>>2)]=$16$1;
      var $18=$render_priv_addr;
      var $library14=(($18)|0);
      var $19=HEAP32[(($library14)>>2)];
      var $20=$render_priv_addr;
      var $track15=(($20+140)|0);
      var $21=HEAP32[(($track15)>>2)];
      _ass_lazy_track_init($19, $21);
      var $22=$settings_priv;
      var $font_size_coeff=(($22+8)|0);
      var $23=(tempDoubleI32[0]=HEAP32[(($font_size_coeff)>>2)],tempDoubleI32[1]=HEAP32[((($font_size_coeff)+(4))>>2)],tempDoubleF64[0]);
      var $24=$render_priv_addr;
      var $orig_height=(($24+124)|0);
      var $25=HEAP32[(($orig_height)>>2)];
      var $conv=(($25)|0);
      var $mul=($23)*($conv);
      var $26=$render_priv_addr;
      var $track16=(($26+140)|0);
      var $27=HEAP32[(($track16)>>2)];
      var $PlayResY=(($27+40)|0);
      var $28=HEAP32[(($PlayResY)>>2)];
      var $conv17=(($28)|0);
      var $div=($mul)/($conv17);
      var $29=$render_priv_addr;
      var $font_scale=(($29+152)|0);
      (tempDoubleF64[0]=$div,HEAP32[(($font_scale)>>2)]=tempDoubleI32[0],HEAP32[((($font_scale)+(4))>>2)]=tempDoubleI32[1]);
      var $30=$render_priv_addr;
      var $track18=(($30+140)|0);
      var $31=HEAP32[(($track18)>>2)];
      var $ScaledBorderAndShadow=(($31+56)|0);
      var $32=HEAP32[(($ScaledBorderAndShadow)>>2)];
      var $tobool19=(($32)|0)!=0;
      if ($tobool19) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $33=$render_priv_addr;
      var $orig_height21=(($33+124)|0);
      var $34=HEAP32[(($orig_height21)>>2)];
      var $conv22=(($34)|0);
      var $35=$render_priv_addr;
      var $track23=(($35+140)|0);
      var $36=HEAP32[(($track23)>>2)];
      var $PlayResY24=(($36+40)|0);
      var $37=HEAP32[(($PlayResY24)>>2)];
      var $conv25=(($37)|0);
      var $div26=($conv22)/($conv25);
      var $38=$render_priv_addr;
      var $border_scale=(($38+168)|0);
      (tempDoubleF64[0]=$div26,HEAP32[(($border_scale)>>2)]=tempDoubleI32[0],HEAP32[((($border_scale)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 14; break;
    case 13: 
      var $39=$render_priv_addr;
      var $border_scale27=(($39+168)|0);
      (tempDoubleF64[0]=1,HEAP32[(($border_scale27)>>2)]=tempDoubleI32[0],HEAP32[((($border_scale27)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 14; break;
    case 14: 
      var $40=$render_priv_addr;
      var $shaper=(($40+96)|0);
      var $41=HEAP32[(($shaper)>>2)];
      var $42=$track_addr;
      var $Kerning=(($42+60)|0);
      var $43=HEAP32[(($Kerning)>>2)];
      _ass_shaper_set_kerning($41, $43);
      var $44=$track_addr;
      var $Language=(($44+64)|0);
      var $45=HEAP32[(($Language)>>2)];
      var $tobool29=(($45)|0)!=0;
      if ($tobool29) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $46=$render_priv_addr;
      var $shaper31=(($46+96)|0);
      var $47=HEAP32[(($shaper31)>>2)];
      var $48=$track_addr;
      var $Language32=(($48+64)|0);
      var $49=HEAP32[(($Language32)>>2)];
      _ass_shaper_set_language($47, $49);
      __label__ = 16; break;
    case 16: 
      var $50=$render_priv_addr;
      var $shaper34=(($50+96)|0);
      var $51=HEAP32[(($shaper34)>>2)];
      var $52=$render_priv_addr;
      var $settings35=(($52+12)|0);
      var $shaper36=(($settings35+64)|0);
      var $53=HEAP32[(($shaper36)>>2)];
      _ass_shaper_set_level($51, $53);
      var $54=$render_priv_addr;
      var $settings37=(($54+12)|0);
      var $aspect=(($settings37+44)|0);
      var $55=(tempDoubleI32[0]=HEAP32[(($aspect)>>2)],tempDoubleI32[1]=HEAP32[((($aspect)+(4))>>2)],tempDoubleF64[0]);
      var $56=$render_priv_addr;
      var $settings38=(($56+12)|0);
      var $storage_aspect=(($settings38+52)|0);
      var $57=(tempDoubleI32[0]=HEAP32[(($storage_aspect)>>2)],tempDoubleI32[1]=HEAP32[((($storage_aspect)+(4))>>2)],tempDoubleF64[0]);
      var $div39=($55)/($57);
      var $58=$render_priv_addr;
      var $font_scale_x=(($58+160)|0);
      (tempDoubleF64[0]=$div39,HEAP32[(($font_scale_x)>>2)]=tempDoubleI32[0],HEAP32[((($font_scale_x)+(4))>>2)]=tempDoubleI32[1]);
      var $59=$render_priv_addr;
      var $images_root=(($59+100)|0);
      var $60=HEAP32[(($images_root)>>2)];
      var $61=$render_priv_addr;
      var $prev_images_root=(($61+104)|0);
      HEAP32[(($prev_images_root)>>2)]=$60;
      var $62=$render_priv_addr;
      var $images_root40=(($62+100)|0);
      HEAP32[(($images_root40)>>2)]=0;
      var $63=$render_priv_addr;
      var $64=$render_priv_addr;
      var $cache=(($64+496)|0);
      _check_cache_limits($63, $cache);
      $retval=0;
      __label__ = 17; break;
    case 17: 
      var $65=$retval;
      STACKTOP = __stackBase__;
      return $65;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_start_frame["X"]=1;

function _ass_render_event($render_priv, $event, $event_images) {
  var __stackBase__  = STACKTOP; STACKTOP += 112; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $render_priv_addr;
      var $event_addr;
      var $event_images_addr;
      var $p=__stackBase__;
      var $previous;
      var $num_glyphs;
      var $pen=(__stackBase__)+(4);
      var $code;
      var $bbox=(__stackBase__)+(12);
      var $i;
      var $j;
      var $MarginL;
      var $MarginR;
      var $MarginV;
      var $last_break;
      var $alignment;
      var $halign;
      var $valign;
      var $device_x;
      var $device_y;
      var $text_info;
      var $glyphs;
      var $drawing;
      var $clr=(__stackBase__)+(44);
      var $info;
      var $back;
      var $og;
      var $info262;
      var $cluster_pen=(__stackBase__)+(48);
      var $max_text_width;
      var $cmap;
      var $lineno;
      var $info349;
      var $cluster_pen375=(__stackBase__)+(56);
      var $width;
      var $shift;
      var $info466;
      var $scr_y;
      var $scr_y587;
      var $base_x=(__stackBase__)+(64);
      var $base_y=(__stackBase__)+(72);
      var $center=(__stackBase__)+(80);
      var $bx=(__stackBase__)+(96);
      var $by=(__stackBase__)+(104);
      var $info798;
      var $key;
      var $left;
      var $info854;
      var $key859;
      $render_priv_addr=$render_priv;
      $event_addr=$event;
      $event_images_addr=$event_images;
      $device_x=0;
      $device_y=0;
      var $0=$render_priv_addr;
      var $text_info1=(($0+464)|0);
      $text_info=$text_info1;
      var $1=$render_priv_addr;
      var $text_info2=(($1+464)|0);
      var $glyphs3=(($text_info2)|0);
      var $2=HEAP32[(($glyphs3)>>2)];
      $glyphs=$2;
      var $3=$event_addr;
      var $Style=(($3+24)|0);
      var $4=HEAP32[(($Style)>>2)];
      var $5=$render_priv_addr;
      var $track=(($5+140)|0);
      var $6=HEAP32[(($track)>>2)];
      var $n_styles=(($6)|0);
      var $7=HEAP32[(($n_styles)>>2)];
      var $cmp=(($4)|0) >= (($7)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $8=$render_priv_addr;
      var $library=(($8)|0);
      var $9=HEAP32[(($library)>>2)];
      _ass_msg($9, 2, ((STRING_TABLE.__str6151)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $retval=1;
      __label__ = 184; break;
    case 4: 
      var $10=$event_addr;
      var $Text=(($10+48)|0);
      var $11=HEAP32[(($Text)>>2)];
      var $tobool=(($11)|0)!=0;
      if ($tobool) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $12=$render_priv_addr;
      var $library5=(($12)|0);
      var $13=HEAP32[(($library5)>>2)];
      _ass_msg($13, 2, ((STRING_TABLE.__str7152)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $retval=1;
      __label__ = 184; break;
    case 6: 
      var $14=$render_priv_addr;
      var $15=$event_addr;
      _init_render_context($14, $15);
      var $16=$render_priv_addr;
      var $state=(($16+176)|0);
      var $drawing7=(($state+228)|0);
      var $17=HEAP32[(($drawing7)>>2)];
      $drawing=$17;
      var $18=$text_info;
      var $length=(($18+4)|0);
      HEAP32[(($length)>>2)]=0;
      $num_glyphs=0;
      var $19=$event_addr;
      var $Text8=(($19+48)|0);
      var $20=HEAP32[(($Text8)>>2)];
      HEAP32[(($p)>>2)]=$20;
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $21=$render_priv_addr;
      var $call=_get_next_char($21, $p);
      $code=$call;
      var $22=$render_priv_addr;
      var $state9=(($22+176)|0);
      var $drawing_mode=(($state9+224)|0);
      var $23=HEAP32[(($drawing_mode)>>2)];
      var $tobool10=(($23)|0)!=0;
      if ($tobool10) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $24=$code;
      var $tobool11=(($24)|0)!=0;
      if ($tobool11) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $25=$drawing;
      var $26=$code;
      var $conv=(($26) & 255);
      _ass_drawing_add_char($25, $conv);
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $27=$code;
      var $tobool14=(($27)|0)!=0;
      if ($tobool14) { __label__ = 13; break; } else { var $30 = 0;__label__ = 14; break; }
    case 13: 
      var $28=$render_priv_addr;
      var $state15=(($28+176)|0);
      var $drawing_mode16=(($state15+224)|0);
      var $29=HEAP32[(($drawing_mode16)>>2)];
      var $tobool17=(($29)|0)!=0;
      var $30 = $tobool17;__label__ = 14; break;
    case 14: 
      var $30;
      if ($30) { __label__ = 8; break; } else { __label__ = 15; break; }
    case 15: 
      var $31=$text_info;
      var $length18=(($31+4)|0);
      var $32=HEAP32[(($length18)>>2)];
      var $33=$text_info;
      var $max_glyphs=(($33+24)|0);
      var $34=HEAP32[(($max_glyphs)>>2)];
      var $cmp19=(($32)|0) >= (($34)|0);
      if ($cmp19) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $35=$text_info;
      var $max_glyphs22=(($35+24)|0);
      var $36=HEAP32[(($max_glyphs22)>>2)];
      var $mul=((($36<<1))|0);
      HEAP32[(($max_glyphs22)>>2)]=$mul;
      var $37=$text_info;
      var $glyphs23=(($37)|0);
      var $38=HEAP32[(($glyphs23)>>2)];
      var $39=$38;
      var $40=$text_info;
      var $max_glyphs24=(($40+24)|0);
      var $41=HEAP32[(($max_glyphs24)>>2)];
      var $mul25=((($41)*(328))|0);
      var $call26=_realloc($39, $mul25);
      var $42=$call26;
      $glyphs=$42;
      var $43=$text_info;
      var $glyphs27=(($43)|0);
      HEAP32[(($glyphs27)>>2)]=$42;
      __label__ = 17; break;
    case 17: 
      var $44=$text_info;
      var $length29=(($44+4)|0);
      var $45=HEAP32[(($length29)>>2)];
      var $46=$glyphs;
      var $arrayidx=(($46+($45)*(328))|0);
      var $47=$arrayidx;
      for (var $$dest = $47>>2, $$stop = $$dest + 82; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $48=$drawing;
      var $i30=(($48+4)|0);
      var $49=HEAP32[(($i30)>>2)];
      var $tobool31=(($49)|0)!=0;
      if ($tobool31) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $50=$render_priv_addr;
      var $state33=(($50+176)|0);
      var $scale_x=(($state33+116)|0);
      var $51=(tempDoubleI32[0]=HEAP32[(($scale_x)>>2)],tempDoubleI32[1]=HEAP32[((($scale_x)+(4))>>2)],tempDoubleF64[0]);
      var $52=$render_priv_addr;
      var $font_scale=(($52+152)|0);
      var $53=(tempDoubleI32[0]=HEAP32[(($font_scale)>>2)],tempDoubleI32[1]=HEAP32[((($font_scale)+(4))>>2)],tempDoubleF64[0]);
      var $mul34=($51)*($53);
      var $54=$drawing;
      var $scale_x35=(($54+20)|0);
      (tempDoubleF64[0]=$mul34,HEAP32[(($scale_x35)>>2)]=tempDoubleI32[0],HEAP32[((($scale_x35)+(4))>>2)]=tempDoubleI32[1]);
      var $55=$render_priv_addr;
      var $state36=(($55+176)|0);
      var $scale_y=(($state36+124)|0);
      var $56=(tempDoubleI32[0]=HEAP32[(($scale_y)>>2)],tempDoubleI32[1]=HEAP32[((($scale_y)+(4))>>2)],tempDoubleF64[0]);
      var $57=$render_priv_addr;
      var $font_scale37=(($57+152)|0);
      var $58=(tempDoubleI32[0]=HEAP32[(($font_scale37)>>2)],tempDoubleI32[1]=HEAP32[((($font_scale37)+(4))>>2)],tempDoubleF64[0]);
      var $mul38=($56)*($58);
      var $59=$drawing;
      var $scale_y39=(($59+28)|0);
      (tempDoubleF64[0]=$mul38,HEAP32[(($scale_y39)>>2)]=tempDoubleI32[0],HEAP32[((($scale_y39)+(4))>>2)]=tempDoubleI32[1]);
      var $60=HEAP32[(($p)>>2)];
      var $incdec_ptr=((($60)-(1))|0);
      HEAP32[(($p)>>2)]=$incdec_ptr;
      $code=65532;
      var $61=$drawing;
      var $62=$text_info;
      var $length40=(($62+4)|0);
      var $63=HEAP32[(($length40)>>2)];
      var $64=$glyphs;
      var $arrayidx41=(($64+($63)*(328))|0);
      var $drawing42=(($arrayidx41+28)|0);
      HEAP32[(($drawing42)>>2)]=$61;
      __label__ = 19; break;
    case 19: 
      var $65=$render_priv_addr;
      var $state44=(($65+176)|0);
      var $font=(($state44+12)|0);
      var $66=HEAP32[(($font)>>2)];
      var $tobool45=(($66)|0)!=0;
      if ($tobool45) { __label__ = 21; break; } else { __label__ = 20; break; }
    case 20: 
      var $67=$render_priv_addr;
      _free_render_context($67);
      $retval=1;
      __label__ = 184; break;
    case 21: 
      var $68=$code;
      var $cmp48=(($68)|0)==0;
      if ($cmp48) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      __label__ = 30; break;
    case 23: 
      var $69=$code;
      var $70=$text_info;
      var $length52=(($70+4)|0);
      var $71=HEAP32[(($length52)>>2)];
      var $72=$glyphs;
      var $arrayidx53=(($72+($71)*(328))|0);
      var $symbol=(($arrayidx53)|0);
      HEAP32[(($symbol)>>2)]=$69;
      var $73=$render_priv_addr;
      var $state54=(($73+176)|0);
      var $font55=(($state54+12)|0);
      var $74=HEAP32[(($font55)>>2)];
      var $75=$text_info;
      var $length56=(($75+4)|0);
      var $76=HEAP32[(($length56)>>2)];
      var $77=$glyphs;
      var $arrayidx57=(($77+($76)*(328))|0);
      var $font58=(($arrayidx57+8)|0);
      HEAP32[(($font58)>>2)]=$74;
      $i=0;
      __label__ = 24; break;
    case 24: 
      var $78=$i;
      var $cmp59=(($78)|0) < 4;
      if ($cmp59) { __label__ = 25; break; } else { __label__ = 27; break; }
    case 25: 
      var $79=$i;
      var $80=$render_priv_addr;
      var $state61=(($80+176)|0);
      var $c=(($state61+156)|0);
      var $arrayidx62=(($c+($79<<2))|0);
      var $81=HEAP32[(($arrayidx62)>>2)];
      HEAP32[(($clr)>>2)]=$81;
      var $82=HEAP32[(($clr)>>2)];
      var $and=$82 & 255;
      var $83=$render_priv_addr;
      var $state63=(($83+176)|0);
      var $fade=(($state63+192)|0);
      var $84=HEAP32[(($fade)>>2)];
      var $call64=_mult_alpha($and, $84);
      _change_alpha($clr, $call64, 1);
      var $85=HEAP32[(($clr)>>2)];
      var $86=$i;
      var $87=$text_info;
      var $length65=(($87+4)|0);
      var $88=HEAP32[(($length65)>>2)];
      var $89=$glyphs;
      var $arrayidx66=(($89+($88)*(328))|0);
      var $c67=(($arrayidx66+88)|0);
      var $arrayidx68=(($c67+($86<<2))|0);
      HEAP32[(($arrayidx68)>>2)]=$85;
      __label__ = 26; break;
    case 26: 
      var $90=$i;
      var $inc=((($90)+(1))|0);
      $i=$inc;
      __label__ = 24; break;
    case 27: 
      var $91=$render_priv_addr;
      var $state69=(($91+176)|0);
      var $effect_type=(($state69+240)|0);
      var $92=HEAP32[(($effect_type)>>2)];
      var $93=$text_info;
      var $length70=(($93+4)|0);
      var $94=HEAP32[(($length70)>>2)];
      var $95=$glyphs;
      var $arrayidx71=(($95+($94)*(328))|0);
      var $effect_type72=(($arrayidx71+120)|0);
      HEAP32[(($effect_type72)>>2)]=$92;
      var $96=$render_priv_addr;
      var $state73=(($96+176)|0);
      var $effect_timing=(($state73+244)|0);
      var $97=HEAP32[(($effect_timing)>>2)];
      var $98=$text_info;
      var $length74=(($98+4)|0);
      var $99=HEAP32[(($length74)>>2)];
      var $100=$glyphs;
      var $arrayidx75=(($100+($99)*(328))|0);
      var $effect_timing76=(($arrayidx75+124)|0);
      HEAP32[(($effect_timing76)>>2)]=$97;
      var $101=$render_priv_addr;
      var $state77=(($101+176)|0);
      var $effect_skip_timing=(($state77+248)|0);
      var $102=HEAP32[(($effect_skip_timing)>>2)];
      var $103=$text_info;
      var $length78=(($103+4)|0);
      var $104=HEAP32[(($length78)>>2)];
      var $105=$glyphs;
      var $arrayidx79=(($105+($104)*(328))|0);
      var $effect_skip_timing80=(($arrayidx79+128)|0);
      HEAP32[(($effect_skip_timing80)>>2)]=$102;
      var $106=$render_priv_addr;
      var $107=$render_priv_addr;
      var $state81=(($107+176)|0);
      var $font_size=(($state81+16)|0);
      var $108=(tempDoubleI32[0]=HEAP32[(($font_size)>>2)],tempDoubleI32[1]=HEAP32[((($font_size)+(4))>>2)],tempDoubleF64[0]);
      var $109=$render_priv_addr;
      var $font_scale82=(($109+152)|0);
      var $110=(tempDoubleI32[0]=HEAP32[(($font_scale82)>>2)],tempDoubleI32[1]=HEAP32[((($font_scale82)+(4))>>2)],tempDoubleF64[0]);
      var $mul83=($108)*($110);
      var $call84=_ensure_font_size($106, $mul83);
      var $111=$text_info;
      var $length85=(($111+4)|0);
      var $112=HEAP32[(($length85)>>2)];
      var $113=$glyphs;
      var $arrayidx86=(($113+($112)*(328))|0);
      var $font_size87=(($arrayidx86+20)|0);
      (tempDoubleF64[0]=$call84,HEAP32[(($font_size87)>>2)]=tempDoubleI32[0],HEAP32[((($font_size87)+(4))>>2)]=tempDoubleI32[1]);
      var $114=$render_priv_addr;
      var $state88=(($114+176)|0);
      var $be=(($state88+196)|0);
      var $115=HEAP8[($be)];
      var $conv89=(($115 << 24) >> 24);
      var $116=$text_info;
      var $length90=(($116+4)|0);
      var $117=HEAP32[(($length90)>>2)];
      var $118=$glyphs;
      var $arrayidx91=(($118+($117)*(328))|0);
      var $be92=(($arrayidx91+140)|0);
      HEAP32[(($be92)>>2)]=$conv89;
      var $119=$render_priv_addr;
      var $state93=(($119+176)|0);
      var $blur=(($state93+200)|0);
      var $120=(tempDoubleI32[0]=HEAP32[(($blur)>>2)],tempDoubleI32[1]=HEAP32[((($blur)+(4))>>2)],tempDoubleF64[0]);
      var $121=$text_info;
      var $length94=(($121+4)|0);
      var $122=HEAP32[(($length94)>>2)];
      var $123=$glyphs;
      var $arrayidx95=(($123+($122)*(328))|0);
      var $blur96=(($arrayidx95+144)|0);
      (tempDoubleF64[0]=$120,HEAP32[(($blur96)>>2)]=tempDoubleI32[0],HEAP32[((($blur96)+(4))>>2)]=tempDoubleI32[1]);
      var $124=$render_priv_addr;
      var $state97=(($124+176)|0);
      var $shadow_x=(($state97+208)|0);
      var $125=(tempDoubleI32[0]=HEAP32[(($shadow_x)>>2)],tempDoubleI32[1]=HEAP32[((($shadow_x)+(4))>>2)],tempDoubleF64[0]);
      var $126=$text_info;
      var $length98=(($126+4)|0);
      var $127=HEAP32[(($length98)>>2)];
      var $128=$glyphs;
      var $arrayidx99=(($128+($127)*(328))|0);
      var $shadow_x100=(($arrayidx99+152)|0);
      (tempDoubleF64[0]=$125,HEAP32[(($shadow_x100)>>2)]=tempDoubleI32[0],HEAP32[((($shadow_x100)+(4))>>2)]=tempDoubleI32[1]);
      var $129=$render_priv_addr;
      var $state101=(($129+176)|0);
      var $shadow_y=(($state101+216)|0);
      var $130=(tempDoubleI32[0]=HEAP32[(($shadow_y)>>2)],tempDoubleI32[1]=HEAP32[((($shadow_y)+(4))>>2)],tempDoubleF64[0]);
      var $131=$text_info;
      var $length102=(($131+4)|0);
      var $132=HEAP32[(($length102)>>2)];
      var $133=$glyphs;
      var $arrayidx103=(($133+($132)*(328))|0);
      var $shadow_y104=(($arrayidx103+160)|0);
      (tempDoubleF64[0]=$130,HEAP32[(($shadow_y104)>>2)]=tempDoubleI32[0],HEAP32[((($shadow_y104)+(4))>>2)]=tempDoubleI32[1]);
      var $134=$render_priv_addr;
      var $state105=(($134+176)|0);
      var $scale_x106=(($state105+116)|0);
      var $135=(tempDoubleI32[0]=HEAP32[(($scale_x106)>>2)],tempDoubleI32[1]=HEAP32[((($scale_x106)+(4))>>2)],tempDoubleF64[0]);
      var $136=$text_info;
      var $length107=(($136+4)|0);
      var $137=HEAP32[(($length107)>>2)];
      var $138=$glyphs;
      var $arrayidx108=(($138+($137)*(328))|0);
      var $scale_x109=(($arrayidx108+208)|0);
      (tempDoubleF64[0]=$135,HEAP32[(($scale_x109)>>2)]=tempDoubleI32[0],HEAP32[((($scale_x109)+(4))>>2)]=tempDoubleI32[1]);
      var $139=$render_priv_addr;
      var $state110=(($139+176)|0);
      var $scale_y111=(($state110+124)|0);
      var $140=(tempDoubleI32[0]=HEAP32[(($scale_y111)>>2)],tempDoubleI32[1]=HEAP32[((($scale_y111)+(4))>>2)],tempDoubleF64[0]);
      var $141=$text_info;
      var $length112=(($141+4)|0);
      var $142=HEAP32[(($length112)>>2)];
      var $143=$glyphs;
      var $arrayidx113=(($143+($142)*(328))|0);
      var $scale_y114=(($arrayidx113+216)|0);
      (tempDoubleF64[0]=$140,HEAP32[(($scale_y114)>>2)]=tempDoubleI32[0],HEAP32[((($scale_y114)+(4))>>2)]=tempDoubleI32[1]);
      var $144=$render_priv_addr;
      var $state115=(($144+176)|0);
      var $border_x=(($state115+140)|0);
      var $145=(tempDoubleI32[0]=HEAP32[(($border_x)>>2)],tempDoubleI32[1]=HEAP32[((($border_x)+(4))>>2)],tempDoubleF64[0]);
      var $146=$text_info;
      var $length116=(($146+4)|0);
      var $147=HEAP32[(($length116)>>2)];
      var $148=$glyphs;
      var $arrayidx117=(($148+($147)*(328))|0);
      var $border_x118=(($arrayidx117+224)|0);
      (tempDoubleF64[0]=$145,HEAP32[(($border_x118)>>2)]=tempDoubleI32[0],HEAP32[((($border_x118)+(4))>>2)]=tempDoubleI32[1]);
      var $149=$render_priv_addr;
      var $state119=(($149+176)|0);
      var $border_y=(($state119+148)|0);
      var $150=(tempDoubleI32[0]=HEAP32[(($border_y)>>2)],tempDoubleI32[1]=HEAP32[((($border_y)+(4))>>2)],tempDoubleF64[0]);
      var $151=$text_info;
      var $length120=(($151+4)|0);
      var $152=HEAP32[(($length120)>>2)];
      var $153=$glyphs;
      var $arrayidx121=(($153+($152)*(328))|0);
      var $border_y122=(($arrayidx121+232)|0);
      (tempDoubleF64[0]=$150,HEAP32[(($border_y122)>>2)]=tempDoubleI32[0],HEAP32[((($border_y122)+(4))>>2)]=tempDoubleI32[1]);
      var $154=$render_priv_addr;
      var $state123=(($154+176)|0);
      var $bold=(($state123+268)|0);
      var $155=HEAP32[(($bold)>>2)];
      var $156=$text_info;
      var $length124=(($156+4)|0);
      var $157=HEAP32[(($length124)>>2)];
      var $158=$glyphs;
      var $arrayidx125=(($158+($157)*(328))|0);
      var $bold126=(($arrayidx125+244)|0);
      HEAP32[(($bold126)>>2)]=$155;
      var $159=$render_priv_addr;
      var $state127=(($159+176)|0);
      var $italic=(($state127+272)|0);
      var $160=HEAP32[(($italic)>>2)];
      var $161=$text_info;
      var $length128=(($161+4)|0);
      var $162=HEAP32[(($length128)>>2)];
      var $163=$glyphs;
      var $arrayidx129=(($163+($162)*(328))|0);
      var $italic130=(($arrayidx129+240)|0);
      HEAP32[(($italic130)>>2)]=$160;
      var $164=$render_priv_addr;
      var $state131=(($164+176)|0);
      var $flags=(($state131+24)|0);
      var $165=HEAP32[(($flags)>>2)];
      var $166=$text_info;
      var $length132=(($166+4)|0);
      var $167=HEAP32[(($length132)>>2)];
      var $168=$glyphs;
      var $arrayidx133=(($168+($167)*(328))|0);
      var $flags134=(($arrayidx133+248)|0);
      HEAP32[(($flags134)>>2)]=$165;
      var $169=$render_priv_addr;
      var $state135=(($169+176)|0);
      var $frx=(($state135+36)|0);
      var $170=(tempDoubleI32[0]=HEAP32[(($frx)>>2)],tempDoubleI32[1]=HEAP32[((($frx)+(4))>>2)],tempDoubleF64[0]);
      var $171=$text_info;
      var $length136=(($171+4)|0);
      var $172=HEAP32[(($length136)>>2)];
      var $173=$glyphs;
      var $arrayidx137=(($173+($172)*(328))|0);
      var $frx138=(($arrayidx137+168)|0);
      (tempDoubleF64[0]=$170,HEAP32[(($frx138)>>2)]=tempDoubleI32[0],HEAP32[((($frx138)+(4))>>2)]=tempDoubleI32[1]);
      var $174=$render_priv_addr;
      var $state139=(($174+176)|0);
      var $fry=(($state139+44)|0);
      var $175=(tempDoubleI32[0]=HEAP32[(($fry)>>2)],tempDoubleI32[1]=HEAP32[((($fry)+(4))>>2)],tempDoubleF64[0]);
      var $176=$text_info;
      var $length140=(($176+4)|0);
      var $177=HEAP32[(($length140)>>2)];
      var $178=$glyphs;
      var $arrayidx141=(($178+($177)*(328))|0);
      var $fry142=(($arrayidx141+176)|0);
      (tempDoubleF64[0]=$175,HEAP32[(($fry142)>>2)]=tempDoubleI32[0],HEAP32[((($fry142)+(4))>>2)]=tempDoubleI32[1]);
      var $179=$render_priv_addr;
      var $state143=(($179+176)|0);
      var $frz=(($state143+52)|0);
      var $180=(tempDoubleI32[0]=HEAP32[(($frz)>>2)],tempDoubleI32[1]=HEAP32[((($frz)+(4))>>2)],tempDoubleF64[0]);
      var $181=$text_info;
      var $length144=(($181+4)|0);
      var $182=HEAP32[(($length144)>>2)];
      var $183=$glyphs;
      var $arrayidx145=(($183+($182)*(328))|0);
      var $frz146=(($arrayidx145+184)|0);
      (tempDoubleF64[0]=$180,HEAP32[(($frz146)>>2)]=tempDoubleI32[0],HEAP32[((($frz146)+(4))>>2)]=tempDoubleI32[1]);
      var $184=$render_priv_addr;
      var $state147=(($184+176)|0);
      var $fax=(($state147+60)|0);
      var $185=(tempDoubleI32[0]=HEAP32[(($fax)>>2)],tempDoubleI32[1]=HEAP32[((($fax)+(4))>>2)],tempDoubleF64[0]);
      var $186=$text_info;
      var $length148=(($186+4)|0);
      var $187=HEAP32[(($length148)>>2)];
      var $188=$glyphs;
      var $arrayidx149=(($188+($187)*(328))|0);
      var $fax150=(($arrayidx149+192)|0);
      (tempDoubleF64[0]=$185,HEAP32[(($fax150)>>2)]=tempDoubleI32[0],HEAP32[((($fax150)+(4))>>2)]=tempDoubleI32[1]);
      var $189=$render_priv_addr;
      var $state151=(($189+176)|0);
      var $fay=(($state151+68)|0);
      var $190=(tempDoubleI32[0]=HEAP32[(($fay)>>2)],tempDoubleI32[1]=HEAP32[((($fay)+(4))>>2)],tempDoubleF64[0]);
      var $191=$text_info;
      var $length152=(($191+4)|0);
      var $192=HEAP32[(($length152)>>2)];
      var $193=$glyphs;
      var $arrayidx153=(($193+($192)*(328))|0);
      var $fay154=(($arrayidx153+200)|0);
      (tempDoubleF64[0]=$190,HEAP32[(($fay154)>>2)]=tempDoubleI32[0],HEAP32[((($fay154)+(4))>>2)]=tempDoubleI32[1]);
      var $194=$render_priv_addr;
      var $state155=(($194+176)|0);
      var $bm_run_id=(($state155+252)|0);
      var $195=HEAP32[(($bm_run_id)>>2)];
      var $196=$text_info;
      var $length156=(($196+4)|0);
      var $197=HEAP32[(($length156)>>2)];
      var $198=$glyphs;
      var $arrayidx157=(($198+($197)*(328))|0);
      var $bm_run_id158=(($arrayidx157+252)|0);
      HEAP32[(($bm_run_id158)>>2)]=$195;
      var $199=$text_info;
      var $length159=(($199+4)|0);
      var $200=HEAP32[(($length159)>>2)];
      var $201=$glyphs;
      var $arrayidx160=(($201+($200)*(328))|0);
      var $drawing161=(($arrayidx160+28)|0);
      var $202=HEAP32[(($drawing161)>>2)];
      var $tobool162=(($202)|0)!=0;
      if ($tobool162) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $203=$render_priv_addr;
      var $library164=(($203)|0);
      var $204=HEAP32[(($library164)>>2)];
      var $205=$render_priv_addr;
      var $ftlibrary=(($205+4)|0);
      var $206=HEAP32[(($ftlibrary)>>2)];
      var $call165=_ass_drawing_new($204, $206);
      var $207=$render_priv_addr;
      var $state166=(($207+176)|0);
      var $drawing167=(($state166+228)|0);
      HEAP32[(($drawing167)>>2)]=$call165;
      $drawing=$call165;
      __label__ = 29; break;
    case 29: 
      var $208=$text_info;
      var $length169=(($208+4)|0);
      var $209=HEAP32[(($length169)>>2)];
      var $inc170=((($209)+(1))|0);
      HEAP32[(($length169)>>2)]=$inc170;
      var $210=$render_priv_addr;
      var $state171=(($210+176)|0);
      var $effect_type172=(($state171+240)|0);
      HEAP32[(($effect_type172)>>2)]=0;
      var $211=$render_priv_addr;
      var $state173=(($211+176)|0);
      var $effect_timing174=(($state173+244)|0);
      HEAP32[(($effect_timing174)>>2)]=0;
      var $212=$render_priv_addr;
      var $state175=(($212+176)|0);
      var $effect_skip_timing176=(($state175+248)|0);
      HEAP32[(($effect_skip_timing176)>>2)]=0;
      __label__ = 7; break;
    case 30: 
      var $213=$text_info;
      var $length177=(($213+4)|0);
      var $214=HEAP32[(($length177)>>2)];
      var $cmp178=(($214)|0)==0;
      if ($cmp178) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $215=$render_priv_addr;
      _free_render_context($215);
      $retval=1;
      __label__ = 184; break;
    case 32: 
      var $216=$render_priv_addr;
      var $shaper=(($216+96)|0);
      var $217=HEAP32[(($shaper)>>2)];
      var $218=$render_priv_addr;
      var $state182=(($218+176)|0);
      var $font_encoding=(($state182+284)|0);
      var $219=HEAP32[(($font_encoding)>>2)];
      var $call183=_resolve_base_direction($219);
      _ass_shaper_set_base_direction($217, $call183);
      var $220=$render_priv_addr;
      var $shaper184=(($220+96)|0);
      var $221=HEAP32[(($shaper184)>>2)];
      var $222=$render_priv_addr;
      var $223=$glyphs;
      var $224=$text_info;
      var $length185=(($224+4)|0);
      var $225=HEAP32[(($length185)>>2)];
      _ass_shaper_find_runs($221, $222, $223, $225);
      var $226=$render_priv_addr;
      var $shaper186=(($226+96)|0);
      var $227=HEAP32[(($shaper186)>>2)];
      var $228=$text_info;
      _ass_shaper_shape($227, $228);
      $i=0;
      __label__ = 33; break;
    case 33: 
      var $229=$i;
      var $230=$text_info;
      var $length188=(($230+4)|0);
      var $231=HEAP32[(($length188)>>2)];
      var $cmp189=(($229)|0) < (($231)|0);
      if ($cmp189) { __label__ = 34; break; } else { __label__ = 51; break; }
    case 34: 
      var $232=$glyphs;
      var $233=$i;
      var $add_ptr=(($232+($233)*(328))|0);
      $info=$add_ptr;
      __label__ = 35; break;
    case 35: 
      var $234=$info;
      var $tobool192=(($234)|0)!=0;
      if ($tobool192) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $235=$render_priv_addr;
      var $236=$info;
      _get_outline_glyph($235, $236);
      var $237=$info;
      var $next=(($237+324)|0);
      var $238=HEAP32[(($next)>>2)];
      $info=$238;
      __label__ = 35; break;
    case 37: 
      var $239=$glyphs;
      var $240=$i;
      var $add_ptr195=(($239+($240)*(328))|0);
      $info=$add_ptr195;
      var $241=$i;
      var $tobool196=(($241)|0)!=0;
      if ($tobool196) { __label__ = 38; break; } else { __label__ = 49; break; }
    case 38: 
      var $242=$i;
      var $sub=((($242)-(1))|0);
      var $243=$glyphs;
      var $arrayidx198=(($243+($sub)*(328))|0);
      var $italic199=(($arrayidx198+240)|0);
      var $244=HEAP32[(($italic199)>>2)];
      var $tobool200=(($244)|0)!=0;
      if ($tobool200) { __label__ = 39; break; } else { __label__ = 49; break; }
    case 39: 
      var $245=$info;
      var $italic202=(($245+240)|0);
      var $246=HEAP32[(($italic202)>>2)];
      var $tobool203=(($246)|0)!=0;
      if ($tobool203) { __label__ = 49; break; } else { __label__ = 40; break; }
    case 40: 
      var $247=$i;
      var $sub205=((($247)-(1))|0);
      $back=$sub205;
      var $248=$back;
      var $249=$glyphs;
      var $arrayidx206=(($249+($248)*(328))|0);
      $og=$arrayidx206;
      __label__ = 41; break;
    case 41: 
      var $250=$back;
      var $tobool208=(($250)|0)!=0;
      if ($tobool208) { __label__ = 42; break; } else { var $257 = 0;__label__ = 44; break; }
    case 42: 
      var $251=$og;
      var $bbox210=(($251+52)|0);
      var $xMax=(($bbox210+8)|0);
      var $252=HEAP32[(($xMax)>>2)];
      var $253=$og;
      var $bbox211=(($253+52)|0);
      var $xMin=(($bbox211)|0);
      var $254=HEAP32[(($xMin)>>2)];
      var $sub212=((($252)-($254))|0);
      var $cmp213=(($sub212)|0)==0;
      if ($cmp213) { __label__ = 43; break; } else { var $257 = 0;__label__ = 44; break; }
    case 43: 
      var $255=$og;
      var $italic216=(($255+240)|0);
      var $256=HEAP32[(($italic216)>>2)];
      var $tobool217=(($256)|0)!=0;
      var $257 = $tobool217;__label__ = 44; break;
    case 44: 
      var $257;
      if ($257) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $258=$back;
      var $dec=((($258)-(1))|0);
      $back=$dec;
      var $259=$glyphs;
      var $arrayidx220=(($259+($dec)*(328))|0);
      $og=$arrayidx220;
      __label__ = 41; break;
    case 46: 
      var $260=$og;
      var $bbox222=(($260+52)|0);
      var $xMax223=(($bbox222+8)|0);
      var $261=HEAP32[(($xMax223)>>2)];
      var $262=$og;
      var $cluster_advance=(($262+112)|0);
      var $x=(($cluster_advance)|0);
      var $263=HEAP32[(($x)>>2)];
      var $cmp224=(($261)|0) > (($263)|0);
      if ($cmp224) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      var $264=$og;
      var $bbox227=(($264+52)|0);
      var $xMax228=(($bbox227+8)|0);
      var $265=HEAP32[(($xMax228)>>2)];
      var $266=$og;
      var $cluster_advance229=(($266+112)|0);
      var $x230=(($cluster_advance229)|0);
      HEAP32[(($x230)>>2)]=$265;
      __label__ = 48; break;
    case 48: 
      __label__ = 49; break;
    case 49: 
      var $267=$render_priv_addr;
      var $state233=(($267+176)|0);
      var $hspacing=(($state233+132)|0);
      var $268=(tempDoubleI32[0]=HEAP32[(($hspacing)>>2)],tempDoubleI32[1]=HEAP32[((($hspacing)+(4))>>2)],tempDoubleF64[0]);
      var $269=$render_priv_addr;
      var $font_scale234=(($269+152)|0);
      var $270=(tempDoubleI32[0]=HEAP32[(($font_scale234)>>2)],tempDoubleI32[1]=HEAP32[((($font_scale234)+(4))>>2)],tempDoubleF64[0]);
      var $mul235=($268)*($270);
      var $271=$info;
      var $scale_x236=(($271+208)|0);
      var $272=(tempDoubleI32[0]=HEAP32[(($scale_x236)>>2)],tempDoubleI32[1]=HEAP32[((($scale_x236)+(4))>>2)],tempDoubleF64[0]);
      var $mul237=($mul235)*($272);
      var $call238=_double_to_d6169($mul237);
      var $273=$info;
      var $cluster_advance239=(($273+112)|0);
      var $x240=(($cluster_advance239)|0);
      var $274=HEAP32[(($x240)>>2)];
      var $add=((($274)+($call238))|0);
      HEAP32[(($x240)>>2)]=$add;
      var $275=$info;
      var $fay241=(($275+200)|0);
      var $276=(tempDoubleI32[0]=HEAP32[(($fay241)>>2)],tempDoubleI32[1]=HEAP32[((($fay241)+(4))>>2)],tempDoubleF64[0]);
      var $277=$info;
      var $scale_y242=(($277+216)|0);
      var $278=(tempDoubleI32[0]=HEAP32[(($scale_y242)>>2)],tempDoubleI32[1]=HEAP32[((($scale_y242)+(4))>>2)],tempDoubleF64[0]);
      var $mul243=($276)*($278);
      var $279=$info;
      var $cluster_advance244=(($279+112)|0);
      var $x245=(($cluster_advance244)|0);
      var $280=HEAP32[(($x245)>>2)];
      var $conv246=(($280)|0);
      var $mul247=($mul243)*($conv246);
      var $281=$info;
      var $cluster_advance248=(($281+112)|0);
      var $y=(($cluster_advance248+4)|0);
      var $282=HEAP32[(($y)>>2)];
      var $conv249=(($282)|0);
      var $add250=($conv249)+($mul247);
      var $conv251=(($add250)&-1);
      HEAP32[(($y)>>2)]=$conv251;
      __label__ = 50; break;
    case 50: 
      var $283=$i;
      var $inc253=((($283)+(1))|0);
      $i=$inc253;
      __label__ = 33; break;
    case 51: 
      $previous=0;
      var $x255=(($pen)|0);
      HEAP32[(($x255)>>2)]=0;
      var $y256=(($pen+4)|0);
      HEAP32[(($y256)>>2)]=0;
      $i=0;
      __label__ = 52; break;
    case 52: 
      var $284=$i;
      var $285=$text_info;
      var $length258=(($285+4)|0);
      var $286=HEAP32[(($length258)>>2)];
      var $cmp259=(($284)|0) < (($286)|0);
      if ($cmp259) { __label__ = 53; break; } else { __label__ = 58; break; }
    case 53: 
      var $287=$glyphs;
      var $288=$i;
      var $add_ptr263=(($287+($288)*(328))|0);
      $info262=$add_ptr263;
      var $289=$cluster_pen;
      var $290=$pen;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($289)>>2)]=HEAP32[(($290)>>2)];HEAP32[((($289)+(4))>>2)]=HEAP32[((($290)+(4))>>2)];
      __label__ = 54; break;
    case 54: 
      var $291=$info262;
      var $tobool265=(($291)|0)!=0;
      if ($tobool265) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: 
      var $x267=(($cluster_pen)|0);
      var $292=HEAP32[(($x267)>>2)];
      var $293=$info262;
      var $pos=(($293+68)|0);
      var $x268=(($pos)|0);
      HEAP32[(($x268)>>2)]=$292;
      var $y269=(($cluster_pen+4)|0);
      var $294=HEAP32[(($y269)>>2)];
      var $295=$info262;
      var $pos270=(($295+68)|0);
      var $y271=(($pos270+4)|0);
      HEAP32[(($y271)>>2)]=$294;
      var $296=$info262;
      var $advance=(($296+104)|0);
      var $x272=(($advance)|0);
      var $297=HEAP32[(($x272)>>2)];
      var $x273=(($cluster_pen)|0);
      var $298=HEAP32[(($x273)>>2)];
      var $add274=((($298)+($297))|0);
      HEAP32[(($x273)>>2)]=$add274;
      var $299=$info262;
      var $advance275=(($299+104)|0);
      var $y276=(($advance275+4)|0);
      var $300=HEAP32[(($y276)>>2)];
      var $y277=(($cluster_pen+4)|0);
      var $301=HEAP32[(($y277)>>2)];
      var $add278=((($301)+($300))|0);
      HEAP32[(($y277)>>2)]=$add278;
      var $302=$info262;
      var $hash_key=(($302+260)|0);
      var $type=(($hash_key)|0);
      HEAP32[(($type)>>2)]=0;
      var $303=$render_priv_addr;
      var $304=$info262;
      var $305=$info262;
      var $hash_key279=(($305+260)|0);
      var $u=(($hash_key279+4)|0);
      var $outline=$u;
      _fill_bitmap_hash($303, $304, $outline);
      var $306=$info262;
      var $next280=(($306+324)|0);
      var $307=HEAP32[(($next280)>>2)];
      $info262=$307;
      __label__ = 54; break;
    case 56: 
      var $308=$glyphs;
      var $309=$i;
      var $add_ptr282=(($308+($309)*(328))|0);
      $info262=$add_ptr282;
      var $310=$info262;
      var $cluster_advance283=(($310+112)|0);
      var $x284=(($cluster_advance283)|0);
      var $311=HEAP32[(($x284)>>2)];
      var $x285=(($pen)|0);
      var $312=HEAP32[(($x285)>>2)];
      var $add286=((($312)+($311))|0);
      HEAP32[(($x285)>>2)]=$add286;
      var $313=$info262;
      var $cluster_advance287=(($313+112)|0);
      var $y288=(($cluster_advance287+4)|0);
      var $314=HEAP32[(($y288)>>2)];
      var $y289=(($pen+4)|0);
      var $315=HEAP32[(($y289)>>2)];
      var $add290=((($315)+($314))|0);
      HEAP32[(($y289)>>2)]=$add290;
      var $316=$info262;
      var $symbol291=(($316)|0);
      var $317=HEAP32[(($symbol291)>>2)];
      $previous=$317;
      __label__ = 57; break;
    case 57: 
      var $318=$i;
      var $inc293=((($318)+(1))|0);
      $i=$inc293;
      __label__ = 52; break;
    case 58: 
      var $319=$render_priv_addr;
      _process_karaoke_effects($319);
      var $320=$render_priv_addr;
      var $state295=(($320+176)|0);
      var $alignment296=(($state295+32)|0);
      var $321=HEAP32[(($alignment296)>>2)];
      $alignment=$321;
      var $322=$alignment;
      var $and297=$322 & 3;
      $halign=$and297;
      var $323=$alignment;
      var $and298=$323 & 12;
      $valign=$and298;
      var $324=$event_addr;
      var $MarginL299=(($324+32)|0);
      var $325=HEAP32[(($MarginL299)>>2)];
      var $tobool300=(($325)|0)!=0;
      if ($tobool300) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      var $326=$event_addr;
      var $MarginL301=(($326+32)|0);
      var $327=HEAP32[(($MarginL301)>>2)];
      var $cond = $327;__label__ = 61; break;
    case 60: 
      var $328=$render_priv_addr;
      var $state302=(($328+176)|0);
      var $style=(($state302+4)|0);
      var $329=HEAP32[(($style)>>2)];
      var $MarginL303=(($329+100)|0);
      var $330=HEAP32[(($MarginL303)>>2)];
      var $cond = $330;__label__ = 61; break;
    case 61: 
      var $cond;
      $MarginL=$cond;
      var $331=$event_addr;
      var $MarginR304=(($331+36)|0);
      var $332=HEAP32[(($MarginR304)>>2)];
      var $tobool305=(($332)|0)!=0;
      if ($tobool305) { __label__ = 62; break; } else { __label__ = 63; break; }
    case 62: 
      var $333=$event_addr;
      var $MarginR307=(($333+36)|0);
      var $334=HEAP32[(($MarginR307)>>2)];
      var $cond313 = $334;__label__ = 64; break;
    case 63: 
      var $335=$render_priv_addr;
      var $state309=(($335+176)|0);
      var $style310=(($state309+4)|0);
      var $336=HEAP32[(($style310)>>2)];
      var $MarginR311=(($336+104)|0);
      var $337=HEAP32[(($MarginR311)>>2)];
      var $cond313 = $337;__label__ = 64; break;
    case 64: 
      var $cond313;
      $MarginR=$cond313;
      var $338=$event_addr;
      var $MarginV314=(($338+40)|0);
      var $339=HEAP32[(($MarginV314)>>2)];
      var $tobool315=(($339)|0)!=0;
      if ($tobool315) { __label__ = 65; break; } else { __label__ = 66; break; }
    case 65: 
      var $340=$event_addr;
      var $MarginV317=(($340+40)|0);
      var $341=HEAP32[(($MarginV317)>>2)];
      var $cond323 = $341;__label__ = 67; break;
    case 66: 
      var $342=$render_priv_addr;
      var $state319=(($342+176)|0);
      var $style320=(($state319+4)|0);
      var $343=HEAP32[(($style320)>>2)];
      var $MarginV321=(($343+108)|0);
      var $344=HEAP32[(($MarginV321)>>2)];
      var $cond323 = $344;__label__ = 67; break;
    case 67: 
      var $cond323;
      $MarginV=$cond323;
      var $345=$render_priv_addr;
      var $346=$render_priv_addr;
      var $track324=(($346+140)|0);
      var $347=HEAP32[(($track324)>>2)];
      var $PlayResX=(($347+36)|0);
      var $348=HEAP32[(($PlayResX)>>2)];
      var $349=$MarginR;
      var $sub325=((($348)-($349))|0);
      var $conv326=(($sub325)|0);
      var $call327=_x2scr($345, $conv326);
      var $350=$render_priv_addr;
      var $351=$MarginL;
      var $conv328=(($351)|0);
      var $call329=_x2scr($350, $conv328);
      var $sub330=($call327)-($call329);
      $max_text_width=$sub330;
      var $352=$render_priv_addr;
      var $state331=(($352+176)|0);
      var $evt_type=(($state331+76)|0);
      var $353=HEAP32[(($evt_type)>>2)];
      var $cmp332=(($353)|0)!=2;
      if ($cmp332) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $354=$render_priv_addr;
      var $355=$max_text_width;
      _wrap_lines_smart($354, $355);
      __label__ = 70; break;
    case 69: 
      var $356=$text_info;
      var $lines=(($356+8)|0);
      var $357=HEAP32[(($lines)>>2)];
      var $arrayidx335=(($357)|0);
      var $offset=(($arrayidx335+16)|0);
      HEAP32[(($offset)>>2)]=0;
      var $358=$text_info;
      var $length336=(($358+4)|0);
      var $359=HEAP32[(($length336)>>2)];
      var $360=$text_info;
      var $lines337=(($360+8)|0);
      var $361=HEAP32[(($lines337)>>2)];
      var $arrayidx338=(($361)|0);
      var $len=(($arrayidx338+20)|0);
      HEAP32[(($len)>>2)]=$359;
      var $362=$text_info;
      var $n_lines=(($362+12)|0);
      HEAP32[(($n_lines)>>2)]=1;
      var $363=$render_priv_addr;
      _measure_text($363);
      __label__ = 70; break;
    case 70: 
      var $364=$render_priv_addr;
      var $shaper340=(($364+96)|0);
      var $365=HEAP32[(($shaper340)>>2)];
      var $366=$text_info;
      var $call341=_ass_shaper_reorder($365, $366);
      $cmap=$call341;
      var $x342=(($pen)|0);
      HEAP32[(($x342)>>2)]=0;
      var $y343=(($pen+4)|0);
      HEAP32[(($y343)>>2)]=0;
      $lineno=1;
      $i=0;
      __label__ = 71; break;
    case 71: 
      var $367=$i;
      var $368=$text_info;
      var $length345=(($368+4)|0);
      var $369=HEAP32[(($length345)>>2)];
      var $cmp346=(($367)|0) < (($369)|0);
      if ($cmp346) { __label__ = 72; break; } else { __label__ = 81; break; }
    case 72: 
      var $370=$glyphs;
      var $371=$i;
      var $372=$cmap;
      var $arrayidx350=(($372+($371<<2))|0);
      var $373=HEAP32[(($arrayidx350)>>2)];
      var $add_ptr351=(($370+($373)*(328))|0);
      $info349=$add_ptr351;
      var $374=$i;
      var $375=$glyphs;
      var $arrayidx352=(($375+($374)*(328))|0);
      var $linebreak=(($arrayidx352+84)|0);
      var $376=HEAP8[($linebreak)];
      var $tobool353=(($376 << 24) >> 24)!=0;
      if ($tobool353) { __label__ = 73; break; } else { __label__ = 74; break; }
    case 73: 
      var $x355=(($pen)|0);
      HEAP32[(($x355)>>2)]=0;
      var $377=$lineno;
      var $sub356=((($377)-(1))|0);
      var $378=$text_info;
      var $lines357=(($378+8)|0);
      var $379=HEAP32[(($lines357)>>2)];
      var $arrayidx358=(($379+($sub356)*(24))|0);
      var $desc=(($arrayidx358+8)|0);
      var $380=(tempDoubleI32[0]=HEAP32[(($desc)>>2)],tempDoubleI32[1]=HEAP32[((($desc)+(4))>>2)],tempDoubleF64[0]);
      var $call359=_double_to_d6169($380);
      var $y360=(($pen+4)|0);
      var $381=HEAP32[(($y360)>>2)];
      var $add361=((($381)+($call359))|0);
      HEAP32[(($y360)>>2)]=$add361;
      var $382=$lineno;
      var $383=$text_info;
      var $lines362=(($383+8)|0);
      var $384=HEAP32[(($lines362)>>2)];
      var $arrayidx363=(($384+($382)*(24))|0);
      var $asc=(($arrayidx363)|0);
      var $385=(tempDoubleI32[0]=HEAP32[(($asc)>>2)],tempDoubleI32[1]=HEAP32[((($asc)+(4))>>2)],tempDoubleF64[0]);
      var $call364=_double_to_d6169($385);
      var $y365=(($pen+4)|0);
      var $386=HEAP32[(($y365)>>2)];
      var $add366=((($386)+($call364))|0);
      HEAP32[(($y365)>>2)]=$add366;
      var $387=$render_priv_addr;
      var $settings=(($387+12)|0);
      var $line_spacing=(($settings+16)|0);
      var $388=(tempDoubleI32[0]=HEAP32[(($line_spacing)>>2)],tempDoubleI32[1]=HEAP32[((($line_spacing)+(4))>>2)],tempDoubleF64[0]);
      var $call367=_double_to_d6169($388);
      var $y368=(($pen+4)|0);
      var $389=HEAP32[(($y368)>>2)];
      var $add369=((($389)+($call367))|0);
      HEAP32[(($y368)>>2)]=$add369;
      var $390=$lineno;
      var $inc370=((($390)+(1))|0);
      $lineno=$inc370;
      __label__ = 74; break;
    case 74: 
      var $391=$info349;
      var $skip=(($391+4)|0);
      var $392=HEAP32[(($skip)>>2)];
      var $tobool372=(($392)|0)!=0;
      if ($tobool372) { __label__ = 75; break; } else { __label__ = 76; break; }
    case 75: 
      __label__ = 80; break;
    case 76: 
      var $393=$cluster_pen375;
      var $394=$pen;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($393)>>2)]=HEAP32[(($394)>>2)];HEAP32[((($393)+(4))>>2)]=HEAP32[((($394)+(4))>>2)];
      __label__ = 77; break;
    case 77: 
      var $395=$info349;
      var $tobool377=(($395)|0)!=0;
      if ($tobool377) { __label__ = 78; break; } else { __label__ = 79; break; }
    case 78: 
      var $396=$info349;
      var $offset379=(($396+76)|0);
      var $x380=(($offset379)|0);
      var $397=HEAP32[(($x380)>>2)];
      var $x381=(($cluster_pen375)|0);
      var $398=HEAP32[(($x381)>>2)];
      var $add382=((($397)+($398))|0);
      var $399=$info349;
      var $pos383=(($399+68)|0);
      var $x384=(($pos383)|0);
      HEAP32[(($x384)>>2)]=$add382;
      var $400=$info349;
      var $offset385=(($400+76)|0);
      var $y386=(($offset385+4)|0);
      var $401=HEAP32[(($y386)>>2)];
      var $y387=(($cluster_pen375+4)|0);
      var $402=HEAP32[(($y387)>>2)];
      var $add388=((($401)+($402))|0);
      var $403=$info349;
      var $pos389=(($403+68)|0);
      var $y390=(($pos389+4)|0);
      HEAP32[(($y390)>>2)]=$add388;
      var $404=$info349;
      var $advance391=(($404+104)|0);
      var $x392=(($advance391)|0);
      var $405=HEAP32[(($x392)>>2)];
      var $x393=(($cluster_pen375)|0);
      var $406=HEAP32[(($x393)>>2)];
      var $add394=((($406)+($405))|0);
      HEAP32[(($x393)>>2)]=$add394;
      var $407=$info349;
      var $advance395=(($407+104)|0);
      var $y396=(($advance395+4)|0);
      var $408=HEAP32[(($y396)>>2)];
      var $y397=(($cluster_pen375+4)|0);
      var $409=HEAP32[(($y397)>>2)];
      var $add398=((($409)+($408))|0);
      HEAP32[(($y397)>>2)]=$add398;
      var $410=$info349;
      var $next399=(($410+324)|0);
      var $411=HEAP32[(($next399)>>2)];
      $info349=$411;
      __label__ = 77; break;
    case 79: 
      var $412=$glyphs;
      var $413=$i;
      var $414=$cmap;
      var $arrayidx401=(($414+($413<<2))|0);
      var $415=HEAP32[(($arrayidx401)>>2)];
      var $add_ptr402=(($412+($415)*(328))|0);
      $info349=$add_ptr402;
      var $416=$info349;
      var $cluster_advance403=(($416+112)|0);
      var $x404=(($cluster_advance403)|0);
      var $417=HEAP32[(($x404)>>2)];
      var $x405=(($pen)|0);
      var $418=HEAP32[(($x405)>>2)];
      var $add406=((($418)+($417))|0);
      HEAP32[(($x405)>>2)]=$add406;
      var $419=$info349;
      var $cluster_advance407=(($419+112)|0);
      var $y408=(($cluster_advance407+4)|0);
      var $420=HEAP32[(($y408)>>2)];
      var $y409=(($pen+4)|0);
      var $421=HEAP32[(($y409)>>2)];
      var $add410=((($421)+($420))|0);
      HEAP32[(($y409)>>2)]=$add410;
      __label__ = 80; break;
    case 80: 
      var $422=$i;
      var $inc412=((($422)+(1))|0);
      $i=$inc412;
      __label__ = 71; break;
    case 81: 
      var $423=$render_priv_addr;
      var $state414=(($423+176)|0);
      var $evt_type415=(($state414+76)|0);
      var $424=HEAP32[(($evt_type415)>>2)];
      var $cmp416=(($424)|0)!=2;
      if ($cmp416) { __label__ = 82; break; } else { __label__ = 112; break; }
    case 82: 
      $last_break=-1;
      $width=0;
      $i=0;
      __label__ = 83; break;
    case 83: 
      var $425=$i;
      var $426=$text_info;
      var $length420=(($426+4)|0);
      var $427=HEAP32[(($length420)>>2)];
      var $cmp421=(($425)|0) <= (($427)|0);
      if ($cmp421) { __label__ = 84; break; } else { __label__ = 111; break; }
    case 84: 
      var $428=$i;
      var $429=$text_info;
      var $length424=(($429+4)|0);
      var $430=HEAP32[(($length424)>>2)];
      var $cmp425=(($428)|0)==(($430)|0);
      if ($cmp425) { __label__ = 86; break; } else { __label__ = 85; break; }
    case 85: 
      var $431=$i;
      var $432=$glyphs;
      var $arrayidx427=(($432+($431)*(328))|0);
      var $linebreak428=(($arrayidx427+84)|0);
      var $433=HEAP8[($linebreak428)];
      var $conv429=(($433 << 24) >> 24);
      var $tobool430=(($conv429)|0)!=0;
      if ($tobool430) { __label__ = 86; break; } else { __label__ = 104; break; }
    case 86: 
      var $434=$i;
      var $cmp432=(($434)|0) > 0;
      if ($cmp432) { __label__ = 87; break; } else { __label__ = 88; break; }
    case 87: 
      var $435=$render_priv_addr;
      var $state435=(($435+176)|0);
      var $hspacing436=(($state435+132)|0);
      var $436=(tempDoubleI32[0]=HEAP32[(($hspacing436)>>2)],tempDoubleI32[1]=HEAP32[((($hspacing436)+(4))>>2)],tempDoubleF64[0]);
      var $437=$render_priv_addr;
      var $font_scale437=(($437+152)|0);
      var $438=(tempDoubleI32[0]=HEAP32[(($font_scale437)>>2)],tempDoubleI32[1]=HEAP32[((($font_scale437)+(4))>>2)],tempDoubleF64[0]);
      var $mul438=($436)*($438);
      var $439=$i;
      var $sub439=((($439)-(1))|0);
      var $440=$glyphs;
      var $arrayidx440=(($440+($sub439)*(328))|0);
      var $scale_x441=(($arrayidx440+208)|0);
      var $441=(tempDoubleI32[0]=HEAP32[(($scale_x441)>>2)],tempDoubleI32[1]=HEAP32[((($scale_x441)+(4))>>2)],tempDoubleF64[0]);
      var $mul442=($mul438)*($441);
      var $442=$width;
      var $sub443=($442)-($mul442);
      $width=$sub443;
      __label__ = 88; break;
    case 88: 
      $shift=0;
      var $443=$halign;
      var $cmp445=(($443)|0)==1;
      if ($cmp445) { __label__ = 89; break; } else { __label__ = 90; break; }
    case 89: 
      $shift=0;
      __label__ = 96; break;
    case 90: 
      var $444=$halign;
      var $cmp449=(($444)|0)==3;
      if ($cmp449) { __label__ = 91; break; } else { __label__ = 92; break; }
    case 91: 
      var $445=$max_text_width;
      var $446=$width;
      var $sub452=($445)-($446);
      $shift=$sub452;
      __label__ = 95; break;
    case 92: 
      var $447=$halign;
      var $cmp454=(($447)|0)==2;
      if ($cmp454) { __label__ = 93; break; } else { __label__ = 94; break; }
    case 93: 
      var $448=$max_text_width;
      var $449=$width;
      var $sub457=($448)-($449);
      var $div=($sub457)/(2);
      $shift=$div;
      __label__ = 94; break;
    case 94: 
      __label__ = 95; break;
    case 95: 
      __label__ = 96; break;
    case 96: 
      var $450=$last_break;
      var $add461=((($450)+(1))|0);
      $j=$add461;
      __label__ = 97; break;
    case 97: 
      var $451=$j;
      var $452=$i;
      var $cmp463=(($451)|0) < (($452)|0);
      if ($cmp463) { __label__ = 98; break; } else { __label__ = 103; break; }
    case 98: 
      var $453=$glyphs;
      var $454=$j;
      var $add_ptr467=(($453+($454)*(328))|0);
      $info466=$add_ptr467;
      __label__ = 99; break;
    case 99: 
      var $455=$info466;
      var $tobool469=(($455)|0)!=0;
      if ($tobool469) { __label__ = 100; break; } else { __label__ = 101; break; }
    case 100: 
      var $456=$shift;
      var $call471=_double_to_d6169($456);
      var $457=$info466;
      var $pos472=(($457+68)|0);
      var $x473=(($pos472)|0);
      var $458=HEAP32[(($x473)>>2)];
      var $add474=((($458)+($call471))|0);
      HEAP32[(($x473)>>2)]=$add474;
      var $459=$info466;
      var $next475=(($459+324)|0);
      var $460=HEAP32[(($next475)>>2)];
      $info466=$460;
      __label__ = 99; break;
    case 101: 
      __label__ = 102; break;
    case 102: 
      var $461=$j;
      var $inc478=((($461)+(1))|0);
      $j=$inc478;
      __label__ = 97; break;
    case 103: 
      var $462=$i;
      var $sub480=((($462)-(1))|0);
      $last_break=$sub480;
      $width=0;
      __label__ = 104; break;
    case 104: 
      var $463=$i;
      var $464=$text_info;
      var $length482=(($464+4)|0);
      var $465=HEAP32[(($length482)>>2)];
      var $cmp483=(($463)|0) < (($465)|0);
      if ($cmp483) { __label__ = 105; break; } else { __label__ = 109; break; }
    case 105: 
      var $466=$i;
      var $467=$glyphs;
      var $arrayidx486=(($467+($466)*(328))|0);
      var $skip487=(($arrayidx486+4)|0);
      var $468=HEAP32[(($skip487)>>2)];
      var $tobool488=(($468)|0)!=0;
      if ($tobool488) { __label__ = 109; break; } else { __label__ = 106; break; }
    case 106: 
      var $469=$i;
      var $470=$glyphs;
      var $arrayidx490=(($470+($469)*(328))|0);
      var $symbol491=(($arrayidx490)|0);
      var $471=HEAP32[(($symbol491)>>2)];
      var $cmp492=(($471)|0)!=10;
      if ($cmp492) { __label__ = 107; break; } else { __label__ = 109; break; }
    case 107: 
      var $472=$i;
      var $473=$glyphs;
      var $arrayidx495=(($473+($472)*(328))|0);
      var $symbol496=(($arrayidx495)|0);
      var $474=HEAP32[(($symbol496)>>2)];
      var $cmp497=(($474)|0)!=0;
      if ($cmp497) { __label__ = 108; break; } else { __label__ = 109; break; }
    case 108: 
      var $475=$i;
      var $476=$glyphs;
      var $arrayidx500=(($476+($475)*(328))|0);
      var $cluster_advance501=(($arrayidx500+112)|0);
      var $x502=(($cluster_advance501)|0);
      var $477=HEAP32[(($x502)>>2)];
      var $call503=_d6_to_double($477);
      var $478=$width;
      var $add504=($478)+($call503);
      $width=$add504;
      __label__ = 109; break;
    case 109: 
      __label__ = 110; break;
    case 110: 
      var $479=$i;
      var $inc507=((($479)+(1))|0);
      $i=$inc507;
      __label__ = 83; break;
    case 111: 
      __label__ = 112; break;
    case 112: 
      var $480=$text_info;
      _compute_string_bbox($480, $bbox);
      var $481=$render_priv_addr;
      var $state510=(($481+176)|0);
      var $evt_type511=(($state510+76)|0);
      var $482=HEAP32[(($evt_type511)>>2)];
      var $cmp512=(($482)|0)==0;
      if ($cmp512) { __label__ = 114; break; } else { __label__ = 113; break; }
    case 113: 
      var $483=$render_priv_addr;
      var $state515=(($483+176)|0);
      var $evt_type516=(($state515+76)|0);
      var $484=HEAP32[(($evt_type516)>>2)];
      var $cmp517=(($484)|0)==3;
      if ($cmp517) { __label__ = 114; break; } else { __label__ = 115; break; }
    case 114: 
      var $485=$render_priv_addr;
      var $486=$MarginL;
      var $conv520=(($486)|0);
      var $call521=_x2scr($485, $conv520);
      $device_x=$call521;
      __label__ = 123; break;
    case 115: 
      var $487=$render_priv_addr;
      var $state523=(($487+176)|0);
      var $evt_type524=(($state523+76)|0);
      var $488=HEAP32[(($evt_type524)>>2)];
      var $cmp525=(($488)|0)==2;
      if ($cmp525) { __label__ = 116; break; } else { __label__ = 122; break; }
    case 116: 
      var $489=$render_priv_addr;
      var $state528=(($489+176)|0);
      var $scroll_direction=(($state528+256)|0);
      var $490=HEAP32[(($scroll_direction)>>2)];
      var $cmp529=(($490)|0)==1;
      if ($cmp529) { __label__ = 117; break; } else { __label__ = 118; break; }
    case 117: 
      var $491=$render_priv_addr;
      var $492=$render_priv_addr;
      var $track532=(($492+140)|0);
      var $493=HEAP32[(($track532)>>2)];
      var $PlayResX533=(($493+36)|0);
      var $494=HEAP32[(($PlayResX533)>>2)];
      var $495=$render_priv_addr;
      var $state534=(($495+176)|0);
      var $scroll_shift=(($state534+260)|0);
      var $496=HEAP32[(($scroll_shift)>>2)];
      var $sub535=((($494)-($496))|0);
      var $conv536=(($sub535)|0);
      var $call537=_x2scr($491, $conv536);
      $device_x=$call537;
      __label__ = 121; break;
    case 118: 
      var $497=$render_priv_addr;
      var $state539=(($497+176)|0);
      var $scroll_direction540=(($state539+256)|0);
      var $498=HEAP32[(($scroll_direction540)>>2)];
      var $cmp541=(($498)|0)==0;
      if ($cmp541) { __label__ = 119; break; } else { __label__ = 120; break; }
    case 119: 
      var $499=$render_priv_addr;
      var $500=$render_priv_addr;
      var $state544=(($500+176)|0);
      var $scroll_shift545=(($state544+260)|0);
      var $501=HEAP32[(($scroll_shift545)>>2)];
      var $conv546=(($501)|0);
      var $call547=_x2scr($499, $conv546);
      var $xMax548=(($bbox+8)|0);
      var $502=(tempDoubleI32[0]=HEAP32[(($xMax548)>>2)],tempDoubleI32[1]=HEAP32[((($xMax548)+(4))>>2)],tempDoubleF64[0]);
      var $xMin549=(($bbox)|0);
      var $503=(tempDoubleI32[0]=HEAP32[(($xMin549)>>2)],tempDoubleI32[1]=HEAP32[((($xMin549)+(4))>>2)],tempDoubleF64[0]);
      var $sub550=($502)-($503);
      var $sub551=($call547)-($sub550);
      $device_x=$sub551;
      __label__ = 120; break;
    case 120: 
      __label__ = 121; break;
    case 121: 
      __label__ = 122; break;
    case 122: 
      __label__ = 123; break;
    case 123: 
      var $504=$render_priv_addr;
      var $state556=(($504+176)|0);
      var $evt_type557=(($state556+76)|0);
      var $505=HEAP32[(($evt_type557)>>2)];
      var $cmp558=(($505)|0)==0;
      if ($cmp558) { __label__ = 125; break; } else { __label__ = 124; break; }
    case 124: 
      var $506=$render_priv_addr;
      var $state561=(($506+176)|0);
      var $evt_type562=(($state561+76)|0);
      var $507=HEAP32[(($evt_type562)>>2)];
      var $cmp563=(($507)|0)==2;
      if ($cmp563) { __label__ = 125; break; } else { __label__ = 134; break; }
    case 125: 
      var $508=$valign;
      var $cmp566=(($508)|0)==4;
      if ($cmp566) { __label__ = 126; break; } else { __label__ = 127; break; }
    case 126: 
      var $509=$render_priv_addr;
      var $510=$MarginV;
      var $conv569=(($510)|0);
      var $call570=_y2scr_top($509, $conv569);
      var $511=$text_info;
      var $lines571=(($511+8)|0);
      var $512=HEAP32[(($lines571)>>2)];
      var $arrayidx572=(($512)|0);
      var $asc573=(($arrayidx572)|0);
      var $513=(tempDoubleI32[0]=HEAP32[(($asc573)>>2)],tempDoubleI32[1]=HEAP32[((($asc573)+(4))>>2)],tempDoubleF64[0]);
      var $add574=($call570)+($513);
      $device_y=$add574;
      __label__ = 133; break;
    case 127: 
      var $514=$valign;
      var $cmp576=(($514)|0)==8;
      if ($cmp576) { __label__ = 128; break; } else { __label__ = 129; break; }
    case 128: 
      var $515=$render_priv_addr;
      var $516=$render_priv_addr;
      var $track579=(($516+140)|0);
      var $517=HEAP32[(($track579)>>2)];
      var $PlayResY=(($517+40)|0);
      var $518=HEAP32[(($PlayResY)>>2)];
      var $conv580=(($518)|0);
      var $div581=($conv580)/(2);
      var $call582=_y2scr($515, $div581);
      $scr_y=$call582;
      var $519=$scr_y;
      var $yMax=(($bbox+24)|0);
      var $520=(tempDoubleI32[0]=HEAP32[(($yMax)>>2)],tempDoubleI32[1]=HEAP32[((($yMax)+(4))>>2)],tempDoubleF64[0]);
      var $yMin=(($bbox+16)|0);
      var $521=(tempDoubleI32[0]=HEAP32[(($yMin)>>2)],tempDoubleI32[1]=HEAP32[((($yMin)+(4))>>2)],tempDoubleF64[0]);
      var $add583=($520)+($521);
      var $div584=($add583)/(2);
      var $sub585=($519)-($div584);
      $device_y=$sub585;
      __label__ = 132; break;
    case 129: 
      var $522=$valign;
      var $cmp588=(($522)|0)!=0;
      if ($cmp588) { __label__ = 130; break; } else { __label__ = 131; break; }
    case 130: 
      var $523=$render_priv_addr;
      var $library591=(($523)|0);
      var $524=HEAP32[(($library591)>>2)];
      _ass_msg($524, 6, ((STRING_TABLE.__str8153)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 131; break;
    case 131: 
      var $525=$render_priv_addr;
      var $526=$render_priv_addr;
      var $track593=(($526+140)|0);
      var $527=HEAP32[(($track593)>>2)];
      var $PlayResY594=(($527+40)|0);
      var $528=HEAP32[(($PlayResY594)>>2)];
      var $529=$MarginV;
      var $sub595=((($528)-($529))|0);
      var $conv596=(($sub595)|0);
      var $call597=_y2scr_sub($525, $conv596);
      $scr_y587=$call597;
      var $530=$scr_y587;
      $device_y=$530;
      var $531=$text_info;
      var $height=(($531+16)|0);
      var $532=(tempDoubleI32[0]=HEAP32[(($height)>>2)],tempDoubleI32[1]=HEAP32[((($height)+(4))>>2)],tempDoubleF64[0]);
      var $533=$device_y;
      var $sub598=($533)-($532);
      $device_y=$sub598;
      var $534=$text_info;
      var $lines599=(($534+8)|0);
      var $535=HEAP32[(($lines599)>>2)];
      var $arrayidx600=(($535)|0);
      var $asc601=(($arrayidx600)|0);
      var $536=(tempDoubleI32[0]=HEAP32[(($asc601)>>2)],tempDoubleI32[1]=HEAP32[((($asc601)+(4))>>2)],tempDoubleF64[0]);
      var $537=$device_y;
      var $add602=($537)+($536);
      $device_y=$add602;
      __label__ = 132; break;
    case 132: 
      __label__ = 133; break;
    case 133: 
      __label__ = 142; break;
    case 134: 
      var $538=$render_priv_addr;
      var $state606=(($538+176)|0);
      var $evt_type607=(($state606+76)|0);
      var $539=HEAP32[(($evt_type607)>>2)];
      var $cmp608=(($539)|0)==3;
      if ($cmp608) { __label__ = 135; break; } else { __label__ = 141; break; }
    case 135: 
      var $540=$render_priv_addr;
      var $state611=(($540+176)|0);
      var $scroll_direction612=(($state611+256)|0);
      var $541=HEAP32[(($scroll_direction612)>>2)];
      var $cmp613=(($541)|0)==2;
      if ($cmp613) { __label__ = 136; break; } else { __label__ = 137; break; }
    case 136: 
      var $542=$render_priv_addr;
      var $543=$render_priv_addr;
      var $state616=(($543+176)|0);
      var $clip_y0=(($state616+176)|0);
      var $544=HEAP32[(($clip_y0)>>2)];
      var $545=$render_priv_addr;
      var $state617=(($545+176)|0);
      var $scroll_shift618=(($state617+260)|0);
      var $546=HEAP32[(($scroll_shift618)>>2)];
      var $add619=((($544)+($546))|0);
      var $conv620=(($add619)|0);
      var $call621=_y2scr($542, $conv620);
      var $yMax622=(($bbox+24)|0);
      var $547=(tempDoubleI32[0]=HEAP32[(($yMax622)>>2)],tempDoubleI32[1]=HEAP32[((($yMax622)+(4))>>2)],tempDoubleF64[0]);
      var $yMin623=(($bbox+16)|0);
      var $548=(tempDoubleI32[0]=HEAP32[(($yMin623)>>2)],tempDoubleI32[1]=HEAP32[((($yMin623)+(4))>>2)],tempDoubleF64[0]);
      var $sub624=($547)-($548);
      var $sub625=($call621)-($sub624);
      $device_y=$sub625;
      __label__ = 140; break;
    case 137: 
      var $549=$render_priv_addr;
      var $state627=(($549+176)|0);
      var $scroll_direction628=(($state627+256)|0);
      var $550=HEAP32[(($scroll_direction628)>>2)];
      var $cmp629=(($550)|0)==3;
      if ($cmp629) { __label__ = 138; break; } else { __label__ = 139; break; }
    case 138: 
      var $551=$render_priv_addr;
      var $552=$render_priv_addr;
      var $state632=(($552+176)|0);
      var $clip_y1=(($state632+184)|0);
      var $553=HEAP32[(($clip_y1)>>2)];
      var $554=$render_priv_addr;
      var $state633=(($554+176)|0);
      var $scroll_shift634=(($state633+260)|0);
      var $555=HEAP32[(($scroll_shift634)>>2)];
      var $sub635=((($553)-($555))|0);
      var $conv636=(($sub635)|0);
      var $call637=_y2scr($551, $conv636);
      $device_y=$call637;
      __label__ = 139; break;
    case 139: 
      __label__ = 140; break;
    case 140: 
      __label__ = 141; break;
    case 141: 
      __label__ = 142; break;
    case 142: 
      var $556=$render_priv_addr;
      var $state642=(($556+176)|0);
      var $evt_type643=(($state642+76)|0);
      var $557=HEAP32[(($evt_type643)>>2)];
      var $cmp644=(($557)|0)==1;
      if ($cmp644) { __label__ = 143; break; } else { __label__ = 144; break; }
    case 143: 
      (tempDoubleF64[0]=0,HEAP32[(($base_x)>>2)]=tempDoubleI32[0],HEAP32[((($base_x)+(4))>>2)]=tempDoubleI32[1]);
      (tempDoubleF64[0]=0,HEAP32[(($base_y)>>2)]=tempDoubleI32[0],HEAP32[((($base_y)+(4))>>2)]=tempDoubleI32[1]);
      var $558=$render_priv_addr;
      var $library647=(($558)|0);
      var $559=HEAP32[(($library647)>>2)];
      var $560=$render_priv_addr;
      var $state648=(($560+176)|0);
      var $pos_x=(($state648+80)|0);
      var $561=(tempDoubleI32[0]=HEAP32[(($pos_x)>>2)],tempDoubleI32[1]=HEAP32[((($pos_x)+(4))>>2)],tempDoubleF64[0]);
      var $562=$render_priv_addr;
      var $state649=(($562+176)|0);
      var $pos_y=(($state649+88)|0);
      var $563=(tempDoubleI32[0]=HEAP32[(($pos_y)>>2)],tempDoubleI32[1]=HEAP32[((($pos_y)+(4))>>2)],tempDoubleF64[0]);
      _ass_msg($559, 7, ((STRING_TABLE.__str9154)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$561,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[(((tempInt)+(4))>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$563,HEAP32[(((tempInt)+(8))>>2)]=tempDoubleI32[0],HEAP32[((((tempInt)+(8))+(4))>>2)]=tempDoubleI32[1]),tempInt));
      var $564=$alignment;
      _get_base_point($bbox, $564, $base_x, $base_y);
      var $565=$render_priv_addr;
      var $566=$render_priv_addr;
      var $state650=(($566+176)|0);
      var $pos_x651=(($state650+80)|0);
      var $567=(tempDoubleI32[0]=HEAP32[(($pos_x651)>>2)],tempDoubleI32[1]=HEAP32[((($pos_x651)+(4))>>2)],tempDoubleF64[0]);
      var $call652=_x2scr_pos($565, $567);
      var $568=(tempDoubleI32[0]=HEAP32[(($base_x)>>2)],tempDoubleI32[1]=HEAP32[((($base_x)+(4))>>2)],tempDoubleF64[0]);
      var $sub653=($call652)-($568);
      $device_x=$sub653;
      var $569=$render_priv_addr;
      var $570=$render_priv_addr;
      var $state654=(($570+176)|0);
      var $pos_y655=(($state654+88)|0);
      var $571=(tempDoubleI32[0]=HEAP32[(($pos_y655)>>2)],tempDoubleI32[1]=HEAP32[((($pos_y655)+(4))>>2)],tempDoubleF64[0]);
      var $call656=_y2scr_pos($569, $571);
      var $572=(tempDoubleI32[0]=HEAP32[(($base_y)>>2)],tempDoubleI32[1]=HEAP32[((($base_y)+(4))>>2)],tempDoubleF64[0]);
      var $sub657=($call656)-($572);
      $device_y=$sub657;
      __label__ = 144; break;
    case 144: 
      var $573=$render_priv_addr;
      var $state659=(($573+176)|0);
      var $evt_type660=(($state659+76)|0);
      var $574=HEAP32[(($evt_type660)>>2)];
      var $cmp661=(($574)|0)==0;
      if ($cmp661) { __label__ = 147; break; } else { __label__ = 145; break; }
    case 145: 
      var $575=$render_priv_addr;
      var $state664=(($575+176)|0);
      var $evt_type665=(($state664+76)|0);
      var $576=HEAP32[(($evt_type665)>>2)];
      var $cmp666=(($576)|0)==2;
      if ($cmp666) { __label__ = 147; break; } else { __label__ = 146; break; }
    case 146: 
      var $577=$render_priv_addr;
      var $state669=(($577+176)|0);
      var $evt_type670=(($state669+76)|0);
      var $578=HEAP32[(($evt_type670)>>2)];
      var $cmp671=(($578)|0)==3;
      if ($cmp671) { __label__ = 147; break; } else { __label__ = 156; break; }
    case 147: 
      var $579=$render_priv_addr;
      var $580=$render_priv_addr;
      var $state674=(($580+176)|0);
      var $clip_x0=(($state674+172)|0);
      var $581=HEAP32[(($clip_x0)>>2)];
      var $conv675=(($581)|0);
      var $call676=_x2scr_scaled($579, $conv675);
      var $conv677=(($call676)&-1);
      var $582=$render_priv_addr;
      var $state678=(($582+176)|0);
      var $clip_x0679=(($state678+172)|0);
      HEAP32[(($clip_x0679)>>2)]=$conv677;
      var $583=$render_priv_addr;
      var $584=$render_priv_addr;
      var $state680=(($584+176)|0);
      var $clip_x1=(($state680+180)|0);
      var $585=HEAP32[(($clip_x1)>>2)];
      var $conv681=(($585)|0);
      var $call682=_x2scr_scaled($583, $conv681);
      var $conv683=(($call682)&-1);
      var $586=$render_priv_addr;
      var $state684=(($586+176)|0);
      var $clip_x1685=(($state684+180)|0);
      HEAP32[(($clip_x1685)>>2)]=$conv683;
      var $587=$valign;
      var $cmp686=(($587)|0)==4;
      if ($cmp686) { __label__ = 148; break; } else { __label__ = 149; break; }
    case 148: 
      var $588=$render_priv_addr;
      var $589=$render_priv_addr;
      var $state689=(($589+176)|0);
      var $clip_y0690=(($state689+176)|0);
      var $590=HEAP32[(($clip_y0690)>>2)];
      var $conv691=(($590)|0);
      var $call692=_y2scr_top($588, $conv691);
      var $conv693=(($call692)&-1);
      var $591=$render_priv_addr;
      var $state694=(($591+176)|0);
      var $clip_y0695=(($state694+176)|0);
      HEAP32[(($clip_y0695)>>2)]=$conv693;
      var $592=$render_priv_addr;
      var $593=$render_priv_addr;
      var $state696=(($593+176)|0);
      var $clip_y1697=(($state696+184)|0);
      var $594=HEAP32[(($clip_y1697)>>2)];
      var $conv698=(($594)|0);
      var $call699=_y2scr_top($592, $conv698);
      var $conv700=(($call699)&-1);
      var $595=$render_priv_addr;
      var $state701=(($595+176)|0);
      var $clip_y1702=(($state701+184)|0);
      HEAP32[(($clip_y1702)>>2)]=$conv700;
      __label__ = 155; break;
    case 149: 
      var $596=$valign;
      var $cmp704=(($596)|0)==8;
      if ($cmp704) { __label__ = 150; break; } else { __label__ = 151; break; }
    case 150: 
      var $597=$render_priv_addr;
      var $598=$render_priv_addr;
      var $state707=(($598+176)|0);
      var $clip_y0708=(($state707+176)|0);
      var $599=HEAP32[(($clip_y0708)>>2)];
      var $conv709=(($599)|0);
      var $call710=_y2scr($597, $conv709);
      var $conv711=(($call710)&-1);
      var $600=$render_priv_addr;
      var $state712=(($600+176)|0);
      var $clip_y0713=(($state712+176)|0);
      HEAP32[(($clip_y0713)>>2)]=$conv711;
      var $601=$render_priv_addr;
      var $602=$render_priv_addr;
      var $state714=(($602+176)|0);
      var $clip_y1715=(($state714+184)|0);
      var $603=HEAP32[(($clip_y1715)>>2)];
      var $conv716=(($603)|0);
      var $call717=_y2scr($601, $conv716);
      var $conv718=(($call717)&-1);
      var $604=$render_priv_addr;
      var $state719=(($604+176)|0);
      var $clip_y1720=(($state719+184)|0);
      HEAP32[(($clip_y1720)>>2)]=$conv718;
      __label__ = 154; break;
    case 151: 
      var $605=$valign;
      var $cmp722=(($605)|0)==0;
      if ($cmp722) { __label__ = 152; break; } else { __label__ = 153; break; }
    case 152: 
      var $606=$render_priv_addr;
      var $607=$render_priv_addr;
      var $state725=(($607+176)|0);
      var $clip_y0726=(($state725+176)|0);
      var $608=HEAP32[(($clip_y0726)>>2)];
      var $conv727=(($608)|0);
      var $call728=_y2scr_sub($606, $conv727);
      var $conv729=(($call728)&-1);
      var $609=$render_priv_addr;
      var $state730=(($609+176)|0);
      var $clip_y0731=(($state730+176)|0);
      HEAP32[(($clip_y0731)>>2)]=$conv729;
      var $610=$render_priv_addr;
      var $611=$render_priv_addr;
      var $state732=(($611+176)|0);
      var $clip_y1733=(($state732+184)|0);
      var $612=HEAP32[(($clip_y1733)>>2)];
      var $conv734=(($612)|0);
      var $call735=_y2scr_sub($610, $conv734);
      var $conv736=(($call735)&-1);
      var $613=$render_priv_addr;
      var $state737=(($613+176)|0);
      var $clip_y1738=(($state737+184)|0);
      HEAP32[(($clip_y1738)>>2)]=$conv736;
      __label__ = 153; break;
    case 153: 
      __label__ = 154; break;
    case 154: 
      __label__ = 155; break;
    case 155: 
      __label__ = 159; break;
    case 156: 
      var $614=$render_priv_addr;
      var $state743=(($614+176)|0);
      var $evt_type744=(($state743+76)|0);
      var $615=HEAP32[(($evt_type744)>>2)];
      var $cmp745=(($615)|0)==1;
      if ($cmp745) { __label__ = 157; break; } else { __label__ = 158; break; }
    case 157: 
      var $616=$render_priv_addr;
      var $617=$render_priv_addr;
      var $state748=(($617+176)|0);
      var $clip_x0749=(($state748+172)|0);
      var $618=HEAP32[(($clip_x0749)>>2)];
      var $conv750=(($618)|0);
      var $call751=_x2scr_pos_scaled($616, $conv750);
      var $conv752=(($call751)&-1);
      var $619=$render_priv_addr;
      var $state753=(($619+176)|0);
      var $clip_x0754=(($state753+172)|0);
      HEAP32[(($clip_x0754)>>2)]=$conv752;
      var $620=$render_priv_addr;
      var $621=$render_priv_addr;
      var $state755=(($621+176)|0);
      var $clip_x1756=(($state755+180)|0);
      var $622=HEAP32[(($clip_x1756)>>2)];
      var $conv757=(($622)|0);
      var $call758=_x2scr_pos_scaled($620, $conv757);
      var $conv759=(($call758)&-1);
      var $623=$render_priv_addr;
      var $state760=(($623+176)|0);
      var $clip_x1761=(($state760+180)|0);
      HEAP32[(($clip_x1761)>>2)]=$conv759;
      var $624=$render_priv_addr;
      var $625=$render_priv_addr;
      var $state762=(($625+176)|0);
      var $clip_y0763=(($state762+176)|0);
      var $626=HEAP32[(($clip_y0763)>>2)];
      var $conv764=(($626)|0);
      var $call765=_y2scr_pos($624, $conv764);
      var $conv766=(($call765)&-1);
      var $627=$render_priv_addr;
      var $state767=(($627+176)|0);
      var $clip_y0768=(($state767+176)|0);
      HEAP32[(($clip_y0768)>>2)]=$conv766;
      var $628=$render_priv_addr;
      var $629=$render_priv_addr;
      var $state769=(($629+176)|0);
      var $clip_y1770=(($state769+184)|0);
      var $630=HEAP32[(($clip_y1770)>>2)];
      var $conv771=(($630)|0);
      var $call772=_y2scr_pos($628, $conv771);
      var $conv773=(($call772)&-1);
      var $631=$render_priv_addr;
      var $state774=(($631+176)|0);
      var $clip_y1775=(($state774+184)|0);
      HEAP32[(($clip_y1775)>>2)]=$conv773;
      __label__ = 158; break;
    case 158: 
      __label__ = 159; break;
    case 159: 
      var $632=$render_priv_addr;
      var $state778=(($632+176)|0);
      var $have_origin=(($state778+112)|0);
      var $633=HEAP8[($have_origin)];
      var $tobool779=(($633 << 24) >> 24)!=0;
      if ($tobool779) { __label__ = 160; break; } else { __label__ = 161; break; }
    case 160: 
      var $634=$render_priv_addr;
      var $635=$render_priv_addr;
      var $state781=(($635+176)|0);
      var $org_x=(($state781+96)|0);
      var $636=(tempDoubleI32[0]=HEAP32[(($org_x)>>2)],tempDoubleI32[1]=HEAP32[((($org_x)+(4))>>2)],tempDoubleF64[0]);
      var $call782=_x2scr($634, $636);
      var $x783=(($center)|0);
      (tempDoubleF64[0]=$call782,HEAP32[(($x783)>>2)]=tempDoubleI32[0],HEAP32[((($x783)+(4))>>2)]=tempDoubleI32[1]);
      var $637=$render_priv_addr;
      var $638=$render_priv_addr;
      var $state784=(($638+176)|0);
      var $org_y=(($state784+104)|0);
      var $639=(tempDoubleI32[0]=HEAP32[(($org_y)>>2)],tempDoubleI32[1]=HEAP32[((($org_y)+(4))>>2)],tempDoubleF64[0]);
      var $call785=_y2scr($637, $639);
      var $y786=(($center+8)|0);
      (tempDoubleF64[0]=$call785,HEAP32[(($y786)>>2)]=tempDoubleI32[0],HEAP32[((($y786)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 162; break;
    case 161: 
      (tempDoubleF64[0]=0,HEAP32[(($bx)>>2)]=tempDoubleI32[0],HEAP32[((($bx)+(4))>>2)]=tempDoubleI32[1]);
      (tempDoubleF64[0]=0,HEAP32[(($by)>>2)]=tempDoubleI32[0],HEAP32[((($by)+(4))>>2)]=tempDoubleI32[1]);
      var $640=$alignment;
      _get_base_point($bbox, $640, $bx, $by);
      var $641=$device_x;
      var $642=(tempDoubleI32[0]=HEAP32[(($bx)>>2)],tempDoubleI32[1]=HEAP32[((($bx)+(4))>>2)],tempDoubleF64[0]);
      var $add788=($641)+($642);
      var $x789=(($center)|0);
      (tempDoubleF64[0]=$add788,HEAP32[(($x789)>>2)]=tempDoubleI32[0],HEAP32[((($x789)+(4))>>2)]=tempDoubleI32[1]);
      var $643=$device_y;
      var $644=(tempDoubleI32[0]=HEAP32[(($by)>>2)],tempDoubleI32[1]=HEAP32[((($by)+(4))>>2)],tempDoubleF64[0]);
      var $add790=($643)+($644);
      var $y791=(($center+8)|0);
      (tempDoubleF64[0]=$add790,HEAP32[(($y791)>>2)]=tempDoubleI32[0],HEAP32[((($y791)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 162; break;
    case 162: 
      $i=0;
      __label__ = 163; break;
    case 163: 
      var $645=$i;
      var $646=$text_info;
      var $length794=(($646+4)|0);
      var $647=HEAP32[(($length794)>>2)];
      var $cmp795=(($645)|0) < (($647)|0);
      if ($cmp795) { __label__ = 164; break; } else { __label__ = 176; break; }
    case 164: 
      var $648=$glyphs;
      var $649=$i;
      var $add_ptr799=(($648+($649)*(328))|0);
      $info798=$add_ptr799;
      __label__ = 165; break;
    case 165: 
      var $650=$info798;
      var $tobool801=(($650)|0)!=0;
      if ($tobool801) { __label__ = 166; break; } else { __label__ = 174; break; }
    case 166: 
      var $651=$info798;
      var $hash_key803=(($651+260)|0);
      var $u804=(($hash_key803+4)|0);
      var $outline805=$u804;
      $key=$outline805;
      var $652=$key;
      var $frx806=(($652+16)|0);
      var $653=HEAP32[(($frx806)>>2)];
      var $tobool807=(($653)|0)!=0;
      if ($tobool807) { __label__ = 171; break; } else { __label__ = 167; break; }
    case 167: 
      var $654=$key;
      var $fry809=(($654+20)|0);
      var $655=HEAP32[(($fry809)>>2)];
      var $tobool810=(($655)|0)!=0;
      if ($tobool810) { __label__ = 171; break; } else { __label__ = 168; break; }
    case 168: 
      var $656=$key;
      var $frz812=(($656+24)|0);
      var $657=HEAP32[(($frz812)>>2)];
      var $tobool813=(($657)|0)!=0;
      if ($tobool813) { __label__ = 171; break; } else { __label__ = 169; break; }
    case 169: 
      var $658=$key;
      var $fax815=(($658+28)|0);
      var $659=HEAP32[(($fax815)>>2)];
      var $tobool816=(($659)|0)!=0;
      if ($tobool816) { __label__ = 171; break; } else { __label__ = 170; break; }
    case 170: 
      var $660=$key;
      var $fay818=(($660+32)|0);
      var $661=HEAP32[(($fay818)>>2)];
      var $tobool819=(($661)|0)!=0;
      if ($tobool819) { __label__ = 171; break; } else { __label__ = 172; break; }
    case 171: 
      var $662=$info798;
      var $pos821=(($662+68)|0);
      var $x822=(($pos821)|0);
      var $663=HEAP32[(($x822)>>2)];
      var $664=$device_x;
      var $x823=(($center)|0);
      var $665=(tempDoubleI32[0]=HEAP32[(($x823)>>2)],tempDoubleI32[1]=HEAP32[((($x823)+(4))>>2)],tempDoubleF64[0]);
      var $sub824=($664)-($665);
      var $call825=_double_to_d6169($sub824);
      var $add826=((($663)+($call825))|0);
      var $666=$key;
      var $shift_x=(($666+36)|0);
      HEAP32[(($shift_x)>>2)]=$add826;
      var $667=$info798;
      var $pos827=(($667+68)|0);
      var $y828=(($pos827+4)|0);
      var $668=HEAP32[(($y828)>>2)];
      var $669=$device_y;
      var $y829=(($center+8)|0);
      var $670=(tempDoubleI32[0]=HEAP32[(($y829)>>2)],tempDoubleI32[1]=HEAP32[((($y829)+(4))>>2)],tempDoubleF64[0]);
      var $sub830=($669)-($670);
      var $call831=_double_to_d6169($sub830);
      var $add832=((($668)+($call831))|0);
      var $sub833=(((-$add832))|0);
      var $671=$key;
      var $shift_y=(($671+40)|0);
      HEAP32[(($shift_y)>>2)]=$sub833;
      __label__ = 173; break;
    case 172: 
      var $672=$key;
      var $shift_x835=(($672+36)|0);
      HEAP32[(($shift_x835)>>2)]=0;
      var $673=$key;
      var $shift_y836=(($673+40)|0);
      HEAP32[(($shift_y836)>>2)]=0;
      __label__ = 173; break;
    case 173: 
      var $674=$info798;
      var $next838=(($674+324)|0);
      var $675=HEAP32[(($next838)>>2)];
      $info798=$675;
      __label__ = 165; break;
    case 174: 
      __label__ = 175; break;
    case 175: 
      var $676=$i;
      var $inc841=((($676)+(1))|0);
      $i=$inc841;
      __label__ = 163; break;
    case 176: 
      var $677=$render_priv_addr;
      var $settings843=(($677+12)|0);
      var $left_margin=(($settings843+32)|0);
      var $678=HEAP32[(($left_margin)>>2)];
      $left=$678;
      var $679=$device_x;
      var $680=$left;
      var $conv844=(($680)|0);
      var $sub845=($679)-($conv844);
      var $681=$render_priv_addr;
      var $font_scale_x=(($681+160)|0);
      var $682=(tempDoubleI32[0]=HEAP32[(($font_scale_x)>>2)],tempDoubleI32[1]=HEAP32[((($font_scale_x)+(4))>>2)],tempDoubleF64[0]);
      var $mul846=($sub845)*($682);
      var $683=$left;
      var $conv847=(($683)|0);
      var $add848=($mul846)+($conv847);
      $device_x=$add848;
      $i=0;
      __label__ = 177; break;
    case 177: 
      var $684=$i;
      var $685=$text_info;
      var $length850=(($685+4)|0);
      var $686=HEAP32[(($length850)>>2)];
      var $cmp851=(($684)|0) < (($686)|0);
      if ($cmp851) { __label__ = 178; break; } else { __label__ = 183; break; }
    case 178: 
      var $687=$glyphs;
      var $688=$i;
      var $add_ptr855=(($687+($688)*(328))|0);
      $info854=$add_ptr855;
      __label__ = 179; break;
    case 179: 
      var $689=$info854;
      var $tobool857=(($689)|0)!=0;
      if ($tobool857) { __label__ = 180; break; } else { __label__ = 181; break; }
    case 180: 
      var $690=$info854;
      var $hash_key860=(($690+260)|0);
      var $u861=(($hash_key860+4)|0);
      var $outline862=$u861;
      $key859=$outline862;
      var $691=$render_priv_addr;
      var $font_scale_x863=(($691+160)|0);
      var $692=(tempDoubleI32[0]=HEAP32[(($font_scale_x863)>>2)],tempDoubleI32[1]=HEAP32[((($font_scale_x863)+(4))>>2)],tempDoubleF64[0]);
      var $693=$info854;
      var $pos864=(($693+68)|0);
      var $x865=(($pos864)|0);
      var $694=HEAP32[(($x865)>>2)];
      var $conv866=(($694)|0);
      var $mul867=($conv866)*($692);
      var $conv868=(($mul867)&-1);
      HEAP32[(($x865)>>2)]=$conv868;
      var $695=$device_x;
      var $696=$device_x;
      var $conv869=(($696)&-1);
      var $conv870=(($conv869)|0);
      var $sub871=($695)-($conv870);
      var $697=$info854;
      var $pos872=(($697+68)|0);
      var $x873=(($pos872)|0);
      var $698=HEAP32[(($x873)>>2)];
      var $and874=$698 & 63;
      var $call875=_d6_to_double($and874);
      var $add876=($sub871)+($call875);
      var $call877=_double_to_d6169($add876);
      var $and878=$call877 & -8;
      var $699=$key859;
      var $advance879=(($699+44)|0);
      var $x880=(($advance879)|0);
      HEAP32[(($x880)>>2)]=$and878;
      var $700=$device_y;
      var $701=$device_y;
      var $conv881=(($701)&-1);
      var $conv882=(($conv881)|0);
      var $sub883=($700)-($conv882);
      var $702=$info854;
      var $pos884=(($702+68)|0);
      var $y885=(($pos884+4)|0);
      var $703=HEAP32[(($y885)>>2)];
      var $and886=$703 & 63;
      var $call887=_d6_to_double($and886);
      var $add888=($sub883)+($call887);
      var $call889=_double_to_d6169($add888);
      var $and890=$call889 & -8;
      var $704=$key859;
      var $advance891=(($704+44)|0);
      var $y892=(($advance891+4)|0);
      HEAP32[(($y892)>>2)]=$and890;
      var $705=$render_priv_addr;
      var $706=$info854;
      _get_bitmap_glyph($705, $706);
      var $707=$info854;
      var $next893=(($707+324)|0);
      var $708=HEAP32[(($next893)>>2)];
      $info854=$708;
      __label__ = 179; break;
    case 181: 
      __label__ = 182; break;
    case 182: 
      var $709=$i;
      var $inc896=((($709)+(1))|0);
      $i=$inc896;
      __label__ = 177; break;
    case 183: 
      var $710=$event_images_addr;
      var $711=$710;
      HEAP32[(($711)>>2)]=0; HEAP32[((($711)+(4))>>2)]=0; HEAP32[((($711)+(8))>>2)]=0; HEAP32[((($711)+(12))>>2)]=0; HEAP32[((($711)+(16))>>2)]=0; HEAP32[((($711)+(20))>>2)]=0; HEAP32[((($711)+(24))>>2)]=0; HEAP32[((($711)+(28))>>2)]=0;
      var $712=$device_y;
      var $713=$text_info;
      var $lines898=(($713+8)|0);
      var $714=HEAP32[(($lines898)>>2)];
      var $arrayidx899=(($714)|0);
      var $asc900=(($arrayidx899)|0);
      var $715=(tempDoubleI32[0]=HEAP32[(($asc900)>>2)],tempDoubleI32[1]=HEAP32[((($asc900)+(4))>>2)],tempDoubleF64[0]);
      var $sub901=($712)-($715);
      var $conv902=(($sub901)&-1);
      var $716=$event_images_addr;
      var $top=(($716+4)|0);
      HEAP32[(($top)>>2)]=$conv902;
      var $717=$text_info;
      var $height903=(($717+16)|0);
      var $718=(tempDoubleI32[0]=HEAP32[(($height903)>>2)],tempDoubleI32[1]=HEAP32[((($height903)+(4))>>2)],tempDoubleF64[0]);
      var $conv904=(($718)&-1);
      var $719=$event_images_addr;
      var $height905=(($719+8)|0);
      HEAP32[(($height905)>>2)]=$conv904;
      var $720=$device_x;
      var $xMin906=(($bbox)|0);
      var $721=(tempDoubleI32[0]=HEAP32[(($xMin906)>>2)],tempDoubleI32[1]=HEAP32[((($xMin906)+(4))>>2)],tempDoubleF64[0]);
      var $722=$render_priv_addr;
      var $font_scale_x907=(($722+160)|0);
      var $723=(tempDoubleI32[0]=HEAP32[(($font_scale_x907)>>2)],tempDoubleI32[1]=HEAP32[((($font_scale_x907)+(4))>>2)],tempDoubleF64[0]);
      var $mul908=($721)*($723);
      var $add909=($720)+($mul908);
      var $add910=($add909)+(0.5);
      var $conv911=(($add910)&-1);
      var $724=$event_images_addr;
      var $left912=(($724+12)|0);
      HEAP32[(($left912)>>2)]=$conv911;
      var $xMax913=(($bbox+8)|0);
      var $725=(tempDoubleI32[0]=HEAP32[(($xMax913)>>2)],tempDoubleI32[1]=HEAP32[((($xMax913)+(4))>>2)],tempDoubleF64[0]);
      var $xMin914=(($bbox)|0);
      var $726=(tempDoubleI32[0]=HEAP32[(($xMin914)>>2)],tempDoubleI32[1]=HEAP32[((($xMin914)+(4))>>2)],tempDoubleF64[0]);
      var $sub915=($725)-($726);
      var $727=$render_priv_addr;
      var $font_scale_x916=(($727+160)|0);
      var $728=(tempDoubleI32[0]=HEAP32[(($font_scale_x916)>>2)],tempDoubleI32[1]=HEAP32[((($font_scale_x916)+(4))>>2)],tempDoubleF64[0]);
      var $mul917=($sub915)*($728);
      var $add918=($mul917)+(0.5);
      var $conv919=(($add918)&-1);
      var $729=$event_images_addr;
      var $width920=(($729+16)|0);
      HEAP32[(($width920)>>2)]=$conv919;
      var $730=$render_priv_addr;
      var $state921=(($730+176)|0);
      var $detect_collisions=(($state921+189)|0);
      var $731=HEAP8[($detect_collisions)];
      var $conv922=(($731 << 24) >> 24);
      var $732=$event_images_addr;
      var $detect_collisions923=(($732+20)|0);
      HEAP32[(($detect_collisions923)>>2)]=$conv922;
      var $733=$valign;
      var $cmp924=(($733)|0)==4;
      var $cond926=$cmp924 ? 1 : -1;
      var $734=$event_images_addr;
      var $shift_direction=(($734+24)|0);
      HEAP32[(($shift_direction)>>2)]=$cond926;
      var $735=$event_addr;
      var $736=$event_images_addr;
      var $event927=(($736+28)|0);
      HEAP32[(($event927)>>2)]=$735;
      var $737=$render_priv_addr;
      var $738=$device_x;
      var $conv928=(($738)&-1);
      var $739=$device_y;
      var $conv929=(($739)&-1);
      var $call930=_render_text($737, $conv928, $conv929);
      var $740=$event_images_addr;
      var $imgs=(($740)|0);
      HEAP32[(($imgs)>>2)]=$call930;
      var $741=$render_priv_addr;
      var $shaper931=(($741+96)|0);
      var $742=HEAP32[(($shaper931)>>2)];
      var $743=$text_info;
      _ass_shaper_cleanup($742, $743);
      var $744=$render_priv_addr;
      _free_render_context($744);
      $retval=0;
      __label__ = 184; break;
    case 184: 
      var $745=$retval;
      STACKTOP = __stackBase__;
      return $745;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_render_event["X"]=1;

function _cmp_event_layer($p1, $p2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $p1_addr;
      var $p2_addr;
      var $e1;
      var $e2;
      $p1_addr=$p1;
      $p2_addr=$p2;
      var $0=$p1_addr;
      var $1=$0;
      var $event=(($1+28)|0);
      var $2=HEAP32[(($event)>>2)];
      $e1=$2;
      var $3=$p2_addr;
      var $4=$3;
      var $event1=(($4+28)|0);
      var $5=HEAP32[(($event1)>>2)];
      $e2=$5;
      var $6=$e1;
      var $Layer=(($6+20)|0);
      var $7=HEAP32[(($Layer)>>2)];
      var $8=$e2;
      var $Layer2=(($8+20)|0);
      var $9=HEAP32[(($Layer2)>>2)];
      var $cmp=(($7)|0) < (($9)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=-1;
      __label__ = 11; break;
    case 4: 
      var $10=$e1;
      var $Layer3=(($10+20)|0);
      var $11=HEAP32[(($Layer3)>>2)];
      var $12=$e2;
      var $Layer4=(($12+20)|0);
      var $13=HEAP32[(($Layer4)>>2)];
      var $cmp5=(($11)|0) > (($13)|0);
      if ($cmp5) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $retval=1;
      __label__ = 11; break;
    case 6: 
      var $14=$e1;
      var $ReadOrder=(($14+16)|0);
      var $15=HEAP32[(($ReadOrder)>>2)];
      var $16=$e2;
      var $ReadOrder8=(($16+16)|0);
      var $17=HEAP32[(($ReadOrder8)>>2)];
      var $cmp9=(($15)|0) < (($17)|0);
      if ($cmp9) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $retval=-1;
      __label__ = 11; break;
    case 8: 
      var $18=$e1;
      var $ReadOrder12=(($18+16)|0);
      var $19=HEAP32[(($ReadOrder12)>>2)];
      var $20=$e2;
      var $ReadOrder13=(($20+16)|0);
      var $21=HEAP32[(($ReadOrder13)>>2)];
      var $cmp14=(($19)|0) > (($21)|0);
      if ($cmp14) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $retval=1;
      __label__ = 11; break;
    case 10: 
      $retval=0;
      __label__ = 11; break;
    case 11: 
      var $22=$retval;
      ;
      return $22;
    default: assert(0, "bad label: " + __label__);
  }
}
_cmp_event_layer["X"]=1;

function _ass_image_compare($i1, $i2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $i1_addr;
      var $i2_addr;
      $i1_addr=$i1;
      $i2_addr=$i2;
      var $0=$i1_addr;
      var $w=(($0)|0);
      var $1=HEAP32[(($w)>>2)];
      var $2=$i2_addr;
      var $w1=(($2)|0);
      var $3=HEAP32[(($w1)>>2)];
      var $cmp=(($1)|0)!=(($3)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=2;
      __label__ = 17; break;
    case 4: 
      var $4=$i1_addr;
      var $h=(($4+4)|0);
      var $5=HEAP32[(($h)>>2)];
      var $6=$i2_addr;
      var $h2=(($6+4)|0);
      var $7=HEAP32[(($h2)>>2)];
      var $cmp3=(($5)|0)!=(($7)|0);
      if ($cmp3) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $retval=2;
      __label__ = 17; break;
    case 6: 
      var $8=$i1_addr;
      var $stride=(($8+8)|0);
      var $9=HEAP32[(($stride)>>2)];
      var $10=$i2_addr;
      var $stride6=(($10+8)|0);
      var $11=HEAP32[(($stride6)>>2)];
      var $cmp7=(($9)|0)!=(($11)|0);
      if ($cmp7) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $retval=2;
      __label__ = 17; break;
    case 8: 
      var $12=$i1_addr;
      var $color=(($12+16)|0);
      var $13=HEAP32[(($color)>>2)];
      var $14=$i2_addr;
      var $color10=(($14+16)|0);
      var $15=HEAP32[(($color10)>>2)];
      var $cmp11=(($13)|0)!=(($15)|0);
      if ($cmp11) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $retval=2;
      __label__ = 17; break;
    case 10: 
      var $16=$i1_addr;
      var $bitmap=(($16+12)|0);
      var $17=HEAP32[(($bitmap)>>2)];
      var $18=$i2_addr;
      var $bitmap14=(($18+12)|0);
      var $19=HEAP32[(($bitmap14)>>2)];
      var $cmp15=(($17)|0)!=(($19)|0);
      if ($cmp15) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      $retval=2;
      __label__ = 17; break;
    case 12: 
      var $20=$i1_addr;
      var $dst_x=(($20+20)|0);
      var $21=HEAP32[(($dst_x)>>2)];
      var $22=$i2_addr;
      var $dst_x18=(($22+20)|0);
      var $23=HEAP32[(($dst_x18)>>2)];
      var $cmp19=(($21)|0)!=(($23)|0);
      if ($cmp19) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      $retval=1;
      __label__ = 17; break;
    case 14: 
      var $24=$i1_addr;
      var $dst_y=(($24+24)|0);
      var $25=HEAP32[(($dst_y)>>2)];
      var $26=$i2_addr;
      var $dst_y22=(($26+24)|0);
      var $27=HEAP32[(($dst_y22)>>2)];
      var $cmp23=(($25)|0)!=(($27)|0);
      if ($cmp23) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      $retval=1;
      __label__ = 17; break;
    case 16: 
      $retval=0;
      __label__ = 17; break;
    case 17: 
      var $28=$retval;
      ;
      return $28;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_image_compare["X"]=1;

function _overlap($s1, $s2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $s1_addr;
      var $s2_addr;
      $s1_addr=$s1;
      $s2_addr=$s2;
      var $0=$s1_addr;
      var $a=(($0)|0);
      var $1=HEAP32[(($a)>>2)];
      var $2=$s2_addr;
      var $b=(($2+4)|0);
      var $3=HEAP32[(($b)>>2)];
      var $cmp=(($1)|0) >= (($3)|0);
      if ($cmp) { __label__ = 6; break; } else { __label__ = 3; break; }
    case 3: 
      var $4=$s2_addr;
      var $a1=(($4)|0);
      var $5=HEAP32[(($a1)>>2)];
      var $6=$s1_addr;
      var $b2=(($6+4)|0);
      var $7=HEAP32[(($b2)>>2)];
      var $cmp3=(($5)|0) >= (($7)|0);
      if ($cmp3) { __label__ = 6; break; } else { __label__ = 4; break; }
    case 4: 
      var $8=$s1_addr;
      var $ha=(($8+8)|0);
      var $9=HEAP32[(($ha)>>2)];
      var $10=$s2_addr;
      var $hb=(($10+12)|0);
      var $11=HEAP32[(($hb)>>2)];
      var $cmp5=(($9)|0) >= (($11)|0);
      if ($cmp5) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $12=$s2_addr;
      var $ha7=(($12+8)|0);
      var $13=HEAP32[(($ha7)>>2)];
      var $14=$s1_addr;
      var $hb8=(($14+12)|0);
      var $15=HEAP32[(($hb8)>>2)];
      var $cmp9=(($13)|0) >= (($15)|0);
      if ($cmp9) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $retval=0;
      __label__ = 8; break;
    case 7: 
      $retval=1;
      __label__ = 8; break;
    case 8: 
      var $16=$retval;
      ;
      return $16;
    default: assert(0, "bad label: " + __label__);
  }
}


function _shift_event($render_priv, $ei, $shift) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      var $ei_addr;
      var $shift_addr;
      var $cur;
      var $clip;
      var $clip10;
      $render_priv_addr=$render_priv;
      $ei_addr=$ei;
      $shift_addr=$shift;
      var $0=$ei_addr;
      var $imgs=(($0)|0);
      var $1=HEAP32[(($imgs)>>2)];
      $cur=$1;
      __label__ = 3; break;
    case 3: 
      var $2=$cur;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 11; break; }
    case 4: 
      var $3=$shift_addr;
      var $4=$cur;
      var $dst_y=(($4+24)|0);
      var $5=HEAP32[(($dst_y)>>2)];
      var $add=((($5)+($3))|0);
      HEAP32[(($dst_y)>>2)]=$add;
      var $6=$cur;
      var $dst_y1=(($6+24)|0);
      var $7=HEAP32[(($dst_y1)>>2)];
      var $cmp=(($7)|0) < 0;
      if ($cmp) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $8=$cur;
      var $dst_y2=(($8+24)|0);
      var $9=HEAP32[(($dst_y2)>>2)];
      var $sub=(((-$9))|0);
      $clip=$sub;
      var $10=$clip;
      var $11=$cur;
      var $h=(($11+4)|0);
      var $12=HEAP32[(($h)>>2)];
      var $sub3=((($12)-($10))|0);
      HEAP32[(($h)>>2)]=$sub3;
      var $13=$clip;
      var $14=$cur;
      var $stride=(($14+8)|0);
      var $15=HEAP32[(($stride)>>2)];
      var $mul=((($13)*($15))|0);
      var $16=$cur;
      var $bitmap=(($16+12)|0);
      var $17=HEAP32[(($bitmap)>>2)];
      var $add_ptr=(($17+$mul)|0);
      HEAP32[(($bitmap)>>2)]=$add_ptr;
      var $18=$cur;
      var $dst_y4=(($18+24)|0);
      HEAP32[(($dst_y4)>>2)]=0;
      __label__ = 6; break;
    case 6: 
      var $19=$cur;
      var $dst_y5=(($19+24)|0);
      var $20=HEAP32[(($dst_y5)>>2)];
      var $21=$cur;
      var $h6=(($21+4)|0);
      var $22=HEAP32[(($h6)>>2)];
      var $add7=((($20)+($22))|0);
      var $23=$render_priv_addr;
      var $height=(($23+120)|0);
      var $24=HEAP32[(($height)>>2)];
      var $cmp8=(($add7)|0) >= (($24)|0);
      if ($cmp8) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $25=$cur;
      var $dst_y11=(($25+24)|0);
      var $26=HEAP32[(($dst_y11)>>2)];
      var $27=$cur;
      var $h12=(($27+4)|0);
      var $28=HEAP32[(($h12)>>2)];
      var $add13=((($26)+($28))|0);
      var $29=$render_priv_addr;
      var $height14=(($29+120)|0);
      var $30=HEAP32[(($height14)>>2)];
      var $sub15=((($add13)-($30))|0);
      $clip10=$sub15;
      var $31=$clip10;
      var $32=$cur;
      var $h16=(($32+4)|0);
      var $33=HEAP32[(($h16)>>2)];
      var $sub17=((($33)-($31))|0);
      HEAP32[(($h16)>>2)]=$sub17;
      __label__ = 8; break;
    case 8: 
      var $34=$cur;
      var $h19=(($34+4)|0);
      var $35=HEAP32[(($h19)>>2)];
      var $cmp20=(($35)|0) <= 0;
      if ($cmp20) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $36=$cur;
      var $h22=(($36+4)|0);
      HEAP32[(($h22)>>2)]=0;
      var $37=$cur;
      var $dst_y23=(($37+24)|0);
      HEAP32[(($dst_y23)>>2)]=0;
      __label__ = 10; break;
    case 10: 
      var $38=$cur;
      var $next=(($38+28)|0);
      var $39=HEAP32[(($next)>>2)];
      $cur=$39;
      __label__ = 3; break;
    case 11: 
      var $40=$shift_addr;
      var $41=$ei_addr;
      var $top=(($41+4)|0);
      var $42=HEAP32[(($top)>>2)];
      var $add25=((($42)+($40))|0);
      HEAP32[(($top)>>2)]=$add25;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_shift_event["X"]=1;

function _cmp_segment($p1, $p2) {
  ;
  var __label__;

  var $p1_addr;
  var $p2_addr;
  $p1_addr=$p1;
  $p2_addr=$p2;
  var $0=$p1_addr;
  var $1=$0;
  var $a=(($1)|0);
  var $2=HEAP32[(($a)>>2)];
  var $3=$p2_addr;
  var $4=$3;
  var $a1=(($4)|0);
  var $5=HEAP32[(($a1)>>2)];
  var $sub=((($2)-($5))|0);
  ;
  return $sub;
}


function _fix_collisions($render_priv, $imgs, $cnt) {
  var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      var $imgs_addr;
      var $cnt_addr;
      var $used;
      var $cnt_used=__stackBase__;
      var $i;
      var $j;
      var $priv;
      var $s=(__stackBase__)+(4);
      var $priv62;
      var $shift;
      var $s74=(__stackBase__)+(20);
      $render_priv_addr=$render_priv;
      $imgs_addr=$imgs;
      $cnt_addr=$cnt;
      var $0=$cnt_addr;
      var $mul=((($0<<4))|0);
      var $call=_malloc($mul);
      var $1=$call;
      $used=$1;
      HEAP32[(($cnt_used)>>2)]=0;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $2=$i;
      var $3=$cnt_addr;
      var $cmp=(($2)|0) < (($3)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 20; break; }
    case 4: 
      var $4=$i;
      var $5=$imgs_addr;
      var $arrayidx=(($5+($4<<5))|0);
      var $detect_collisions=(($arrayidx+20)|0);
      var $6=HEAP32[(($detect_collisions)>>2)];
      var $tobool=(($6)|0)!=0;
      if ($tobool) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      __label__ = 19; break;
    case 6: 
      var $7=$render_priv_addr;
      var $8=$i;
      var $9=$imgs_addr;
      var $arrayidx1=(($9+($8<<5))|0);
      var $event=(($arrayidx1+28)|0);
      var $10=HEAP32[(($event)>>2)];
      var $call2=_get_render_priv($7, $10);
      $priv=$call2;
      var $11=$priv;
      var $height=(($11+4)|0);
      var $12=HEAP32[(($height)>>2)];
      var $cmp3=(($12)|0) > 0;
      if ($cmp3) { __label__ = 7; break; } else { __label__ = 18; break; }
    case 7: 
      var $13=$priv;
      var $top=(($13)|0);
      var $14=HEAP32[(($top)>>2)];
      var $a=(($s)|0);
      HEAP32[(($a)>>2)]=$14;
      var $15=$priv;
      var $top5=(($15)|0);
      var $16=HEAP32[(($top5)>>2)];
      var $17=$priv;
      var $height6=(($17+4)|0);
      var $18=HEAP32[(($height6)>>2)];
      var $add=((($16)+($18))|0);
      var $b=(($s+4)|0);
      HEAP32[(($b)>>2)]=$add;
      var $19=$priv;
      var $left=(($19+8)|0);
      var $20=HEAP32[(($left)>>2)];
      var $ha=(($s+8)|0);
      HEAP32[(($ha)>>2)]=$20;
      var $21=$priv;
      var $left7=(($21+8)|0);
      var $22=HEAP32[(($left7)>>2)];
      var $23=$priv;
      var $width=(($23+12)|0);
      var $24=HEAP32[(($width)>>2)];
      var $add8=((($22)+($24))|0);
      var $hb=(($s+12)|0);
      HEAP32[(($hb)>>2)]=$add8;
      var $25=$priv;
      var $height9=(($25+4)|0);
      var $26=HEAP32[(($height9)>>2)];
      var $27=$i;
      var $28=$imgs_addr;
      var $arrayidx10=(($28+($27<<5))|0);
      var $height11=(($arrayidx10+8)|0);
      var $29=HEAP32[(($height11)>>2)];
      var $cmp12=(($26)|0)!=(($29)|0);
      if ($cmp12) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $30=$render_priv_addr;
      var $library=(($30)|0);
      var $31=HEAP32[(($library)>>2)];
      _ass_msg($31, 2, ((STRING_TABLE.__str5150)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $32=$priv;
      var $top14=(($32)|0);
      HEAP32[(($top14)>>2)]=0;
      var $33=$priv;
      var $height15=(($33+4)|0);
      HEAP32[(($height15)>>2)]=0;
      var $34=$priv;
      var $left16=(($34+8)|0);
      HEAP32[(($left16)>>2)]=0;
      var $35=$priv;
      var $width17=(($35+12)|0);
      HEAP32[(($width17)>>2)]=0;
      __label__ = 9; break;
    case 9: 
      $j=0;
      __label__ = 10; break;
    case 10: 
      var $36=$j;
      var $37=HEAP32[(($cnt_used)>>2)];
      var $cmp20=(($36)|0) < (($37)|0);
      if ($cmp20) { __label__ = 11; break; } else { __label__ = 15; break; }
    case 11: 
      var $38=$used;
      var $39=$j;
      var $add_ptr=(($38+($39<<4))|0);
      var $call22=_overlap($s, $add_ptr);
      var $tobool23=(($call22)|0)!=0;
      if ($tobool23) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $40=$priv;
      var $top25=(($40)|0);
      HEAP32[(($top25)>>2)]=0;
      var $41=$priv;
      var $height26=(($41+4)|0);
      HEAP32[(($height26)>>2)]=0;
      var $42=$priv;
      var $left27=(($42+8)|0);
      HEAP32[(($left27)>>2)]=0;
      var $43=$priv;
      var $width28=(($43+12)|0);
      HEAP32[(($width28)>>2)]=0;
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $44=$j;
      var $inc=((($44)+(1))|0);
      $j=$inc;
      __label__ = 10; break;
    case 15: 
      var $45=$priv;
      var $height30=(($45+4)|0);
      var $46=HEAP32[(($height30)>>2)];
      var $cmp31=(($46)|0) > 0;
      if ($cmp31) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $47=$priv;
      var $top33=(($47)|0);
      var $48=HEAP32[(($top33)>>2)];
      var $49=HEAP32[(($cnt_used)>>2)];
      var $50=$used;
      var $arrayidx34=(($50+($49<<4))|0);
      var $a35=(($arrayidx34)|0);
      HEAP32[(($a35)>>2)]=$48;
      var $51=$priv;
      var $top36=(($51)|0);
      var $52=HEAP32[(($top36)>>2)];
      var $53=$priv;
      var $height37=(($53+4)|0);
      var $54=HEAP32[(($height37)>>2)];
      var $add38=((($52)+($54))|0);
      var $55=HEAP32[(($cnt_used)>>2)];
      var $56=$used;
      var $arrayidx39=(($56+($55<<4))|0);
      var $b40=(($arrayidx39+4)|0);
      HEAP32[(($b40)>>2)]=$add38;
      var $57=$priv;
      var $left41=(($57+8)|0);
      var $58=HEAP32[(($left41)>>2)];
      var $59=HEAP32[(($cnt_used)>>2)];
      var $60=$used;
      var $arrayidx42=(($60+($59<<4))|0);
      var $ha43=(($arrayidx42+8)|0);
      HEAP32[(($ha43)>>2)]=$58;
      var $61=$priv;
      var $left44=(($61+8)|0);
      var $62=HEAP32[(($left44)>>2)];
      var $63=$priv;
      var $width45=(($63+12)|0);
      var $64=HEAP32[(($width45)>>2)];
      var $add46=((($62)+($64))|0);
      var $65=HEAP32[(($cnt_used)>>2)];
      var $66=$used;
      var $arrayidx47=(($66+($65<<4))|0);
      var $hb48=(($arrayidx47+12)|0);
      HEAP32[(($hb48)>>2)]=$add46;
      var $67=HEAP32[(($cnt_used)>>2)];
      var $inc49=((($67)+(1))|0);
      HEAP32[(($cnt_used)>>2)]=$inc49;
      var $68=$render_priv_addr;
      var $69=$imgs_addr;
      var $70=$i;
      var $add_ptr50=(($69+($70<<5))|0);
      var $71=$priv;
      var $top51=(($71)|0);
      var $72=HEAP32[(($top51)>>2)];
      var $73=$i;
      var $74=$imgs_addr;
      var $arrayidx52=(($74+($73<<5))|0);
      var $top53=(($arrayidx52+4)|0);
      var $75=HEAP32[(($top53)>>2)];
      var $sub=((($72)-($75))|0);
      _shift_event($68, $add_ptr50, $sub);
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $76=$i;
      var $inc57=((($76)+(1))|0);
      $i=$inc57;
      __label__ = 3; break;
    case 20: 
      var $77=$used;
      var $78=$77;
      var $79=HEAP32[(($cnt_used)>>2)];
      _qsort($78, $79, 16, 40);
      $i=0;
      __label__ = 21; break;
    case 21: 
      var $80=$i;
      var $81=$cnt_addr;
      var $cmp60=(($80)|0) < (($81)|0);
      if ($cmp60) { __label__ = 22; break; } else { __label__ = 30; break; }
    case 22: 
      var $82=$i;
      var $83=$imgs_addr;
      var $arrayidx63=(($83+($82<<5))|0);
      var $detect_collisions64=(($arrayidx63+20)|0);
      var $84=HEAP32[(($detect_collisions64)>>2)];
      var $tobool65=(($84)|0)!=0;
      if ($tobool65) { __label__ = 24; break; } else { __label__ = 23; break; }
    case 23: 
      __label__ = 29; break;
    case 24: 
      var $85=$render_priv_addr;
      var $86=$i;
      var $87=$imgs_addr;
      var $arrayidx68=(($87+($86<<5))|0);
      var $event69=(($arrayidx68+28)|0);
      var $88=HEAP32[(($event69)>>2)];
      var $call70=_get_render_priv($85, $88);
      $priv62=$call70;
      var $89=$priv62;
      var $height71=(($89+4)|0);
      var $90=HEAP32[(($height71)>>2)];
      var $cmp72=(($90)|0)==0;
      if ($cmp72) { __label__ = 25; break; } else { __label__ = 28; break; }
    case 25: 
      var $91=$i;
      var $92=$imgs_addr;
      var $arrayidx75=(($92+($91<<5))|0);
      var $top76=(($arrayidx75+4)|0);
      var $93=HEAP32[(($top76)>>2)];
      var $a77=(($s74)|0);
      HEAP32[(($a77)>>2)]=$93;
      var $94=$i;
      var $95=$imgs_addr;
      var $arrayidx78=(($95+($94<<5))|0);
      var $top79=(($arrayidx78+4)|0);
      var $96=HEAP32[(($top79)>>2)];
      var $97=$i;
      var $98=$imgs_addr;
      var $arrayidx80=(($98+($97<<5))|0);
      var $height81=(($arrayidx80+8)|0);
      var $99=HEAP32[(($height81)>>2)];
      var $add82=((($96)+($99))|0);
      var $b83=(($s74+4)|0);
      HEAP32[(($b83)>>2)]=$add82;
      var $100=$i;
      var $101=$imgs_addr;
      var $arrayidx84=(($101+($100<<5))|0);
      var $left85=(($arrayidx84+12)|0);
      var $102=HEAP32[(($left85)>>2)];
      var $ha86=(($s74+8)|0);
      HEAP32[(($ha86)>>2)]=$102;
      var $103=$i;
      var $104=$imgs_addr;
      var $arrayidx87=(($104+($103<<5))|0);
      var $left88=(($arrayidx87+12)|0);
      var $105=HEAP32[(($left88)>>2)];
      var $106=$i;
      var $107=$imgs_addr;
      var $arrayidx89=(($107+($106<<5))|0);
      var $width90=(($arrayidx89+16)|0);
      var $108=HEAP32[(($width90)>>2)];
      var $add91=((($105)+($108))|0);
      var $hb92=(($s74+12)|0);
      HEAP32[(($hb92)>>2)]=$add91;
      var $109=$used;
      var $110=$i;
      var $111=$imgs_addr;
      var $arrayidx93=(($111+($110<<5))|0);
      var $shift_direction=(($arrayidx93+24)|0);
      var $112=HEAP32[(($shift_direction)>>2)];
      var $call94=_fit_segment($s74, $109, $cnt_used, $112);
      $shift=$call94;
      var $113=$shift;
      var $tobool95=(($113)|0)!=0;
      if ($tobool95) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $114=$render_priv_addr;
      var $115=$imgs_addr;
      var $116=$i;
      var $add_ptr97=(($115+($116<<5))|0);
      var $117=$shift;
      _shift_event($114, $add_ptr97, $117);
      __label__ = 27; break;
    case 27: 
      var $118=$i;
      var $119=$imgs_addr;
      var $arrayidx99=(($119+($118<<5))|0);
      var $top100=(($arrayidx99+4)|0);
      var $120=HEAP32[(($top100)>>2)];
      var $121=$priv62;
      var $top101=(($121)|0);
      HEAP32[(($top101)>>2)]=$120;
      var $122=$i;
      var $123=$imgs_addr;
      var $arrayidx102=(($123+($122<<5))|0);
      var $height103=(($arrayidx102+8)|0);
      var $124=HEAP32[(($height103)>>2)];
      var $125=$priv62;
      var $height104=(($125+4)|0);
      HEAP32[(($height104)>>2)]=$124;
      var $126=$i;
      var $127=$imgs_addr;
      var $arrayidx105=(($127+($126<<5))|0);
      var $left106=(($arrayidx105+12)|0);
      var $128=HEAP32[(($left106)>>2)];
      var $129=$priv62;
      var $left107=(($129+8)|0);
      HEAP32[(($left107)>>2)]=$128;
      var $130=$i;
      var $131=$imgs_addr;
      var $arrayidx108=(($131+($130<<5))|0);
      var $width109=(($arrayidx108+16)|0);
      var $132=HEAP32[(($width109)>>2)];
      var $133=$priv62;
      var $width110=(($133+12)|0);
      HEAP32[(($width110)>>2)]=$132;
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $134=$i;
      var $inc113=((($134)+(1))|0);
      $i=$inc113;
      __label__ = 21; break;
    case 30: 
      var $135=$used;
      var $136=$135;
      _free($136);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_fix_collisions["X"]=1;

function _ass_detect_change($priv) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $priv_addr;
      var $img;
      var $img2;
      var $diff;
      var $next;
      var $next2;
      var $d;
      $priv_addr=$priv;
      var $0=$priv_addr;
      var $prev_images_root=(($0+104)|0);
      var $1=HEAP32[(($prev_images_root)>>2)];
      $img=$1;
      var $2=$priv_addr;
      var $images_root=(($2+100)|0);
      var $3=HEAP32[(($images_root)>>2)];
      $img2=$3;
      $diff=0;
      __label__ = 3; break;
    case 3: 
      var $4=$img;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { var $6 = 0;__label__ = 5; break; }
    case 4: 
      var $5=$diff;
      var $cmp=(($5)|0) < 2;
      var $6 = $cmp;__label__ = 5; break;
    case 5: 
      var $6;
      if ($6) { __label__ = 6; break; } else { __label__ = 12; break; }
    case 6: 
      var $7=$img;
      var $next1=(($7+28)|0);
      var $8=HEAP32[(($next1)>>2)];
      $next=$8;
      var $9=$img2;
      var $tobool2=(($9)|0)!=0;
      if ($tobool2) { __label__ = 7; break; } else { __label__ = 10; break; }
    case 7: 
      var $10=$img;
      var $11=$img2;
      var $call=_ass_image_compare($10, $11);
      $d=$call;
      var $12=$d;
      var $13=$diff;
      var $cmp3=(($12)|0) > (($13)|0);
      if ($cmp3) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $14=$d;
      $diff=$14;
      __label__ = 9; break;
    case 9: 
      var $15=$img2;
      var $next5=(($15+28)|0);
      var $16=HEAP32[(($next5)>>2)];
      $next2=$16;
      __label__ = 11; break;
    case 10: 
      $diff=2;
      __label__ = 12; break;
    case 11: 
      var $17=$next;
      $img=$17;
      var $18=$next2;
      $img2=$18;
      __label__ = 3; break;
    case 12: 
      var $19=$img2;
      var $tobool7=(($19)|0)!=0;
      if ($tobool7) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      $diff=2;
      __label__ = 14; break;
    case 14: 
      var $20=$diff;
      ;
      return $20;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_detect_change["X"]=1;

function _get_render_priv($render_priv, $event) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      var $event_addr;
      $render_priv_addr=$render_priv;
      $event_addr=$event;
      var $0=$event_addr;
      var $render_priv1=(($0+52)|0);
      var $1=HEAP32[(($render_priv1)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $call=_calloc(1, 20);
      var $2=$call;
      var $3=$event_addr;
      var $render_priv2=(($3+52)|0);
      HEAP32[(($render_priv2)>>2)]=$2;
      __label__ = 4; break;
    case 4: 
      var $4=$render_priv_addr;
      var $render_id=(($4+88)|0);
      var $5=HEAP32[(($render_id)>>2)];
      var $6=$event_addr;
      var $render_priv3=(($6+52)|0);
      var $7=HEAP32[(($render_priv3)>>2)];
      var $render_id4=(($7+16)|0);
      var $8=HEAP32[(($render_id4)>>2)];
      var $cmp=(($5)|0)!=(($8)|0);
      if ($cmp) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $9=$event_addr;
      var $render_priv6=(($9+52)|0);
      var $10=HEAP32[(($render_priv6)>>2)];
      var $11=$10;
      HEAP32[(($11)>>2)]=0; HEAP32[((($11)+(4))>>2)]=0; HEAP32[((($11)+(8))>>2)]=0; HEAP32[((($11)+(12))>>2)]=0; HEAP32[((($11)+(16))>>2)]=0;
      var $12=$render_priv_addr;
      var $render_id7=(($12+88)|0);
      var $13=HEAP32[(($render_id7)>>2)];
      var $14=$event_addr;
      var $render_priv8=(($14+52)|0);
      var $15=HEAP32[(($render_priv8)>>2)];
      var $render_id9=(($15+16)|0);
      HEAP32[(($render_id9)>>2)]=$13;
      __label__ = 6; break;
    case 6: 
      var $16=$event_addr;
      var $render_priv11=(($16+52)|0);
      var $17=HEAP32[(($render_priv11)>>2)];
      ;
      return $17;
    default: assert(0, "bad label: " + __label__);
  }
}


function _double_to_d6169($x) {
  ;
  var __label__;

  var $x_addr;
  $x_addr=$x;
  var $0=$x_addr;
  var $mul=($0)*(64);
  var $conv=(($mul)&-1);
  ;
  return $conv;
}


function _fit_segment($s, $fixed, $cnt, $dir) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $s_addr;
      var $fixed_addr;
      var $cnt_addr;
      var $dir_addr;
      var $i;
      var $shift;
      $s_addr=$s;
      $fixed_addr=$fixed;
      $cnt_addr=$cnt;
      $dir_addr=$dir;
      $shift=0;
      var $0=$dir_addr;
      var $cmp=(($0)|0)==1;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 13; break; }
    case 3: 
      $i=0;
      __label__ = 4; break;
    case 4: 
      var $1=$i;
      var $2=$cnt_addr;
      var $3=HEAP32[(($2)>>2)];
      var $cmp1=(($1)|0) < (($3)|0);
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 12; break; }
    case 5: 
      var $4=$s_addr;
      var $b=(($4+4)|0);
      var $5=HEAP32[(($b)>>2)];
      var $6=$shift;
      var $add=((($5)+($6))|0);
      var $7=$i;
      var $8=$fixed_addr;
      var $arrayidx=(($8+($7<<4))|0);
      var $a=(($arrayidx)|0);
      var $9=HEAP32[(($a)>>2)];
      var $cmp2=(($add)|0) <= (($9)|0);
      if ($cmp2) { __label__ = 9; break; } else { __label__ = 6; break; }
    case 6: 
      var $10=$s_addr;
      var $a3=(($10)|0);
      var $11=HEAP32[(($a3)>>2)];
      var $12=$shift;
      var $add4=((($11)+($12))|0);
      var $13=$i;
      var $14=$fixed_addr;
      var $arrayidx5=(($14+($13<<4))|0);
      var $b6=(($arrayidx5+4)|0);
      var $15=HEAP32[(($b6)>>2)];
      var $cmp7=(($add4)|0) >= (($15)|0);
      if ($cmp7) { __label__ = 9; break; } else { __label__ = 7; break; }
    case 7: 
      var $16=$s_addr;
      var $hb=(($16+12)|0);
      var $17=HEAP32[(($hb)>>2)];
      var $18=$i;
      var $19=$fixed_addr;
      var $arrayidx9=(($19+($18<<4))|0);
      var $ha=(($arrayidx9+8)|0);
      var $20=HEAP32[(($ha)>>2)];
      var $cmp10=(($17)|0) <= (($20)|0);
      if ($cmp10) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $21=$s_addr;
      var $ha12=(($21+8)|0);
      var $22=HEAP32[(($ha12)>>2)];
      var $23=$i;
      var $24=$fixed_addr;
      var $arrayidx13=(($24+($23<<4))|0);
      var $hb14=(($arrayidx13+12)|0);
      var $25=HEAP32[(($hb14)>>2)];
      var $cmp15=(($22)|0) >= (($25)|0);
      if ($cmp15) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      __label__ = 11; break;
    case 10: 
      var $26=$i;
      var $27=$fixed_addr;
      var $arrayidx17=(($27+($26<<4))|0);
      var $b18=(($arrayidx17+4)|0);
      var $28=HEAP32[(($b18)>>2)];
      var $29=$s_addr;
      var $a19=(($29)|0);
      var $30=HEAP32[(($a19)>>2)];
      var $sub=((($28)-($30))|0);
      $shift=$sub;
      __label__ = 11; break;
    case 11: 
      var $31=$i;
      var $inc=((($31)+(1))|0);
      $i=$inc;
      __label__ = 4; break;
    case 12: 
      __label__ = 23; break;
    case 13: 
      var $32=$cnt_addr;
      var $33=HEAP32[(($32)>>2)];
      var $sub20=((($33)-(1))|0);
      $i=$sub20;
      __label__ = 14; break;
    case 14: 
      var $34=$i;
      var $cmp22=(($34)|0) >= 0;
      if ($cmp22) { __label__ = 15; break; } else { __label__ = 22; break; }
    case 15: 
      var $35=$s_addr;
      var $b24=(($35+4)|0);
      var $36=HEAP32[(($b24)>>2)];
      var $37=$shift;
      var $add25=((($36)+($37))|0);
      var $38=$i;
      var $39=$fixed_addr;
      var $arrayidx26=(($39+($38<<4))|0);
      var $a27=(($arrayidx26)|0);
      var $40=HEAP32[(($a27)>>2)];
      var $cmp28=(($add25)|0) <= (($40)|0);
      if ($cmp28) { __label__ = 19; break; } else { __label__ = 16; break; }
    case 16: 
      var $41=$s_addr;
      var $a30=(($41)|0);
      var $42=HEAP32[(($a30)>>2)];
      var $43=$shift;
      var $add31=((($42)+($43))|0);
      var $44=$i;
      var $45=$fixed_addr;
      var $arrayidx32=(($45+($44<<4))|0);
      var $b33=(($arrayidx32+4)|0);
      var $46=HEAP32[(($b33)>>2)];
      var $cmp34=(($add31)|0) >= (($46)|0);
      if ($cmp34) { __label__ = 19; break; } else { __label__ = 17; break; }
    case 17: 
      var $47=$s_addr;
      var $hb36=(($47+12)|0);
      var $48=HEAP32[(($hb36)>>2)];
      var $49=$i;
      var $50=$fixed_addr;
      var $arrayidx37=(($50+($49<<4))|0);
      var $ha38=(($arrayidx37+8)|0);
      var $51=HEAP32[(($ha38)>>2)];
      var $cmp39=(($48)|0) <= (($51)|0);
      if ($cmp39) { __label__ = 19; break; } else { __label__ = 18; break; }
    case 18: 
      var $52=$s_addr;
      var $ha41=(($52+8)|0);
      var $53=HEAP32[(($ha41)>>2)];
      var $54=$i;
      var $55=$fixed_addr;
      var $arrayidx42=(($55+($54<<4))|0);
      var $hb43=(($arrayidx42+12)|0);
      var $56=HEAP32[(($hb43)>>2)];
      var $cmp44=(($53)|0) >= (($56)|0);
      if ($cmp44) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      __label__ = 21; break;
    case 20: 
      var $57=$i;
      var $58=$fixed_addr;
      var $arrayidx47=(($58+($57<<4))|0);
      var $a48=(($arrayidx47)|0);
      var $59=HEAP32[(($a48)>>2)];
      var $60=$s_addr;
      var $b49=(($60+4)|0);
      var $61=HEAP32[(($b49)>>2)];
      var $sub50=((($59)-($61))|0);
      $shift=$sub50;
      __label__ = 21; break;
    case 21: 
      var $62=$i;
      var $dec=((($62)-(1))|0);
      $i=$dec;
      __label__ = 14; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $63=$s_addr;
      var $a54=(($63)|0);
      var $64=HEAP32[(($a54)>>2)];
      var $65=$shift;
      var $add55=((($64)+($65))|0);
      var $66=$cnt_addr;
      var $67=HEAP32[(($66)>>2)];
      var $68=$fixed_addr;
      var $arrayidx56=(($68+($67<<4))|0);
      var $a57=(($arrayidx56)|0);
      HEAP32[(($a57)>>2)]=$add55;
      var $69=$s_addr;
      var $b58=(($69+4)|0);
      var $70=HEAP32[(($b58)>>2)];
      var $71=$shift;
      var $add59=((($70)+($71))|0);
      var $72=$cnt_addr;
      var $73=HEAP32[(($72)>>2)];
      var $74=$fixed_addr;
      var $arrayidx60=(($74+($73<<4))|0);
      var $b61=(($arrayidx60+4)|0);
      HEAP32[(($b61)>>2)]=$add59;
      var $75=$s_addr;
      var $ha62=(($75+8)|0);
      var $76=HEAP32[(($ha62)>>2)];
      var $77=$cnt_addr;
      var $78=HEAP32[(($77)>>2)];
      var $79=$fixed_addr;
      var $arrayidx63=(($79+($78<<4))|0);
      var $ha64=(($arrayidx63+8)|0);
      HEAP32[(($ha64)>>2)]=$76;
      var $80=$s_addr;
      var $hb65=(($80+12)|0);
      var $81=HEAP32[(($hb65)>>2)];
      var $82=$cnt_addr;
      var $83=HEAP32[(($82)>>2)];
      var $84=$fixed_addr;
      var $arrayidx66=(($84+($83<<4))|0);
      var $hb67=(($arrayidx66+12)|0);
      HEAP32[(($hb67)>>2)]=$81;
      var $85=$cnt_addr;
      var $86=HEAP32[(($85)>>2)];
      var $inc68=((($86)+(1))|0);
      HEAP32[(($85)>>2)]=$inc68;
      var $87=$fixed_addr;
      var $88=$87;
      var $89=$cnt_addr;
      var $90=HEAP32[(($89)>>2)];
      _qsort($88, $90, 16, 40);
      var $91=$shift;
      ;
      return $91;
    default: assert(0, "bad label: " + __label__);
  }
}
_fit_segment["X"]=1;

function _init_render_context($render_priv, $event) {
  ;
  var __label__;

  var $render_priv_addr;
  var $event_addr;
  $render_priv_addr=$render_priv;
  $event_addr=$event;
  var $0=$event_addr;
  var $1=$render_priv_addr;
  var $state=(($1+176)|0);
  var $event1=(($state)|0);
  HEAP32[(($event1)>>2)]=$0;
  var $2=$render_priv_addr;
  var $track=(($2+140)|0);
  var $3=HEAP32[(($track)>>2)];
  var $styles=(($3+16)|0);
  var $4=HEAP32[(($styles)>>2)];
  var $5=$event_addr;
  var $Style=(($5+24)|0);
  var $6=HEAP32[(($Style)>>2)];
  var $add_ptr=(($4+($6)*(120))|0);
  var $7=$render_priv_addr;
  var $state2=(($7+176)|0);
  var $style=(($state2+4)|0);
  HEAP32[(($style)>>2)]=$add_ptr;
  var $8=$render_priv_addr;
  var $state3=(($8+176)|0);
  var $parsed_tags=(($state3+8)|0);
  HEAP32[(($parsed_tags)>>2)]=0;
  var $9=$render_priv_addr;
  _reset_render_context($9);
  var $10=$render_priv_addr;
  var $state4=(($10+176)|0);
  var $evt_type=(($state4+76)|0);
  HEAP32[(($evt_type)>>2)]=0;
  var $11=$render_priv_addr;
  var $state5=(($11+176)|0);
  var $style6=(($state5+4)|0);
  var $12=HEAP32[(($style6)>>2)];
  var $Alignment=(($12+96)|0);
  var $13=HEAP32[(($Alignment)>>2)];
  var $14=$render_priv_addr;
  var $state7=(($14+176)|0);
  var $alignment=(($state7+32)|0);
  HEAP32[(($alignment)>>2)]=$13;
  var $15=$render_priv_addr;
  var $state8=(($15+176)|0);
  var $pos_x=(($state8+80)|0);
  (tempDoubleF64[0]=0,HEAP32[(($pos_x)>>2)]=tempDoubleI32[0],HEAP32[((($pos_x)+(4))>>2)]=tempDoubleI32[1]);
  var $16=$render_priv_addr;
  var $state9=(($16+176)|0);
  var $pos_y=(($state9+88)|0);
  (tempDoubleF64[0]=0,HEAP32[(($pos_y)>>2)]=tempDoubleI32[0],HEAP32[((($pos_y)+(4))>>2)]=tempDoubleI32[1]);
  var $17=$render_priv_addr;
  var $state10=(($17+176)|0);
  var $org_x=(($state10+96)|0);
  (tempDoubleF64[0]=0,HEAP32[(($org_x)>>2)]=tempDoubleI32[0],HEAP32[((($org_x)+(4))>>2)]=tempDoubleI32[1]);
  var $18=$render_priv_addr;
  var $state11=(($18+176)|0);
  var $org_y=(($state11+104)|0);
  (tempDoubleF64[0]=0,HEAP32[(($org_y)>>2)]=tempDoubleI32[0],HEAP32[((($org_y)+(4))>>2)]=tempDoubleI32[1]);
  var $19=$render_priv_addr;
  var $state12=(($19+176)|0);
  var $have_origin=(($state12+112)|0);
  HEAP8[($have_origin)]=0;
  var $20=$render_priv_addr;
  var $state13=(($20+176)|0);
  var $clip_x0=(($state13+172)|0);
  HEAP32[(($clip_x0)>>2)]=0;
  var $21=$render_priv_addr;
  var $state14=(($21+176)|0);
  var $clip_y0=(($state14+176)|0);
  HEAP32[(($clip_y0)>>2)]=0;
  var $22=$render_priv_addr;
  var $track15=(($22+140)|0);
  var $23=HEAP32[(($track15)>>2)];
  var $PlayResX=(($23+36)|0);
  var $24=HEAP32[(($PlayResX)>>2)];
  var $25=$render_priv_addr;
  var $state16=(($25+176)|0);
  var $clip_x1=(($state16+180)|0);
  HEAP32[(($clip_x1)>>2)]=$24;
  var $26=$render_priv_addr;
  var $track17=(($26+140)|0);
  var $27=HEAP32[(($track17)>>2)];
  var $PlayResY=(($27+40)|0);
  var $28=HEAP32[(($PlayResY)>>2)];
  var $29=$render_priv_addr;
  var $state18=(($29+176)|0);
  var $clip_y1=(($state18+184)|0);
  HEAP32[(($clip_y1)>>2)]=$28;
  var $30=$render_priv_addr;
  var $state19=(($30+176)|0);
  var $clip_mode=(($state19+188)|0);
  HEAP8[($clip_mode)]=0;
  var $31=$render_priv_addr;
  var $state20=(($31+176)|0);
  var $detect_collisions=(($state20+189)|0);
  HEAP8[($detect_collisions)]=1;
  var $32=$render_priv_addr;
  var $state21=(($32+176)|0);
  var $fade=(($state21+192)|0);
  HEAP32[(($fade)>>2)]=0;
  var $33=$render_priv_addr;
  var $state22=(($33+176)|0);
  var $drawing_mode=(($state22+224)|0);
  HEAP32[(($drawing_mode)>>2)]=0;
  var $34=$render_priv_addr;
  var $state23=(($34+176)|0);
  var $effect_type=(($state23+240)|0);
  HEAP32[(($effect_type)>>2)]=0;
  var $35=$render_priv_addr;
  var $state24=(($35+176)|0);
  var $effect_timing=(($state24+244)|0);
  HEAP32[(($effect_timing)>>2)]=0;
  var $36=$render_priv_addr;
  var $state25=(($36+176)|0);
  var $effect_skip_timing=(($state25+248)|0);
  HEAP32[(($effect_skip_timing)>>2)]=0;
  var $37=$render_priv_addr;
  var $state26=(($37+176)|0);
  var $bm_run_id=(($state26+252)|0);
  HEAP32[(($bm_run_id)>>2)]=0;
  var $38=$render_priv_addr;
  var $state27=(($38+176)|0);
  var $drawing=(($state27+228)|0);
  var $39=HEAP32[(($drawing)>>2)];
  _ass_drawing_free($39);
  var $40=$render_priv_addr;
  var $library=(($40)|0);
  var $41=HEAP32[(($library)>>2)];
  var $42=$render_priv_addr;
  var $ftlibrary=(($42+4)|0);
  var $43=HEAP32[(($ftlibrary)>>2)];
  var $call=_ass_drawing_new($41, $43);
  var $44=$render_priv_addr;
  var $state28=(($44+176)|0);
  var $drawing29=(($state28+228)|0);
  HEAP32[(($drawing29)>>2)]=$call;
  var $45=$render_priv_addr;
  var $46=$event_addr;
  _apply_transition_effects($45, $46);
  ;
  return;
}
_init_render_context["X"]=1;

function _free_render_context($render_priv) {
  ;
  var __label__;

  var $render_priv_addr;
  $render_priv_addr=$render_priv;
  var $0=$render_priv_addr;
  var $state=(($0+176)|0);
  var $family=(($state+264)|0);
  var $1=HEAP32[(($family)>>2)];
  _free($1);
  var $2=$render_priv_addr;
  var $state1=(($2+176)|0);
  var $drawing=(($state1+228)|0);
  var $3=HEAP32[(($drawing)>>2)];
  _ass_drawing_free($3);
  var $4=$render_priv_addr;
  var $state2=(($4+176)|0);
  var $family3=(($state2+264)|0);
  HEAP32[(($family3)>>2)]=0;
  var $5=$render_priv_addr;
  var $state4=(($5+176)|0);
  var $drawing5=(($state4+228)|0);
  HEAP32[(($drawing5)>>2)]=0;
  ;
  return;
}


function _get_outline_glyph($priv, $info) {
  var __stackBase__  = STACKTOP; STACKTOP += 108; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $priv_addr;
      var $info_addr;
      var $val;
      var $key=__stackBase__;
      var $v=(__stackBase__)+(56);
      var $drawing3;
      var $glyph;
      var $advance67=(__stackBase__)+(100);
      $priv_addr=$priv;
      $info_addr=$info;
      var $0=$info_addr;
      var $hash_key=(($0+260)|0);
      var $1=$hash_key;
      for (var $$dest = $1>>2, $$stop = $$dest + 14; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $2=$priv_addr;
      var $3=$info_addr;
      _fill_glyph_hash($2, $key, $3);
      var $4=$priv_addr;
      var $cache=(($4+496)|0);
      var $outline_cache=(($cache+4)|0);
      var $5=HEAP32[(($outline_cache)>>2)];
      var $6=$key;
      var $call=_ass_cache_get($5, $6);
      var $7=$call;
      $val=$7;
      var $8=$val;
      var $tobool=(($8)|0)!=0;
      if ($tobool) { __label__ = 29; break; } else { __label__ = 3; break; }
    case 3: 
      var $9=$v;
      for (var $$dest = $9>>2, $$stop = $$dest + 11; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $10=$info_addr;
      var $drawing=(($10+28)|0);
      var $11=HEAP32[(($drawing)>>2)];
      var $tobool1=(($11)|0)!=0;
      if ($tobool1) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $12=$info_addr;
      var $drawing4=(($12+28)|0);
      var $13=HEAP32[(($drawing4)>>2)];
      $drawing3=$13;
      var $14=$drawing3;
      _ass_drawing_hash($14);
      var $15=$drawing3;
      var $call5=_ass_drawing_parse($15, 0);
      var $tobool6=(($call5)|0)!=0;
      if ($tobool6) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      __label__ = 33; break;
    case 6: 
      var $16=$priv_addr;
      var $ftlibrary=(($16+4)|0);
      var $17=HEAP32[(($ftlibrary)>>2)];
      var $18=$drawing3;
      var $outline=(($18+44)|0);
      var $outline8=(($v+4)|0);
      _outline_copy($17, $outline, $outline8);
      var $19=$drawing3;
      var $advance=(($19+64)|0);
      var $x=(($advance)|0);
      var $20=HEAP32[(($x)>>2)];
      var $advance9=(($v+28)|0);
      var $x10=(($advance9)|0);
      HEAP32[(($x10)>>2)]=$20;
      var $21=$drawing3;
      var $advance11=(($21+64)|0);
      var $y=(($advance11+4)|0);
      var $22=HEAP32[(($y)>>2)];
      var $advance12=(($v+28)|0);
      var $y13=(($advance12+4)|0);
      HEAP32[(($y13)>>2)]=$22;
      var $23=$drawing3;
      var $asc=(($23+36)|0);
      var $24=HEAP32[(($asc)>>2)];
      var $asc14=(($v+36)|0);
      HEAP32[(($asc14)>>2)]=$24;
      var $25=$drawing3;
      var $desc=(($25+40)|0);
      var $26=HEAP32[(($desc)>>2)];
      var $desc15=(($v+40)|0);
      HEAP32[(($desc15)>>2)]=$26;
      var $27=$drawing3;
      var $text=(($27)|0);
      var $28=HEAP32[(($text)>>2)];
      var $call16=_strdup($28);
      var $u=(($key+4)|0);
      var $drawing17=$u;
      var $text18=(($drawing17+32)|0);
      HEAP32[(($text18)>>2)]=$call16;
      __label__ = 12; break;
    case 7: 
      var $29=$info_addr;
      var $face_index=(($29+12)|0);
      var $30=HEAP32[(($face_index)>>2)];
      var $31=$info_addr;
      var $font=(($31+8)|0);
      var $32=HEAP32[(($font)>>2)];
      var $faces=(($32+28)|0);
      var $arrayidx=(($faces+($30<<2))|0);
      var $33=HEAP32[(($arrayidx)>>2)];
      var $34=$info_addr;
      var $font_size=(($34+20)|0);
      var $35=(tempDoubleI32[0]=HEAP32[(($font_size)>>2)],tempDoubleI32[1]=HEAP32[((($font_size)+(4))>>2)],tempDoubleF64[0]);
      _ass_face_set_size($33, $35);
      var $36=$info_addr;
      var $font19=(($36+8)|0);
      var $37=HEAP32[(($font19)>>2)];
      var $38=$info_addr;
      var $scale_x=(($38+208)|0);
      var $39=(tempDoubleI32[0]=HEAP32[(($scale_x)>>2)],tempDoubleI32[1]=HEAP32[((($scale_x)+(4))>>2)],tempDoubleF64[0]);
      var $40=$info_addr;
      var $scale_y=(($40+216)|0);
      var $41=(tempDoubleI32[0]=HEAP32[(($scale_y)>>2)],tempDoubleI32[1]=HEAP32[((($scale_y)+(4))>>2)],tempDoubleF64[0]);
      _ass_font_set_transform($37, $39, $41, 0);
      var $42=$priv_addr;
      var $fontconfig_priv=(($42+8)|0);
      var $43=HEAP32[(($fontconfig_priv)>>2)];
      var $44=$43;
      var $45=$info_addr;
      var $font20=(($45+8)|0);
      var $46=HEAP32[(($font20)>>2)];
      var $47=$info_addr;
      var $symbol=(($47)|0);
      var $48=HEAP32[(($symbol)>>2)];
      var $49=$info_addr;
      var $face_index21=(($49+12)|0);
      var $50=HEAP32[(($face_index21)>>2)];
      var $51=$info_addr;
      var $glyph_index=(($51+16)|0);
      var $52=HEAP32[(($glyph_index)>>2)];
      var $53=$priv_addr;
      var $settings=(($53+12)|0);
      var $hinting=(($settings+60)|0);
      var $54=HEAP32[(($hinting)>>2)];
      var $55=$info_addr;
      var $flags=(($55+248)|0);
      var $56=HEAP32[(($flags)>>2)];
      var $call22=_ass_font_get_glyph($44, $46, $48, $50, $52, $54, $56);
      $glyph=$call22;
      var $57=$glyph;
      var $cmp=(($57)|0)!=0;
      if ($cmp) { __label__ = 8; break; } else { __label__ = 11; break; }
    case 8: 
      var $58=$priv_addr;
      var $ftlibrary24=(($58+4)|0);
      var $59=HEAP32[(($ftlibrary24)>>2)];
      var $60=$glyph;
      var $61=$60;
      var $outline25=(($61+20)|0);
      var $outline26=(($v+4)|0);
      _outline_copy($59, $outline25, $outline26);
      var $62=$priv_addr;
      var $settings27=(($62+12)|0);
      var $shaper=(($settings27+64)|0);
      var $63=HEAP32[(($shaper)>>2)];
      var $cmp28=(($63)|0)==0;
      if ($cmp28) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $64=$glyph;
      var $advance30=(($64+12)|0);
      var $x31=(($advance30)|0);
      var $65=HEAP32[(($x31)>>2)];
      var $call32=_d16_to_d6171($65);
      var $advance33=(($v+28)|0);
      var $x34=(($advance33)|0);
      HEAP32[(($x34)>>2)]=$call32;
      var $66=$glyph;
      var $advance35=(($66+12)|0);
      var $y36=(($advance35+4)|0);
      var $67=HEAP32[(($y36)>>2)];
      var $call37=_d16_to_d6171($67);
      var $advance38=(($v+28)|0);
      var $y39=(($advance38+4)|0);
      HEAP32[(($y39)>>2)]=$call37;
      __label__ = 10; break;
    case 10: 
      var $68=$glyph;
      _FT_Done_Glyph($68);
      var $69=$info_addr;
      var $font41=(($69+8)|0);
      var $70=HEAP32[(($font41)>>2)];
      var $71=$info_addr;
      var $symbol42=(($71)|0);
      var $72=HEAP32[(($symbol42)>>2)];
      var $asc43=(($v+36)|0);
      var $desc44=(($v+40)|0);
      _ass_font_get_asc_desc($70, $72, $asc43, $desc44);
      var $73=$info_addr;
      var $scale_y45=(($73+216)|0);
      var $74=(tempDoubleI32[0]=HEAP32[(($scale_y45)>>2)],tempDoubleI32[1]=HEAP32[((($scale_y45)+(4))>>2)],tempDoubleF64[0]);
      var $asc46=(($v+36)|0);
      var $75=HEAP32[(($asc46)>>2)];
      var $conv=(($75)|0);
      var $mul=($conv)*($74);
      var $conv47=(($mul)&-1);
      HEAP32[(($asc46)>>2)]=$conv47;
      var $76=$info_addr;
      var $scale_y48=(($76+216)|0);
      var $77=(tempDoubleI32[0]=HEAP32[(($scale_y48)>>2)],tempDoubleI32[1]=HEAP32[((($scale_y48)+(4))>>2)],tempDoubleF64[0]);
      var $desc49=(($v+40)|0);
      var $78=HEAP32[(($desc49)>>2)];
      var $conv50=(($78)|0);
      var $mul51=($conv50)*($77);
      var $conv52=(($mul51)&-1);
      HEAP32[(($desc49)>>2)]=$conv52;
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $outline55=(($v+4)|0);
      var $79=HEAP32[(($outline55)>>2)];
      var $tobool56=(($79)|0)!=0;
      if ($tobool56) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: 
      __label__ = 33; break;
    case 14: 
      var $outline59=(($v+4)|0);
      var $80=HEAP32[(($outline59)>>2)];
      var $bbox_scaled=(($v+12)|0);
      _FT_Outline_Get_CBox($80, $bbox_scaled);
      var $81=$priv_addr;
      var $state=(($81+176)|0);
      var $style=(($state+4)|0);
      var $82=HEAP32[(($style)>>2)];
      var $BorderStyle=(($82+76)|0);
      var $83=HEAP32[(($BorderStyle)>>2)];
      var $cmp60=(($83)|0)==3;
      if ($cmp60) { __label__ = 15; break; } else { __label__ = 22; break; }
    case 15: 
      var $84=$info_addr;
      var $border_x=(($84+224)|0);
      var $85=(tempDoubleI32[0]=HEAP32[(($border_x)>>2)],tempDoubleI32[1]=HEAP32[((($border_x)+(4))>>2)],tempDoubleF64[0]);
      var $cmp62=$85 > 0;
      if ($cmp62) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      var $86=$info_addr;
      var $border_y=(($86+232)|0);
      var $87=(tempDoubleI32[0]=HEAP32[(($border_y)>>2)],tempDoubleI32[1]=HEAP32[((($border_y)+(4))>>2)],tempDoubleF64[0]);
      var $cmp64=$87 > 0;
      if ($cmp64) { __label__ = 17; break; } else { __label__ = 22; break; }
    case 17: 
      var $call68=_calloc(1, 20);
      var $88=$call68;
      var $border=(($v+8)|0);
      HEAP32[(($border)>>2)]=$88;
      var $89=$priv_addr;
      var $settings69=(($89+12)|0);
      var $shaper70=(($settings69+64)|0);
      var $90=HEAP32[(($shaper70)>>2)];
      var $cmp71=(($90)|0)==0;
      if ($cmp71) { __label__ = 19; break; } else { __label__ = 18; break; }
    case 18: 
      var $91=$info_addr;
      var $drawing74=(($91+28)|0);
      var $92=HEAP32[(($drawing74)>>2)];
      var $tobool75=(($92)|0)!=0;
      if ($tobool75) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $advance77=(($v+28)|0);
      var $93=$advance67;
      var $94=$advance77;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($93)>>2)]=HEAP32[(($94)>>2)];HEAP32[((($93)+(4))>>2)]=HEAP32[((($94)+(4))>>2)];
      __label__ = 21; break;
    case 20: 
      var $95=$info_addr;
      var $advance79=(($95+104)|0);
      var $96=$advance67;
      var $97=$advance79;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($96)>>2)]=HEAP32[(($97)>>2)];HEAP32[((($96)+(4))>>2)]=HEAP32[((($97)+(4))>>2)];
      __label__ = 21; break;
    case 21: 
      var $98=$priv_addr;
      var $asc81=(($v+36)|0);
      var $99=HEAP32[(($asc81)>>2)];
      var $desc82=(($v+40)|0);
      var $100=HEAP32[(($desc82)>>2)];
      var $border83=(($v+8)|0);
      var $101=HEAP32[(($border83)>>2)];
      var $102=$info_addr;
      var $border_x84=(($102+224)|0);
      var $103=(tempDoubleI32[0]=HEAP32[(($border_x84)>>2)],tempDoubleI32[1]=HEAP32[((($border_x84)+(4))>>2)],tempDoubleF64[0]);
      var $104=$priv_addr;
      var $border_scale=(($104+168)|0);
      var $105=(tempDoubleI32[0]=HEAP32[(($border_scale)>>2)],tempDoubleI32[1]=HEAP32[((($border_scale)+(4))>>2)],tempDoubleF64[0]);
      var $mul85=($103)*($105);
      var $call86=_double_to_d6169($mul85);
      var $106=$info_addr;
      var $border_y87=(($106+232)|0);
      var $107=(tempDoubleI32[0]=HEAP32[(($border_y87)>>2)],tempDoubleI32[1]=HEAP32[((($border_y87)+(4))>>2)],tempDoubleF64[0]);
      var $108=$priv_addr;
      var $border_scale88=(($108+168)|0);
      var $109=(tempDoubleI32[0]=HEAP32[(($border_scale88)>>2)],tempDoubleI32[1]=HEAP32[((($border_scale88)+(4))>>2)],tempDoubleF64[0]);
      var $mul89=($107)*($109);
      var $call90=_double_to_d6169($mul89);
      var $x91=(($advance67)|0);
      var $110=HEAP32[(($x91)>>2)];
      var $y92=(($advance67+4)|0);
      var $111=HEAP32[(($y92)>>2)];
      _draw_opaque_box($98, $99, $100, $101, $110, $111, $call86, $call90);
      __label__ = 28; break;
    case 22: 
      var $112=$info_addr;
      var $border_x94=(($112+224)|0);
      var $113=(tempDoubleI32[0]=HEAP32[(($border_x94)>>2)],tempDoubleI32[1]=HEAP32[((($border_x94)+(4))>>2)],tempDoubleF64[0]);
      var $cmp95=$113 > 0;
      if ($cmp95) { __label__ = 24; break; } else { __label__ = 23; break; }
    case 23: 
      var $114=$info_addr;
      var $border_y98=(($114+232)|0);
      var $115=(tempDoubleI32[0]=HEAP32[(($border_y98)>>2)],tempDoubleI32[1]=HEAP32[((($border_y98)+(4))>>2)],tempDoubleF64[0]);
      var $cmp99=$115 > 0;
      if ($cmp99) { __label__ = 24; break; } else { __label__ = 27; break; }
    case 24: 
      var $116=$info_addr;
      var $scale_x102=(($116+208)|0);
      var $117=(tempDoubleI32[0]=HEAP32[(($scale_x102)>>2)],tempDoubleI32[1]=HEAP32[((($scale_x102)+(4))>>2)],tempDoubleF64[0]);
      var $call103=_double_to_d6169($117);
      var $tobool104=(($call103)|0)!=0;
      if ($tobool104) { __label__ = 25; break; } else { __label__ = 27; break; }
    case 25: 
      var $118=$info_addr;
      var $scale_y106=(($118+216)|0);
      var $119=(tempDoubleI32[0]=HEAP32[(($scale_y106)>>2)],tempDoubleI32[1]=HEAP32[((($scale_y106)+(4))>>2)],tempDoubleF64[0]);
      var $call107=_double_to_d6169($119);
      var $tobool108=(($call107)|0)!=0;
      if ($tobool108) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $120=$priv_addr;
      var $ftlibrary110=(($120+4)|0);
      var $121=HEAP32[(($ftlibrary110)>>2)];
      var $outline111=(($v+4)|0);
      var $122=HEAP32[(($outline111)>>2)];
      var $border112=(($v+8)|0);
      _outline_copy($121, $122, $border112);
      var $123=$priv_addr;
      var $border113=(($v+8)|0);
      var $124=HEAP32[(($border113)>>2)];
      var $125=$info_addr;
      var $border_x114=(($125+224)|0);
      var $126=(tempDoubleI32[0]=HEAP32[(($border_x114)>>2)],tempDoubleI32[1]=HEAP32[((($border_x114)+(4))>>2)],tempDoubleF64[0]);
      var $127=$priv_addr;
      var $border_scale115=(($127+168)|0);
      var $128=(tempDoubleI32[0]=HEAP32[(($border_scale115)>>2)],tempDoubleI32[1]=HEAP32[((($border_scale115)+(4))>>2)],tempDoubleF64[0]);
      var $mul116=($126)*($128);
      var $call117=_double_to_d6169($mul116);
      var $129=$info_addr;
      var $border_y118=(($129+232)|0);
      var $130=(tempDoubleI32[0]=HEAP32[(($border_y118)>>2)],tempDoubleI32[1]=HEAP32[((($border_y118)+(4))>>2)],tempDoubleF64[0]);
      var $131=$priv_addr;
      var $border_scale119=(($131+168)|0);
      var $132=(tempDoubleI32[0]=HEAP32[(($border_scale119)>>2)],tempDoubleI32[1]=HEAP32[((($border_scale119)+(4))>>2)],tempDoubleF64[0]);
      var $mul120=($130)*($132);
      var $call121=_double_to_d6169($mul120);
      _stroke_outline($123, $124, $call117, $call121);
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      var $133=$priv_addr;
      var $ftlibrary124=(($133+4)|0);
      var $134=HEAP32[(($ftlibrary124)>>2)];
      var $lib=(($v)|0);
      HEAP32[(($lib)>>2)]=$134;
      var $135=$priv_addr;
      var $cache125=(($135+496)|0);
      var $outline_cache126=(($cache125+4)|0);
      var $136=HEAP32[(($outline_cache126)>>2)];
      var $137=$key;
      var $138=$v;
      var $call127=_ass_cache_put($136, $137, $138);
      var $139=$call127;
      $val=$139;
      __label__ = 29; break;
    case 29: 
      var $140=$val;
      var $141=$info_addr;
      var $hash_key129=(($141+260)|0);
      var $u130=(($hash_key129+4)|0);
      var $outline131=$u130;
      var $outline132=(($outline131)|0);
      HEAP32[(($outline132)>>2)]=$140;
      var $142=$val;
      var $outline133=(($142+4)|0);
      var $143=HEAP32[(($outline133)>>2)];
      var $144=$info_addr;
      var $outline134=(($144+32)|0);
      HEAP32[(($outline134)>>2)]=$143;
      var $145=$val;
      var $border135=(($145+8)|0);
      var $146=HEAP32[(($border135)>>2)];
      var $147=$info_addr;
      var $border136=(($147+36)|0);
      HEAP32[(($border136)>>2)]=$146;
      var $148=$info_addr;
      var $bbox=(($148+52)|0);
      var $149=$val;
      var $bbox_scaled137=(($149+12)|0);
      var $150=$bbox;
      var $151=$bbox_scaled137;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($150)>>2)]=HEAP32[(($151)>>2)];HEAP32[((($150)+(4))>>2)]=HEAP32[((($151)+(4))>>2)];HEAP32[((($150)+(8))>>2)]=HEAP32[((($151)+(8))>>2)];HEAP32[((($150)+(12))>>2)]=HEAP32[((($151)+(12))>>2)];
      var $152=$info_addr;
      var $drawing138=(($152+28)|0);
      var $153=HEAP32[(($drawing138)>>2)];
      var $tobool139=(($153)|0)!=0;
      if ($tobool139) { __label__ = 31; break; } else { __label__ = 30; break; }
    case 30: 
      var $154=$priv_addr;
      var $settings141=(($154+12)|0);
      var $shaper142=(($settings141+64)|0);
      var $155=HEAP32[(($shaper142)>>2)];
      var $cmp143=(($155)|0)==0;
      if ($cmp143) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $156=$val;
      var $advance146=(($156+28)|0);
      var $x147=(($advance146)|0);
      var $157=HEAP32[(($x147)>>2)];
      var $158=$info_addr;
      var $advance148=(($158+104)|0);
      var $x149=(($advance148)|0);
      HEAP32[(($x149)>>2)]=$157;
      var $159=$info_addr;
      var $cluster_advance=(($159+112)|0);
      var $x150=(($cluster_advance)|0);
      HEAP32[(($x150)>>2)]=$157;
      var $160=$val;
      var $advance151=(($160+28)|0);
      var $y152=(($advance151+4)|0);
      var $161=HEAP32[(($y152)>>2)];
      var $162=$info_addr;
      var $advance153=(($162+104)|0);
      var $y154=(($advance153+4)|0);
      HEAP32[(($y154)>>2)]=$161;
      var $163=$info_addr;
      var $cluster_advance155=(($163+112)|0);
      var $y156=(($cluster_advance155+4)|0);
      HEAP32[(($y156)>>2)]=$161;
      __label__ = 32; break;
    case 32: 
      var $164=$val;
      var $asc158=(($164+36)|0);
      var $165=HEAP32[(($asc158)>>2)];
      var $166=$info_addr;
      var $asc159=(($166+132)|0);
      HEAP32[(($asc159)>>2)]=$165;
      var $167=$val;
      var $desc160=(($167+40)|0);
      var $168=HEAP32[(($desc160)>>2)];
      var $169=$info_addr;
      var $desc161=(($169+136)|0);
      HEAP32[(($desc161)>>2)]=$168;
      var $170=$info_addr;
      var $drawing162=(($170+28)|0);
      var $171=HEAP32[(($drawing162)>>2)];
      _ass_drawing_free($171);
      __label__ = 33; break;
    case 33: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_get_outline_glyph["X"]=1;

function _x2scr($render_priv, $x) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      var $x_addr;
      $render_priv_addr=$render_priv;
      $x_addr=$x;
      var $0=$x_addr;
      var $1=$render_priv_addr;
      var $orig_width_nocrop=(($1+136)|0);
      var $2=HEAP32[(($orig_width_nocrop)>>2)];
      var $conv=(($2)|0);
      var $mul=($0)*($conv);
      var $3=$render_priv_addr;
      var $font_scale_x=(($3+160)|0);
      var $4=(tempDoubleI32[0]=HEAP32[(($font_scale_x)>>2)],tempDoubleI32[1]=HEAP32[((($font_scale_x)+(4))>>2)],tempDoubleF64[0]);
      var $div=($mul)/($4);
      var $5=$render_priv_addr;
      var $track=(($5+140)|0);
      var $6=HEAP32[(($track)>>2)];
      var $PlayResX=(($6+36)|0);
      var $7=HEAP32[(($PlayResX)>>2)];
      var $conv1=(($7)|0);
      var $div2=($div)/($conv1);
      var $8=$render_priv_addr;
      var $settings=(($8+12)|0);
      var $left_margin=(($settings+32)|0);
      var $9=HEAP32[(($left_margin)>>2)];
      var $cmp=(($9)|0) > 0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $10=$render_priv_addr;
      var $settings4=(($10+12)|0);
      var $left_margin5=(($settings4+32)|0);
      var $11=HEAP32[(($left_margin5)>>2)];
      var $cond = $11;__label__ = 5; break;
    case 4: 
      var $cond = 0;__label__ = 5; break;
    case 5: 
      var $cond;
      var $conv6=(($cond)|0);
      var $add=($div2)+($conv6);
      ;
      return $add;
    default: assert(0, "bad label: " + __label__);
  }
}


function _fill_bitmap_hash($priv, $info, $hash_key) {
  ;
  var __label__;

  var $priv_addr;
  var $info_addr;
  var $hash_key_addr;
  $priv_addr=$priv;
  $info_addr=$info;
  $hash_key_addr=$hash_key;
  var $0=$info_addr;
  var $frx=(($0+168)|0);
  var $1=(tempDoubleI32[0]=HEAP32[(($frx)>>2)],tempDoubleI32[1]=HEAP32[((($frx)+(4))>>2)],tempDoubleF64[0]);
  var $call=_rot_key($1);
  var $2=$hash_key_addr;
  var $frx1=(($2+16)|0);
  HEAP32[(($frx1)>>2)]=$call;
  var $3=$info_addr;
  var $fry=(($3+176)|0);
  var $4=(tempDoubleI32[0]=HEAP32[(($fry)>>2)],tempDoubleI32[1]=HEAP32[((($fry)+(4))>>2)],tempDoubleF64[0]);
  var $call2=_rot_key($4);
  var $5=$hash_key_addr;
  var $fry3=(($5+20)|0);
  HEAP32[(($fry3)>>2)]=$call2;
  var $6=$info_addr;
  var $frz=(($6+184)|0);
  var $7=(tempDoubleI32[0]=HEAP32[(($frz)>>2)],tempDoubleI32[1]=HEAP32[((($frz)+(4))>>2)],tempDoubleF64[0]);
  var $call4=_rot_key($7);
  var $8=$hash_key_addr;
  var $frz5=(($8+24)|0);
  HEAP32[(($frz5)>>2)]=$call4;
  var $9=$info_addr;
  var $fax=(($9+192)|0);
  var $10=(tempDoubleI32[0]=HEAP32[(($fax)>>2)],tempDoubleI32[1]=HEAP32[((($fax)+(4))>>2)],tempDoubleF64[0]);
  var $call6=_double_to_d16170($10);
  var $11=$hash_key_addr;
  var $fax7=(($11+28)|0);
  HEAP32[(($fax7)>>2)]=$call6;
  var $12=$info_addr;
  var $fay=(($12+200)|0);
  var $13=(tempDoubleI32[0]=HEAP32[(($fay)>>2)],tempDoubleI32[1]=HEAP32[((($fay)+(4))>>2)],tempDoubleF64[0]);
  var $call8=_double_to_d16170($13);
  var $14=$hash_key_addr;
  var $fay9=(($14+32)|0);
  HEAP32[(($fay9)>>2)]=$call8;
  var $15=$info_addr;
  var $be=(($15+140)|0);
  var $16=HEAP32[(($be)>>2)];
  var $conv=(($16) & 255);
  var $17=$hash_key_addr;
  var $be10=(($17+4)|0);
  HEAP8[($be10)]=$conv;
  var $18=$info_addr;
  var $blur=(($18+144)|0);
  var $19=(tempDoubleI32[0]=HEAP32[(($blur)>>2)],tempDoubleI32[1]=HEAP32[((($blur)+(4))>>2)],tempDoubleF64[0]);
  var $20=$hash_key_addr;
  var $blur11=(($20+8)|0);
  (tempDoubleF64[0]=$19,HEAP32[(($blur11)>>2)]=tempDoubleI32[0],HEAP32[((($blur11)+(4))>>2)]=tempDoubleI32[1]);
  var $21=$info_addr;
  var $shadow_x=(($21+152)|0);
  var $22=(tempDoubleI32[0]=HEAP32[(($shadow_x)>>2)],tempDoubleI32[1]=HEAP32[((($shadow_x)+(4))>>2)],tempDoubleF64[0]);
  var $23=$priv_addr;
  var $border_scale=(($23+168)|0);
  var $24=(tempDoubleI32[0]=HEAP32[(($border_scale)>>2)],tempDoubleI32[1]=HEAP32[((($border_scale)+(4))>>2)],tempDoubleF64[0]);
  var $mul=($22)*($24);
  var $25=$info_addr;
  var $shadow_x12=(($25+152)|0);
  var $26=(tempDoubleI32[0]=HEAP32[(($shadow_x12)>>2)],tempDoubleI32[1]=HEAP32[((($shadow_x12)+(4))>>2)],tempDoubleF64[0]);
  var $27=$priv_addr;
  var $border_scale13=(($27+168)|0);
  var $28=(tempDoubleI32[0]=HEAP32[(($border_scale13)>>2)],tempDoubleI32[1]=HEAP32[((($border_scale13)+(4))>>2)],tempDoubleF64[0]);
  var $mul14=($26)*($28);
  var $conv15=(($mul14)&-1);
  var $conv16=(($conv15)|0);
  var $sub=($mul)-($conv16);
  var $call17=_double_to_d6169($sub);
  var $29=$hash_key_addr;
  var $shadow_offset=(($29+52)|0);
  var $x=(($shadow_offset)|0);
  HEAP32[(($x)>>2)]=$call17;
  var $30=$info_addr;
  var $shadow_y=(($30+160)|0);
  var $31=(tempDoubleI32[0]=HEAP32[(($shadow_y)>>2)],tempDoubleI32[1]=HEAP32[((($shadow_y)+(4))>>2)],tempDoubleF64[0]);
  var $32=$priv_addr;
  var $border_scale18=(($32+168)|0);
  var $33=(tempDoubleI32[0]=HEAP32[(($border_scale18)>>2)],tempDoubleI32[1]=HEAP32[((($border_scale18)+(4))>>2)],tempDoubleF64[0]);
  var $mul19=($31)*($33);
  var $34=$info_addr;
  var $shadow_y20=(($34+160)|0);
  var $35=(tempDoubleI32[0]=HEAP32[(($shadow_y20)>>2)],tempDoubleI32[1]=HEAP32[((($shadow_y20)+(4))>>2)],tempDoubleF64[0]);
  var $36=$priv_addr;
  var $border_scale21=(($36+168)|0);
  var $37=(tempDoubleI32[0]=HEAP32[(($border_scale21)>>2)],tempDoubleI32[1]=HEAP32[((($border_scale21)+(4))>>2)],tempDoubleF64[0]);
  var $mul22=($35)*($37);
  var $conv23=(($mul22)&-1);
  var $conv24=(($conv23)|0);
  var $sub25=($mul19)-($conv24);
  var $call26=_double_to_d6169($sub25);
  var $38=$hash_key_addr;
  var $shadow_offset27=(($38+52)|0);
  var $y=(($shadow_offset27+4)|0);
  HEAP32[(($y)>>2)]=$call26;
  ;
  return;
}
_fill_bitmap_hash["X"]=1;

function _wrap_lines_smart($render_priv, $max_text_width) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      var $max_text_width_addr;
      var $i;
      var $cur;
      var $s1;
      var $e1;
      var $s2;
      var $s3;
      var $w;
      var $last_space;
      var $break_type;
      var $exit;
      var $pen_shift_x;
      var $pen_shift_y;
      var $cur_line;
      var $run_offset;
      var $text_info;
      var $break_at;
      var $s_offset;
      var $len;
      var $lead;
      var $l1;
      var $l2;
      var $l1_new;
      var $l2_new;
      var $height;
      $render_priv_addr=$render_priv;
      $max_text_width_addr=$max_text_width;
      var $0=$render_priv_addr;
      var $text_info1=(($0+464)|0);
      $text_info=$text_info1;
      $last_space=-1;
      var $1=$text_info;
      var $n_lines=(($1+12)|0);
      HEAP32[(($n_lines)>>2)]=1;
      $break_type=0;
      var $2=$text_info;
      var $glyphs=(($2)|0);
      var $3=HEAP32[(($glyphs)>>2)];
      $s1=$3;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $4=$i;
      var $5=$text_info;
      var $length=(($5+4)|0);
      var $6=HEAP32[(($length)>>2)];
      var $cmp=(($4)|0) < (($6)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 23; break; }
    case 4: 
      $break_at=-1;
      var $7=$text_info;
      var $glyphs2=(($7)|0);
      var $8=HEAP32[(($glyphs2)>>2)];
      var $9=$i;
      var $add_ptr=(($8+($9)*(328))|0);
      $cur=$add_ptr;
      var $10=$s1;
      var $bbox=(($10+52)|0);
      var $xMin=(($bbox)|0);
      var $11=HEAP32[(($xMin)>>2)];
      var $12=$s1;
      var $pos=(($12+68)|0);
      var $x=(($pos)|0);
      var $13=HEAP32[(($x)>>2)];
      var $add=((($11)+($13))|0);
      var $call=_d6_to_double($add);
      $s_offset=$call;
      var $14=$cur;
      var $bbox3=(($14+52)|0);
      var $xMax=(($bbox3+8)|0);
      var $15=HEAP32[(($xMax)>>2)];
      var $16=$cur;
      var $pos4=(($16+68)|0);
      var $x5=(($pos4)|0);
      var $17=HEAP32[(($x5)>>2)];
      var $add6=((($15)+($17))|0);
      var $call7=_d6_to_double($add6);
      var $18=$s_offset;
      var $sub=($call7)-($18);
      $len=$sub;
      var $19=$cur;
      var $symbol=(($19)|0);
      var $20=HEAP32[(($symbol)>>2)];
      var $cmp8=(($20)|0)==10;
      if ($cmp8) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $break_type=2;
      var $21=$i;
      $break_at=$21;
      var $22=$render_priv_addr;
      var $library=(($22)|0);
      var $23=HEAP32[(($library)>>2)];
      var $24=$break_at;
      _ass_msg($23, 7, ((STRING_TABLE.__str17162)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$24,tempInt));
      __label__ = 15; break;
    case 6: 
      var $25=$cur;
      var $symbol9=(($25)|0);
      var $26=HEAP32[(($symbol9)>>2)];
      var $cmp10=(($26)|0)==32;
      if ($cmp10) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $27=$i;
      $last_space=$27;
      __label__ = 14; break;
    case 8: 
      var $28=$len;
      var $29=$max_text_width_addr;
      var $cmp13=$28 >= $29;
      if ($cmp13) { __label__ = 9; break; } else { __label__ = 13; break; }
    case 9: 
      var $30=$render_priv_addr;
      var $state=(($30+176)|0);
      var $wrap_style=(($state+280)|0);
      var $31=HEAP32[(($wrap_style)>>2)];
      var $cmp14=(($31)|0)!=2;
      if ($cmp14) { __label__ = 10; break; } else { __label__ = 13; break; }
    case 10: 
      $break_type=1;
      var $32=$last_space;
      $break_at=$32;
      var $33=$break_at;
      var $cmp16=(($33)|0) >= 0;
      if ($cmp16) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $34=$render_priv_addr;
      var $library18=(($34)|0);
      var $35=HEAP32[(($library18)>>2)];
      var $36=$break_at;
      _ass_msg($35, 7, ((STRING_TABLE.__str18163)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$36,tempInt));
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $37=$break_at;
      var $cmp22=(($37)|0)!=-1;
      if ($cmp22) { __label__ = 16; break; } else { __label__ = 21; break; }
    case 16: 
      var $38=$break_at;
      var $add24=((($38)+(1))|0);
      $lead=$add24;
      var $39=$text_info;
      var $n_lines25=(($39+12)|0);
      var $40=HEAP32[(($n_lines25)>>2)];
      var $41=$text_info;
      var $max_lines=(($41+28)|0);
      var $42=HEAP32[(($max_lines)>>2)];
      var $cmp26=(($40)|0) >= (($42)|0);
      if ($cmp26) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $43=$text_info;
      var $max_lines28=(($43+28)|0);
      var $44=HEAP32[(($max_lines28)>>2)];
      var $mul=((($44<<1))|0);
      HEAP32[(($max_lines28)>>2)]=$mul;
      var $45=$text_info;
      var $lines=(($45+8)|0);
      var $46=HEAP32[(($lines)>>2)];
      var $47=$46;
      var $48=$text_info;
      var $max_lines29=(($48+28)|0);
      var $49=HEAP32[(($max_lines29)>>2)];
      var $mul30=((($49)*(24))|0);
      var $call31=_realloc($47, $mul30);
      var $50=$call31;
      var $51=$text_info;
      var $lines32=(($51+8)|0);
      HEAP32[(($lines32)>>2)]=$50;
      __label__ = 18; break;
    case 18: 
      var $52=$lead;
      var $53=$text_info;
      var $length34=(($53+4)|0);
      var $54=HEAP32[(($length34)>>2)];
      var $cmp35=(($52)|0) < (($54)|0);
      if ($cmp35) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $55=$break_type;
      var $conv=(($55) & 255);
      var $56=$lead;
      var $57=$text_info;
      var $glyphs37=(($57)|0);
      var $58=HEAP32[(($glyphs37)>>2)];
      var $arrayidx=(($58+($56)*(328))|0);
      var $linebreak=(($arrayidx+84)|0);
      HEAP8[($linebreak)]=$conv;
      $last_space=-1;
      var $59=$text_info;
      var $glyphs38=(($59)|0);
      var $60=HEAP32[(($glyphs38)>>2)];
      var $61=$lead;
      var $add_ptr39=(($60+($61)*(328))|0);
      $s1=$add_ptr39;
      var $62=$s1;
      var $bbox40=(($62+52)|0);
      var $xMin41=(($bbox40)|0);
      var $63=HEAP32[(($xMin41)>>2)];
      var $64=$s1;
      var $pos42=(($64+68)|0);
      var $x43=(($pos42)|0);
      var $65=HEAP32[(($x43)>>2)];
      var $add44=((($63)+($65))|0);
      var $call45=_d6_to_double($add44);
      $s_offset=$call45;
      var $66=$text_info;
      var $n_lines46=(($66+12)|0);
      var $67=HEAP32[(($n_lines46)>>2)];
      var $inc=((($67)+(1))|0);
      HEAP32[(($n_lines46)>>2)]=$inc;
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      var $68=$i;
      var $inc49=((($68)+(1))|0);
      $i=$inc49;
      __label__ = 3; break;
    case 23: 
      $exit=0;
      __label__ = 24; break;
    case 24: 
      var $69=$exit;
      var $tobool=(($69)|0)!=0;
      if ($tobool) { var $72 = 0;__label__ = 26; break; } else { __label__ = 25; break; }
    case 25: 
      var $70=$render_priv_addr;
      var $state50=(($70+176)|0);
      var $wrap_style51=(($state50+280)|0);
      var $71=HEAP32[(($wrap_style51)>>2)];
      var $cmp52=(($71)|0)!=1;
      var $72 = $cmp52;__label__ = 26; break;
    case 26: 
      var $72;
      if ($72) { __label__ = 27; break; } else { __label__ = 65; break; }
    case 27: 
      $exit=1;
      var $73=$text_info;
      var $glyphs54=(($73)|0);
      var $74=HEAP32[(($glyphs54)>>2)];
      $s3=$74;
      $w=$74;
      $s2=0;
      $s1=0;
      $i=0;
      __label__ = 28; break;
    case 28: 
      var $75=$i;
      var $76=$text_info;
      var $length56=(($76+4)|0);
      var $77=HEAP32[(($length56)>>2)];
      var $cmp57=(($75)|0) <= (($77)|0);
      if ($cmp57) { __label__ = 29; break; } else { __label__ = 64; break; }
    case 29: 
      var $78=$text_info;
      var $glyphs60=(($78)|0);
      var $79=HEAP32[(($glyphs60)>>2)];
      var $80=$i;
      var $add_ptr61=(($79+($80)*(328))|0);
      $cur=$add_ptr61;
      var $81=$i;
      var $82=$text_info;
      var $length62=(($82+4)|0);
      var $83=HEAP32[(($length62)>>2)];
      var $cmp63=(($81)|0)==(($83)|0);
      if ($cmp63) { __label__ = 31; break; } else { __label__ = 30; break; }
    case 30: 
      var $84=$cur;
      var $linebreak65=(($84+84)|0);
      var $85=HEAP8[($linebreak65)];
      var $conv66=(($85 << 24) >> 24);
      var $tobool67=(($conv66)|0)!=0;
      if ($tobool67) { __label__ = 31; break; } else { __label__ = 60; break; }
    case 31: 
      var $86=$s2;
      $s1=$86;
      var $87=$s3;
      $s2=$87;
      var $88=$cur;
      $s3=$88;
      var $89=$s1;
      var $tobool69=(($89)|0)!=0;
      if ($tobool69) { __label__ = 32; break; } else { __label__ = 59; break; }
    case 32: 
      var $90=$s2;
      var $linebreak71=(($90+84)|0);
      var $91=HEAP8[($linebreak71)];
      var $conv72=(($91 << 24) >> 24);
      var $cmp73=(($conv72)|0)==1;
      if ($cmp73) { __label__ = 33; break; } else { __label__ = 59; break; }
    case 33: 
      var $92=$s2;
      $w=$92;
      __label__ = 34; break;
    case 34: 
      var $93=$w;
      var $incdec_ptr=((($93)-(328))|0);
      $w=$incdec_ptr;
      __label__ = 35; break;
    case 35: 
      var $94=$w;
      var $95=$s1;
      var $cmp76=(($94)>>>0) > (($95)>>>0);
      if ($cmp76) { __label__ = 36; break; } else { var $98 = 0;__label__ = 37; break; }
    case 36: 
      var $96=$w;
      var $symbol79=(($96)|0);
      var $97=HEAP32[(($symbol79)>>2)];
      var $cmp80=(($97)|0)==32;
      var $98 = $cmp80;__label__ = 37; break;
    case 37: 
      var $98;
      if ($98) { __label__ = 34; break; } else { __label__ = 38; break; }
    case 38: 
      __label__ = 39; break;
    case 39: 
      var $99=$w;
      var $100=$s1;
      var $cmp84=(($99)>>>0) > (($100)>>>0);
      if ($cmp84) { __label__ = 40; break; } else { var $103 = 0;__label__ = 41; break; }
    case 40: 
      var $101=$w;
      var $symbol87=(($101)|0);
      var $102=HEAP32[(($symbol87)>>2)];
      var $cmp88=(($102)|0)!=32;
      var $103 = $cmp88;__label__ = 41; break;
    case 41: 
      var $103;
      if ($103) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      var $104=$w;
      var $incdec_ptr92=((($104)-(328))|0);
      $w=$incdec_ptr92;
      __label__ = 39; break;
    case 43: 
      var $105=$w;
      $e1=$105;
      __label__ = 44; break;
    case 44: 
      var $106=$e1;
      var $107=$s1;
      var $cmp94=(($106)>>>0) > (($107)>>>0);
      if ($cmp94) { __label__ = 45; break; } else { var $110 = 0;__label__ = 46; break; }
    case 45: 
      var $108=$e1;
      var $symbol97=(($108)|0);
      var $109=HEAP32[(($symbol97)>>2)];
      var $cmp98=(($109)|0)==32;
      var $110 = $cmp98;__label__ = 46; break;
    case 46: 
      var $110;
      if ($110) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      var $111=$e1;
      var $incdec_ptr102=((($111)-(328))|0);
      $e1=$incdec_ptr102;
      __label__ = 44; break;
    case 48: 
      var $112=$w;
      var $symbol104=(($112)|0);
      var $113=HEAP32[(($symbol104)>>2)];
      var $cmp105=(($113)|0)==32;
      if ($cmp105) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      var $114=$w;
      var $incdec_ptr108=(($114+328)|0);
      $w=$incdec_ptr108;
      __label__ = 50; break;
    case 50: 
      var $115=$s2;
      var $add_ptr110=((($115)-(328))|0);
      var $bbox111=(($add_ptr110+52)|0);
      var $xMax112=(($bbox111+8)|0);
      var $116=HEAP32[(($xMax112)>>2)];
      var $117=$s2;
      var $add_ptr113=((($117)-(328))|0);
      var $pos114=(($add_ptr113+68)|0);
      var $x115=(($pos114)|0);
      var $118=HEAP32[(($x115)>>2)];
      var $add116=((($116)+($118))|0);
      var $119=$s1;
      var $bbox117=(($119+52)|0);
      var $xMin118=(($bbox117)|0);
      var $120=HEAP32[(($xMin118)>>2)];
      var $121=$s1;
      var $pos119=(($121+68)|0);
      var $x120=(($pos119)|0);
      var $122=HEAP32[(($x120)>>2)];
      var $add121=((($120)+($122))|0);
      var $sub122=((($add116)-($add121))|0);
      var $call123=_d6_to_double($sub122);
      $l1=$call123;
      var $123=$s3;
      var $add_ptr124=((($123)-(328))|0);
      var $bbox125=(($add_ptr124+52)|0);
      var $xMax126=(($bbox125+8)|0);
      var $124=HEAP32[(($xMax126)>>2)];
      var $125=$s3;
      var $add_ptr127=((($125)-(328))|0);
      var $pos128=(($add_ptr127+68)|0);
      var $x129=(($pos128)|0);
      var $126=HEAP32[(($x129)>>2)];
      var $add130=((($124)+($126))|0);
      var $127=$s2;
      var $bbox131=(($127+52)|0);
      var $xMin132=(($bbox131)|0);
      var $128=HEAP32[(($xMin132)>>2)];
      var $129=$s2;
      var $pos133=(($129+68)|0);
      var $x134=(($pos133)|0);
      var $130=HEAP32[(($x134)>>2)];
      var $add135=((($128)+($130))|0);
      var $sub136=((($add130)-($add135))|0);
      var $call137=_d6_to_double($sub136);
      $l2=$call137;
      var $131=$e1;
      var $bbox138=(($131+52)|0);
      var $xMax139=(($bbox138+8)|0);
      var $132=HEAP32[(($xMax139)>>2)];
      var $133=$e1;
      var $pos140=(($133+68)|0);
      var $x141=(($pos140)|0);
      var $134=HEAP32[(($x141)>>2)];
      var $add142=((($132)+($134))|0);
      var $135=$s1;
      var $bbox143=(($135+52)|0);
      var $xMin144=(($bbox143)|0);
      var $136=HEAP32[(($xMin144)>>2)];
      var $137=$s1;
      var $pos145=(($137+68)|0);
      var $x146=(($pos145)|0);
      var $138=HEAP32[(($x146)>>2)];
      var $add147=((($136)+($138))|0);
      var $sub148=((($add142)-($add147))|0);
      var $call149=_d6_to_double($sub148);
      $l1_new=$call149;
      var $139=$s3;
      var $add_ptr150=((($139)-(328))|0);
      var $bbox151=(($add_ptr150+52)|0);
      var $xMax152=(($bbox151+8)|0);
      var $140=HEAP32[(($xMax152)>>2)];
      var $141=$s3;
      var $add_ptr153=((($141)-(328))|0);
      var $pos154=(($add_ptr153+68)|0);
      var $x155=(($pos154)|0);
      var $142=HEAP32[(($x155)>>2)];
      var $add156=((($140)+($142))|0);
      var $143=$w;
      var $bbox157=(($143+52)|0);
      var $xMin158=(($bbox157)|0);
      var $144=HEAP32[(($xMin158)>>2)];
      var $145=$w;
      var $pos159=(($145+68)|0);
      var $x160=(($pos159)|0);
      var $146=HEAP32[(($x160)>>2)];
      var $add161=((($144)+($146))|0);
      var $sub162=((($add156)-($add161))|0);
      var $call163=_d6_to_double($sub162);
      $l2_new=$call163;
      var $147=$l1_new;
      var $148=$l2_new;
      var $cmp164=$147 < $148;
      if ($cmp164) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $149=$l2_new;
      var $150=$l1_new;
      var $sub166=($149)-($150);
      var $cond = $sub166;__label__ = 53; break;
    case 52: 
      var $151=$l1_new;
      var $152=$l2_new;
      var $sub167=($151)-($152);
      var $cond = $sub167;__label__ = 53; break;
    case 53: 
      var $cond;
      var $153=$l1;
      var $154=$l2;
      var $cmp168=$153 < $154;
      if ($cmp168) { __label__ = 54; break; } else { __label__ = 55; break; }
    case 54: 
      var $155=$l2;
      var $156=$l1;
      var $sub171=($155)-($156);
      var $cond175 = $sub171;__label__ = 56; break;
    case 55: 
      var $157=$l1;
      var $158=$l2;
      var $sub173=($157)-($158);
      var $cond175 = $sub173;__label__ = 56; break;
    case 56: 
      var $cond175;
      var $cmp176=$cond < $cond175;
      if ($cmp176) { __label__ = 57; break; } else { __label__ = 58; break; }
    case 57: 
      var $159=$w;
      var $linebreak179=(($159+84)|0);
      HEAP8[($linebreak179)]=1;
      var $160=$s2;
      var $linebreak180=(($160+84)|0);
      HEAP8[($linebreak180)]=0;
      $exit=0;
      __label__ = 58; break;
    case 58: 
      __label__ = 59; break;
    case 59: 
      __label__ = 60; break;
    case 60: 
      var $161=$i;
      var $162=$text_info;
      var $length184=(($162+4)|0);
      var $163=HEAP32[(($length184)>>2)];
      var $cmp185=(($161)|0)==(($163)|0);
      if ($cmp185) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: 
      __label__ = 64; break;
    case 62: 
      __label__ = 63; break;
    case 63: 
      var $164=$i;
      var $inc190=((($164)+(1))|0);
      $i=$inc190;
      __label__ = 28; break;
    case 64: 
      __label__ = 24; break;
    case 65: 
      var $165=$text_info;
      var $n_lines193=(($165+12)|0);
      var $166=HEAP32[(($n_lines193)>>2)];
      var $cmp194=(($166)|0) >= 1;
      if ($cmp194) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: 
      __label__ = 68; break;
    case 67: 
      ___assert_func(((STRING_TABLE.__str19164)|0), 1556, ((STRING_TABLE.___func___wrap_lines_smart)|0), ((STRING_TABLE.__str20165)|0));
      __label__ = 68; break;
    case 68: 
      var $167=$render_priv_addr;
      _measure_text($167);
      var $168=$render_priv_addr;
      _trim_whitespace($168);
      $pen_shift_x=0;
      $pen_shift_y=0;
      $cur_line=1;
      $run_offset=0;
      $i=0;
      var $169=$text_info;
      var $glyphs199=(($169)|0);
      var $170=HEAP32[(($glyphs199)>>2)];
      var $171=$i;
      var $add_ptr200=(($170+($171)*(328))|0);
      $cur=$add_ptr200;
      __label__ = 69; break;
    case 69: 
      var $172=$i;
      var $173=$text_info;
      var $length202=(($173+4)|0);
      var $174=HEAP32[(($length202)>>2)];
      var $cmp203=(($172)|0) < (($174)|0);
      if ($cmp203) { __label__ = 70; break; } else { var $177 = 0;__label__ = 71; break; }
    case 70: 
      var $175=$cur;
      var $skip=(($175+4)|0);
      var $176=HEAP32[(($skip)>>2)];
      var $tobool206=(($176)|0)!=0;
      var $177 = $tobool206;__label__ = 71; break;
    case 71: 
      var $177;
      if ($177) { __label__ = 72; break; } else { __label__ = 73; break; }
    case 72: 
      var $178=$text_info;
      var $glyphs209=(($178)|0);
      var $179=HEAP32[(($glyphs209)>>2)];
      var $180=$i;
      var $inc210=((($180)+(1))|0);
      $i=$inc210;
      var $add_ptr211=(($179+($inc210)*(328))|0);
      $cur=$add_ptr211;
      __label__ = 69; break;
    case 73: 
      var $181=$cur;
      var $pos213=(($181+68)|0);
      var $x214=(($pos213)|0);
      var $182=HEAP32[(($x214)>>2)];
      var $sub215=(((-$182))|0);
      var $call216=_d6_to_double($sub215);
      $pen_shift_x=$call216;
      $i=0;
      __label__ = 74; break;
    case 74: 
      var $183=$i;
      var $184=$text_info;
      var $length218=(($184+4)|0);
      var $185=HEAP32[(($length218)>>2)];
      var $cmp219=(($183)|0) < (($185)|0);
      if ($cmp219) { __label__ = 75; break; } else { __label__ = 85; break; }
    case 75: 
      var $186=$text_info;
      var $glyphs222=(($186)|0);
      var $187=HEAP32[(($glyphs222)>>2)];
      var $188=$i;
      var $add_ptr223=(($187+($188)*(328))|0);
      $cur=$add_ptr223;
      var $189=$cur;
      var $linebreak224=(($189+84)|0);
      var $190=HEAP8[($linebreak224)];
      var $tobool225=(($190 << 24) >> 24)!=0;
      if ($tobool225) { __label__ = 76; break; } else { __label__ = 83; break; }
    case 76: 
      __label__ = 77; break;
    case 77: 
      var $191=$i;
      var $192=$text_info;
      var $length228=(($192+4)|0);
      var $193=HEAP32[(($length228)>>2)];
      var $cmp229=(($191)|0) < (($193)|0);
      if ($cmp229) { __label__ = 78; break; } else { var $198 = 0;__label__ = 80; break; }
    case 78: 
      var $194=$cur;
      var $skip232=(($194+4)|0);
      var $195=HEAP32[(($skip232)>>2)];
      var $tobool233=(($195)|0)!=0;
      if ($tobool233) { __label__ = 79; break; } else { var $198 = 0;__label__ = 80; break; }
    case 79: 
      var $196=$cur;
      var $symbol235=(($196)|0);
      var $197=HEAP32[(($symbol235)>>2)];
      var $cmp236=(($197)|0)!=10;
      var $198 = $cmp236;__label__ = 80; break;
    case 80: 
      var $198;
      if ($198) { __label__ = 81; break; } else { __label__ = 82; break; }
    case 81: 
      var $199=$text_info;
      var $glyphs240=(($199)|0);
      var $200=HEAP32[(($glyphs240)>>2)];
      var $201=$i;
      var $inc241=((($201)+(1))|0);
      $i=$inc241;
      var $add_ptr242=(($200+($inc241)*(328))|0);
      $cur=$add_ptr242;
      __label__ = 77; break;
    case 82: 
      var $202=$cur_line;
      var $sub244=((($202)-(1))|0);
      var $203=$text_info;
      var $lines245=(($203+8)|0);
      var $204=HEAP32[(($lines245)>>2)];
      var $arrayidx246=(($204+($sub244)*(24))|0);
      var $desc=(($arrayidx246+8)|0);
      var $205=(tempDoubleI32[0]=HEAP32[(($desc)>>2)],tempDoubleI32[1]=HEAP32[((($desc)+(4))>>2)],tempDoubleF64[0]);
      var $206=$cur_line;
      var $207=$text_info;
      var $lines247=(($207+8)|0);
      var $208=HEAP32[(($lines247)>>2)];
      var $arrayidx248=(($208+($206)*(24))|0);
      var $asc=(($arrayidx248)|0);
      var $209=(tempDoubleI32[0]=HEAP32[(($asc)>>2)],tempDoubleI32[1]=HEAP32[((($asc)+(4))>>2)],tempDoubleF64[0]);
      var $add249=($205)+($209);
      $height=$add249;
      var $210=$i;
      var $211=$cur_line;
      var $sub250=((($211)-(1))|0);
      var $212=$text_info;
      var $lines251=(($212+8)|0);
      var $213=HEAP32[(($lines251)>>2)];
      var $arrayidx252=(($213+($sub250)*(24))|0);
      var $offset=(($arrayidx252+16)|0);
      var $214=HEAP32[(($offset)>>2)];
      var $sub253=((($210)-($214))|0);
      var $215=$cur_line;
      var $sub254=((($215)-(1))|0);
      var $216=$text_info;
      var $lines255=(($216+8)|0);
      var $217=HEAP32[(($lines255)>>2)];
      var $arrayidx256=(($217+($sub254)*(24))|0);
      var $len257=(($arrayidx256+20)|0);
      HEAP32[(($len257)>>2)]=$sub253;
      var $218=$i;
      var $219=$cur_line;
      var $220=$text_info;
      var $lines258=(($220+8)|0);
      var $221=HEAP32[(($lines258)>>2)];
      var $arrayidx259=(($221+($219)*(24))|0);
      var $offset260=(($arrayidx259+16)|0);
      HEAP32[(($offset260)>>2)]=$218;
      var $222=$cur_line;
      var $inc261=((($222)+(1))|0);
      $cur_line=$inc261;
      var $223=$run_offset;
      var $inc262=((($223)+(1))|0);
      $run_offset=$inc262;
      var $224=$cur;
      var $pos263=(($224+68)|0);
      var $x264=(($pos263)|0);
      var $225=HEAP32[(($x264)>>2)];
      var $sub265=(((-$225))|0);
      var $call266=_d6_to_double($sub265);
      $pen_shift_x=$call266;
      var $226=$height;
      var $227=$render_priv_addr;
      var $settings=(($227+12)|0);
      var $line_spacing=(($settings+16)|0);
      var $228=(tempDoubleI32[0]=HEAP32[(($line_spacing)>>2)],tempDoubleI32[1]=HEAP32[((($line_spacing)+(4))>>2)],tempDoubleF64[0]);
      var $add267=($226)+($228);
      var $229=$pen_shift_y;
      var $add268=($229)+($add267);
      $pen_shift_y=$add268;
      var $230=$render_priv_addr;
      var $library269=(($230)|0);
      var $231=HEAP32[(($library269)>>2)];
      var $232=$i;
      var $233=$text_info;
      var $length270=(($233+4)|0);
      var $234=HEAP32[(($length270)>>2)];
      var $sub271=((($234)-(1))|0);
      var $235=$pen_shift_x;
      var $236=$pen_shift_y;
      _ass_msg($231, 7, ((STRING_TABLE.__str21166)|0), (tempInt=STACKTOP,STACKTOP += 24,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$232,HEAP32[(((tempInt)+(4))>>2)]=$sub271,(tempDoubleF64[0]=$235,HEAP32[(((tempInt)+(8))>>2)]=tempDoubleI32[0],HEAP32[((((tempInt)+(8))+(4))>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$236,HEAP32[(((tempInt)+(16))>>2)]=tempDoubleI32[0],HEAP32[((((tempInt)+(16))+(4))>>2)]=tempDoubleI32[1]),tempInt));
      __label__ = 83; break;
    case 83: 
      var $237=$run_offset;
      var $238=$cur;
      var $bm_run_id=(($238+252)|0);
      var $239=HEAP32[(($bm_run_id)>>2)];
      var $add273=((($239)+($237))|0);
      HEAP32[(($bm_run_id)>>2)]=$add273;
      var $240=$pen_shift_x;
      var $call274=_double_to_d6169($240);
      var $241=$cur;
      var $pos275=(($241+68)|0);
      var $x276=(($pos275)|0);
      var $242=HEAP32[(($x276)>>2)];
      var $add277=((($242)+($call274))|0);
      HEAP32[(($x276)>>2)]=$add277;
      var $243=$pen_shift_y;
      var $call278=_double_to_d6169($243);
      var $244=$cur;
      var $pos279=(($244+68)|0);
      var $y=(($pos279+4)|0);
      var $245=HEAP32[(($y)>>2)];
      var $add280=((($245)+($call278))|0);
      HEAP32[(($y)>>2)]=$add280;
      __label__ = 84; break;
    case 84: 
      var $246=$i;
      var $inc282=((($246)+(1))|0);
      $i=$inc282;
      __label__ = 74; break;
    case 85: 
      var $247=$text_info;
      var $length284=(($247+4)|0);
      var $248=HEAP32[(($length284)>>2)];
      var $249=$cur_line;
      var $sub285=((($249)-(1))|0);
      var $250=$text_info;
      var $lines286=(($250+8)|0);
      var $251=HEAP32[(($lines286)>>2)];
      var $arrayidx287=(($251+($sub285)*(24))|0);
      var $offset288=(($arrayidx287+16)|0);
      var $252=HEAP32[(($offset288)>>2)];
      var $sub289=((($248)-($252))|0);
      var $253=$cur_line;
      var $sub290=((($253)-(1))|0);
      var $254=$text_info;
      var $lines291=(($254+8)|0);
      var $255=HEAP32[(($lines291)>>2)];
      var $arrayidx292=(($255+($sub290)*(24))|0);
      var $len293=(($arrayidx292+20)|0);
      HEAP32[(($len293)>>2)]=$sub289;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_wrap_lines_smart["X"]=1;

function _d6_to_double($x) {
  ;
  var __label__;

  var $x_addr;
  $x_addr=$x;
  var $0=$x_addr;
  var $conv=(($0)|0);
  var $div=($conv)/(64);
  ;
  return $div;
}


function _y2scr_top($render_priv, $y) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $render_priv_addr;
      var $y_addr;
      $render_priv_addr=$render_priv;
      $y_addr=$y;
      var $0=$render_priv_addr;
      var $settings=(($0+12)|0);
      var $use_margins=(($settings+40)|0);
      var $1=HEAP32[(($use_margins)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=$y_addr;
      var $3=$render_priv_addr;
      var $orig_height_nocrop=(($3+132)|0);
      var $4=HEAP32[(($orig_height_nocrop)>>2)];
      var $conv=(($4)|0);
      var $mul=($2)*($conv);
      var $5=$render_priv_addr;
      var $track=(($5+140)|0);
      var $6=HEAP32[(($track)>>2)];
      var $PlayResY=(($6+40)|0);
      var $7=HEAP32[(($PlayResY)>>2)];
      var $conv1=(($7)|0);
      var $div=($mul)/($conv1);
      $retval=$div;
      __label__ = 8; break;
    case 4: 
      var $8=$y_addr;
      var $9=$render_priv_addr;
      var $orig_height_nocrop2=(($9+132)|0);
      var $10=HEAP32[(($orig_height_nocrop2)>>2)];
      var $conv3=(($10)|0);
      var $mul4=($8)*($conv3);
      var $11=$render_priv_addr;
      var $track5=(($11+140)|0);
      var $12=HEAP32[(($track5)>>2)];
      var $PlayResY6=(($12+40)|0);
      var $13=HEAP32[(($PlayResY6)>>2)];
      var $conv7=(($13)|0);
      var $div8=($mul4)/($conv7);
      var $14=$render_priv_addr;
      var $settings9=(($14+12)|0);
      var $top_margin=(($settings9+24)|0);
      var $15=HEAP32[(($top_margin)>>2)];
      var $cmp=(($15)|0) > 0;
      if ($cmp) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $16=$render_priv_addr;
      var $settings11=(($16+12)|0);
      var $top_margin12=(($settings11+24)|0);
      var $17=HEAP32[(($top_margin12)>>2)];
      var $cond = $17;__label__ = 7; break;
    case 6: 
      var $cond = 0;__label__ = 7; break;
    case 7: 
      var $cond;
      var $conv13=(($cond)|0);
      var $add=($div8)+($conv13);
      $retval=$add;
      __label__ = 8; break;
    case 8: 
      var $18=$retval;
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}
_y2scr_top["X"]=1;

function _y2scr($render_priv, $y) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      var $y_addr;
      $render_priv_addr=$render_priv;
      $y_addr=$y;
      var $0=$y_addr;
      var $1=$render_priv_addr;
      var $orig_height_nocrop=(($1+132)|0);
      var $2=HEAP32[(($orig_height_nocrop)>>2)];
      var $conv=(($2)|0);
      var $mul=($0)*($conv);
      var $3=$render_priv_addr;
      var $track=(($3+140)|0);
      var $4=HEAP32[(($track)>>2)];
      var $PlayResY=(($4+40)|0);
      var $5=HEAP32[(($PlayResY)>>2)];
      var $conv1=(($5)|0);
      var $div=($mul)/($conv1);
      var $6=$render_priv_addr;
      var $settings=(($6+12)|0);
      var $top_margin=(($settings+24)|0);
      var $7=HEAP32[(($top_margin)>>2)];
      var $cmp=(($7)|0) > 0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $8=$render_priv_addr;
      var $settings3=(($8+12)|0);
      var $top_margin4=(($settings3+24)|0);
      var $9=HEAP32[(($top_margin4)>>2)];
      var $cond = $9;__label__ = 5; break;
    case 4: 
      var $cond = 0;__label__ = 5; break;
    case 5: 
      var $cond;
      var $conv5=(($cond)|0);
      var $add=($div)+($conv5);
      ;
      return $add;
    default: assert(0, "bad label: " + __label__);
  }
}


function _y2scr_sub($render_priv, $y) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $render_priv_addr;
      var $y_addr;
      $render_priv_addr=$render_priv;
      $y_addr=$y;
      var $0=$render_priv_addr;
      var $settings=(($0+12)|0);
      var $use_margins=(($settings+40)|0);
      var $1=HEAP32[(($use_margins)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 10; break; }
    case 3: 
      var $2=$y_addr;
      var $3=$render_priv_addr;
      var $orig_height_nocrop=(($3+132)|0);
      var $4=HEAP32[(($orig_height_nocrop)>>2)];
      var $conv=(($4)|0);
      var $mul=($2)*($conv);
      var $5=$render_priv_addr;
      var $track=(($5+140)|0);
      var $6=HEAP32[(($track)>>2)];
      var $PlayResY=(($6+40)|0);
      var $7=HEAP32[(($PlayResY)>>2)];
      var $conv1=(($7)|0);
      var $div=($mul)/($conv1);
      var $8=$render_priv_addr;
      var $settings2=(($8+12)|0);
      var $top_margin=(($settings2+24)|0);
      var $9=HEAP32[(($top_margin)>>2)];
      var $cmp=(($9)|0) > 0;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $10=$render_priv_addr;
      var $settings4=(($10+12)|0);
      var $top_margin5=(($settings4+24)|0);
      var $11=HEAP32[(($top_margin5)>>2)];
      var $cond = $11;__label__ = 6; break;
    case 5: 
      var $cond = 0;__label__ = 6; break;
    case 6: 
      var $cond;
      var $conv6=(($cond)|0);
      var $add=($div)+($conv6);
      var $12=$render_priv_addr;
      var $settings7=(($12+12)|0);
      var $bottom_margin=(($settings7+28)|0);
      var $13=HEAP32[(($bottom_margin)>>2)];
      var $cmp8=(($13)|0) > 0;
      if ($cmp8) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $14=$render_priv_addr;
      var $settings11=(($14+12)|0);
      var $bottom_margin12=(($settings11+28)|0);
      var $15=HEAP32[(($bottom_margin12)>>2)];
      var $cond15 = $15;__label__ = 9; break;
    case 8: 
      var $cond15 = 0;__label__ = 9; break;
    case 9: 
      var $cond15;
      var $conv16=(($cond15)|0);
      var $add17=($add)+($conv16);
      $retval=$add17;
      __label__ = 14; break;
    case 10: 
      var $16=$y_addr;
      var $17=$render_priv_addr;
      var $orig_height_nocrop18=(($17+132)|0);
      var $18=HEAP32[(($orig_height_nocrop18)>>2)];
      var $conv19=(($18)|0);
      var $mul20=($16)*($conv19);
      var $19=$render_priv_addr;
      var $track21=(($19+140)|0);
      var $20=HEAP32[(($track21)>>2)];
      var $PlayResY22=(($20+40)|0);
      var $21=HEAP32[(($PlayResY22)>>2)];
      var $conv23=(($21)|0);
      var $div24=($mul20)/($conv23);
      var $22=$render_priv_addr;
      var $settings25=(($22+12)|0);
      var $top_margin26=(($settings25+24)|0);
      var $23=HEAP32[(($top_margin26)>>2)];
      var $cmp27=(($23)|0) > 0;
      if ($cmp27) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $24=$render_priv_addr;
      var $settings30=(($24+12)|0);
      var $top_margin31=(($settings30+24)|0);
      var $25=HEAP32[(($top_margin31)>>2)];
      var $cond34 = $25;__label__ = 13; break;
    case 12: 
      var $cond34 = 0;__label__ = 13; break;
    case 13: 
      var $cond34;
      var $conv35=(($cond34)|0);
      var $add36=($div24)+($conv35);
      $retval=$add36;
      __label__ = 14; break;
    case 14: 
      var $26=$retval;
      ;
      return $26;
    default: assert(0, "bad label: " + __label__);
  }
}
_y2scr_sub["X"]=1;

function _get_base_point($bbox, $alignment, $bx, $by) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $bbox_addr;
      var $alignment_addr;
      var $bx_addr;
      var $by_addr;
      var $halign;
      var $valign;
      $bbox_addr=$bbox;
      $alignment_addr=$alignment;
      $bx_addr=$bx;
      $by_addr=$by;
      var $0=$alignment_addr;
      var $and=$0 & 3;
      $halign=$and;
      var $1=$alignment_addr;
      var $and1=$1 & 12;
      $valign=$and1;
      var $2=$bx_addr;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 8; break; }
    case 3: 
      var $3=$halign;
      if ((($3)|0) == 1) {
        __label__ = 4; break;
      }
      else if ((($3)|0) == 2) {
        __label__ = 5; break;
      }
      else if ((($3)|0) == 3) {
        __label__ = 6; break;
      }
      else {
      __label__ = 7; break;
      }
      
    case 4: 
      var $4=$bbox_addr;
      var $xMin=(($4)|0);
      var $5=(tempDoubleI32[0]=HEAP32[(($xMin)>>2)],tempDoubleI32[1]=HEAP32[((($xMin)+(4))>>2)],tempDoubleF64[0]);
      var $6=$bx_addr;
      (tempDoubleF64[0]=$5,HEAP32[(($6)>>2)]=tempDoubleI32[0],HEAP32[((($6)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 7; break;
    case 5: 
      var $7=$bbox_addr;
      var $xMax=(($7+8)|0);
      var $8=(tempDoubleI32[0]=HEAP32[(($xMax)>>2)],tempDoubleI32[1]=HEAP32[((($xMax)+(4))>>2)],tempDoubleF64[0]);
      var $9=$bbox_addr;
      var $xMin3=(($9)|0);
      var $10=(tempDoubleI32[0]=HEAP32[(($xMin3)>>2)],tempDoubleI32[1]=HEAP32[((($xMin3)+(4))>>2)],tempDoubleF64[0]);
      var $add=($8)+($10);
      var $div=($add)/(2);
      var $11=$bx_addr;
      (tempDoubleF64[0]=$div,HEAP32[(($11)>>2)]=tempDoubleI32[0],HEAP32[((($11)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 7; break;
    case 6: 
      var $12=$bbox_addr;
      var $xMax5=(($12+8)|0);
      var $13=(tempDoubleI32[0]=HEAP32[(($xMax5)>>2)],tempDoubleI32[1]=HEAP32[((($xMax5)+(4))>>2)],tempDoubleF64[0]);
      var $14=$bx_addr;
      (tempDoubleF64[0]=$13,HEAP32[(($14)>>2)]=tempDoubleI32[0],HEAP32[((($14)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $15=$by_addr;
      var $tobool6=(($15)|0)!=0;
      if ($tobool6) { __label__ = 9; break; } else { __label__ = 14; break; }
    case 9: 
      var $16=$valign;
      if ((($16)|0) == 4) {
        __label__ = 10; break;
      }
      else if ((($16)|0) == 8) {
        __label__ = 11; break;
      }
      else if ((($16)|0) == 0) {
        __label__ = 12; break;
      }
      else {
      __label__ = 13; break;
      }
      
    case 10: 
      var $17=$bbox_addr;
      var $yMin=(($17+16)|0);
      var $18=(tempDoubleI32[0]=HEAP32[(($yMin)>>2)],tempDoubleI32[1]=HEAP32[((($yMin)+(4))>>2)],tempDoubleF64[0]);
      var $19=$by_addr;
      (tempDoubleF64[0]=$18,HEAP32[(($19)>>2)]=tempDoubleI32[0],HEAP32[((($19)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 13; break;
    case 11: 
      var $20=$bbox_addr;
      var $yMax=(($20+24)|0);
      var $21=(tempDoubleI32[0]=HEAP32[(($yMax)>>2)],tempDoubleI32[1]=HEAP32[((($yMax)+(4))>>2)],tempDoubleF64[0]);
      var $22=$bbox_addr;
      var $yMin10=(($22+16)|0);
      var $23=(tempDoubleI32[0]=HEAP32[(($yMin10)>>2)],tempDoubleI32[1]=HEAP32[((($yMin10)+(4))>>2)],tempDoubleF64[0]);
      var $add11=($21)+($23);
      var $div12=($add11)/(2);
      var $24=$by_addr;
      (tempDoubleF64[0]=$div12,HEAP32[(($24)>>2)]=tempDoubleI32[0],HEAP32[((($24)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 13; break;
    case 12: 
      var $25=$bbox_addr;
      var $yMax14=(($25+24)|0);
      var $26=(tempDoubleI32[0]=HEAP32[(($yMax14)>>2)],tempDoubleI32[1]=HEAP32[((($yMax14)+(4))>>2)],tempDoubleF64[0]);
      var $27=$by_addr;
      (tempDoubleF64[0]=$26,HEAP32[(($27)>>2)]=tempDoubleI32[0],HEAP32[((($27)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_get_base_point["X"]=1;

function _x2scr_pos($render_priv, $x) {
  ;
  var __label__;

  var $render_priv_addr;
  var $x_addr;
  $render_priv_addr=$render_priv;
  $x_addr=$x;
  var $0=$x_addr;
  var $1=$render_priv_addr;
  var $orig_width=(($1+128)|0);
  var $2=HEAP32[(($orig_width)>>2)];
  var $conv=(($2)|0);
  var $mul=($0)*($conv);
  var $3=$render_priv_addr;
  var $font_scale_x=(($3+160)|0);
  var $4=(tempDoubleI32[0]=HEAP32[(($font_scale_x)>>2)],tempDoubleI32[1]=HEAP32[((($font_scale_x)+(4))>>2)],tempDoubleF64[0]);
  var $div=($mul)/($4);
  var $5=$render_priv_addr;
  var $track=(($5+140)|0);
  var $6=HEAP32[(($track)>>2)];
  var $PlayResX=(($6+36)|0);
  var $7=HEAP32[(($PlayResX)>>2)];
  var $conv1=(($7)|0);
  var $div2=($div)/($conv1);
  var $8=$render_priv_addr;
  var $settings=(($8+12)|0);
  var $left_margin=(($settings+32)|0);
  var $9=HEAP32[(($left_margin)>>2)];
  var $conv3=(($9)|0);
  var $add=($div2)+($conv3);
  ;
  return $add;
}


function _y2scr_pos($render_priv, $y) {
  ;
  var __label__;

  var $render_priv_addr;
  var $y_addr;
  $render_priv_addr=$render_priv;
  $y_addr=$y;
  var $0=$y_addr;
  var $1=$render_priv_addr;
  var $orig_height=(($1+124)|0);
  var $2=HEAP32[(($orig_height)>>2)];
  var $conv=(($2)|0);
  var $mul=($0)*($conv);
  var $3=$render_priv_addr;
  var $track=(($3+140)|0);
  var $4=HEAP32[(($track)>>2)];
  var $PlayResY=(($4+40)|0);
  var $5=HEAP32[(($PlayResY)>>2)];
  var $conv1=(($5)|0);
  var $div=($mul)/($conv1);
  var $6=$render_priv_addr;
  var $settings=(($6+12)|0);
  var $top_margin=(($settings+24)|0);
  var $7=HEAP32[(($top_margin)>>2)];
  var $conv2=(($7)|0);
  var $add=($div)+($conv2);
  ;
  return $add;
}


function _x2scr_scaled($render_priv, $x) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      var $x_addr;
      $render_priv_addr=$render_priv;
      $x_addr=$x;
      var $0=$x_addr;
      var $1=$render_priv_addr;
      var $orig_width_nocrop=(($1+136)|0);
      var $2=HEAP32[(($orig_width_nocrop)>>2)];
      var $conv=(($2)|0);
      var $mul=($0)*($conv);
      var $3=$render_priv_addr;
      var $track=(($3+140)|0);
      var $4=HEAP32[(($track)>>2)];
      var $PlayResX=(($4+36)|0);
      var $5=HEAP32[(($PlayResX)>>2)];
      var $conv1=(($5)|0);
      var $div=($mul)/($conv1);
      var $6=$render_priv_addr;
      var $settings=(($6+12)|0);
      var $left_margin=(($settings+32)|0);
      var $7=HEAP32[(($left_margin)>>2)];
      var $cmp=(($7)|0) > 0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $8=$render_priv_addr;
      var $settings3=(($8+12)|0);
      var $left_margin4=(($settings3+32)|0);
      var $9=HEAP32[(($left_margin4)>>2)];
      var $cond = $9;__label__ = 5; break;
    case 4: 
      var $cond = 0;__label__ = 5; break;
    case 5: 
      var $cond;
      var $conv5=(($cond)|0);
      var $add=($div)+($conv5);
      ;
      return $add;
    default: assert(0, "bad label: " + __label__);
  }
}


function _x2scr_pos_scaled($render_priv, $x) {
  ;
  var __label__;

  var $render_priv_addr;
  var $x_addr;
  $render_priv_addr=$render_priv;
  $x_addr=$x;
  var $0=$x_addr;
  var $1=$render_priv_addr;
  var $orig_width=(($1+128)|0);
  var $2=HEAP32[(($orig_width)>>2)];
  var $conv=(($2)|0);
  var $mul=($0)*($conv);
  var $3=$render_priv_addr;
  var $track=(($3+140)|0);
  var $4=HEAP32[(($track)>>2)];
  var $PlayResX=(($4+36)|0);
  var $5=HEAP32[(($PlayResX)>>2)];
  var $conv1=(($5)|0);
  var $div=($mul)/($conv1);
  var $6=$render_priv_addr;
  var $settings=(($6+12)|0);
  var $left_margin=(($settings+32)|0);
  var $7=HEAP32[(($left_margin)>>2)];
  var $conv2=(($7)|0);
  var $add=($div)+($conv2);
  ;
  return $add;
}


function _measure_text($render_priv) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      var $text_info;
      var $cur_line;
      var $max_asc;
      var $max_desc;
      var $last;
      var $i;
      var $empty_line;
      var $cur;
      $render_priv_addr=$render_priv;
      var $0=$render_priv_addr;
      var $text_info1=(($0+464)|0);
      $text_info=$text_info1;
      $cur_line=0;
      $max_asc=0;
      $max_desc=0;
      $last=0;
      $empty_line=1;
      var $1=$text_info;
      var $height=(($1+16)|0);
      (tempDoubleF64[0]=0,HEAP32[(($height)>>2)]=tempDoubleI32[0],HEAP32[((($height)+(4))>>2)]=tempDoubleI32[1]);
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $2=$i;
      var $3=$text_info;
      var $length=(($3+4)|0);
      var $4=HEAP32[(($length)>>2)];
      var $add=((($4)+(1))|0);
      var $cmp=(($2)|0) < (($add)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 24; break; }
    case 4: 
      var $5=$i;
      var $6=$text_info;
      var $length2=(($6+4)|0);
      var $7=HEAP32[(($length2)>>2)];
      var $cmp3=(($5)|0)==(($7)|0);
      if ($cmp3) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $8=$i;
      var $9=$text_info;
      var $glyphs=(($9)|0);
      var $10=HEAP32[(($glyphs)>>2)];
      var $arrayidx=(($10+($8)*(328))|0);
      var $linebreak=(($arrayidx+84)|0);
      var $11=HEAP8[($linebreak)];
      var $conv=(($11 << 24) >> 24);
      var $tobool=(($conv)|0)!=0;
      if ($tobool) { __label__ = 6; break; } else { __label__ = 12; break; }
    case 6: 
      var $12=$empty_line;
      var $tobool4=(($12)|0)!=0;
      if ($tobool4) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $13=$cur_line;
      var $cmp5=(($13)|0) > 0;
      if ($cmp5) { __label__ = 8; break; } else { __label__ = 11; break; }
    case 8: 
      var $14=$last;
      var $tobool8=(($14)|0)!=0;
      if ($tobool8) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $15=$i;
      var $16=$text_info;
      var $length10=(($16+4)|0);
      var $17=HEAP32[(($length10)>>2)];
      var $cmp11=(($15)|0) < (($17)|0);
      if ($cmp11) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $18=$last;
      var $asc=(($18+132)|0);
      var $19=HEAP32[(($asc)>>2)];
      var $call=_d6_to_double($19);
      var $div=($call)/(2);
      $max_asc=$div;
      var $20=$last;
      var $desc=(($20+136)|0);
      var $21=HEAP32[(($desc)>>2)];
      var $call14=_d6_to_double($21);
      var $div15=($call14)/(2);
      $max_desc=$div15;
      __label__ = 11; break;
    case 11: 
      var $22=$max_asc;
      var $23=$cur_line;
      var $24=$text_info;
      var $lines=(($24+8)|0);
      var $25=HEAP32[(($lines)>>2)];
      var $arrayidx16=(($25+($23)*(24))|0);
      var $asc17=(($arrayidx16)|0);
      (tempDoubleF64[0]=$22,HEAP32[(($asc17)>>2)]=tempDoubleI32[0],HEAP32[((($asc17)+(4))>>2)]=tempDoubleI32[1]);
      var $26=$max_desc;
      var $27=$cur_line;
      var $28=$text_info;
      var $lines18=(($28+8)|0);
      var $29=HEAP32[(($lines18)>>2)];
      var $arrayidx19=(($29+($27)*(24))|0);
      var $desc20=(($arrayidx19+8)|0);
      (tempDoubleF64[0]=$26,HEAP32[(($desc20)>>2)]=tempDoubleI32[0],HEAP32[((($desc20)+(4))>>2)]=tempDoubleI32[1]);
      var $30=$max_asc;
      var $31=$max_desc;
      var $add21=($30)+($31);
      var $32=$text_info;
      var $height22=(($32+16)|0);
      var $33=(tempDoubleI32[0]=HEAP32[(($height22)>>2)],tempDoubleI32[1]=HEAP32[((($height22)+(4))>>2)],tempDoubleF64[0]);
      var $add23=($33)+($add21);
      (tempDoubleF64[0]=$add23,HEAP32[(($height22)>>2)]=tempDoubleI32[0],HEAP32[((($height22)+(4))>>2)]=tempDoubleI32[1]);
      var $34=$cur_line;
      var $inc=((($34)+(1))|0);
      $cur_line=$inc;
      $max_desc=0;
      $max_asc=0;
      $empty_line=1;
      __label__ = 13; break;
    case 12: 
      $empty_line=0;
      __label__ = 13; break;
    case 13: 
      var $35=$i;
      var $36=$text_info;
      var $length25=(($36+4)|0);
      var $37=HEAP32[(($length25)>>2)];
      var $cmp26=(($35)|0) < (($37)|0);
      if ($cmp26) { __label__ = 14; break; } else { __label__ = 22; break; }
    case 14: 
      var $38=$text_info;
      var $glyphs29=(($38)|0);
      var $39=HEAP32[(($glyphs29)>>2)];
      var $40=$i;
      var $add_ptr=(($39+($40)*(328))|0);
      $cur=$add_ptr;
      var $41=$cur;
      var $asc30=(($41+132)|0);
      var $42=HEAP32[(($asc30)>>2)];
      var $call31=_d6_to_double($42);
      var $43=$max_asc;
      var $cmp32=$call31 > $43;
      if ($cmp32) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $44=$cur;
      var $asc35=(($44+132)|0);
      var $45=HEAP32[(($asc35)>>2)];
      var $call36=_d6_to_double($45);
      $max_asc=$call36;
      __label__ = 16; break;
    case 16: 
      var $46=$cur;
      var $desc38=(($46+136)|0);
      var $47=HEAP32[(($desc38)>>2)];
      var $call39=_d6_to_double($47);
      var $48=$max_desc;
      var $cmp40=$call39 > $48;
      if ($cmp40) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $49=$cur;
      var $desc43=(($49+136)|0);
      var $50=HEAP32[(($desc43)>>2)];
      var $call44=_d6_to_double($50);
      $max_desc=$call44;
      __label__ = 18; break;
    case 18: 
      var $51=$cur;
      var $symbol=(($51)|0);
      var $52=HEAP32[(($symbol)>>2)];
      var $cmp46=(($52)|0)!=10;
      if ($cmp46) { __label__ = 19; break; } else { __label__ = 21; break; }
    case 19: 
      var $53=$cur;
      var $symbol49=(($53)|0);
      var $54=HEAP32[(($symbol49)>>2)];
      var $cmp50=(($54)|0)!=0;
      if ($cmp50) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $55=$cur;
      $last=$55;
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $56=$i;
      var $inc55=((($56)+(1))|0);
      $i=$inc55;
      __label__ = 3; break;
    case 24: 
      var $57=$text_info;
      var $n_lines=(($57+12)|0);
      var $58=HEAP32[(($n_lines)>>2)];
      var $sub=((($58)-(1))|0);
      var $conv56=(($sub)|0);
      var $59=$render_priv_addr;
      var $settings=(($59+12)|0);
      var $line_spacing=(($settings+16)|0);
      var $60=(tempDoubleI32[0]=HEAP32[(($line_spacing)>>2)],tempDoubleI32[1]=HEAP32[((($line_spacing)+(4))>>2)],tempDoubleF64[0]);
      var $mul=($conv56)*($60);
      var $61=$text_info;
      var $height57=(($61+16)|0);
      var $62=(tempDoubleI32[0]=HEAP32[(($height57)>>2)],tempDoubleI32[1]=HEAP32[((($height57)+(4))>>2)],tempDoubleF64[0]);
      var $add58=($62)+($mul);
      (tempDoubleF64[0]=$add58,HEAP32[(($height57)>>2)]=tempDoubleI32[0],HEAP32[((($height57)+(4))>>2)]=tempDoubleI32[1]);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_measure_text["X"]=1;

function _compute_string_bbox($text, $bbox) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $text_addr;
      var $bbox_addr;
      var $i;
      var $info;
      var $s;
      var $e;
      $text_addr=$text;
      $bbox_addr=$bbox;
      var $0=$text_addr;
      var $length=(($0+4)|0);
      var $1=HEAP32[(($length)>>2)];
      var $cmp=(($1)|0) > 0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 19; break; }
    case 3: 
      var $2=$bbox_addr;
      var $xMin=(($2)|0);
      (tempDoubleF64[0]=32000,HEAP32[(($xMin)>>2)]=tempDoubleI32[0],HEAP32[((($xMin)+(4))>>2)]=tempDoubleI32[1]);
      var $3=$bbox_addr;
      var $xMax=(($3+8)|0);
      (tempDoubleF64[0]=-32000,HEAP32[(($xMax)>>2)]=tempDoubleI32[0],HEAP32[((($xMax)+(4))>>2)]=tempDoubleI32[1]);
      var $4=$text_addr;
      var $lines=(($4+8)|0);
      var $5=HEAP32[(($lines)>>2)];
      var $arrayidx=(($5)|0);
      var $asc=(($arrayidx)|0);
      var $6=(tempDoubleI32[0]=HEAP32[(($asc)>>2)],tempDoubleI32[1]=HEAP32[((($asc)+(4))>>2)],tempDoubleF64[0]);
      var $mul=($6)*(-1);
      var $7=$text_addr;
      var $glyphs=(($7)|0);
      var $8=HEAP32[(($glyphs)>>2)];
      var $arrayidx1=(($8)|0);
      var $pos=(($arrayidx1+68)|0);
      var $y=(($pos+4)|0);
      var $9=HEAP32[(($y)>>2)];
      var $call=_d6_to_double($9);
      var $add=($mul)+($call);
      var $10=$bbox_addr;
      var $yMin=(($10+16)|0);
      (tempDoubleF64[0]=$add,HEAP32[(($yMin)>>2)]=tempDoubleI32[0],HEAP32[((($yMin)+(4))>>2)]=tempDoubleI32[1]);
      var $11=$text_addr;
      var $height=(($11+16)|0);
      var $12=(tempDoubleI32[0]=HEAP32[(($height)>>2)],tempDoubleI32[1]=HEAP32[((($height)+(4))>>2)],tempDoubleF64[0]);
      var $13=$text_addr;
      var $lines2=(($13+8)|0);
      var $14=HEAP32[(($lines2)>>2)];
      var $arrayidx3=(($14)|0);
      var $asc4=(($arrayidx3)|0);
      var $15=(tempDoubleI32[0]=HEAP32[(($asc4)>>2)],tempDoubleI32[1]=HEAP32[((($asc4)+(4))>>2)],tempDoubleF64[0]);
      var $sub=($12)-($15);
      var $16=$text_addr;
      var $glyphs5=(($16)|0);
      var $17=HEAP32[(($glyphs5)>>2)];
      var $arrayidx6=(($17)|0);
      var $pos7=(($arrayidx6+68)|0);
      var $y8=(($pos7+4)|0);
      var $18=HEAP32[(($y8)>>2)];
      var $call9=_d6_to_double($18);
      var $add10=($sub)+($call9);
      var $19=$bbox_addr;
      var $yMax=(($19+24)|0);
      (tempDoubleF64[0]=$add10,HEAP32[(($yMax)>>2)]=tempDoubleI32[0],HEAP32[((($yMax)+(4))>>2)]=tempDoubleI32[1]);
      $i=0;
      __label__ = 4; break;
    case 4: 
      var $20=$i;
      var $21=$text_addr;
      var $length11=(($21+4)|0);
      var $22=HEAP32[(($length11)>>2)];
      var $cmp12=(($20)|0) < (($22)|0);
      if ($cmp12) { __label__ = 5; break; } else { __label__ = 18; break; }
    case 5: 
      var $23=$text_addr;
      var $glyphs13=(($23)|0);
      var $24=HEAP32[(($glyphs13)>>2)];
      var $25=$i;
      var $add_ptr=(($24+($25)*(328))|0);
      $info=$add_ptr;
      var $26=$info;
      var $skip=(($26+4)|0);
      var $27=HEAP32[(($skip)>>2)];
      var $tobool=(($27)|0)!=0;
      if ($tobool) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 17; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $28=$info;
      var $tobool15=(($28)|0)!=0;
      if ($tobool15) { __label__ = 9; break; } else { __label__ = 16; break; }
    case 9: 
      var $29=$info;
      var $pos16=(($29+68)|0);
      var $x=(($pos16)|0);
      var $30=HEAP32[(($x)>>2)];
      var $call17=_d6_to_double($30);
      $s=$call17;
      var $31=$s;
      var $32=$info;
      var $advance=(($32+104)|0);
      var $x18=(($advance)|0);
      var $33=HEAP32[(($x18)>>2)];
      var $call19=_d6_to_double($33);
      var $add20=($31)+($call19);
      $e=$add20;
      var $34=$bbox_addr;
      var $xMin21=(($34)|0);
      var $35=(tempDoubleI32[0]=HEAP32[(($xMin21)>>2)],tempDoubleI32[1]=HEAP32[((($xMin21)+(4))>>2)],tempDoubleF64[0]);
      var $36=$s;
      var $cmp22=$35 > $36;
      if ($cmp22) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $37=$s;
      var $cond = $37;__label__ = 12; break;
    case 11: 
      var $38=$bbox_addr;
      var $xMin23=(($38)|0);
      var $39=(tempDoubleI32[0]=HEAP32[(($xMin23)>>2)],tempDoubleI32[1]=HEAP32[((($xMin23)+(4))>>2)],tempDoubleF64[0]);
      var $cond = $39;__label__ = 12; break;
    case 12: 
      var $cond;
      var $40=$bbox_addr;
      var $xMin24=(($40)|0);
      (tempDoubleF64[0]=$cond,HEAP32[(($xMin24)>>2)]=tempDoubleI32[0],HEAP32[((($xMin24)+(4))>>2)]=tempDoubleI32[1]);
      var $41=$bbox_addr;
      var $xMax25=(($41+8)|0);
      var $42=(tempDoubleI32[0]=HEAP32[(($xMax25)>>2)],tempDoubleI32[1]=HEAP32[((($xMax25)+(4))>>2)],tempDoubleF64[0]);
      var $43=$e;
      var $cmp26=$42 > $43;
      if ($cmp26) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $44=$bbox_addr;
      var $xMax28=(($44+8)|0);
      var $45=(tempDoubleI32[0]=HEAP32[(($xMax28)>>2)],tempDoubleI32[1]=HEAP32[((($xMax28)+(4))>>2)],tempDoubleF64[0]);
      var $cond31 = $45;__label__ = 15; break;
    case 14: 
      var $46=$e;
      var $cond31 = $46;__label__ = 15; break;
    case 15: 
      var $cond31;
      var $47=$bbox_addr;
      var $xMax32=(($47+8)|0);
      (tempDoubleF64[0]=$cond31,HEAP32[(($xMax32)>>2)]=tempDoubleI32[0],HEAP32[((($xMax32)+(4))>>2)]=tempDoubleI32[1]);
      var $48=$info;
      var $next=(($48+324)|0);
      var $49=HEAP32[(($next)>>2)];
      $info=$49;
      __label__ = 8; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $50=$i;
      var $inc=((($50)+(1))|0);
      $i=$inc;
      __label__ = 4; break;
    case 18: 
      __label__ = 20; break;
    case 19: 
      var $51=$bbox_addr;
      var $yMax33=(($51+24)|0);
      (tempDoubleF64[0]=0,HEAP32[(($yMax33)>>2)]=tempDoubleI32[0],HEAP32[((($yMax33)+(4))>>2)]=tempDoubleI32[1]);
      var $52=$bbox_addr;
      var $yMin34=(($52+16)|0);
      (tempDoubleF64[0]=0,HEAP32[(($yMin34)>>2)]=tempDoubleI32[0],HEAP32[((($yMin34)+(4))>>2)]=tempDoubleI32[1]);
      var $53=$bbox_addr;
      var $xMax35=(($53+8)|0);
      (tempDoubleF64[0]=0,HEAP32[(($xMax35)>>2)]=tempDoubleI32[0],HEAP32[((($xMax35)+(4))>>2)]=tempDoubleI32[1]);
      var $54=$bbox_addr;
      var $xMin36=(($54)|0);
      (tempDoubleF64[0]=0,HEAP32[(($xMin36)>>2)]=tempDoubleI32[0],HEAP32[((($xMin36)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 20; break;
    case 20: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_compute_string_bbox["X"]=1;

function _get_bitmap_glyph($render_priv, $info) {
  var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      var $info_addr;
      var $val;
      var $key;
      var $shift=__stackBase__;
      var $hash_val=(__stackBase__)+(8);
      var $error;
      var $fax_scaled;
      var $fay_scaled;
      var $outline10=(__stackBase__)+(20);
      var $border=(__stackBase__)+(24);
      var $scale_x;
      var $m=(__stackBase__)+(28);
      $render_priv_addr=$render_priv;
      $info_addr=$info;
      var $0=$info_addr;
      var $hash_key=(($0+260)|0);
      var $u=(($hash_key+4)|0);
      var $outline=$u;
      $key=$outline;
      var $1=$info_addr;
      var $outline1=(($1+32)|0);
      var $2=HEAP32[(($outline1)>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $3=$info_addr;
      var $symbol=(($3)|0);
      var $4=HEAP32[(($symbol)>>2)];
      var $cmp=(($4)|0)==10;
      if ($cmp) { __label__ = 6; break; } else { __label__ = 4; break; }
    case 4: 
      var $5=$info_addr;
      var $symbol3=(($5)|0);
      var $6=HEAP32[(($symbol3)>>2)];
      var $cmp4=(($6)|0)==0;
      if ($cmp4) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $7=$info_addr;
      var $skip=(($7+4)|0);
      var $8=HEAP32[(($skip)>>2)];
      var $tobool6=(($8)|0)!=0;
      if ($tobool6) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 22; break;
    case 7: 
      var $9=$render_priv_addr;
      var $cache=(($9+496)|0);
      var $bitmap_cache=(($cache+8)|0);
      var $10=HEAP32[(($bitmap_cache)>>2)];
      var $11=$info_addr;
      var $hash_key7=(($11+260)|0);
      var $12=$hash_key7;
      var $call=_ass_cache_get($10, $12);
      var $13=$call;
      $val=$13;
      var $14=$val;
      var $tobool8=(($14)|0)!=0;
      if ($tobool8) { __label__ = 19; break; } else { __label__ = 8; break; }
    case 8: 
      var $15=$render_priv_addr;
      var $font_scale_x=(($15+160)|0);
      var $16=(tempDoubleI32[0]=HEAP32[(($font_scale_x)>>2)],tempDoubleI32[1]=HEAP32[((($font_scale_x)+(4))>>2)],tempDoubleF64[0]);
      $scale_x=$16;
      var $bm_s=(($hash_val+8)|0);
      HEAP32[(($bm_s)>>2)]=0;
      var $bm_o=(($hash_val+4)|0);
      HEAP32[(($bm_o)>>2)]=0;
      var $bm=(($hash_val)|0);
      HEAP32[(($bm)>>2)]=0;
      var $17=$render_priv_addr;
      var $ftlibrary=(($17+4)|0);
      var $18=HEAP32[(($ftlibrary)>>2)];
      var $19=$info_addr;
      var $outline11=(($19+32)|0);
      var $20=HEAP32[(($outline11)>>2)];
      _outline_copy($18, $20, $outline10);
      var $21=$render_priv_addr;
      var $ftlibrary12=(($21+4)|0);
      var $22=HEAP32[(($ftlibrary12)>>2)];
      var $23=$info_addr;
      var $border13=(($23+36)|0);
      var $24=HEAP32[(($border13)>>2)];
      _outline_copy($22, $24, $border);
      var $25=$key;
      var $shift_x=(($25+36)|0);
      var $26=HEAP32[(($shift_x)>>2)];
      var $x=(($shift)|0);
      HEAP32[(($x)>>2)]=$26;
      var $27=$key;
      var $shift_y=(($27+40)|0);
      var $28=HEAP32[(($shift_y)>>2)];
      var $y=(($shift+4)|0);
      HEAP32[(($y)>>2)]=$28;
      var $29=$info_addr;
      var $fax=(($29+192)|0);
      var $30=(tempDoubleI32[0]=HEAP32[(($fax)>>2)],tempDoubleI32[1]=HEAP32[((($fax)+(4))>>2)],tempDoubleF64[0]);
      var $31=$render_priv_addr;
      var $state=(($31+176)|0);
      var $scale_x14=(($state+116)|0);
      var $32=(tempDoubleI32[0]=HEAP32[(($scale_x14)>>2)],tempDoubleI32[1]=HEAP32[((($scale_x14)+(4))>>2)],tempDoubleF64[0]);
      var $mul=($30)*($32);
      $fax_scaled=$mul;
      var $33=$info_addr;
      var $fay=(($33+200)|0);
      var $34=(tempDoubleI32[0]=HEAP32[(($fay)>>2)],tempDoubleI32[1]=HEAP32[((($fay)+(4))>>2)],tempDoubleF64[0]);
      var $35=$render_priv_addr;
      var $state15=(($35+176)|0);
      var $scale_y=(($state15+124)|0);
      var $36=(tempDoubleI32[0]=HEAP32[(($scale_y)>>2)],tempDoubleI32[1]=HEAP32[((($scale_y)+(4))>>2)],tempDoubleF64[0]);
      var $mul16=($34)*($36);
      $fay_scaled=$mul16;
      var $37=HEAP32[(($outline10)>>2)];
      var $38=HEAP32[(($border)>>2)];
      var $39=$info_addr;
      var $frx=(($39+168)|0);
      var $40=(tempDoubleI32[0]=HEAP32[(($frx)>>2)],tempDoubleI32[1]=HEAP32[((($frx)+(4))>>2)],tempDoubleF64[0]);
      var $41=$info_addr;
      var $fry=(($41+176)|0);
      var $42=(tempDoubleI32[0]=HEAP32[(($fry)>>2)],tempDoubleI32[1]=HEAP32[((($fry)+(4))>>2)],tempDoubleF64[0]);
      var $43=$info_addr;
      var $frz=(($43+184)|0);
      var $44=(tempDoubleI32[0]=HEAP32[(($frz)>>2)],tempDoubleI32[1]=HEAP32[((($frz)+(4))>>2)],tempDoubleF64[0]);
      var $45=$fax_scaled;
      var $46=$fay_scaled;
      var $47=$render_priv_addr;
      var $font_scale=(($47+152)|0);
      var $48=(tempDoubleI32[0]=HEAP32[(($font_scale)>>2)],tempDoubleI32[1]=HEAP32[((($font_scale)+(4))>>2)],tempDoubleF64[0]);
      var $49=$info_addr;
      var $asc=(($49+132)|0);
      var $50=HEAP32[(($asc)>>2)];
      var $x17=(($shift)|0);
      var $51=HEAP32[(($x17)>>2)];
      var $y18=(($shift+4)|0);
      var $52=HEAP32[(($y18)>>2)];
      _transform_3d($51, $52, $37, $38, $40, $42, $44, $45, $46, $48, $50);
      var $xx=(($m)|0);
      var $53=$scale_x;
      var $call19=_double_to_d16170($53);
      HEAP32[(($xx)>>2)]=$call19;
      var $xy=(($m+4)|0);
      HEAP32[(($xy)>>2)]=0;
      var $yx=(($m+8)|0);
      HEAP32[(($yx)>>2)]=0;
      var $yy=(($m+12)|0);
      var $call20=_double_to_d16170(1);
      HEAP32[(($yy)>>2)]=$call20;
      var $54=HEAP32[(($outline10)>>2)];
      var $tobool21=(($54)|0)!=0;
      if ($tobool21) { __label__ = 9; break; } else { __label__ = 12; break; }
    case 9: 
      var $55=$scale_x;
      var $cmp23=$55 != 1;
      if ($cmp23) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $56=HEAP32[(($outline10)>>2)];
      _FT_Outline_Transform($56, $m);
      __label__ = 11; break;
    case 11: 
      var $57=HEAP32[(($outline10)>>2)];
      var $58=$key;
      var $advance=(($58+44)|0);
      var $x26=(($advance)|0);
      var $59=HEAP32[(($x26)>>2)];
      var $60=$key;
      var $advance27=(($60+44)|0);
      var $y28=(($advance27+4)|0);
      var $61=HEAP32[(($y28)>>2)];
      var $sub=(((-$61))|0);
      _FT_Outline_Translate($57, $59, $sub);
      __label__ = 12; break;
    case 12: 
      var $62=HEAP32[(($border)>>2)];
      var $tobool30=(($62)|0)!=0;
      if ($tobool30) { __label__ = 13; break; } else { __label__ = 16; break; }
    case 13: 
      var $63=$scale_x;
      var $cmp32=$63 != 1;
      if ($cmp32) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $64=HEAP32[(($border)>>2)];
      _FT_Outline_Transform($64, $m);
      __label__ = 15; break;
    case 15: 
      var $65=HEAP32[(($border)>>2)];
      var $66=$key;
      var $advance35=(($66+44)|0);
      var $x36=(($advance35)|0);
      var $67=HEAP32[(($x36)>>2)];
      var $68=$key;
      var $advance37=(($68+44)|0);
      var $y38=(($advance37+4)|0);
      var $69=HEAP32[(($y38)>>2)];
      var $sub39=(((-$69))|0);
      _FT_Outline_Translate($65, $67, $sub39);
      __label__ = 16; break;
    case 16: 
      var $70=$render_priv_addr;
      var $library=(($70)|0);
      var $71=HEAP32[(($library)>>2)];
      var $72=$render_priv_addr;
      var $synth_priv=(($72+92)|0);
      var $73=HEAP32[(($synth_priv)>>2)];
      var $74=$render_priv_addr;
      var $ftlibrary41=(($74+4)|0);
      var $75=HEAP32[(($ftlibrary41)>>2)];
      var $76=HEAP32[(($outline10)>>2)];
      var $77=HEAP32[(($border)>>2)];
      var $bm42=(($hash_val)|0);
      var $bm_o43=(($hash_val+4)|0);
      var $bm_s44=(($hash_val+8)|0);
      var $78=$info_addr;
      var $be=(($78+140)|0);
      var $79=HEAP32[(($be)>>2)];
      var $80=$info_addr;
      var $blur=(($80+144)|0);
      var $81=(tempDoubleI32[0]=HEAP32[(($blur)>>2)],tempDoubleI32[1]=HEAP32[((($blur)+(4))>>2)],tempDoubleF64[0]);
      var $82=$render_priv_addr;
      var $border_scale=(($82+168)|0);
      var $83=(tempDoubleI32[0]=HEAP32[(($border_scale)>>2)],tempDoubleI32[1]=HEAP32[((($border_scale)+(4))>>2)],tempDoubleF64[0]);
      var $mul45=($81)*($83);
      var $84=$key;
      var $shadow_offset=(($84+52)|0);
      var $85=$render_priv_addr;
      var $state46=(($85+176)|0);
      var $style=(($state46+4)|0);
      var $86=HEAP32[(($style)>>2)];
      var $BorderStyle=(($86+76)|0);
      var $87=HEAP32[(($BorderStyle)>>2)];
      var $x47=(($shadow_offset)|0);
      var $88=HEAP32[(($x47)>>2)];
      var $y48=(($shadow_offset+4)|0);
      var $89=HEAP32[(($y48)>>2)];
      var $call49=_outline_to_bitmap3($71, $73, $75, $76, $77, $bm42, $bm_o43, $bm_s44, $79, $mul45, $88, $89, $87);
      $error=$call49;
      var $90=$error;
      var $tobool50=(($90)|0)!=0;
      if ($tobool50) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $91=$info_addr;
      var $symbol52=(($91)|0);
      HEAP32[(($symbol52)>>2)]=0;
      __label__ = 18; break;
    case 18: 
      var $92=$render_priv_addr;
      var $cache54=(($92+496)|0);
      var $bitmap_cache55=(($cache54+8)|0);
      var $93=HEAP32[(($bitmap_cache55)>>2)];
      var $94=$info_addr;
      var $hash_key56=(($94+260)|0);
      var $95=$hash_key56;
      var $96=$hash_val;
      var $call57=_ass_cache_put($93, $95, $96);
      var $97=$call57;
      $val=$97;
      var $98=$render_priv_addr;
      var $ftlibrary58=(($98+4)|0);
      var $99=HEAP32[(($ftlibrary58)>>2)];
      var $100=HEAP32[(($outline10)>>2)];
      _outline_free($99, $100);
      var $101=$render_priv_addr;
      var $ftlibrary59=(($101+4)|0);
      var $102=HEAP32[(($ftlibrary59)>>2)];
      var $103=HEAP32[(($border)>>2)];
      _outline_free($102, $103);
      __label__ = 19; break;
    case 19: 
      var $104=$val;
      var $bm61=(($104)|0);
      var $105=HEAP32[(($bm61)>>2)];
      var $106=$info_addr;
      var $bm62=(($106+40)|0);
      HEAP32[(($bm62)>>2)]=$105;
      var $107=$val;
      var $bm_o63=(($107+4)|0);
      var $108=HEAP32[(($bm_o63)>>2)];
      var $109=$info_addr;
      var $bm_o64=(($109+44)|0);
      HEAP32[(($bm_o64)>>2)]=$108;
      var $110=$val;
      var $bm_s65=(($110+8)|0);
      var $111=HEAP32[(($bm_s65)>>2)];
      var $112=$info_addr;
      var $bm_s66=(($112+48)|0);
      HEAP32[(($bm_s66)>>2)]=$111;
      var $113=$info_addr;
      var $border67=(($113+36)|0);
      var $114=HEAP32[(($border67)>>2)];
      var $tobool68=(($114)|0)!=0;
      if ($tobool68) { __label__ = 22; break; } else { __label__ = 20; break; }
    case 20: 
      var $115=$info_addr;
      var $c=(($115+88)|0);
      var $arrayidx=(($c)|0);
      var $116=HEAP32[(($arrayidx)>>2)];
      var $and=$116 & 255;
      var $cmp69=(($and)|0)==255;
      if ($cmp69) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $117=$info_addr;
      var $bm_s71=(($117+48)|0);
      HEAP32[(($bm_s71)>>2)]=0;
      __label__ = 22; break;
    case 22: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_get_bitmap_glyph["X"]=1;

function _render_text($render_priv, $dst_x, $dst_y) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      var $dst_x_addr;
      var $dst_y_addr;
      var $pen_x;
      var $pen_y;
      var $i;
      var $bm;
      var $head=__stackBase__;
      var $tail;
      var $last_tail;
      var $here_tail;
      var $text_info;
      var $info;
      var $info44;
      var $info111;
      $render_priv_addr=$render_priv;
      $dst_x_addr=$dst_x;
      $dst_y_addr=$dst_y;
      $tail=$head;
      $last_tail=0;
      $here_tail=0;
      var $0=$render_priv_addr;
      var $text_info1=(($0+464)|0);
      $text_info=$text_info1;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $1=$i;
      var $2=$text_info;
      var $length=(($2+4)|0);
      var $3=HEAP32[(($length)>>2)];
      var $cmp=(($1)|0) < (($3)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 22; break; }
    case 4: 
      var $4=$text_info;
      var $glyphs=(($4)|0);
      var $5=HEAP32[(($glyphs)>>2)];
      var $6=$i;
      var $add_ptr=(($5+($6)*(328))|0);
      $info=$add_ptr;
      var $7=$info;
      var $symbol=(($7)|0);
      var $8=HEAP32[(($symbol)>>2)];
      var $cmp2=(($8)|0)==0;
      if ($cmp2) { __label__ = 10; break; } else { __label__ = 5; break; }
    case 5: 
      var $9=$info;
      var $symbol3=(($9)|0);
      var $10=HEAP32[(($symbol3)>>2)];
      var $cmp4=(($10)|0)==10;
      if ($cmp4) { __label__ = 10; break; } else { __label__ = 6; break; }
    case 6: 
      var $11=$info;
      var $bm_s=(($11+48)|0);
      var $12=HEAP32[(($bm_s)>>2)];
      var $tobool=(($12)|0)!=0;
      if ($tobool) { __label__ = 7; break; } else { __label__ = 10; break; }
    case 7: 
      var $13=$info;
      var $shadow_x=(($13+152)|0);
      var $14=(tempDoubleI32[0]=HEAP32[(($shadow_x)>>2)],tempDoubleI32[1]=HEAP32[((($shadow_x)+(4))>>2)],tempDoubleF64[0]);
      var $cmp7=$14 == 0;
      if ($cmp7) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $15=$info;
      var $shadow_y=(($15+160)|0);
      var $16=(tempDoubleI32[0]=HEAP32[(($shadow_y)>>2)],tempDoubleI32[1]=HEAP32[((($shadow_y)+(4))>>2)],tempDoubleF64[0]);
      var $cmp8=$16 == 0;
      if ($cmp8) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $17=$info;
      var $skip=(($17+4)|0);
      var $18=HEAP32[(($skip)>>2)];
      var $tobool10=(($18)|0)!=0;
      if ($tobool10) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      __label__ = 21; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $19=$info;
      var $tobool11=(($19)|0)!=0;
      if ($tobool11) { __label__ = 13; break; } else { __label__ = 20; break; }
    case 13: 
      var $20=$info;
      var $bm_s12=(($20+48)|0);
      var $21=HEAP32[(($bm_s12)>>2)];
      var $tobool13=(($21)|0)!=0;
      if ($tobool13) { __label__ = 15; break; } else { __label__ = 14; break; }
    case 14: 
      var $22=$info;
      var $next=(($22+324)|0);
      var $23=HEAP32[(($next)>>2)];
      $info=$23;
      __label__ = 12; break;
    case 15: 
      var $24=$dst_x_addr;
      var $25=$info;
      var $pos=(($25+68)|0);
      var $x=(($pos)|0);
      var $26=HEAP32[(($x)>>2)];
      var $shr=$26 >> 6;
      var $add=((($24)+($shr))|0);
      var $27=$info;
      var $shadow_x16=(($27+152)|0);
      var $28=(tempDoubleI32[0]=HEAP32[(($shadow_x16)>>2)],tempDoubleI32[1]=HEAP32[((($shadow_x16)+(4))>>2)],tempDoubleF64[0]);
      var $29=$render_priv_addr;
      var $border_scale=(($29+168)|0);
      var $30=(tempDoubleI32[0]=HEAP32[(($border_scale)>>2)],tempDoubleI32[1]=HEAP32[((($border_scale)+(4))>>2)],tempDoubleF64[0]);
      var $mul=($28)*($30);
      var $conv=(($mul)&-1);
      var $add17=((($add)+($conv))|0);
      $pen_x=$add17;
      var $31=$dst_y_addr;
      var $32=$info;
      var $pos18=(($32+68)|0);
      var $y=(($pos18+4)|0);
      var $33=HEAP32[(($y)>>2)];
      var $shr19=$33 >> 6;
      var $add20=((($31)+($shr19))|0);
      var $34=$info;
      var $shadow_y21=(($34+160)|0);
      var $35=(tempDoubleI32[0]=HEAP32[(($shadow_y21)>>2)],tempDoubleI32[1]=HEAP32[((($shadow_y21)+(4))>>2)],tempDoubleF64[0]);
      var $36=$render_priv_addr;
      var $border_scale22=(($36+168)|0);
      var $37=(tempDoubleI32[0]=HEAP32[(($border_scale22)>>2)],tempDoubleI32[1]=HEAP32[((($border_scale22)+(4))>>2)],tempDoubleF64[0]);
      var $mul23=($35)*($37);
      var $conv24=(($mul23)&-1);
      var $add25=((($add20)+($conv24))|0);
      $pen_y=$add25;
      var $38=$info;
      var $bm_s26=(($38+48)|0);
      var $39=HEAP32[(($bm_s26)>>2)];
      $bm=$39;
      var $40=$tail;
      $here_tail=$40;
      var $41=$render_priv_addr;
      var $42=$bm;
      var $43=$pen_x;
      var $44=$pen_y;
      var $45=$info;
      var $c=(($45+88)|0);
      var $arrayidx=(($c+12)|0);
      var $46=HEAP32[(($arrayidx)>>2)];
      var $47=$tail;
      var $call=_render_glyph($41, $42, $43, $44, $46, 0, 1000000, $47);
      $tail=$call;
      var $48=$last_tail;
      var $tobool27=(($48)|0)!=0;
      if ($tobool27) { __label__ = 16; break; } else { __label__ = 19; break; }
    case 16: 
      var $49=$tail;
      var $50=$here_tail;
      var $cmp29=(($49)|0)!=(($50)|0);
      if ($cmp29) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 17: 
      var $51=$info;
      var $c32=(($51+88)|0);
      var $arrayidx33=(($c32+12)|0);
      var $52=HEAP32[(($arrayidx33)>>2)];
      var $and=$52 & 255;
      var $cmp34=(($and)>>>0) > 0;
      if ($cmp34) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $53=$render_priv_addr;
      var $54=$last_tail;
      var $55=$here_tail;
      _render_overlap($53, $54, $55);
      __label__ = 19; break;
    case 19: 
      var $56=$here_tail;
      $last_tail=$56;
      var $57=$info;
      var $next38=(($57+324)|0);
      var $58=HEAP32[(($next38)>>2)];
      $info=$58;
      __label__ = 12; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $59=$i;
      var $inc=((($59)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 22: 
      $last_tail=0;
      $i=0;
      __label__ = 23; break;
    case 23: 
      var $60=$i;
      var $61=$text_info;
      var $length40=(($61+4)|0);
      var $62=HEAP32[(($length40)>>2)];
      var $cmp41=(($60)|0) < (($62)|0);
      if ($cmp41) { __label__ = 24; break; } else { __label__ = 44; break; }
    case 24: 
      var $63=$text_info;
      var $glyphs45=(($63)|0);
      var $64=HEAP32[(($glyphs45)>>2)];
      var $65=$i;
      var $add_ptr46=(($64+($65)*(328))|0);
      $info44=$add_ptr46;
      var $66=$info44;
      var $symbol47=(($66)|0);
      var $67=HEAP32[(($symbol47)>>2)];
      var $cmp48=(($67)|0)==0;
      if ($cmp48) { __label__ = 28; break; } else { __label__ = 25; break; }
    case 25: 
      var $68=$info44;
      var $symbol51=(($68)|0);
      var $69=HEAP32[(($symbol51)>>2)];
      var $cmp52=(($69)|0)==10;
      if ($cmp52) { __label__ = 28; break; } else { __label__ = 26; break; }
    case 26: 
      var $70=$info44;
      var $bm_o=(($70+44)|0);
      var $71=HEAP32[(($bm_o)>>2)];
      var $tobool55=(($71)|0)!=0;
      if ($tobool55) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $72=$info44;
      var $skip57=(($72+4)|0);
      var $73=HEAP32[(($skip57)>>2)];
      var $tobool58=(($73)|0)!=0;
      if ($tobool58) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      __label__ = 43; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      var $74=$info44;
      var $tobool62=(($74)|0)!=0;
      if ($tobool62) { __label__ = 31; break; } else { __label__ = 42; break; }
    case 31: 
      var $75=$info44;
      var $bm_o64=(($75+44)|0);
      var $76=HEAP32[(($bm_o64)>>2)];
      var $tobool65=(($76)|0)!=0;
      if ($tobool65) { __label__ = 33; break; } else { __label__ = 32; break; }
    case 32: 
      var $77=$info44;
      var $next67=(($77+324)|0);
      var $78=HEAP32[(($next67)>>2)];
      $info44=$78;
      __label__ = 30; break;
    case 33: 
      var $79=$dst_x_addr;
      var $80=$info44;
      var $pos69=(($80+68)|0);
      var $x70=(($pos69)|0);
      var $81=HEAP32[(($x70)>>2)];
      var $shr71=$81 >> 6;
      var $add72=((($79)+($shr71))|0);
      $pen_x=$add72;
      var $82=$dst_y_addr;
      var $83=$info44;
      var $pos73=(($83+68)|0);
      var $y74=(($pos73+4)|0);
      var $84=HEAP32[(($y74)>>2)];
      var $shr75=$84 >> 6;
      var $add76=((($82)+($shr75))|0);
      $pen_y=$add76;
      var $85=$info44;
      var $bm_o77=(($85+44)|0);
      var $86=HEAP32[(($bm_o77)>>2)];
      $bm=$86;
      var $87=$info44;
      var $effect_type=(($87+120)|0);
      var $88=HEAP32[(($effect_type)>>2)];
      var $cmp78=(($88)|0)==3;
      if ($cmp78) { __label__ = 34; break; } else { __label__ = 36; break; }
    case 34: 
      var $89=$info44;
      var $effect_timing=(($89+124)|0);
      var $90=HEAP32[(($effect_timing)>>2)];
      var $91=$info44;
      var $bbox=(($91+52)|0);
      var $xMax=(($bbox+8)|0);
      var $92=HEAP32[(($xMax)>>2)];
      var $shr81=$92 >> 6;
      var $cmp82=(($90)|0) <= (($shr81)|0);
      if ($cmp82) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      __label__ = 41; break;
    case 36: 
      var $93=$tail;
      $here_tail=$93;
      var $94=$render_priv_addr;
      var $95=$bm;
      var $96=$pen_x;
      var $97=$pen_y;
      var $98=$info44;
      var $c85=(($98+88)|0);
      var $arrayidx86=(($c85+8)|0);
      var $99=HEAP32[(($arrayidx86)>>2)];
      var $100=$tail;
      var $call87=_render_glyph($94, $95, $96, $97, $99, 0, 1000000, $100);
      $tail=$call87;
      var $101=$last_tail;
      var $tobool88=(($101)|0)!=0;
      if ($tobool88) { __label__ = 37; break; } else { __label__ = 40; break; }
    case 37: 
      var $102=$tail;
      var $103=$here_tail;
      var $cmp90=(($102)|0)!=(($103)|0);
      if ($cmp90) { __label__ = 38; break; } else { __label__ = 40; break; }
    case 38: 
      var $104=$info44;
      var $c93=(($104+88)|0);
      var $arrayidx94=(($c93+8)|0);
      var $105=HEAP32[(($arrayidx94)>>2)];
      var $and95=$105 & 255;
      var $cmp96=(($and95)>>>0) > 0;
      if ($cmp96) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $106=$render_priv_addr;
      var $107=$last_tail;
      var $108=$here_tail;
      _render_overlap($106, $107, $108);
      __label__ = 40; break;
    case 40: 
      var $109=$here_tail;
      $last_tail=$109;
      __label__ = 41; break;
    case 41: 
      var $110=$info44;
      var $next101=(($110+324)|0);
      var $111=HEAP32[(($next101)>>2)];
      $info44=$111;
      __label__ = 30; break;
    case 42: 
      __label__ = 43; break;
    case 43: 
      var $112=$i;
      var $inc104=((($112)+(1))|0);
      $i=$inc104;
      __label__ = 23; break;
    case 44: 
      $i=0;
      __label__ = 45; break;
    case 45: 
      var $113=$i;
      var $114=$text_info;
      var $length107=(($114+4)|0);
      var $115=HEAP32[(($length107)>>2)];
      var $cmp108=(($113)|0) < (($115)|0);
      if ($cmp108) { __label__ = 46; break; } else { __label__ = 68; break; }
    case 46: 
      var $116=$text_info;
      var $glyphs112=(($116)|0);
      var $117=HEAP32[(($glyphs112)>>2)];
      var $118=$i;
      var $add_ptr113=(($117+($118)*(328))|0);
      $info111=$add_ptr113;
      var $119=$info111;
      var $symbol114=(($119)|0);
      var $120=HEAP32[(($symbol114)>>2)];
      var $cmp115=(($120)|0)==0;
      if ($cmp115) { __label__ = 50; break; } else { __label__ = 47; break; }
    case 47: 
      var $121=$info111;
      var $symbol118=(($121)|0);
      var $122=HEAP32[(($symbol118)>>2)];
      var $cmp119=(($122)|0)==10;
      if ($cmp119) { __label__ = 50; break; } else { __label__ = 48; break; }
    case 48: 
      var $123=$info111;
      var $bm122=(($123+40)|0);
      var $124=HEAP32[(($bm122)>>2)];
      var $tobool123=(($124)|0)!=0;
      if ($tobool123) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      var $125=$info111;
      var $skip125=(($125+4)|0);
      var $126=HEAP32[(($skip125)>>2)];
      var $tobool126=(($126)|0)!=0;
      if ($tobool126) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      __label__ = 67; break;
    case 51: 
      __label__ = 52; break;
    case 52: 
      var $127=$info111;
      var $tobool130=(($127)|0)!=0;
      if ($tobool130) { __label__ = 53; break; } else { __label__ = 66; break; }
    case 53: 
      var $128=$info111;
      var $bm132=(($128+40)|0);
      var $129=HEAP32[(($bm132)>>2)];
      var $tobool133=(($129)|0)!=0;
      if ($tobool133) { __label__ = 55; break; } else { __label__ = 54; break; }
    case 54: 
      var $130=$info111;
      var $next135=(($130+324)|0);
      var $131=HEAP32[(($next135)>>2)];
      $info111=$131;
      __label__ = 52; break;
    case 55: 
      var $132=$dst_x_addr;
      var $133=$info111;
      var $pos137=(($133+68)|0);
      var $x138=(($pos137)|0);
      var $134=HEAP32[(($x138)>>2)];
      var $shr139=$134 >> 6;
      var $add140=((($132)+($shr139))|0);
      $pen_x=$add140;
      var $135=$dst_y_addr;
      var $136=$info111;
      var $pos141=(($136+68)|0);
      var $y142=(($pos141+4)|0);
      var $137=HEAP32[(($y142)>>2)];
      var $shr143=$137 >> 6;
      var $add144=((($135)+($shr143))|0);
      $pen_y=$add144;
      var $138=$info111;
      var $bm145=(($138+40)|0);
      var $139=HEAP32[(($bm145)>>2)];
      $bm=$139;
      var $140=$info111;
      var $effect_type146=(($140+120)|0);
      var $141=HEAP32[(($effect_type146)>>2)];
      var $cmp147=(($141)|0)==1;
      if ($cmp147) { __label__ = 57; break; } else { __label__ = 56; break; }
    case 56: 
      var $142=$info111;
      var $effect_type150=(($142+120)|0);
      var $143=HEAP32[(($effect_type150)>>2)];
      var $cmp151=(($143)|0)==3;
      if ($cmp151) { __label__ = 57; break; } else { __label__ = 61; break; }
    case 57: 
      var $144=$info111;
      var $effect_timing154=(($144+124)|0);
      var $145=HEAP32[(($effect_timing154)>>2)];
      var $146=$info111;
      var $bbox155=(($146+52)|0);
      var $xMax156=(($bbox155+8)|0);
      var $147=HEAP32[(($xMax156)>>2)];
      var $shr157=$147 >> 6;
      var $cmp158=(($145)|0) > (($shr157)|0);
      if ($cmp158) { __label__ = 58; break; } else { __label__ = 59; break; }
    case 58: 
      var $148=$render_priv_addr;
      var $149=$bm;
      var $150=$pen_x;
      var $151=$pen_y;
      var $152=$info111;
      var $c161=(($152+88)|0);
      var $arrayidx162=(($c161)|0);
      var $153=HEAP32[(($arrayidx162)>>2)];
      var $154=$tail;
      var $call163=_render_glyph($148, $149, $150, $151, $153, 0, 1000000, $154);
      $tail=$call163;
      __label__ = 60; break;
    case 59: 
      var $155=$render_priv_addr;
      var $156=$bm;
      var $157=$pen_x;
      var $158=$pen_y;
      var $159=$info111;
      var $c165=(($159+88)|0);
      var $arrayidx166=(($c165+4)|0);
      var $160=HEAP32[(($arrayidx166)>>2)];
      var $161=$tail;
      var $call167=_render_glyph($155, $156, $157, $158, $160, 0, 1000000, $161);
      $tail=$call167;
      __label__ = 60; break;
    case 60: 
      __label__ = 65; break;
    case 61: 
      var $162=$info111;
      var $effect_type170=(($162+120)|0);
      var $163=HEAP32[(($effect_type170)>>2)];
      var $cmp171=(($163)|0)==2;
      if ($cmp171) { __label__ = 62; break; } else { __label__ = 63; break; }
    case 62: 
      var $164=$render_priv_addr;
      var $165=$bm;
      var $166=$pen_x;
      var $167=$pen_y;
      var $168=$info111;
      var $c174=(($168+88)|0);
      var $arrayidx175=(($c174)|0);
      var $169=HEAP32[(($arrayidx175)>>2)];
      var $170=$info111;
      var $c176=(($170+88)|0);
      var $arrayidx177=(($c176+4)|0);
      var $171=HEAP32[(($arrayidx177)>>2)];
      var $172=$info111;
      var $effect_timing178=(($172+124)|0);
      var $173=HEAP32[(($effect_timing178)>>2)];
      var $174=$tail;
      var $call179=_render_glyph($164, $165, $166, $167, $169, $171, $173, $174);
      $tail=$call179;
      __label__ = 64; break;
    case 63: 
      var $175=$render_priv_addr;
      var $176=$bm;
      var $177=$pen_x;
      var $178=$pen_y;
      var $179=$info111;
      var $c181=(($179+88)|0);
      var $arrayidx182=(($c181)|0);
      var $180=HEAP32[(($arrayidx182)>>2)];
      var $181=$tail;
      var $call183=_render_glyph($175, $176, $177, $178, $180, 0, 1000000, $181);
      $tail=$call183;
      __label__ = 64; break;
    case 64: 
      __label__ = 65; break;
    case 65: 
      var $182=$info111;
      var $next186=(($182+324)|0);
      var $183=HEAP32[(($next186)>>2)];
      $info111=$183;
      __label__ = 52; break;
    case 66: 
      __label__ = 67; break;
    case 67: 
      var $184=$i;
      var $inc189=((($184)+(1))|0);
      $i=$inc189;
      __label__ = 45; break;
    case 68: 
      var $185=$tail;
      HEAP32[(($185)>>2)]=0;
      var $186=$render_priv_addr;
      var $187=HEAP32[(($head)>>2)];
      _blend_vector_clip($186, $187);
      var $188=HEAP32[(($head)>>2)];
      STACKTOP = __stackBase__;
      return $188;
    default: assert(0, "bad label: " + __label__);
  }
}
_render_text["X"]=1;

function _render_glyph($render_priv, $bm, $dst_x, $dst_y, $color, $color2, $brk, $tail) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $render_priv_addr;
      var $bm_addr;
      var $dst_x_addr;
      var $dst_y_addr;
      var $color_addr;
      var $color2_addr;
      var $brk_addr;
      var $tail_addr;
      var $b_x0;
      var $b_y0;
      var $b_x1;
      var $b_y1;
      var $clip_x0;
      var $clip_y0;
      var $clip_x1;
      var $clip_y1;
      var $tmp;
      var $img;
      $render_priv_addr=$render_priv;
      $bm_addr=$bm;
      $dst_x_addr=$dst_x;
      $dst_y_addr=$dst_y;
      $color_addr=$color;
      $color2_addr=$color2;
      $brk_addr=$brk;
      $tail_addr=$tail;
      var $0=$render_priv_addr;
      var $state=(($0+176)|0);
      var $clip_mode=(($state+188)|0);
      var $1=HEAP8[($clip_mode)];
      var $tobool=(($1 << 24) >> 24)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=$render_priv_addr;
      var $3=$bm_addr;
      var $4=$dst_x_addr;
      var $5=$dst_y_addr;
      var $6=$color_addr;
      var $7=$color2_addr;
      var $8=$brk_addr;
      var $9=$tail_addr;
      var $call=_render_glyph_i($2, $3, $4, $5, $6, $7, $8, $9);
      $retval=$call;
      __label__ = 64; break;
    case 4: 
      var $10=$bm_addr;
      var $left=(($10)|0);
      var $11=HEAP32[(($left)>>2)];
      var $12=$dst_x_addr;
      var $add=((($12)+($11))|0);
      $dst_x_addr=$add;
      var $13=$bm_addr;
      var $top=(($13+4)|0);
      var $14=HEAP32[(($top)>>2)];
      var $15=$dst_y_addr;
      var $add2=((($15)+($14))|0);
      $dst_y_addr=$add2;
      var $16=$bm_addr;
      var $left3=(($16)|0);
      var $17=HEAP32[(($left3)>>2)];
      var $18=$brk_addr;
      var $sub=((($18)-($17))|0);
      $brk_addr=$sub;
      var $19=$render_priv_addr;
      var $state4=(($19+176)|0);
      var $clip_x05=(($state4+172)|0);
      var $20=HEAP32[(($clip_x05)>>2)];
      var $cmp=(($20)|0) > 0;
      if ($cmp) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $21=$render_priv_addr;
      var $state6=(($21+176)|0);
      var $clip_x07=(($state6+172)|0);
      var $22=HEAP32[(($clip_x07)>>2)];
      var $cond = $22;__label__ = 7; break;
    case 6: 
      var $cond = 0;__label__ = 7; break;
    case 7: 
      var $cond;
      var $23=$render_priv_addr;
      var $width=(($23+116)|0);
      var $24=HEAP32[(($width)>>2)];
      var $cmp8=(($cond)|0) > (($24)|0);
      if ($cmp8) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $25=$render_priv_addr;
      var $width10=(($25+116)|0);
      var $26=HEAP32[(($width10)>>2)];
      var $cond22 = $26;__label__ = 13; break;
    case 9: 
      var $27=$render_priv_addr;
      var $state12=(($27+176)|0);
      var $clip_x013=(($state12+172)|0);
      var $28=HEAP32[(($clip_x013)>>2)];
      var $cmp14=(($28)|0) > 0;
      if ($cmp14) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $29=$render_priv_addr;
      var $state16=(($29+176)|0);
      var $clip_x017=(($state16+172)|0);
      var $30=HEAP32[(($clip_x017)>>2)];
      var $cond20 = $30;__label__ = 12; break;
    case 11: 
      var $cond20 = 0;__label__ = 12; break;
    case 12: 
      var $cond20;
      var $cond22 = $cond20;__label__ = 13; break;
    case 13: 
      var $cond22;
      $clip_x0=$cond22;
      var $31=$render_priv_addr;
      var $state23=(($31+176)|0);
      var $clip_y024=(($state23+176)|0);
      var $32=HEAP32[(($clip_y024)>>2)];
      var $cmp25=(($32)|0) > 0;
      if ($cmp25) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $33=$render_priv_addr;
      var $state27=(($33+176)|0);
      var $clip_y028=(($state27+176)|0);
      var $34=HEAP32[(($clip_y028)>>2)];
      var $cond31 = $34;__label__ = 16; break;
    case 15: 
      var $cond31 = 0;__label__ = 16; break;
    case 16: 
      var $cond31;
      var $35=$render_priv_addr;
      var $height=(($35+120)|0);
      var $36=HEAP32[(($height)>>2)];
      var $cmp32=(($cond31)|0) > (($36)|0);
      if ($cmp32) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $37=$render_priv_addr;
      var $height34=(($37+120)|0);
      var $38=HEAP32[(($height34)>>2)];
      var $cond46 = $38;__label__ = 22; break;
    case 18: 
      var $39=$render_priv_addr;
      var $state36=(($39+176)|0);
      var $clip_y037=(($state36+176)|0);
      var $40=HEAP32[(($clip_y037)>>2)];
      var $cmp38=(($40)|0) > 0;
      if ($cmp38) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $41=$render_priv_addr;
      var $state40=(($41+176)|0);
      var $clip_y041=(($state40+176)|0);
      var $42=HEAP32[(($clip_y041)>>2)];
      var $cond44 = $42;__label__ = 21; break;
    case 20: 
      var $cond44 = 0;__label__ = 21; break;
    case 21: 
      var $cond44;
      var $cond46 = $cond44;__label__ = 22; break;
    case 22: 
      var $cond46;
      $clip_y0=$cond46;
      var $43=$render_priv_addr;
      var $state47=(($43+176)|0);
      var $clip_x148=(($state47+180)|0);
      var $44=HEAP32[(($clip_x148)>>2)];
      var $cmp49=(($44)|0) > 0;
      if ($cmp49) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $45=$render_priv_addr;
      var $state51=(($45+176)|0);
      var $clip_x152=(($state51+180)|0);
      var $46=HEAP32[(($clip_x152)>>2)];
      var $cond55 = $46;__label__ = 25; break;
    case 24: 
      var $cond55 = 0;__label__ = 25; break;
    case 25: 
      var $cond55;
      var $47=$render_priv_addr;
      var $width56=(($47+116)|0);
      var $48=HEAP32[(($width56)>>2)];
      var $cmp57=(($cond55)|0) > (($48)|0);
      if ($cmp57) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $49=$render_priv_addr;
      var $width59=(($49+116)|0);
      var $50=HEAP32[(($width59)>>2)];
      var $cond71 = $50;__label__ = 31; break;
    case 27: 
      var $51=$render_priv_addr;
      var $state61=(($51+176)|0);
      var $clip_x162=(($state61+180)|0);
      var $52=HEAP32[(($clip_x162)>>2)];
      var $cmp63=(($52)|0) > 0;
      if ($cmp63) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $53=$render_priv_addr;
      var $state65=(($53+176)|0);
      var $clip_x166=(($state65+180)|0);
      var $54=HEAP32[(($clip_x166)>>2)];
      var $cond69 = $54;__label__ = 30; break;
    case 29: 
      var $cond69 = 0;__label__ = 30; break;
    case 30: 
      var $cond69;
      var $cond71 = $cond69;__label__ = 31; break;
    case 31: 
      var $cond71;
      $clip_x1=$cond71;
      var $55=$render_priv_addr;
      var $state72=(($55+176)|0);
      var $clip_y173=(($state72+184)|0);
      var $56=HEAP32[(($clip_y173)>>2)];
      var $cmp74=(($56)|0) > 0;
      if ($cmp74) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $57=$render_priv_addr;
      var $state76=(($57+176)|0);
      var $clip_y177=(($state76+184)|0);
      var $58=HEAP32[(($clip_y177)>>2)];
      var $cond80 = $58;__label__ = 34; break;
    case 33: 
      var $cond80 = 0;__label__ = 34; break;
    case 34: 
      var $cond80;
      var $59=$render_priv_addr;
      var $height81=(($59+120)|0);
      var $60=HEAP32[(($height81)>>2)];
      var $cmp82=(($cond80)|0) > (($60)|0);
      if ($cmp82) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      var $61=$render_priv_addr;
      var $height84=(($61+120)|0);
      var $62=HEAP32[(($height84)>>2)];
      var $cond96 = $62;__label__ = 40; break;
    case 36: 
      var $63=$render_priv_addr;
      var $state86=(($63+176)|0);
      var $clip_y187=(($state86+184)|0);
      var $64=HEAP32[(($clip_y187)>>2)];
      var $cmp88=(($64)|0) > 0;
      if ($cmp88) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      var $65=$render_priv_addr;
      var $state90=(($65+176)|0);
      var $clip_y191=(($state90+184)|0);
      var $66=HEAP32[(($clip_y191)>>2)];
      var $cond94 = $66;__label__ = 39; break;
    case 38: 
      var $cond94 = 0;__label__ = 39; break;
    case 39: 
      var $cond94;
      var $cond96 = $cond94;__label__ = 40; break;
    case 40: 
      var $cond96;
      $clip_y1=$cond96;
      $b_x0=0;
      $b_y0=0;
      var $67=$bm_addr;
      var $w=(($67+8)|0);
      var $68=HEAP32[(($w)>>2)];
      $b_x1=$68;
      var $69=$bm_addr;
      var $h=(($69+12)|0);
      var $70=HEAP32[(($h)>>2)];
      $b_y1=$70;
      var $71=$dst_x_addr;
      var $72=$clip_x0;
      var $sub97=((($71)-($72))|0);
      $tmp=$sub97;
      var $73=$tmp;
      var $cmp98=(($73)|0) < 0;
      if ($cmp98) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $74=$render_priv_addr;
      var $library=(($74)|0);
      var $75=HEAP32[(($library)>>2)];
      _ass_msg($75, 7, ((STRING_TABLE.__str13158)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $76=$tmp;
      var $sub100=(((-$76))|0);
      $b_x0=$sub100;
      __label__ = 42; break;
    case 42: 
      var $77=$dst_y_addr;
      var $78=$clip_y0;
      var $sub102=((($77)-($78))|0);
      $tmp=$sub102;
      var $79=$tmp;
      var $cmp103=(($79)|0) < 0;
      if ($cmp103) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $80=$render_priv_addr;
      var $library105=(($80)|0);
      var $81=HEAP32[(($library105)>>2)];
      _ass_msg($81, 7, ((STRING_TABLE.__str14159)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $82=$tmp;
      var $sub106=(((-$82))|0);
      $b_y0=$sub106;
      __label__ = 44; break;
    case 44: 
      var $83=$clip_x1;
      var $84=$dst_x_addr;
      var $sub108=((($83)-($84))|0);
      var $85=$bm_addr;
      var $w109=(($85+8)|0);
      var $86=HEAP32[(($w109)>>2)];
      var $sub110=((($sub108)-($86))|0);
      $tmp=$sub110;
      var $87=$tmp;
      var $cmp111=(($87)|0) < 0;
      if ($cmp111) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $88=$render_priv_addr;
      var $library113=(($88)|0);
      var $89=HEAP32[(($library113)>>2)];
      _ass_msg($89, 7, ((STRING_TABLE.__str15160)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $90=$bm_addr;
      var $w114=(($90+8)|0);
      var $91=HEAP32[(($w114)>>2)];
      var $92=$tmp;
      var $add115=((($91)+($92))|0);
      $b_x1=$add115;
      __label__ = 46; break;
    case 46: 
      var $93=$clip_y1;
      var $94=$dst_y_addr;
      var $sub117=((($93)-($94))|0);
      var $95=$bm_addr;
      var $h118=(($95+12)|0);
      var $96=HEAP32[(($h118)>>2)];
      var $sub119=((($sub117)-($96))|0);
      $tmp=$sub119;
      var $97=$tmp;
      var $cmp120=(($97)|0) < 0;
      if ($cmp120) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      var $98=$render_priv_addr;
      var $library122=(($98)|0);
      var $99=HEAP32[(($library122)>>2)];
      _ass_msg($99, 7, ((STRING_TABLE.__str16161)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $100=$bm_addr;
      var $h123=(($100+12)|0);
      var $101=HEAP32[(($h123)>>2)];
      var $102=$tmp;
      var $add124=((($101)+($102))|0);
      $b_y1=$add124;
      __label__ = 48; break;
    case 48: 
      var $103=$b_y0;
      var $104=$b_y1;
      var $cmp126=(($103)|0) >= (($104)|0);
      if ($cmp126) { __label__ = 50; break; } else { __label__ = 49; break; }
    case 49: 
      var $105=$b_x0;
      var $106=$b_x1;
      var $cmp127=(($105)|0) >= (($106)|0);
      if ($cmp127) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $107=$tail_addr;
      $retval=$107;
      __label__ = 64; break;
    case 51: 
      var $108=$brk_addr;
      var $109=$b_x0;
      var $cmp130=(($108)|0) > (($109)|0);
      if ($cmp130) { __label__ = 52; break; } else { __label__ = 57; break; }
    case 52: 
      var $110=$brk_addr;
      var $111=$b_x1;
      var $cmp132=(($110)|0) > (($111)|0);
      if ($cmp132) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      var $112=$b_x1;
      $brk_addr=$112;
      __label__ = 54; break;
    case 54: 
      var $113=$bm_addr;
      var $buffer=(($113+20)|0);
      var $114=HEAP32[(($buffer)>>2)];
      var $115=$bm_addr;
      var $stride=(($115+16)|0);
      var $116=HEAP32[(($stride)>>2)];
      var $117=$b_y0;
      var $mul=((($116)*($117))|0);
      var $add_ptr=(($114+$mul)|0);
      var $118=$b_x0;
      var $add_ptr135=(($add_ptr+$118)|0);
      var $119=$brk_addr;
      var $120=$b_x0;
      var $sub136=((($119)-($120))|0);
      var $121=$b_y1;
      var $122=$b_y0;
      var $sub137=((($121)-($122))|0);
      var $123=$bm_addr;
      var $stride138=(($123+16)|0);
      var $124=HEAP32[(($stride138)>>2)];
      var $125=$dst_x_addr;
      var $126=$b_x0;
      var $add139=((($125)+($126))|0);
      var $127=$dst_y_addr;
      var $128=$b_y0;
      var $add140=((($127)+($128))|0);
      var $129=$color_addr;
      var $call141=_my_draw_bitmap($add_ptr135, $sub136, $sub137, $124, $add139, $add140, $129);
      $img=$call141;
      var $130=$img;
      var $tobool142=(($130)|0)!=0;
      if ($tobool142) { __label__ = 56; break; } else { __label__ = 55; break; }
    case 55: 
      var $131=$tail_addr;
      $retval=$131;
      __label__ = 64; break;
    case 56: 
      var $132=$img;
      var $133=$tail_addr;
      HEAP32[(($133)>>2)]=$132;
      var $134=$img;
      var $next=(($134+28)|0);
      $tail_addr=$next;
      __label__ = 57; break;
    case 57: 
      var $135=$brk_addr;
      var $136=$b_x1;
      var $cmp146=(($135)|0) < (($136)|0);
      if ($cmp146) { __label__ = 58; break; } else { __label__ = 63; break; }
    case 58: 
      var $137=$brk_addr;
      var $138=$b_x0;
      var $cmp148=(($137)|0) < (($138)|0);
      if ($cmp148) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      var $139=$b_x0;
      $brk_addr=$139;
      __label__ = 60; break;
    case 60: 
      var $140=$bm_addr;
      var $buffer151=(($140+20)|0);
      var $141=HEAP32[(($buffer151)>>2)];
      var $142=$bm_addr;
      var $stride152=(($142+16)|0);
      var $143=HEAP32[(($stride152)>>2)];
      var $144=$b_y0;
      var $mul153=((($143)*($144))|0);
      var $add_ptr154=(($141+$mul153)|0);
      var $145=$brk_addr;
      var $add_ptr155=(($add_ptr154+$145)|0);
      var $146=$b_x1;
      var $147=$brk_addr;
      var $sub156=((($146)-($147))|0);
      var $148=$b_y1;
      var $149=$b_y0;
      var $sub157=((($148)-($149))|0);
      var $150=$bm_addr;
      var $stride158=(($150+16)|0);
      var $151=HEAP32[(($stride158)>>2)];
      var $152=$dst_x_addr;
      var $153=$brk_addr;
      var $add159=((($152)+($153))|0);
      var $154=$dst_y_addr;
      var $155=$b_y0;
      var $add160=((($154)+($155))|0);
      var $156=$color2_addr;
      var $call161=_my_draw_bitmap($add_ptr155, $sub156, $sub157, $151, $add159, $add160, $156);
      $img=$call161;
      var $157=$img;
      var $tobool162=(($157)|0)!=0;
      if ($tobool162) { __label__ = 62; break; } else { __label__ = 61; break; }
    case 61: 
      var $158=$tail_addr;
      $retval=$158;
      __label__ = 64; break;
    case 62: 
      var $159=$img;
      var $160=$tail_addr;
      HEAP32[(($160)>>2)]=$159;
      var $161=$img;
      var $next165=(($161+28)|0);
      $tail_addr=$next165;
      __label__ = 63; break;
    case 63: 
      var $162=$tail_addr;
      $retval=$162;
      __label__ = 64; break;
    case 64: 
      var $163=$retval;
      ;
      return $163;
    default: assert(0, "bad label: " + __label__);
  }
}
_render_glyph["X"]=1;

function _render_overlap($render_priv, $last_tail, $tail) {
  var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      var $last_tail_addr;
      var $tail_addr;
      var $left;
      var $top;
      var $bottom;
      var $right;
      var $old_left;
      var $old_top;
      var $w;
      var $h;
      var $cur_left;
      var $cur_top;
      var $x;
      var $y;
      var $opos;
      var $cpos;
      var $m;
      var $hk=__stackBase__;
      var $hv;
      var $chv=(__stackBase__)+(48);
      var $ax;
      var $ay;
      var $aw;
      var $as;
      var $ah;
      var $bx;
      var $by;
      var $bw;
      var $bs;
      var $bh;
      var $a;
      var $b;
      $render_priv_addr=$render_priv;
      $last_tail_addr=$last_tail;
      $tail_addr=$tail;
      var $0=$last_tail_addr;
      var $1=HEAP32[(($0)>>2)];
      var $dst_x=(($1+20)|0);
      var $2=HEAP32[(($dst_x)>>2)];
      $ax=$2;
      var $3=$last_tail_addr;
      var $4=HEAP32[(($3)>>2)];
      var $dst_y=(($4+24)|0);
      var $5=HEAP32[(($dst_y)>>2)];
      $ay=$5;
      var $6=$last_tail_addr;
      var $7=HEAP32[(($6)>>2)];
      var $w1=(($7)|0);
      var $8=HEAP32[(($w1)>>2)];
      $aw=$8;
      var $9=$last_tail_addr;
      var $10=HEAP32[(($9)>>2)];
      var $stride=(($10+8)|0);
      var $11=HEAP32[(($stride)>>2)];
      $as=$11;
      var $12=$last_tail_addr;
      var $13=HEAP32[(($12)>>2)];
      var $h2=(($13+4)|0);
      var $14=HEAP32[(($h2)>>2)];
      $ah=$14;
      var $15=$tail_addr;
      var $16=HEAP32[(($15)>>2)];
      var $dst_x3=(($16+20)|0);
      var $17=HEAP32[(($dst_x3)>>2)];
      $bx=$17;
      var $18=$tail_addr;
      var $19=HEAP32[(($18)>>2)];
      var $dst_y4=(($19+24)|0);
      var $20=HEAP32[(($dst_y4)>>2)];
      $by=$20;
      var $21=$tail_addr;
      var $22=HEAP32[(($21)>>2)];
      var $w5=(($22)|0);
      var $23=HEAP32[(($w5)>>2)];
      $bw=$23;
      var $24=$tail_addr;
      var $25=HEAP32[(($24)>>2)];
      var $stride6=(($25+8)|0);
      var $26=HEAP32[(($stride6)>>2)];
      $bs=$26;
      var $27=$tail_addr;
      var $28=HEAP32[(($27)>>2)];
      var $h7=(($28+4)|0);
      var $29=HEAP32[(($h7)>>2)];
      $bh=$29;
      var $30=$last_tail_addr;
      var $31=HEAP32[(($30)>>2)];
      var $bitmap=(($31+12)|0);
      var $32=HEAP32[(($bitmap)>>2)];
      var $33=$tail_addr;
      var $34=HEAP32[(($33)>>2)];
      var $bitmap8=(($34+12)|0);
      var $35=HEAP32[(($bitmap8)>>2)];
      var $cmp=(($32)|0)==(($35)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 35; break;
    case 4: 
      var $36=$last_tail_addr;
      var $37=HEAP32[(($36)>>2)];
      var $color=(($37+16)|0);
      var $38=HEAP32[(($color)>>2)];
      var $39=$tail_addr;
      var $40=HEAP32[(($39)>>2)];
      var $color9=(($40+16)|0);
      var $41=HEAP32[(($color9)>>2)];
      var $cmp10=(($38)|0)!=(($41)|0);
      if ($cmp10) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 35; break;
    case 6: 
      var $42=$ax;
      var $43=$bx;
      var $cmp13=(($42)|0) > (($43)|0);
      if ($cmp13) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $44=$ax;
      var $cond = $44;__label__ = 9; break;
    case 8: 
      var $45=$bx;
      var $cond = $45;__label__ = 9; break;
    case 9: 
      var $cond;
      $left=$cond;
      var $46=$ay;
      var $47=$by;
      var $cmp14=(($46)|0) > (($47)|0);
      if ($cmp14) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $48=$ay;
      var $cond18 = $48;__label__ = 12; break;
    case 11: 
      var $49=$by;
      var $cond18 = $49;__label__ = 12; break;
    case 12: 
      var $cond18;
      $top=$cond18;
      var $50=$ax;
      var $51=$aw;
      var $add=((($50)+($51))|0);
      var $52=$bx;
      var $53=$bw;
      var $add19=((($52)+($53))|0);
      var $cmp20=(($add)|0) < (($add19)|0);
      if ($cmp20) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $54=$ax;
      var $55=$aw;
      var $add22=((($54)+($55))|0);
      var $cond26 = $add22;__label__ = 15; break;
    case 14: 
      var $56=$bx;
      var $57=$bw;
      var $add24=((($56)+($57))|0);
      var $cond26 = $add24;__label__ = 15; break;
    case 15: 
      var $cond26;
      $right=$cond26;
      var $58=$ay;
      var $59=$ah;
      var $add27=((($58)+($59))|0);
      var $60=$by;
      var $61=$bh;
      var $add28=((($60)+($61))|0);
      var $cmp29=(($add27)|0) < (($add28)|0);
      if ($cmp29) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $62=$ay;
      var $63=$ah;
      var $add31=((($62)+($63))|0);
      var $cond35 = $add31;__label__ = 18; break;
    case 17: 
      var $64=$by;
      var $65=$bh;
      var $add33=((($64)+($65))|0);
      var $cond35 = $add33;__label__ = 18; break;
    case 18: 
      var $cond35;
      $bottom=$cond35;
      var $66=$right;
      var $67=$left;
      var $cmp36=(($66)|0) <= (($67)|0);
      if ($cmp36) { __label__ = 20; break; } else { __label__ = 19; break; }
    case 19: 
      var $68=$bottom;
      var $69=$top;
      var $cmp37=(($68)|0) <= (($69)|0);
      if ($cmp37) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      __label__ = 35; break;
    case 21: 
      var $70=$left;
      var $71=$ax;
      var $sub=((($70)-($71))|0);
      $old_left=$sub;
      var $72=$top;
      var $73=$ay;
      var $sub40=((($72)-($73))|0);
      $old_top=$sub40;
      var $74=$right;
      var $75=$left;
      var $sub41=((($74)-($75))|0);
      $w=$sub41;
      var $76=$bottom;
      var $77=$top;
      var $sub42=((($76)-($77))|0);
      $h=$sub42;
      var $78=$left;
      var $79=$bx;
      var $sub43=((($78)-($79))|0);
      $cur_left=$sub43;
      var $80=$top;
      var $81=$by;
      var $sub44=((($80)-($81))|0);
      $cur_top=$sub44;
      var $82=$last_tail_addr;
      var $83=HEAP32[(($82)>>2)];
      var $bitmap45=(($83+12)|0);
      var $84=HEAP32[(($bitmap45)>>2)];
      var $a46=(($hk+40)|0);
      HEAP32[(($a46)>>2)]=$84;
      var $85=$tail_addr;
      var $86=HEAP32[(($85)>>2)];
      var $bitmap47=(($86+12)|0);
      var $87=HEAP32[(($bitmap47)>>2)];
      var $b48=(($hk+44)|0);
      HEAP32[(($b48)>>2)]=$87;
      var $88=$aw;
      var $aw49=(($hk)|0);
      HEAP32[(($aw49)>>2)]=$88;
      var $89=$ah;
      var $ah50=(($hk+4)|0);
      HEAP32[(($ah50)>>2)]=$89;
      var $90=$bw;
      var $bw51=(($hk+8)|0);
      HEAP32[(($bw51)>>2)]=$90;
      var $91=$bh;
      var $bh52=(($hk+12)|0);
      HEAP32[(($bh52)>>2)]=$91;
      var $92=$ax;
      var $ax53=(($hk+16)|0);
      HEAP32[(($ax53)>>2)]=$92;
      var $93=$ay;
      var $ay54=(($hk+20)|0);
      HEAP32[(($ay54)>>2)]=$93;
      var $94=$bx;
      var $bx55=(($hk+24)|0);
      HEAP32[(($bx55)>>2)]=$94;
      var $95=$by;
      var $by56=(($hk+28)|0);
      HEAP32[(($by56)>>2)]=$95;
      var $96=$as;
      var $as57=(($hk+32)|0);
      HEAP32[(($as57)>>2)]=$96;
      var $97=$bs;
      var $bs58=(($hk+36)|0);
      HEAP32[(($bs58)>>2)]=$97;
      var $98=$render_priv_addr;
      var $cache=(($98+496)|0);
      var $composite_cache=(($cache+12)|0);
      var $99=HEAP32[(($composite_cache)>>2)];
      var $100=$hk;
      var $call=_ass_cache_get($99, $100);
      var $101=$call;
      $hv=$101;
      var $102=$hv;
      var $tobool=(($102)|0)!=0;
      if ($tobool) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $103=$hv;
      var $a60=(($103)|0);
      var $104=HEAP32[(($a60)>>2)];
      var $105=$last_tail_addr;
      var $106=HEAP32[(($105)>>2)];
      var $bitmap61=(($106+12)|0);
      HEAP32[(($bitmap61)>>2)]=$104;
      var $107=$hv;
      var $b62=(($107+4)|0);
      var $108=HEAP32[(($b62)>>2)];
      var $109=$tail_addr;
      var $110=HEAP32[(($109)>>2)];
      var $bitmap63=(($110+12)|0);
      HEAP32[(($bitmap63)>>2)]=$108;
      __label__ = 35; break;
    case 23: 
      var $111=$last_tail_addr;
      var $112=HEAP32[(($111)>>2)];
      var $call65=_clone_bitmap_buffer($112);
      $a=$call65;
      var $113=$tail_addr;
      var $114=HEAP32[(($113)>>2)];
      var $call66=_clone_bitmap_buffer($114);
      $b=$call66;
      $y=0;
      __label__ = 24; break;
    case 24: 
      var $115=$y;
      var $116=$h;
      var $cmp67=(($115)|0) < (($116)|0);
      if ($cmp67) { __label__ = 25; break; } else { __label__ = 34; break; }
    case 25: 
      $x=0;
      __label__ = 26; break;
    case 26: 
      var $117=$x;
      var $118=$w;
      var $cmp69=(($117)|0) < (($118)|0);
      if ($cmp69) { __label__ = 27; break; } else { __label__ = 32; break; }
    case 27: 
      var $119=$old_top;
      var $120=$y;
      var $add71=((($119)+($120))|0);
      var $121=$as;
      var $mul=((($add71)*($121))|0);
      var $122=$old_left;
      var $123=$x;
      var $add72=((($122)+($123))|0);
      var $add73=((($mul)+($add72))|0);
      $opos=$add73;
      var $124=$cur_top;
      var $125=$y;
      var $add74=((($124)+($125))|0);
      var $126=$bs;
      var $mul75=((($add74)*($126))|0);
      var $127=$cur_left;
      var $128=$x;
      var $add76=((($127)+($128))|0);
      var $add77=((($mul75)+($add76))|0);
      $cpos=$add77;
      var $129=$opos;
      var $130=$a;
      var $arrayidx=(($130+$129)|0);
      var $131=HEAPU8[($arrayidx)];
      var $conv=(($131)&255);
      var $132=$cpos;
      var $133=$b;
      var $arrayidx78=(($133+$132)|0);
      var $134=HEAPU8[($arrayidx78)];
      var $conv79=(($134)&255);
      var $add80=((($conv)+($conv79))|0);
      var $cmp81=(($add80)|0) > 255;
      if ($cmp81) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $cond91 = 255;__label__ = 30; break;
    case 29: 
      var $135=$opos;
      var $136=$a;
      var $arrayidx85=(($136+$135)|0);
      var $137=HEAPU8[($arrayidx85)];
      var $conv86=(($137)&255);
      var $138=$cpos;
      var $139=$b;
      var $arrayidx87=(($139+$138)|0);
      var $140=HEAPU8[($arrayidx87)];
      var $conv88=(($140)&255);
      var $add89=((($conv86)+($conv88))|0);
      var $cond91 = $add89;__label__ = 30; break;
    case 30: 
      var $cond91;
      var $conv92=(($cond91) & 255);
      $m=$conv92;
      var $141=$opos;
      var $142=$last_tail_addr;
      var $143=HEAP32[(($142)>>2)];
      var $bitmap93=(($143+12)|0);
      var $144=HEAP32[(($bitmap93)>>2)];
      var $arrayidx94=(($144+$141)|0);
      HEAP8[($arrayidx94)]=0;
      var $145=$m;
      var $146=$cpos;
      var $147=$tail_addr;
      var $148=HEAP32[(($147)>>2)];
      var $bitmap95=(($148+12)|0);
      var $149=HEAP32[(($bitmap95)>>2)];
      var $arrayidx96=(($149+$146)|0);
      HEAP8[($arrayidx96)]=$145;
      __label__ = 31; break;
    case 31: 
      var $150=$x;
      var $inc=((($150)+(1))|0);
      $x=$inc;
      __label__ = 26; break;
    case 32: 
      __label__ = 33; break;
    case 33: 
      var $151=$y;
      var $inc98=((($151)+(1))|0);
      $y=$inc98;
      __label__ = 24; break;
    case 34: 
      var $152=$last_tail_addr;
      var $153=HEAP32[(($152)>>2)];
      var $bitmap100=(($153+12)|0);
      var $154=HEAP32[(($bitmap100)>>2)];
      var $a101=(($chv)|0);
      HEAP32[(($a101)>>2)]=$154;
      var $155=$tail_addr;
      var $156=HEAP32[(($155)>>2)];
      var $bitmap102=(($156+12)|0);
      var $157=HEAP32[(($bitmap102)>>2)];
      var $b103=(($chv+4)|0);
      HEAP32[(($b103)>>2)]=$157;
      var $158=$render_priv_addr;
      var $cache104=(($158+496)|0);
      var $composite_cache105=(($cache104+12)|0);
      var $159=HEAP32[(($composite_cache105)>>2)];
      var $160=$hk;
      var $161=$chv;
      var $call106=_ass_cache_put($159, $160, $161);
      __label__ = 35; break;
    case 35: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_render_overlap["X"]=1;

function _int_to_d6($x) {
  ;
  var __label__;

  var $x_addr;
  $x_addr=$x;
  var $0=$x_addr;
  var $shl=$0 << 6;
  ;
  return $shl;
}


function _blend_vector_clip($render_priv, $head) {
  var __stackBase__  = STACKTOP; STACKTOP += 84; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      var $head_addr;
      var $outline;
      var $clip_bm;
      var $cur;
      var $drawing;
      var $key=__stackBase__;
      var $val;
      var $error;
      var $v=(__stackBase__)+(64);
      var $trans=(__stackBase__)+(76);
      var $left;
      var $top;
      var $right;
      var $bottom;
      var $apos;
      var $bpos;
      var $y42;
      var $x43;
      var $w;
      var $h;
      var $ax;
      var $ay;
      var $aw;
      var $ah;
      var $as;
      var $bx;
      var $by;
      var $bw;
      var $bh;
      var $bs;
      var $aleft;
      var $atop;
      var $bleft;
      var $btop;
      var $abuffer;
      var $bbuffer;
      var $nbuffer;
      $render_priv_addr=$render_priv;
      $head_addr=$head;
      $clip_bm=0;
      var $0=$render_priv_addr;
      var $state=(($0+176)|0);
      var $clip_drawing=(($state+232)|0);
      var $1=HEAP32[(($clip_drawing)>>2)];
      $drawing=$1;
      var $2=$drawing;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      __label__ = 71; break;
    case 4: 
      var $3=$key;
      for (var $$dest = $3>>2, $$stop = $$dest + 16; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      };
      var $type=(($key)|0);
      HEAP32[(($type)>>2)]=1;
      var $4=$drawing;
      var $text=(($4)|0);
      var $5=HEAP32[(($text)>>2)];
      var $u=(($key+4)|0);
      var $clip=$u;
      var $text1=(($clip)|0);
      HEAP32[(($text1)>>2)]=$5;
      var $6=$render_priv_addr;
      var $cache=(($6+496)|0);
      var $bitmap_cache=(($cache+8)|0);
      var $7=HEAP32[(($bitmap_cache)>>2)];
      var $8=$key;
      var $call=_ass_cache_get($7, $8);
      var $9=$call;
      $val=$9;
      var $10=$val;
      var $tobool2=(($10)|0)!=0;
      if ($tobool2) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $11=$val;
      var $bm=(($11)|0);
      var $12=HEAP32[(($bm)>>2)];
      $clip_bm=$12;
      __label__ = 14; break;
    case 6: 
      var $13=$drawing;
      var $call4=_ass_drawing_parse($13, 1);
      $outline=$call4;
      var $14=$outline;
      var $tobool5=(($14)|0)!=0;
      if ($tobool5) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $15=$render_priv_addr;
      var $library=(($15)|0);
      var $16=HEAP32[(($library)>>2)];
      _ass_msg($16, 2, ((STRING_TABLE.__str10155)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 15; break;
    case 8: 
      var $17=$render_priv_addr;
      var $settings=(($17+12)|0);
      var $left_margin=(($settings+32)|0);
      var $18=HEAP32[(($left_margin)>>2)];
      var $cmp=(($18)|0)!=0;
      if ($cmp) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $19=$render_priv_addr;
      var $settings8=(($19+12)|0);
      var $top_margin=(($settings8+24)|0);
      var $20=HEAP32[(($top_margin)>>2)];
      var $cmp9=(($20)|0)!=0;
      if ($cmp9) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $x=(($trans)|0);
      var $21=$render_priv_addr;
      var $settings11=(($21+12)|0);
      var $left_margin12=(($settings11+32)|0);
      var $22=HEAP32[(($left_margin12)>>2)];
      var $call13=_int_to_d6($22);
      HEAP32[(($x)>>2)]=$call13;
      var $y=(($trans+4)|0);
      var $23=$render_priv_addr;
      var $settings14=(($23+12)|0);
      var $top_margin15=(($settings14+24)|0);
      var $24=HEAP32[(($top_margin15)>>2)];
      var $call16=_int_to_d6($24);
      var $sub=(((-$call16))|0);
      HEAP32[(($y)>>2)]=$sub;
      var $25=$outline;
      var $x17=(($trans)|0);
      var $26=HEAP32[(($x17)>>2)];
      var $y18=(($trans+4)|0);
      var $27=HEAP32[(($y18)>>2)];
      _FT_Outline_Translate($25, $26, $27);
      __label__ = 11; break;
    case 11: 
      var $28=$render_priv_addr;
      var $library20=(($28)|0);
      var $29=HEAP32[(($library20)>>2)];
      var $30=$drawing;
      var $scale_x=(($30+20)|0);
      var $31=(tempDoubleI32[0]=HEAP32[(($scale_x)>>2)],tempDoubleI32[1]=HEAP32[((($scale_x)+(4))>>2)],tempDoubleF64[0]);
      var $32=$drawing;
      var $scale_y=(($32+28)|0);
      var $33=(tempDoubleI32[0]=HEAP32[(($scale_y)>>2)],tempDoubleI32[1]=HEAP32[((($scale_y)+(4))>>2)],tempDoubleF64[0]);
      var $34=$drawing;
      var $text21=(($34)|0);
      var $35=HEAP32[(($text21)>>2)];
      _ass_msg($29, 7, ((STRING_TABLE.__str11156)|0), (tempInt=STACKTOP,STACKTOP += 20,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$31,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[(((tempInt)+(4))>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$33,HEAP32[(((tempInt)+(8))>>2)]=tempDoubleI32[0],HEAP32[((((tempInt)+(8))+(4))>>2)]=tempDoubleI32[1]),HEAP32[(((tempInt)+(16))>>2)]=$35,tempInt));
      var $36=$render_priv_addr;
      var $library22=(($36)|0);
      var $37=HEAP32[(($library22)>>2)];
      var $38=$render_priv_addr;
      var $ftlibrary=(($38+4)|0);
      var $39=HEAP32[(($ftlibrary)>>2)];
      var $40=$outline;
      var $call23=_outline_to_bitmap($37, $39, $40, 0);
      $clip_bm=$call23;
      var $41=$clip_bm;
      var $cmp24=(($41)|0)==0;
      if ($cmp24) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $42=$render_priv_addr;
      var $library26=(($42)|0);
      var $43=HEAP32[(($library26)>>2)];
      var $44=$error;
      _ass_msg($43, 2, ((STRING_TABLE.__str12157)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$44,tempInt));
      __label__ = 13; break;
    case 13: 
      var $45=$v;
      HEAP32[(($45)>>2)]=0; HEAP32[((($45)+(4))>>2)]=0; HEAP32[((($45)+(8))>>2)]=0;
      var $46=$drawing;
      var $text28=(($46)|0);
      var $47=HEAP32[(($text28)>>2)];
      var $call29=_strdup($47);
      var $u30=(($key+4)|0);
      var $clip31=$u30;
      var $text32=(($clip31)|0);
      HEAP32[(($text32)>>2)]=$call29;
      var $48=$clip_bm;
      var $bm33=(($v)|0);
      HEAP32[(($bm33)>>2)]=$48;
      var $49=$render_priv_addr;
      var $cache34=(($49+496)|0);
      var $bitmap_cache35=(($cache34+8)|0);
      var $50=HEAP32[(($bitmap_cache35)>>2)];
      var $51=$key;
      var $52=$v;
      var $call36=_ass_cache_put($50, $51, $52);
      __label__ = 14; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $53=$clip_bm;
      var $tobool38=(($53)|0)!=0;
      if ($tobool38) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      __label__ = 70; break;
    case 17: 
      var $54=$head_addr;
      $cur=$54;
      __label__ = 18; break;
    case 18: 
      var $55=$cur;
      var $tobool41=(($55)|0)!=0;
      if ($tobool41) { __label__ = 19; break; } else { __label__ = 69; break; }
    case 19: 
      var $56=$cur;
      var $bitmap=(($56+12)|0);
      var $57=HEAP32[(($bitmap)>>2)];
      $abuffer=$57;
      var $58=$clip_bm;
      var $buffer=(($58+20)|0);
      var $59=HEAP32[(($buffer)>>2)];
      $bbuffer=$59;
      var $60=$cur;
      var $dst_x=(($60+20)|0);
      var $61=HEAP32[(($dst_x)>>2)];
      $ax=$61;
      var $62=$cur;
      var $dst_y=(($62+24)|0);
      var $63=HEAP32[(($dst_y)>>2)];
      $ay=$63;
      var $64=$cur;
      var $w44=(($64)|0);
      var $65=HEAP32[(($w44)>>2)];
      $aw=$65;
      var $66=$cur;
      var $h45=(($66+4)|0);
      var $67=HEAP32[(($h45)>>2)];
      $ah=$67;
      var $68=$cur;
      var $stride=(($68+8)|0);
      var $69=HEAP32[(($stride)>>2)];
      $as=$69;
      var $70=$clip_bm;
      var $left46=(($70)|0);
      var $71=HEAP32[(($left46)>>2)];
      $bx=$71;
      var $72=$clip_bm;
      var $top47=(($72+4)|0);
      var $73=HEAP32[(($top47)>>2)];
      $by=$73;
      var $74=$clip_bm;
      var $w48=(($74+8)|0);
      var $75=HEAP32[(($w48)>>2)];
      $bw=$75;
      var $76=$clip_bm;
      var $h49=(($76+12)|0);
      var $77=HEAP32[(($h49)>>2)];
      $bh=$77;
      var $78=$clip_bm;
      var $stride50=(($78+16)|0);
      var $79=HEAP32[(($stride50)>>2)];
      $bs=$79;
      var $80=$ax;
      var $81=$bx;
      var $cmp51=(($80)|0) > (($81)|0);
      if ($cmp51) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $82=$ax;
      var $cond = $82;__label__ = 22; break;
    case 21: 
      var $83=$bx;
      var $cond = $83;__label__ = 22; break;
    case 22: 
      var $cond;
      $left=$cond;
      var $84=$ay;
      var $85=$by;
      var $cmp52=(($84)|0) > (($85)|0);
      if ($cmp52) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $86=$ay;
      var $cond56 = $86;__label__ = 25; break;
    case 24: 
      var $87=$by;
      var $cond56 = $87;__label__ = 25; break;
    case 25: 
      var $cond56;
      $top=$cond56;
      var $88=$ax;
      var $89=$aw;
      var $add=((($88)+($89))|0);
      var $90=$bx;
      var $91=$bw;
      var $add57=((($90)+($91))|0);
      var $cmp58=(($add)|0) < (($add57)|0);
      if ($cmp58) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $92=$ax;
      var $93=$aw;
      var $add60=((($92)+($93))|0);
      var $cond64 = $add60;__label__ = 28; break;
    case 27: 
      var $94=$bx;
      var $95=$bw;
      var $add62=((($94)+($95))|0);
      var $cond64 = $add62;__label__ = 28; break;
    case 28: 
      var $cond64;
      $right=$cond64;
      var $96=$ay;
      var $97=$ah;
      var $add65=((($96)+($97))|0);
      var $98=$by;
      var $99=$bh;
      var $add66=((($98)+($99))|0);
      var $cmp67=(($add65)|0) < (($add66)|0);
      if ($cmp67) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $100=$ay;
      var $101=$ah;
      var $add69=((($100)+($101))|0);
      var $cond73 = $add69;__label__ = 31; break;
    case 30: 
      var $102=$by;
      var $103=$bh;
      var $add71=((($102)+($103))|0);
      var $cond73 = $add71;__label__ = 31; break;
    case 31: 
      var $cond73;
      $bottom=$cond73;
      var $104=$left;
      var $105=$ax;
      var $sub74=((($104)-($105))|0);
      $aleft=$sub74;
      var $106=$top;
      var $107=$ay;
      var $sub75=((($106)-($107))|0);
      $atop=$sub75;
      var $108=$right;
      var $109=$left;
      var $sub76=((($108)-($109))|0);
      $w=$sub76;
      var $110=$bottom;
      var $111=$top;
      var $sub77=((($110)-($111))|0);
      $h=$sub77;
      var $112=$left;
      var $113=$bx;
      var $sub78=((($112)-($113))|0);
      $bleft=$sub78;
      var $114=$top;
      var $115=$by;
      var $sub79=((($114)-($115))|0);
      $btop=$sub79;
      var $116=$render_priv_addr;
      var $state80=(($116+176)|0);
      var $clip_drawing_mode=(($state80+236)|0);
      var $117=HEAP32[(($clip_drawing_mode)>>2)];
      var $tobool81=(($117)|0)!=0;
      if ($tobool81) { __label__ = 32; break; } else { __label__ = 51; break; }
    case 32: 
      var $118=$ax;
      var $119=$aw;
      var $add83=((($118)+($119))|0);
      var $120=$bx;
      var $cmp84=(($add83)|0) < (($120)|0);
      if ($cmp84) { __label__ = 36; break; } else { __label__ = 33; break; }
    case 33: 
      var $121=$ay;
      var $122=$ah;
      var $add86=((($121)+($122))|0);
      var $123=$by;
      var $cmp87=(($add86)|0) < (($123)|0);
      if ($cmp87) { __label__ = 36; break; } else { __label__ = 34; break; }
    case 34: 
      var $124=$ax;
      var $125=$bx;
      var $126=$bw;
      var $add89=((($125)+($126))|0);
      var $cmp90=(($124)|0) > (($add89)|0);
      if ($cmp90) { __label__ = 36; break; } else { __label__ = 35; break; }
    case 35: 
      var $127=$ay;
      var $128=$by;
      var $129=$bh;
      var $add92=((($128)+($129))|0);
      var $cmp93=(($127)|0) > (($add92)|0);
      if ($cmp93) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      __label__ = 68; break;
    case 37: 
      var $130=$as;
      var $131=$ah;
      var $mul=((($130)*($131))|0);
      var $call96=_malloc($mul);
      $nbuffer=$call96;
      var $132=$nbuffer;
      var $tobool97=(($132)|0)!=0;
      if ($tobool97) { __label__ = 39; break; } else { __label__ = 38; break; }
    case 38: 
      __label__ = 70; break;
    case 39: 
      var $133=$render_priv_addr;
      var $134=$nbuffer;
      _free_list_add($133, $134);
      var $135=$nbuffer;
      var $136=$abuffer;
      var $137=$as;
      var $138=$ah;
      var $sub100=((($138)-(1))|0);
      var $mul101=((($137)*($sub100))|0);
      var $139=$aw;
      var $add102=((($mul101)+($139))|0);
      assert($add102 % 1 === 0, 'memcpy given ' + $add102 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($135, $136, $add102, 1);
      $y42=0;
      __label__ = 40; break;
    case 40: 
      var $140=$y42;
      var $141=$h;
      var $cmp104=(($140)|0) < (($141)|0);
      if ($cmp104) { __label__ = 41; break; } else { __label__ = 50; break; }
    case 41: 
      $x43=0;
      __label__ = 42; break;
    case 42: 
      var $142=$x43;
      var $143=$w;
      var $cmp107=(($142)|0) < (($143)|0);
      if ($cmp107) { __label__ = 43; break; } else { __label__ = 48; break; }
    case 43: 
      var $144=$atop;
      var $145=$y42;
      var $add109=((($144)+($145))|0);
      var $146=$as;
      var $mul110=((($add109)*($146))|0);
      var $147=$aleft;
      var $add111=((($mul110)+($147))|0);
      var $148=$x43;
      var $add112=((($add111)+($148))|0);
      $apos=$add112;
      var $149=$btop;
      var $150=$y42;
      var $add113=((($149)+($150))|0);
      var $151=$bs;
      var $mul114=((($add113)*($151))|0);
      var $152=$bleft;
      var $add115=((($mul114)+($152))|0);
      var $153=$x43;
      var $add116=((($add115)+($153))|0);
      $bpos=$add116;
      var $154=$apos;
      var $155=$abuffer;
      var $arrayidx=(($155+$154)|0);
      var $156=HEAPU8[($arrayidx)];
      var $conv=(($156)&255);
      var $157=$bpos;
      var $158=$bbuffer;
      var $arrayidx117=(($158+$157)|0);
      var $159=HEAPU8[($arrayidx117)];
      var $conv118=(($159)&255);
      var $sub119=((($conv)-($conv118))|0);
      var $cmp120=0 > (($sub119)|0);
      if ($cmp120) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $cond130 = 0;__label__ = 46; break;
    case 45: 
      var $160=$apos;
      var $161=$abuffer;
      var $arrayidx124=(($161+$160)|0);
      var $162=HEAPU8[($arrayidx124)];
      var $conv125=(($162)&255);
      var $163=$bpos;
      var $164=$bbuffer;
      var $arrayidx126=(($164+$163)|0);
      var $165=HEAPU8[($arrayidx126)];
      var $conv127=(($165)&255);
      var $sub128=((($conv125)-($conv127))|0);
      var $cond130 = $sub128;__label__ = 46; break;
    case 46: 
      var $cond130;
      var $conv131=(($cond130) & 255);
      var $166=$apos;
      var $167=$nbuffer;
      var $arrayidx132=(($167+$166)|0);
      HEAP8[($arrayidx132)]=$conv131;
      __label__ = 47; break;
    case 47: 
      var $168=$x43;
      var $inc=((($168)+(1))|0);
      $x43=$inc;
      __label__ = 42; break;
    case 48: 
      __label__ = 49; break;
    case 49: 
      var $169=$y42;
      var $inc134=((($169)+(1))|0);
      $y42=$inc134;
      __label__ = 40; break;
    case 50: 
      __label__ = 67; break;
    case 51: 
      var $170=$ax;
      var $171=$aw;
      var $add137=((($170)+($171))|0);
      var $172=$bx;
      var $cmp138=(($add137)|0) < (($172)|0);
      if ($cmp138) { __label__ = 55; break; } else { __label__ = 52; break; }
    case 52: 
      var $173=$ay;
      var $174=$ah;
      var $add141=((($173)+($174))|0);
      var $175=$by;
      var $cmp142=(($add141)|0) < (($175)|0);
      if ($cmp142) { __label__ = 55; break; } else { __label__ = 53; break; }
    case 53: 
      var $176=$ax;
      var $177=$bx;
      var $178=$bw;
      var $add145=((($177)+($178))|0);
      var $cmp146=(($176)|0) > (($add145)|0);
      if ($cmp146) { __label__ = 55; break; } else { __label__ = 54; break; }
    case 54: 
      var $179=$ay;
      var $180=$by;
      var $181=$bh;
      var $add149=((($180)+($181))|0);
      var $cmp150=(($179)|0) > (($add149)|0);
      if ($cmp150) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: 
      var $182=$cur;
      var $h153=(($182+4)|0);
      HEAP32[(($h153)>>2)]=0;
      var $183=$cur;
      var $w154=(($183)|0);
      HEAP32[(($w154)>>2)]=0;
      __label__ = 68; break;
    case 56: 
      var $184=$as;
      var $185=$ah;
      var $call156=_calloc($184, $185);
      $nbuffer=$call156;
      var $186=$nbuffer;
      var $tobool157=(($186)|0)!=0;
      if ($tobool157) { __label__ = 58; break; } else { __label__ = 57; break; }
    case 57: 
      __label__ = 70; break;
    case 58: 
      var $187=$render_priv_addr;
      var $188=$nbuffer;
      _free_list_add($187, $188);
      $y42=0;
      __label__ = 59; break;
    case 59: 
      var $189=$y42;
      var $190=$h;
      var $cmp161=(($189)|0) < (($190)|0);
      if ($cmp161) { __label__ = 60; break; } else { __label__ = 66; break; }
    case 60: 
      $x43=0;
      __label__ = 61; break;
    case 61: 
      var $191=$x43;
      var $192=$w;
      var $cmp165=(($191)|0) < (($192)|0);
      if ($cmp165) { __label__ = 62; break; } else { __label__ = 64; break; }
    case 62: 
      var $193=$atop;
      var $194=$y42;
      var $add168=((($193)+($194))|0);
      var $195=$as;
      var $mul169=((($add168)*($195))|0);
      var $196=$aleft;
      var $add170=((($mul169)+($196))|0);
      var $197=$x43;
      var $add171=((($add170)+($197))|0);
      $apos=$add171;
      var $198=$btop;
      var $199=$y42;
      var $add172=((($198)+($199))|0);
      var $200=$bs;
      var $mul173=((($add172)*($200))|0);
      var $201=$bleft;
      var $add174=((($mul173)+($201))|0);
      var $202=$x43;
      var $add175=((($add174)+($202))|0);
      $bpos=$add175;
      var $203=$apos;
      var $204=$abuffer;
      var $arrayidx176=(($204+$203)|0);
      var $205=HEAPU8[($arrayidx176)];
      var $conv177=(($205)&255);
      var $206=$bpos;
      var $207=$bbuffer;
      var $arrayidx178=(($207+$206)|0);
      var $208=HEAPU8[($arrayidx178)];
      var $conv179=(($208)&255);
      var $mul180=((($conv177)*($conv179))|0);
      var $add181=((($mul180)+(255))|0);
      var $shr=$add181 >> 8;
      var $conv182=(($shr) & 255);
      var $209=$apos;
      var $210=$nbuffer;
      var $arrayidx183=(($210+$209)|0);
      HEAP8[($arrayidx183)]=$conv182;
      __label__ = 63; break;
    case 63: 
      var $211=$x43;
      var $inc185=((($211)+(1))|0);
      $x43=$inc185;
      __label__ = 61; break;
    case 64: 
      __label__ = 65; break;
    case 65: 
      var $212=$y42;
      var $inc188=((($212)+(1))|0);
      $y42=$inc188;
      __label__ = 59; break;
    case 66: 
      __label__ = 67; break;
    case 67: 
      var $213=$nbuffer;
      var $214=$cur;
      var $bitmap191=(($214+12)|0);
      HEAP32[(($bitmap191)>>2)]=$213;
      __label__ = 68; break;
    case 68: 
      var $215=$cur;
      var $next=(($215+28)|0);
      var $216=HEAP32[(($next)>>2)];
      $cur=$216;
      __label__ = 18; break;
    case 69: 
      __label__ = 70; break;
    case 70: 
      var $217=$render_priv_addr;
      var $state194=(($217+176)|0);
      var $clip_drawing195=(($state194+232)|0);
      var $218=HEAP32[(($clip_drawing195)>>2)];
      _ass_drawing_free($218);
      var $219=$render_priv_addr;
      var $state196=(($219+176)|0);
      var $clip_drawing197=(($state196+232)|0);
      HEAP32[(($clip_drawing197)>>2)]=0;
      __label__ = 71; break;
    case 71: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_blend_vector_clip["X"]=1;

function _free_list_add($render_priv, $object) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      var $object_addr;
      var $l;
      $render_priv_addr=$render_priv;
      $object_addr=$object;
      var $0=$render_priv_addr;
      var $free_head=(($0+520)|0);
      var $1=HEAP32[(($free_head)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $call=_calloc(1, 8);
      var $2=$call;
      var $3=$render_priv_addr;
      var $free_head1=(($3+520)|0);
      HEAP32[(($free_head1)>>2)]=$2;
      var $4=$object_addr;
      var $5=$render_priv_addr;
      var $free_head2=(($5+520)|0);
      var $6=HEAP32[(($free_head2)>>2)];
      var $object3=(($6)|0);
      HEAP32[(($object3)>>2)]=$4;
      var $7=$render_priv_addr;
      var $free_head4=(($7+520)|0);
      var $8=HEAP32[(($free_head4)>>2)];
      var $9=$render_priv_addr;
      var $free_tail=(($9+524)|0);
      HEAP32[(($free_tail)>>2)]=$8;
      __label__ = 5; break;
    case 4: 
      var $call5=_calloc(1, 8);
      var $10=$call5;
      $l=$10;
      var $11=$object_addr;
      var $12=$l;
      var $object6=(($12)|0);
      HEAP32[(($object6)>>2)]=$11;
      var $13=$l;
      var $14=$render_priv_addr;
      var $free_tail7=(($14+524)|0);
      var $15=HEAP32[(($free_tail7)>>2)];
      var $next=(($15+4)|0);
      HEAP32[(($next)>>2)]=$13;
      var $16=$render_priv_addr;
      var $free_tail8=(($16+524)|0);
      var $17=HEAP32[(($free_tail8)>>2)];
      var $next9=(($17+4)|0);
      var $18=HEAP32[(($next9)>>2)];
      var $19=$render_priv_addr;
      var $free_tail10=(($19+524)|0);
      HEAP32[(($free_tail10)>>2)]=$18;
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_free_list_add["X"]=1;

function _clone_bitmap_buffer($img) {
  ;
  var __label__;

  var $img_addr;
  var $old_bitmap;
  var $size;
  $img_addr=$img;
  var $0=$img_addr;
  var $bitmap=(($0+12)|0);
  var $1=HEAP32[(($bitmap)>>2)];
  $old_bitmap=$1;
  var $2=$img_addr;
  var $stride=(($2+8)|0);
  var $3=HEAP32[(($stride)>>2)];
  var $4=$img_addr;
  var $h=(($4+4)|0);
  var $5=HEAP32[(($h)>>2)];
  var $sub=((($5)-(1))|0);
  var $mul=((($3)*($sub))|0);
  var $6=$img_addr;
  var $w=(($6)|0);
  var $7=HEAP32[(($w)>>2)];
  var $add=((($mul)+($7))|0);
  $size=$add;
  var $8=$size;
  var $call=_malloc($8);
  var $9=$img_addr;
  var $bitmap1=(($9+12)|0);
  HEAP32[(($bitmap1)>>2)]=$call;
  var $10=$img_addr;
  var $bitmap2=(($10+12)|0);
  var $11=HEAP32[(($bitmap2)>>2)];
  var $12=$old_bitmap;
  var $13=$size;
  assert($13 % 1 === 0, 'memcpy given ' + $13 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($11, $12, $13, 1);
  var $14=$old_bitmap;
  ;
  return $14;
}


function _double_to_d16170($x) {
  ;
  var __label__;

  var $x_addr;
  $x_addr=$x;
  var $0=$x_addr;
  var $mul=($0)*(65536);
  var $conv=(($mul)&-1);
  ;
  return $conv;
}


function _render_glyph_i($render_priv, $bm, $dst_x, $dst_y, $color, $color2, $brk, $tail) {
  var __stackBase__  = STACKTOP; STACKTOP += 64; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      var $bm_addr;
      var $dst_x_addr;
      var $dst_y_addr;
      var $color_addr;
      var $color2_addr;
      var $brk_addr;
      var $tail_addr;
      var $i;
      var $j;
      var $x0;
      var $y0;
      var $x1;
      var $y1;
      var $cx0;
      var $cy0;
      var $cx1;
      var $cy1;
      var $sx;
      var $sy;
      var $zx;
      var $zy;
      var $r=__stackBase__;
      var $img;
      var $lbrk;
      $render_priv_addr=$render_priv;
      $bm_addr=$bm;
      $dst_x_addr=$dst_x;
      $dst_y_addr=$dst_y;
      $color_addr=$color;
      $color2_addr=$color2;
      $brk_addr=$brk;
      $tail_addr=$tail;
      var $0=$bm_addr;
      var $left=(($0)|0);
      var $1=HEAP32[(($left)>>2)];
      var $2=$dst_x_addr;
      var $add=((($2)+($1))|0);
      $dst_x_addr=$add;
      var $3=$bm_addr;
      var $top=(($3+4)|0);
      var $4=HEAP32[(($top)>>2)];
      var $5=$dst_y_addr;
      var $add1=((($5)+($4))|0);
      $dst_y_addr=$add1;
      var $6=$render_priv_addr;
      var $call=_x2scr_pos_scaled($6, 0);
      var $conv=(($call)&-1);
      $zx=$conv;
      var $7=$render_priv_addr;
      var $call2=_y2scr_pos($7, 0);
      var $conv3=(($call2)&-1);
      $zy=$conv3;
      var $8=$render_priv_addr;
      var $9=$render_priv_addr;
      var $track=(($9+140)|0);
      var $10=HEAP32[(($track)>>2)];
      var $PlayResX=(($10+36)|0);
      var $11=HEAP32[(($PlayResX)>>2)];
      var $conv4=(($11)|0);
      var $call5=_x2scr_pos_scaled($8, $conv4);
      var $conv6=(($call5)&-1);
      $sx=$conv6;
      var $12=$render_priv_addr;
      var $13=$render_priv_addr;
      var $track7=(($13+140)|0);
      var $14=HEAP32[(($track7)>>2)];
      var $PlayResY=(($14+40)|0);
      var $15=HEAP32[(($PlayResY)>>2)];
      var $conv8=(($15)|0);
      var $call9=_y2scr_pos($12, $conv8);
      var $conv10=(($call9)&-1);
      $sy=$conv10;
      $x0=0;
      $y0=0;
      var $16=$bm_addr;
      var $w=(($16+8)|0);
      var $17=HEAP32[(($w)>>2)];
      $x1=$17;
      var $18=$bm_addr;
      var $h=(($18+12)|0);
      var $19=HEAP32[(($h)>>2)];
      $y1=$19;
      var $20=$render_priv_addr;
      var $state=(($20+176)|0);
      var $clip_x0=(($state+172)|0);
      var $21=HEAP32[(($clip_x0)>>2)];
      var $22=$dst_x_addr;
      var $sub=((($21)-($22))|0);
      $cx0=$sub;
      var $23=$render_priv_addr;
      var $state11=(($23+176)|0);
      var $clip_y0=(($state11+176)|0);
      var $24=HEAP32[(($clip_y0)>>2)];
      var $25=$dst_y_addr;
      var $sub12=((($24)-($25))|0);
      $cy0=$sub12;
      var $26=$render_priv_addr;
      var $state13=(($26+176)|0);
      var $clip_x1=(($state13+180)|0);
      var $27=HEAP32[(($clip_x1)>>2)];
      var $28=$dst_x_addr;
      var $sub14=((($27)-($28))|0);
      $cx1=$sub14;
      var $29=$render_priv_addr;
      var $state15=(($29+176)|0);
      var $clip_y1=(($state15+184)|0);
      var $30=HEAP32[(($clip_y1)>>2)];
      var $31=$dst_y_addr;
      var $sub16=((($30)-($31))|0);
      $cy1=$sub16;
      $i=0;
      var $32=$x0;
      var $33=$i;
      var $arrayidx=(($r+($33<<4))|0);
      var $x017=(($arrayidx)|0);
      HEAP32[(($x017)>>2)]=$32;
      var $34=$y0;
      var $35=$i;
      var $arrayidx18=(($r+($35<<4))|0);
      var $y019=(($arrayidx18+4)|0);
      HEAP32[(($y019)>>2)]=$34;
      var $36=$cx0;
      var $37=$x1;
      var $cmp=(($36)|0) > (($37)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $38=$x1;
      var $cond = $38;__label__ = 5; break;
    case 4: 
      var $39=$cx0;
      var $cond = $39;__label__ = 5; break;
    case 5: 
      var $cond;
      var $40=$i;
      var $arrayidx21=(($r+($40<<4))|0);
      var $x122=(($arrayidx21+8)|0);
      HEAP32[(($x122)>>2)]=$cond;
      var $41=$y1;
      var $42=$i;
      var $arrayidx23=(($r+($42<<4))|0);
      var $y124=(($arrayidx23+12)|0);
      HEAP32[(($y124)>>2)]=$41;
      var $43=$i;
      var $arrayidx25=(($r+($43<<4))|0);
      var $x126=(($arrayidx25+8)|0);
      var $44=HEAP32[(($x126)>>2)];
      var $45=$i;
      var $arrayidx27=(($r+($45<<4))|0);
      var $x028=(($arrayidx27)|0);
      var $46=HEAP32[(($x028)>>2)];
      var $cmp29=(($44)|0) > (($46)|0);
      if ($cmp29) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $47=$i;
      var $arrayidx31=(($r+($47<<4))|0);
      var $y132=(($arrayidx31+12)|0);
      var $48=HEAP32[(($y132)>>2)];
      var $49=$i;
      var $arrayidx33=(($r+($49<<4))|0);
      var $y034=(($arrayidx33+4)|0);
      var $50=HEAP32[(($y034)>>2)];
      var $cmp35=(($48)|0) > (($50)|0);
      if ($cmp35) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $51=$i;
      var $inc=((($51)+(1))|0);
      $i=$inc;
      __label__ = 8; break;
    case 8: 
      var $52=$cx0;
      var $cmp37=(($52)|0) < 0;
      if ($cmp37) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $53=$x0;
      var $cond42 = $53;__label__ = 11; break;
    case 10: 
      var $54=$cx0;
      var $cond42 = $54;__label__ = 11; break;
    case 11: 
      var $cond42;
      var $55=$i;
      var $arrayidx43=(($r+($55<<4))|0);
      var $x044=(($arrayidx43)|0);
      HEAP32[(($x044)>>2)]=$cond42;
      var $56=$y0;
      var $57=$i;
      var $arrayidx45=(($r+($57<<4))|0);
      var $y046=(($arrayidx45+4)|0);
      HEAP32[(($y046)>>2)]=$56;
      var $58=$cx1;
      var $59=$x1;
      var $cmp47=(($58)|0) > (($59)|0);
      if ($cmp47) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $60=$x1;
      var $cond52 = $60;__label__ = 14; break;
    case 13: 
      var $61=$cx1;
      var $cond52 = $61;__label__ = 14; break;
    case 14: 
      var $cond52;
      var $62=$i;
      var $arrayidx53=(($r+($62<<4))|0);
      var $x154=(($arrayidx53+8)|0);
      HEAP32[(($x154)>>2)]=$cond52;
      var $63=$cy0;
      var $64=$y1;
      var $cmp55=(($63)|0) > (($64)|0);
      if ($cmp55) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $65=$y1;
      var $cond60 = $65;__label__ = 17; break;
    case 16: 
      var $66=$cy0;
      var $cond60 = $66;__label__ = 17; break;
    case 17: 
      var $cond60;
      var $67=$i;
      var $arrayidx61=(($r+($67<<4))|0);
      var $y162=(($arrayidx61+12)|0);
      HEAP32[(($y162)>>2)]=$cond60;
      var $68=$i;
      var $arrayidx63=(($r+($68<<4))|0);
      var $x164=(($arrayidx63+8)|0);
      var $69=HEAP32[(($x164)>>2)];
      var $70=$i;
      var $arrayidx65=(($r+($70<<4))|0);
      var $x066=(($arrayidx65)|0);
      var $71=HEAP32[(($x066)>>2)];
      var $cmp67=(($69)|0) > (($71)|0);
      if ($cmp67) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: 
      var $72=$i;
      var $arrayidx70=(($r+($72<<4))|0);
      var $y171=(($arrayidx70+12)|0);
      var $73=HEAP32[(($y171)>>2)];
      var $74=$i;
      var $arrayidx72=(($r+($74<<4))|0);
      var $y073=(($arrayidx72+4)|0);
      var $75=HEAP32[(($y073)>>2)];
      var $cmp74=(($73)|0) > (($75)|0);
      if ($cmp74) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $76=$i;
      var $inc77=((($76)+(1))|0);
      $i=$inc77;
      __label__ = 20; break;
    case 20: 
      var $77=$cx0;
      var $cmp79=(($77)|0) < 0;
      if ($cmp79) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $78=$x0;
      var $cond84 = $78;__label__ = 23; break;
    case 22: 
      var $79=$cx0;
      var $cond84 = $79;__label__ = 23; break;
    case 23: 
      var $cond84;
      var $80=$i;
      var $arrayidx85=(($r+($80<<4))|0);
      var $x086=(($arrayidx85)|0);
      HEAP32[(($x086)>>2)]=$cond84;
      var $81=$cy1;
      var $cmp87=(($81)|0) < 0;
      if ($cmp87) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $82=$y0;
      var $cond92 = $82;__label__ = 26; break;
    case 25: 
      var $83=$cy1;
      var $cond92 = $83;__label__ = 26; break;
    case 26: 
      var $cond92;
      var $84=$i;
      var $arrayidx93=(($r+($84<<4))|0);
      var $y094=(($arrayidx93+4)|0);
      HEAP32[(($y094)>>2)]=$cond92;
      var $85=$cx1;
      var $86=$x1;
      var $cmp95=(($85)|0) > (($86)|0);
      if ($cmp95) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $87=$x1;
      var $cond100 = $87;__label__ = 29; break;
    case 28: 
      var $88=$cx1;
      var $cond100 = $88;__label__ = 29; break;
    case 29: 
      var $cond100;
      var $89=$i;
      var $arrayidx101=(($r+($89<<4))|0);
      var $x1102=(($arrayidx101+8)|0);
      HEAP32[(($x1102)>>2)]=$cond100;
      var $90=$y1;
      var $91=$i;
      var $arrayidx103=(($r+($91<<4))|0);
      var $y1104=(($arrayidx103+12)|0);
      HEAP32[(($y1104)>>2)]=$90;
      var $92=$i;
      var $arrayidx105=(($r+($92<<4))|0);
      var $x1106=(($arrayidx105+8)|0);
      var $93=HEAP32[(($x1106)>>2)];
      var $94=$i;
      var $arrayidx107=(($r+($94<<4))|0);
      var $x0108=(($arrayidx107)|0);
      var $95=HEAP32[(($x0108)>>2)];
      var $cmp109=(($93)|0) > (($95)|0);
      if ($cmp109) { __label__ = 30; break; } else { __label__ = 32; break; }
    case 30: 
      var $96=$i;
      var $arrayidx112=(($r+($96<<4))|0);
      var $y1113=(($arrayidx112+12)|0);
      var $97=HEAP32[(($y1113)>>2)];
      var $98=$i;
      var $arrayidx114=(($r+($98<<4))|0);
      var $y0115=(($arrayidx114+4)|0);
      var $99=HEAP32[(($y0115)>>2)];
      var $cmp116=(($97)|0) > (($99)|0);
      if ($cmp116) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $100=$i;
      var $inc119=((($100)+(1))|0);
      $i=$inc119;
      __label__ = 32; break;
    case 32: 
      var $101=$cx1;
      var $cmp121=(($101)|0) < 0;
      if ($cmp121) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      var $102=$x0;
      var $cond126 = $102;__label__ = 35; break;
    case 34: 
      var $103=$cx1;
      var $cond126 = $103;__label__ = 35; break;
    case 35: 
      var $cond126;
      var $104=$i;
      var $arrayidx127=(($r+($104<<4))|0);
      var $x0128=(($arrayidx127)|0);
      HEAP32[(($x0128)>>2)]=$cond126;
      var $105=$y0;
      var $106=$i;
      var $arrayidx129=(($r+($106<<4))|0);
      var $y0130=(($arrayidx129+4)|0);
      HEAP32[(($y0130)>>2)]=$105;
      var $107=$x1;
      var $108=$i;
      var $arrayidx131=(($r+($108<<4))|0);
      var $x1132=(($arrayidx131+8)|0);
      HEAP32[(($x1132)>>2)]=$107;
      var $109=$y1;
      var $110=$i;
      var $arrayidx133=(($r+($110<<4))|0);
      var $y1134=(($arrayidx133+12)|0);
      HEAP32[(($y1134)>>2)]=$109;
      var $111=$i;
      var $arrayidx135=(($r+($111<<4))|0);
      var $x1136=(($arrayidx135+8)|0);
      var $112=HEAP32[(($x1136)>>2)];
      var $113=$i;
      var $arrayidx137=(($r+($113<<4))|0);
      var $x0138=(($arrayidx137)|0);
      var $114=HEAP32[(($x0138)>>2)];
      var $cmp139=(($112)|0) > (($114)|0);
      if ($cmp139) { __label__ = 36; break; } else { __label__ = 38; break; }
    case 36: 
      var $115=$i;
      var $arrayidx142=(($r+($115<<4))|0);
      var $y1143=(($arrayidx142+12)|0);
      var $116=HEAP32[(($y1143)>>2)];
      var $117=$i;
      var $arrayidx144=(($r+($117<<4))|0);
      var $y0145=(($arrayidx144+4)|0);
      var $118=HEAP32[(($y0145)>>2)];
      var $cmp146=(($116)|0) > (($118)|0);
      if ($cmp146) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      var $119=$i;
      var $inc149=((($119)+(1))|0);
      $i=$inc149;
      __label__ = 38; break;
    case 38: 
      $j=0;
      __label__ = 39; break;
    case 39: 
      var $120=$j;
      var $121=$i;
      var $cmp151=(($120)|0) < (($121)|0);
      if ($cmp151) { __label__ = 40; break; } else { __label__ = 54; break; }
    case 40: 
      var $122=$j;
      var $arrayidx153=(($r+($122<<4))|0);
      var $x0154=(($arrayidx153)|0);
      var $123=HEAP32[(($x0154)>>2)];
      var $124=$dst_x_addr;
      var $add155=((($123)+($124))|0);
      var $125=$zx;
      var $cmp156=(($add155)|0) < (($125)|0);
      if ($cmp156) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $126=$zx;
      var $127=$dst_x_addr;
      var $sub159=((($126)-($127))|0);
      var $cond164 = $sub159;__label__ = 43; break;
    case 42: 
      var $128=$j;
      var $arrayidx161=(($r+($128<<4))|0);
      var $x0162=(($arrayidx161)|0);
      var $129=HEAP32[(($x0162)>>2)];
      var $cond164 = $129;__label__ = 43; break;
    case 43: 
      var $cond164;
      var $130=$j;
      var $arrayidx165=(($r+($130<<4))|0);
      var $x0166=(($arrayidx165)|0);
      HEAP32[(($x0166)>>2)]=$cond164;
      var $131=$j;
      var $arrayidx167=(($r+($131<<4))|0);
      var $y0168=(($arrayidx167+4)|0);
      var $132=HEAP32[(($y0168)>>2)];
      var $133=$dst_y_addr;
      var $add169=((($132)+($133))|0);
      var $134=$zy;
      var $cmp170=(($add169)|0) < (($134)|0);
      if ($cmp170) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $135=$zy;
      var $136=$dst_y_addr;
      var $sub173=((($135)-($136))|0);
      var $cond178 = $sub173;__label__ = 46; break;
    case 45: 
      var $137=$j;
      var $arrayidx175=(($r+($137<<4))|0);
      var $y0176=(($arrayidx175+4)|0);
      var $138=HEAP32[(($y0176)>>2)];
      var $cond178 = $138;__label__ = 46; break;
    case 46: 
      var $cond178;
      var $139=$j;
      var $arrayidx179=(($r+($139<<4))|0);
      var $y0180=(($arrayidx179+4)|0);
      HEAP32[(($y0180)>>2)]=$cond178;
      var $140=$j;
      var $arrayidx181=(($r+($140<<4))|0);
      var $x1182=(($arrayidx181+8)|0);
      var $141=HEAP32[(($x1182)>>2)];
      var $142=$dst_x_addr;
      var $add183=((($141)+($142))|0);
      var $143=$sx;
      var $cmp184=(($add183)|0) > (($143)|0);
      if ($cmp184) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      var $144=$sx;
      var $145=$dst_x_addr;
      var $sub187=((($144)-($145))|0);
      var $cond192 = $sub187;__label__ = 49; break;
    case 48: 
      var $146=$j;
      var $arrayidx189=(($r+($146<<4))|0);
      var $x1190=(($arrayidx189+8)|0);
      var $147=HEAP32[(($x1190)>>2)];
      var $cond192 = $147;__label__ = 49; break;
    case 49: 
      var $cond192;
      var $148=$j;
      var $arrayidx193=(($r+($148<<4))|0);
      var $x1194=(($arrayidx193+8)|0);
      HEAP32[(($x1194)>>2)]=$cond192;
      var $149=$j;
      var $arrayidx195=(($r+($149<<4))|0);
      var $y1196=(($arrayidx195+12)|0);
      var $150=HEAP32[(($y1196)>>2)];
      var $151=$dst_y_addr;
      var $add197=((($150)+($151))|0);
      var $152=$sy;
      var $cmp198=(($add197)|0) > (($152)|0);
      if ($cmp198) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $153=$sy;
      var $154=$dst_y_addr;
      var $sub201=((($153)-($154))|0);
      var $cond206 = $sub201;__label__ = 52; break;
    case 51: 
      var $155=$j;
      var $arrayidx203=(($r+($155<<4))|0);
      var $y1204=(($arrayidx203+12)|0);
      var $156=HEAP32[(($y1204)>>2)];
      var $cond206 = $156;__label__ = 52; break;
    case 52: 
      var $cond206;
      var $157=$j;
      var $arrayidx207=(($r+($157<<4))|0);
      var $y1208=(($arrayidx207+12)|0);
      HEAP32[(($y1208)>>2)]=$cond206;
      __label__ = 53; break;
    case 53: 
      var $158=$j;
      var $inc209=((($158)+(1))|0);
      $j=$inc209;
      __label__ = 39; break;
    case 54: 
      $j=0;
      __label__ = 55; break;
    case 55: 
      var $159=$j;
      var $160=$i;
      var $cmp211=(($159)|0) < (($160)|0);
      if ($cmp211) { __label__ = 56; break; } else { __label__ = 73; break; }
    case 56: 
      var $161=$brk_addr;
      $lbrk=$161;
      var $162=$j;
      var $arrayidx214=(($r+($162<<4))|0);
      var $x1215=(($arrayidx214+8)|0);
      var $163=HEAP32[(($x1215)>>2)];
      var $164=$j;
      var $arrayidx216=(($r+($164<<4))|0);
      var $x0217=(($arrayidx216)|0);
      var $165=HEAP32[(($x0217)>>2)];
      var $cmp218=(($163)|0) <= (($165)|0);
      if ($cmp218) { __label__ = 58; break; } else { __label__ = 57; break; }
    case 57: 
      var $166=$j;
      var $arrayidx220=(($r+($166<<4))|0);
      var $y1221=(($arrayidx220+12)|0);
      var $167=HEAP32[(($y1221)>>2)];
      var $168=$j;
      var $arrayidx222=(($r+($168<<4))|0);
      var $y0223=(($arrayidx222+4)|0);
      var $169=HEAP32[(($y0223)>>2)];
      var $cmp224=(($167)|0) <= (($169)|0);
      if ($cmp224) { __label__ = 58; break; } else { __label__ = 59; break; }
    case 58: 
      __label__ = 72; break;
    case 59: 
      var $170=$lbrk;
      var $171=$j;
      var $arrayidx228=(($r+($171<<4))|0);
      var $x0229=(($arrayidx228)|0);
      var $172=HEAP32[(($x0229)>>2)];
      var $cmp230=(($170)|0) > (($172)|0);
      if ($cmp230) { __label__ = 60; break; } else { __label__ = 65; break; }
    case 60: 
      var $173=$lbrk;
      var $174=$j;
      var $arrayidx233=(($r+($174<<4))|0);
      var $x1234=(($arrayidx233+8)|0);
      var $175=HEAP32[(($x1234)>>2)];
      var $cmp235=(($173)|0) > (($175)|0);
      if ($cmp235) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: 
      var $176=$j;
      var $arrayidx238=(($r+($176<<4))|0);
      var $x1239=(($arrayidx238+8)|0);
      var $177=HEAP32[(($x1239)>>2)];
      $lbrk=$177;
      __label__ = 62; break;
    case 62: 
      var $178=$bm_addr;
      var $buffer=(($178+20)|0);
      var $179=HEAP32[(($buffer)>>2)];
      var $180=$j;
      var $arrayidx241=(($r+($180<<4))|0);
      var $y0242=(($arrayidx241+4)|0);
      var $181=HEAP32[(($y0242)>>2)];
      var $182=$bm_addr;
      var $stride=(($182+16)|0);
      var $183=HEAP32[(($stride)>>2)];
      var $mul=((($181)*($183))|0);
      var $add_ptr=(($179+$mul)|0);
      var $184=$j;
      var $arrayidx243=(($r+($184<<4))|0);
      var $x0244=(($arrayidx243)|0);
      var $185=HEAP32[(($x0244)>>2)];
      var $add_ptr245=(($add_ptr+$185)|0);
      var $186=$lbrk;
      var $187=$j;
      var $arrayidx246=(($r+($187<<4))|0);
      var $x0247=(($arrayidx246)|0);
      var $188=HEAP32[(($x0247)>>2)];
      var $sub248=((($186)-($188))|0);
      var $189=$j;
      var $arrayidx249=(($r+($189<<4))|0);
      var $y1250=(($arrayidx249+12)|0);
      var $190=HEAP32[(($y1250)>>2)];
      var $191=$j;
      var $arrayidx251=(($r+($191<<4))|0);
      var $y0252=(($arrayidx251+4)|0);
      var $192=HEAP32[(($y0252)>>2)];
      var $sub253=((($190)-($192))|0);
      var $193=$bm_addr;
      var $stride254=(($193+16)|0);
      var $194=HEAP32[(($stride254)>>2)];
      var $195=$dst_x_addr;
      var $196=$j;
      var $arrayidx255=(($r+($196<<4))|0);
      var $x0256=(($arrayidx255)|0);
      var $197=HEAP32[(($x0256)>>2)];
      var $add257=((($195)+($197))|0);
      var $198=$dst_y_addr;
      var $199=$j;
      var $arrayidx258=(($r+($199<<4))|0);
      var $y0259=(($arrayidx258+4)|0);
      var $200=HEAP32[(($y0259)>>2)];
      var $add260=((($198)+($200))|0);
      var $201=$color_addr;
      var $call261=_my_draw_bitmap($add_ptr245, $sub248, $sub253, $194, $add257, $add260, $201);
      $img=$call261;
      var $202=$img;
      var $tobool=(($202)|0)!=0;
      if ($tobool) { __label__ = 64; break; } else { __label__ = 63; break; }
    case 63: 
      __label__ = 73; break;
    case 64: 
      var $203=$img;
      var $204=$tail_addr;
      HEAP32[(($204)>>2)]=$203;
      var $205=$img;
      var $next=(($205+28)|0);
      $tail_addr=$next;
      __label__ = 65; break;
    case 65: 
      var $206=$lbrk;
      var $207=$j;
      var $arrayidx265=(($r+($207<<4))|0);
      var $x1266=(($arrayidx265+8)|0);
      var $208=HEAP32[(($x1266)>>2)];
      var $cmp267=(($206)|0) < (($208)|0);
      if ($cmp267) { __label__ = 66; break; } else { __label__ = 71; break; }
    case 66: 
      var $209=$lbrk;
      var $210=$j;
      var $arrayidx270=(($r+($210<<4))|0);
      var $x0271=(($arrayidx270)|0);
      var $211=HEAP32[(($x0271)>>2)];
      var $cmp272=(($209)|0) < (($211)|0);
      if ($cmp272) { __label__ = 67; break; } else { __label__ = 68; break; }
    case 67: 
      var $212=$j;
      var $arrayidx275=(($r+($212<<4))|0);
      var $x0276=(($arrayidx275)|0);
      var $213=HEAP32[(($x0276)>>2)];
      $lbrk=$213;
      __label__ = 68; break;
    case 68: 
      var $214=$bm_addr;
      var $buffer278=(($214+20)|0);
      var $215=HEAP32[(($buffer278)>>2)];
      var $216=$j;
      var $arrayidx279=(($r+($216<<4))|0);
      var $y0280=(($arrayidx279+4)|0);
      var $217=HEAP32[(($y0280)>>2)];
      var $218=$bm_addr;
      var $stride281=(($218+16)|0);
      var $219=HEAP32[(($stride281)>>2)];
      var $mul282=((($217)*($219))|0);
      var $add_ptr283=(($215+$mul282)|0);
      var $220=$lbrk;
      var $add_ptr284=(($add_ptr283+$220)|0);
      var $221=$j;
      var $arrayidx285=(($r+($221<<4))|0);
      var $x1286=(($arrayidx285+8)|0);
      var $222=HEAP32[(($x1286)>>2)];
      var $223=$lbrk;
      var $sub287=((($222)-($223))|0);
      var $224=$j;
      var $arrayidx288=(($r+($224<<4))|0);
      var $y1289=(($arrayidx288+12)|0);
      var $225=HEAP32[(($y1289)>>2)];
      var $226=$j;
      var $arrayidx290=(($r+($226<<4))|0);
      var $y0291=(($arrayidx290+4)|0);
      var $227=HEAP32[(($y0291)>>2)];
      var $sub292=((($225)-($227))|0);
      var $228=$bm_addr;
      var $stride293=(($228+16)|0);
      var $229=HEAP32[(($stride293)>>2)];
      var $230=$dst_x_addr;
      var $231=$lbrk;
      var $add294=((($230)+($231))|0);
      var $232=$dst_y_addr;
      var $233=$j;
      var $arrayidx295=(($r+($233<<4))|0);
      var $y0296=(($arrayidx295+4)|0);
      var $234=HEAP32[(($y0296)>>2)];
      var $add297=((($232)+($234))|0);
      var $235=$color2_addr;
      var $call298=_my_draw_bitmap($add_ptr284, $sub287, $sub292, $229, $add294, $add297, $235);
      $img=$call298;
      var $236=$img;
      var $tobool299=(($236)|0)!=0;
      if ($tobool299) { __label__ = 70; break; } else { __label__ = 69; break; }
    case 69: 
      __label__ = 73; break;
    case 70: 
      var $237=$img;
      var $238=$tail_addr;
      HEAP32[(($238)>>2)]=$237;
      var $239=$img;
      var $next302=(($239+28)|0);
      $tail_addr=$next302;
      __label__ = 71; break;
    case 71: 
      __label__ = 72; break;
    case 72: 
      var $240=$j;
      var $inc305=((($240)+(1))|0);
      $j=$inc305;
      __label__ = 55; break;
    case 73: 
      var $241=$tail_addr;
      STACKTOP = __stackBase__;
      return $241;
    default: assert(0, "bad label: " + __label__);
  }
}
_render_glyph_i["X"]=1;

function _my_draw_bitmap($bitmap, $bitmap_w, $bitmap_h, $stride, $dst_x, $dst_y, $color) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $bitmap_addr;
      var $bitmap_w_addr;
      var $bitmap_h_addr;
      var $stride_addr;
      var $dst_x_addr;
      var $dst_y_addr;
      var $color_addr;
      var $img;
      $bitmap_addr=$bitmap;
      $bitmap_w_addr=$bitmap_w;
      $bitmap_h_addr=$bitmap_h;
      $stride_addr=$stride;
      $dst_x_addr=$dst_x;
      $dst_y_addr=$dst_y;
      $color_addr=$color;
      var $call=_malloc(32);
      var $0=$call;
      $img=$0;
      var $1=$img;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=$bitmap_w_addr;
      var $3=$img;
      var $w=(($3)|0);
      HEAP32[(($w)>>2)]=$2;
      var $4=$bitmap_h_addr;
      var $5=$img;
      var $h=(($5+4)|0);
      HEAP32[(($h)>>2)]=$4;
      var $6=$stride_addr;
      var $7=$img;
      var $stride1=(($7+8)|0);
      HEAP32[(($stride1)>>2)]=$6;
      var $8=$bitmap_addr;
      var $9=$img;
      var $bitmap2=(($9+12)|0);
      HEAP32[(($bitmap2)>>2)]=$8;
      var $10=$color_addr;
      var $11=$img;
      var $color3=(($11+16)|0);
      HEAP32[(($color3)>>2)]=$10;
      var $12=$dst_x_addr;
      var $13=$img;
      var $dst_x4=(($13+20)|0);
      HEAP32[(($dst_x4)>>2)]=$12;
      var $14=$dst_y_addr;
      var $15=$img;
      var $dst_y5=(($15+24)|0);
      HEAP32[(($dst_y5)>>2)]=$14;
      __label__ = 4; break;
    case 4: 
      var $16=$img;
      ;
      return $16;
    default: assert(0, "bad label: " + __label__);
  }
}
_my_draw_bitmap["X"]=1;

function _transform_3d($shift_0, $shift_1, $outline, $border, $frx, $fry, $frz, $fax, $fay, $scale, $yshift) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $shift=__stackBase__;
      var $outline_addr;
      var $border_addr;
      var $frx_addr;
      var $fry_addr;
      var $frz_addr;
      var $fax_addr;
      var $fay_addr;
      var $scale_addr;
      var $yshift_addr;
      var $x=(($shift)|0);
      HEAP32[(($x)>>2)]=$shift_0;
      var $y=(($shift+4)|0);
      HEAP32[(($y)>>2)]=$shift_1;
      $outline_addr=$outline;
      $border_addr=$border;
      $frx_addr=$frx;
      $fry_addr=$fry;
      $frz_addr=$frz;
      $fax_addr=$fax;
      $fay_addr=$fay;
      $scale_addr=$scale;
      $yshift_addr=$yshift;
      var $0=$frx_addr;
      var $sub=(-$0);
      $frx_addr=$sub;
      var $1=$frz_addr;
      var $sub1=(-$1);
      $frz_addr=$sub1;
      var $2=$frx_addr;
      var $cmp=$2 != 0;
      if ($cmp) { __label__ = 7; break; } else { __label__ = 3; break; }
    case 3: 
      var $3=$fry_addr;
      var $cmp2=$3 != 0;
      if ($cmp2) { __label__ = 7; break; } else { __label__ = 4; break; }
    case 4: 
      var $4=$frz_addr;
      var $cmp4=$4 != 0;
      if ($cmp4) { __label__ = 7; break; } else { __label__ = 5; break; }
    case 5: 
      var $5=$fax_addr;
      var $cmp6=$5 != 0;
      if ($cmp6) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $6=$fay_addr;
      var $cmp8=$6 != 0;
      if ($cmp8) { __label__ = 7; break; } else { __label__ = 12; break; }
    case 7: 
      var $7=$outline_addr;
      var $tobool=(($7)|0)!=0;
      if ($tobool) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $8=$outline_addr;
      var $9=$frx_addr;
      var $10=$fry_addr;
      var $11=$frz_addr;
      var $12=$fax_addr;
      var $13=$fay_addr;
      var $14=$scale_addr;
      var $15=$yshift_addr;
      var $x10=(($shift)|0);
      var $16=HEAP32[(($x10)>>2)];
      var $y11=(($shift+4)|0);
      var $17=HEAP32[(($y11)>>2)];
      _transform_3d_points($16, $17, $8, $9, $10, $11, $12, $13, $14, $15);
      __label__ = 9; break;
    case 9: 
      var $18=$border_addr;
      var $tobool12=(($18)|0)!=0;
      if ($tobool12) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $19=$border_addr;
      var $20=$frx_addr;
      var $21=$fry_addr;
      var $22=$frz_addr;
      var $23=$fax_addr;
      var $24=$fay_addr;
      var $25=$scale_addr;
      var $26=$yshift_addr;
      var $x14=(($shift)|0);
      var $27=HEAP32[(($x14)>>2)];
      var $y15=(($shift+4)|0);
      var $28=HEAP32[(($y15)>>2)];
      _transform_3d_points($27, $28, $19, $20, $21, $22, $23, $24, $25, $26);
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_transform_3d["X"]=1;

function _double_to_d22($x) {
  ;
  var __label__;

  var $x_addr;
  $x_addr=$x;
  var $0=$x_addr;
  var $mul=($0)*(4194304);
  var $conv=(($mul)&-1);
  ;
  return $conv;
}


function _d16_to_d6171($x) {
  ;
  var __label__;

  var $x_addr;
  $x_addr=$x;
  var $0=$x_addr;
  var $add=((($0)+(512))|0);
  var $shr=$add >> 10;
  ;
  return $shr;
}


function _trim_whitespace($render_priv) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      var $i;
      var $j;
      var $cur;
      var $ti;
      $render_priv_addr=$render_priv;
      var $0=$render_priv_addr;
      var $text_info=(($0+464)|0);
      $ti=$text_info;
      var $1=$ti;
      var $length=(($1+4)|0);
      var $2=HEAP32[(($length)>>2)];
      var $sub=((($2)-(1))|0);
      $i=$sub;
      var $3=$ti;
      var $glyphs=(($3)|0);
      var $4=HEAP32[(($glyphs)>>2)];
      var $5=$i;
      var $add_ptr=(($4+($5)*(328))|0);
      $cur=$add_ptr;
      __label__ = 3; break;
    case 3: 
      var $6=$i;
      var $tobool=(($6)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { var $14 = 0;__label__ = 8; break; }
    case 4: 
      var $7=$cur;
      var $symbol=(($7)|0);
      var $8=HEAP32[(($symbol)>>2)];
      var $cmp=(($8)|0)==32;
      if ($cmp) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $9=$cur;
      var $symbol1=(($9)|0);
      var $10=HEAP32[(($symbol1)>>2)];
      var $cmp2=(($10)|0)==10;
      if ($cmp2) { __label__ = 6; break; } else { var $13 = 0;__label__ = 7; break; }
    case 6: 
      var $11=$cur;
      var $linebreak=(($11+84)|0);
      var $12=HEAP8[($linebreak)];
      var $tobool4=(($12 << 24) >> 24)!=0;
      var $lnot=$tobool4 ^ 1;
      var $13 = $lnot;__label__ = 7; break;
    case 7: 
      var $13;
      var $14 = $13;__label__ = 8; break;
    case 8: 
      var $14;
      if ($14) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $15=$cur;
      var $skip=(($15+4)|0);
      var $16=HEAP32[(($skip)>>2)];
      var $inc=((($16)+(1))|0);
      HEAP32[(($skip)>>2)]=$inc;
      var $17=$ti;
      var $glyphs6=(($17)|0);
      var $18=HEAP32[(($glyphs6)>>2)];
      var $19=$i;
      var $dec=((($19)-(1))|0);
      $i=$dec;
      var $add_ptr7=(($18+($dec)*(328))|0);
      $cur=$add_ptr7;
      __label__ = 3; break;
    case 10: 
      $i=0;
      var $20=$ti;
      var $glyphs8=(($20)|0);
      var $21=HEAP32[(($glyphs8)>>2)];
      $cur=$21;
      __label__ = 11; break;
    case 11: 
      var $22=$i;
      var $23=$ti;
      var $length10=(($23+4)|0);
      var $24=HEAP32[(($length10)>>2)];
      var $cmp11=(($22)|0) < (($24)|0);
      if ($cmp11) { __label__ = 12; break; } else { var $32 = 0;__label__ = 16; break; }
    case 12: 
      var $25=$cur;
      var $symbol13=(($25)|0);
      var $26=HEAP32[(($symbol13)>>2)];
      var $cmp14=(($26)|0)==32;
      if ($cmp14) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: 
      var $27=$cur;
      var $symbol16=(($27)|0);
      var $28=HEAP32[(($symbol16)>>2)];
      var $cmp17=(($28)|0)==10;
      if ($cmp17) { __label__ = 14; break; } else { var $31 = 0;__label__ = 15; break; }
    case 14: 
      var $29=$cur;
      var $linebreak19=(($29+84)|0);
      var $30=HEAP8[($linebreak19)];
      var $tobool20=(($30 << 24) >> 24)!=0;
      var $lnot21=$tobool20 ^ 1;
      var $31 = $lnot21;__label__ = 15; break;
    case 15: 
      var $31;
      var $32 = $31;__label__ = 16; break;
    case 16: 
      var $32;
      if ($32) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $33=$cur;
      var $skip25=(($33+4)|0);
      var $34=HEAP32[(($skip25)>>2)];
      var $inc26=((($34)+(1))|0);
      HEAP32[(($skip25)>>2)]=$inc26;
      var $35=$ti;
      var $glyphs27=(($35)|0);
      var $36=HEAP32[(($glyphs27)>>2)];
      var $37=$i;
      var $inc28=((($37)+(1))|0);
      $i=$inc28;
      var $add_ptr29=(($36+($inc28)*(328))|0);
      $cur=$add_ptr29;
      __label__ = 11; break;
    case 18: 
      $i=0;
      __label__ = 19; break;
    case 19: 
      var $38=$i;
      var $39=$ti;
      var $length31=(($39+4)|0);
      var $40=HEAP32[(($length31)>>2)];
      var $cmp32=(($38)|0) < (($40)|0);
      if ($cmp32) { __label__ = 20; break; } else { __label__ = 42; break; }
    case 20: 
      var $41=$ti;
      var $glyphs33=(($41)|0);
      var $42=HEAP32[(($glyphs33)>>2)];
      var $43=$i;
      var $add_ptr34=(($42+($43)*(328))|0);
      $cur=$add_ptr34;
      var $44=$cur;
      var $linebreak35=(($44+84)|0);
      var $45=HEAP8[($linebreak35)];
      var $tobool36=(($45 << 24) >> 24)!=0;
      if ($tobool36) { __label__ = 21; break; } else { __label__ = 40; break; }
    case 21: 
      var $46=$i;
      var $sub37=((($46)-(1))|0);
      $j=$sub37;
      var $47=$ti;
      var $glyphs38=(($47)|0);
      var $48=HEAP32[(($glyphs38)>>2)];
      var $49=$j;
      var $add_ptr39=(($48+($49)*(328))|0);
      $cur=$add_ptr39;
      __label__ = 22; break;
    case 22: 
      var $50=$j;
      var $tobool41=(($50)|0)!=0;
      if ($tobool41) { __label__ = 23; break; } else { var $58 = 0;__label__ = 27; break; }
    case 23: 
      var $51=$cur;
      var $symbol43=(($51)|0);
      var $52=HEAP32[(($symbol43)>>2)];
      var $cmp44=(($52)|0)==32;
      if ($cmp44) { __label__ = 25; break; } else { __label__ = 24; break; }
    case 24: 
      var $53=$cur;
      var $symbol46=(($53)|0);
      var $54=HEAP32[(($symbol46)>>2)];
      var $cmp47=(($54)|0)==10;
      if ($cmp47) { __label__ = 25; break; } else { var $57 = 0;__label__ = 26; break; }
    case 25: 
      var $55=$cur;
      var $linebreak49=(($55+84)|0);
      var $56=HEAP8[($linebreak49)];
      var $tobool50=(($56 << 24) >> 24)!=0;
      var $lnot51=$tobool50 ^ 1;
      var $57 = $lnot51;__label__ = 26; break;
    case 26: 
      var $57;
      var $58 = $57;__label__ = 27; break;
    case 27: 
      var $58;
      if ($58) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $59=$cur;
      var $skip55=(($59+4)|0);
      var $60=HEAP32[(($skip55)>>2)];
      var $inc56=((($60)+(1))|0);
      HEAP32[(($skip55)>>2)]=$inc56;
      var $61=$ti;
      var $glyphs57=(($61)|0);
      var $62=HEAP32[(($glyphs57)>>2)];
      var $63=$j;
      var $dec58=((($63)-(1))|0);
      $j=$dec58;
      var $add_ptr59=(($62+($dec58)*(328))|0);
      $cur=$add_ptr59;
      __label__ = 22; break;
    case 29: 
      var $64=$ti;
      var $glyphs61=(($64)|0);
      var $65=HEAP32[(($glyphs61)>>2)];
      var $66=$i;
      var $add_ptr62=(($65+($66)*(328))|0);
      $cur=$add_ptr62;
      var $67=$cur;
      var $symbol63=(($67)|0);
      var $68=HEAP32[(($symbol63)>>2)];
      var $cmp64=(($68)|0)==32;
      if ($cmp64) { __label__ = 30; break; } else { __label__ = 39; break; }
    case 30: 
      var $69=$cur;
      var $skip66=(($69+4)|0);
      var $70=HEAP32[(($skip66)>>2)];
      var $inc67=((($70)+(1))|0);
      HEAP32[(($skip66)>>2)]=$inc67;
      var $71=$i;
      var $add=((($71)+(1))|0);
      $j=$add;
      var $72=$ti;
      var $glyphs68=(($72)|0);
      var $73=HEAP32[(($glyphs68)>>2)];
      var $74=$j;
      var $add_ptr69=(($73+($74)*(328))|0);
      $cur=$add_ptr69;
      __label__ = 31; break;
    case 31: 
      var $75=$j;
      var $76=$ti;
      var $length71=(($76+4)|0);
      var $77=HEAP32[(($length71)>>2)];
      var $cmp72=(($75)|0) < (($77)|0);
      if ($cmp72) { __label__ = 32; break; } else { var $85 = 0;__label__ = 36; break; }
    case 32: 
      var $78=$cur;
      var $symbol74=(($78)|0);
      var $79=HEAP32[(($symbol74)>>2)];
      var $cmp75=(($79)|0)==32;
      if ($cmp75) { __label__ = 34; break; } else { __label__ = 33; break; }
    case 33: 
      var $80=$cur;
      var $symbol77=(($80)|0);
      var $81=HEAP32[(($symbol77)>>2)];
      var $cmp78=(($81)|0)==10;
      if ($cmp78) { __label__ = 34; break; } else { var $84 = 0;__label__ = 35; break; }
    case 34: 
      var $82=$cur;
      var $linebreak80=(($82+84)|0);
      var $83=HEAP8[($linebreak80)];
      var $tobool81=(($83 << 24) >> 24)!=0;
      var $lnot82=$tobool81 ^ 1;
      var $84 = $lnot82;__label__ = 35; break;
    case 35: 
      var $84;
      var $85 = $84;__label__ = 36; break;
    case 36: 
      var $85;
      if ($85) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      var $86=$cur;
      var $skip86=(($86+4)|0);
      var $87=HEAP32[(($skip86)>>2)];
      var $inc87=((($87)+(1))|0);
      HEAP32[(($skip86)>>2)]=$inc87;
      var $88=$ti;
      var $glyphs88=(($88)|0);
      var $89=HEAP32[(($glyphs88)>>2)];
      var $90=$j;
      var $inc89=((($90)+(1))|0);
      $j=$inc89;
      var $add_ptr90=(($89+($inc89)*(328))|0);
      $cur=$add_ptr90;
      __label__ = 31; break;
    case 38: 
      var $91=$j;
      var $sub92=((($91)-(1))|0);
      $i=$sub92;
      __label__ = 39; break;
    case 39: 
      __label__ = 40; break;
    case 40: 
      __label__ = 41; break;
    case 41: 
      var $92=$i;
      var $inc94=((($92)+(1))|0);
      $i=$inc94;
      __label__ = 19; break;
    case 42: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_trim_whitespace["X"]=1;

function _transform_3d_points($shift_0, $shift_1, $outline, $frx, $fry, $frz, $fax, $fay, $scale, $yshift) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $shift=__stackBase__;
      var $outline_addr;
      var $frx_addr;
      var $fry_addr;
      var $frz_addr;
      var $fax_addr;
      var $fay_addr;
      var $scale_addr;
      var $yshift_addr;
      var $sx;
      var $sy;
      var $sz;
      var $cx;
      var $cy;
      var $cz;
      var $p;
      var $x6;
      var $y7;
      var $z;
      var $xx;
      var $yy;
      var $zz;
      var $i;
      var $dist;
      var $x=(($shift)|0);
      HEAP32[(($x)>>2)]=$shift_0;
      var $y=(($shift+4)|0);
      HEAP32[(($y)>>2)]=$shift_1;
      $outline_addr=$outline;
      $frx_addr=$frx;
      $fry_addr=$fry;
      $frz_addr=$frz;
      $fax_addr=$fax;
      $fay_addr=$fay;
      $scale_addr=$scale;
      $yshift_addr=$yshift;
      var $0=$frx_addr;
      var $call=_sin($0);
      $sx=$call;
      var $1=$fry_addr;
      var $call1=_sin($1);
      $sy=$call1;
      var $2=$frz_addr;
      var $call2=_sin($2);
      $sz=$call2;
      var $3=$frx_addr;
      var $call3=_cos($3);
      $cx=$call3;
      var $4=$fry_addr;
      var $call4=_cos($4);
      $cy=$call4;
      var $5=$frz_addr;
      var $call5=_cos($5);
      $cz=$call5;
      var $6=$outline_addr;
      var $points=(($6+4)|0);
      var $7=HEAP32[(($points)>>2)];
      $p=$7;
      var $8=$scale_addr;
      var $mul=($8)*(20000);
      var $conv=(($mul)&-1);
      $dist=$conv;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $9=$i;
      var $10=$outline_addr;
      var $n_points=(($10+2)|0);
      var $11=HEAP16[(($n_points)>>1)];
      var $conv8=(($11 << 16) >> 16);
      var $cmp=(($9)|0) < (($conv8)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: 
      var $12=$i;
      var $13=$p;
      var $arrayidx=(($13+($12<<3))|0);
      var $x10=(($arrayidx)|0);
      var $14=HEAP32[(($x10)>>2)];
      var $conv11=(($14)|0);
      var $x12=(($shift)|0);
      var $15=HEAP32[(($x12)>>2)];
      var $conv13=(($15)|0);
      var $add=($conv11)+($conv13);
      var $16=$fax_addr;
      var $17=$yshift_addr;
      var $18=$i;
      var $19=$p;
      var $arrayidx14=(($19+($18<<3))|0);
      var $y15=(($arrayidx14+4)|0);
      var $20=HEAP32[(($y15)>>2)];
      var $sub=((($17)-($20))|0);
      var $conv16=(($sub)|0);
      var $mul17=($16)*($conv16);
      var $add18=($add)+($mul17);
      $x6=$add18;
      var $21=$i;
      var $22=$p;
      var $arrayidx19=(($22+($21<<3))|0);
      var $y20=(($arrayidx19+4)|0);
      var $23=HEAP32[(($y20)>>2)];
      var $conv21=(($23)|0);
      var $y22=(($shift+4)|0);
      var $24=HEAP32[(($y22)>>2)];
      var $conv23=(($24)|0);
      var $add24=($conv21)+($conv23);
      var $25=$fay_addr;
      var $sub25=(-$25);
      var $26=$i;
      var $27=$p;
      var $arrayidx26=(($27+($26<<3))|0);
      var $x27=(($arrayidx26)|0);
      var $28=HEAP32[(($x27)>>2)];
      var $conv28=(($28)|0);
      var $mul29=($sub25)*($conv28);
      var $add30=($add24)+($mul29);
      $y7=$add30;
      $z=0;
      var $29=$x6;
      var $30=$cz;
      var $mul31=($29)*($30);
      var $31=$y7;
      var $32=$sz;
      var $mul32=($31)*($32);
      var $add33=($mul31)+($mul32);
      $xx=$add33;
      var $33=$x6;
      var $34=$sz;
      var $mul34=($33)*($34);
      var $35=$y7;
      var $36=$cz;
      var $mul35=($35)*($36);
      var $sub36=($mul34)-($mul35);
      var $sub37=(-$sub36);
      $yy=$sub37;
      var $37=$z;
      $zz=$37;
      var $38=$xx;
      $x6=$38;
      var $39=$yy;
      var $40=$cx;
      var $mul38=($39)*($40);
      var $41=$zz;
      var $42=$sx;
      var $mul39=($41)*($42);
      var $add40=($mul38)+($mul39);
      $y7=$add40;
      var $43=$yy;
      var $44=$sx;
      var $mul41=($43)*($44);
      var $45=$zz;
      var $46=$cx;
      var $mul42=($45)*($46);
      var $sub43=($mul41)-($mul42);
      $z=$sub43;
      var $47=$x6;
      var $48=$cy;
      var $mul44=($47)*($48);
      var $49=$z;
      var $50=$sy;
      var $mul45=($49)*($50);
      var $add46=($mul44)+($mul45);
      $xx=$add46;
      var $51=$y7;
      $yy=$51;
      var $52=$x6;
      var $53=$sy;
      var $mul47=($52)*($53);
      var $54=$z;
      var $55=$cy;
      var $mul48=($54)*($55);
      var $sub49=($mul47)-($mul48);
      $zz=$sub49;
      var $56=$zz;
      var $57=$dist;
      var $sub50=(((1000)-($57))|0);
      var $conv51=(($sub50)|0);
      var $cmp52=$56 > $conv51;
      if ($cmp52) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $58=$zz;
      var $cond = $58;__label__ = 7; break;
    case 6: 
      var $59=$dist;
      var $sub54=(((1000)-($59))|0);
      var $conv55=(($sub54)|0);
      var $cond = $conv55;__label__ = 7; break;
    case 7: 
      var $cond;
      $zz=$cond;
      var $60=$xx;
      var $61=$dist;
      var $conv56=(($61)|0);
      var $mul57=($60)*($conv56);
      var $62=$zz;
      var $63=$dist;
      var $conv58=(($63)|0);
      var $add59=($62)+($conv58);
      var $div=($mul57)/($add59);
      $x6=$div;
      var $64=$yy;
      var $65=$dist;
      var $conv60=(($65)|0);
      var $mul61=($64)*($conv60);
      var $66=$zz;
      var $67=$dist;
      var $conv62=(($67)|0);
      var $add63=($66)+($conv62);
      var $div64=($mul61)/($add63);
      $y7=$div64;
      var $68=$x6;
      var $x65=(($shift)|0);
      var $69=HEAP32[(($x65)>>2)];
      var $conv66=(($69)|0);
      var $sub67=($68)-($conv66);
      var $add68=($sub67)+(0.5);
      var $conv69=(($add68)&-1);
      var $70=$i;
      var $71=$p;
      var $arrayidx70=(($71+($70<<3))|0);
      var $x71=(($arrayidx70)|0);
      HEAP32[(($x71)>>2)]=$conv69;
      var $72=$y7;
      var $y72=(($shift+4)|0);
      var $73=HEAP32[(($y72)>>2)];
      var $conv73=(($73)|0);
      var $sub74=($72)-($conv73);
      var $add75=($sub74)+(0.5);
      var $conv76=(($add75)&-1);
      var $74=$i;
      var $75=$p;
      var $arrayidx77=(($75+($74<<3))|0);
      var $y78=(($arrayidx77+4)|0);
      HEAP32[(($y78)>>2)]=$conv76;
      __label__ = 8; break;
    case 8: 
      var $76=$i;
      var $inc=((($76)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_transform_3d_points["X"]=1;

function _rot_key($a) {
  ;
  var __label__;

  var $a_addr;
  var $m;
  $a_addr=$a;
  var $call=_double_to_d22(360);
  $m=$call;
  var $0=$a_addr;
  var $call1=_double_to_d22($0);
  var $1=$m;
  var $rem=((($call1)|0))%((($1)|0));
  ;
  return $rem;
}


function _fill_glyph_hash($priv, $outline_key, $info) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $priv_addr;
      var $outline_key_addr;
      var $info_addr;
      var $key;
      var $key16;
      $priv_addr=$priv;
      $outline_key_addr=$outline_key;
      $info_addr=$info;
      var $0=$info_addr;
      var $drawing=(($0+28)|0);
      var $1=HEAP32[(($drawing)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=$outline_key_addr;
      var $u=(($2+4)|0);
      var $drawing1=$u;
      $key=$drawing1;
      var $3=$outline_key_addr;
      var $type=(($3)|0);
      HEAP32[(($type)>>2)]=1;
      var $4=$info_addr;
      var $scale_x=(($4+208)|0);
      var $5=(tempDoubleI32[0]=HEAP32[(($scale_x)>>2)],tempDoubleI32[1]=HEAP32[((($scale_x)+(4))>>2)],tempDoubleF64[0]);
      var $call=_double_to_d16170($5);
      var $6=$key;
      var $scale_x2=(($6)|0);
      HEAP32[(($scale_x2)>>2)]=$call;
      var $7=$info_addr;
      var $scale_y=(($7+216)|0);
      var $8=(tempDoubleI32[0]=HEAP32[(($scale_y)>>2)],tempDoubleI32[1]=HEAP32[((($scale_y)+(4))>>2)],tempDoubleF64[0]);
      var $call3=_double_to_d16170($8);
      var $9=$key;
      var $scale_y4=(($9+4)|0);
      HEAP32[(($scale_y4)>>2)]=$call3;
      var $10=$info_addr;
      var $border_x=(($10+224)|0);
      var $11=(tempDoubleI32[0]=HEAP32[(($border_x)>>2)],tempDoubleI32[1]=HEAP32[((($border_x)+(4))>>2)],tempDoubleF64[0]);
      var $call5=_double_to_d16170($11);
      var $12=$key;
      var $outline=(($12+12)|0);
      var $x=(($outline)|0);
      HEAP32[(($x)>>2)]=$call5;
      var $13=$info_addr;
      var $border_y=(($13+232)|0);
      var $14=(tempDoubleI32[0]=HEAP32[(($border_y)>>2)],tempDoubleI32[1]=HEAP32[((($border_y)+(4))>>2)],tempDoubleF64[0]);
      var $call6=_double_to_d16170($14);
      var $15=$key;
      var $outline7=(($15+12)|0);
      var $y=(($outline7+4)|0);
      HEAP32[(($y)>>2)]=$call6;
      var $16=$priv_addr;
      var $state=(($16+176)|0);
      var $style=(($state+4)|0);
      var $17=HEAP32[(($style)>>2)];
      var $BorderStyle=(($17+76)|0);
      var $18=HEAP32[(($BorderStyle)>>2)];
      var $19=$key;
      var $border_style=(($19+20)|0);
      HEAP32[(($border_style)>>2)]=$18;
      var $20=$info_addr;
      var $drawing8=(($20+28)|0);
      var $21=HEAP32[(($drawing8)>>2)];
      var $hash=(($21+72)|0);
      var $22=HEAP32[(($hash)>>2)];
      var $23=$key;
      var $hash9=(($23+28)|0);
      HEAP32[(($hash9)>>2)]=$22;
      var $24=$info_addr;
      var $drawing10=(($24+28)|0);
      var $25=HEAP32[(($drawing10)>>2)];
      var $text=(($25)|0);
      var $26=HEAP32[(($text)>>2)];
      var $27=$key;
      var $text11=(($27+32)|0);
      HEAP32[(($text11)>>2)]=$26;
      var $28=$info_addr;
      var $drawing12=(($28+28)|0);
      var $29=HEAP32[(($drawing12)>>2)];
      var $pbo=(($29+12)|0);
      var $30=(tempDoubleI32[0]=HEAP32[(($pbo)>>2)],tempDoubleI32[1]=HEAP32[((($pbo)+(4))>>2)],tempDoubleF64[0]);
      var $conv=(($30)&-1);
      var $31=$key;
      var $pbo13=(($31+8)|0);
      HEAP32[(($pbo13)>>2)]=$conv;
      var $32=$info_addr;
      var $drawing14=(($32+28)|0);
      var $33=HEAP32[(($drawing14)>>2)];
      var $scale=(($33+8)|0);
      var $34=HEAP32[(($scale)>>2)];
      var $35=$key;
      var $scale15=(($35+24)|0);
      HEAP32[(($scale15)>>2)]=$34;
      __label__ = 5; break;
    case 4: 
      var $36=$outline_key_addr;
      var $u17=(($36+4)|0);
      var $glyph=$u17;
      $key16=$glyph;
      var $37=$outline_key_addr;
      var $type18=(($37)|0);
      HEAP32[(($type18)>>2)]=0;
      var $38=$info_addr;
      var $font=(($38+8)|0);
      var $39=HEAP32[(($font)>>2)];
      var $40=$key16;
      var $font19=(($40)|0);
      HEAP32[(($font19)>>2)]=$39;
      var $41=$info_addr;
      var $font_size=(($41+20)|0);
      var $42=(tempDoubleI32[0]=HEAP32[(($font_size)>>2)],tempDoubleI32[1]=HEAP32[((($font_size)+(4))>>2)],tempDoubleF64[0]);
      var $43=$key16;
      var $size=(($43+4)|0);
      (tempDoubleF64[0]=$42,HEAP32[(($size)>>2)]=tempDoubleI32[0],HEAP32[((($size)+(4))>>2)]=tempDoubleI32[1]);
      var $44=$info_addr;
      var $face_index=(($44+12)|0);
      var $45=HEAP32[(($face_index)>>2)];
      var $46=$key16;
      var $face_index20=(($46+12)|0);
      HEAP32[(($face_index20)>>2)]=$45;
      var $47=$info_addr;
      var $glyph_index=(($47+16)|0);
      var $48=HEAP32[(($glyph_index)>>2)];
      var $49=$key16;
      var $glyph_index21=(($49+16)|0);
      HEAP32[(($glyph_index21)>>2)]=$48;
      var $50=$info_addr;
      var $bold=(($50+244)|0);
      var $51=HEAP32[(($bold)>>2)];
      var $52=$key16;
      var $bold22=(($52+20)|0);
      HEAP32[(($bold22)>>2)]=$51;
      var $53=$info_addr;
      var $italic=(($53+240)|0);
      var $54=HEAP32[(($italic)>>2)];
      var $55=$key16;
      var $italic23=(($55+24)|0);
      HEAP32[(($italic23)>>2)]=$54;
      var $56=$info_addr;
      var $scale_x24=(($56+208)|0);
      var $57=(tempDoubleI32[0]=HEAP32[(($scale_x24)>>2)],tempDoubleI32[1]=HEAP32[((($scale_x24)+(4))>>2)],tempDoubleF64[0]);
      var $call25=_double_to_d16170($57);
      var $58=$key16;
      var $scale_x26=(($58+28)|0);
      HEAP32[(($scale_x26)>>2)]=$call25;
      var $59=$info_addr;
      var $scale_y27=(($59+216)|0);
      var $60=(tempDoubleI32[0]=HEAP32[(($scale_y27)>>2)],tempDoubleI32[1]=HEAP32[((($scale_y27)+(4))>>2)],tempDoubleF64[0]);
      var $call28=_double_to_d16170($60);
      var $61=$key16;
      var $scale_y29=(($61+32)|0);
      HEAP32[(($scale_y29)>>2)]=$call28;
      var $62=$info_addr;
      var $border_x30=(($62+224)|0);
      var $63=(tempDoubleI32[0]=HEAP32[(($border_x30)>>2)],tempDoubleI32[1]=HEAP32[((($border_x30)+(4))>>2)],tempDoubleF64[0]);
      var $call31=_double_to_d16170($63);
      var $64=$key16;
      var $outline32=(($64+36)|0);
      var $x33=(($outline32)|0);
      HEAP32[(($x33)>>2)]=$call31;
      var $65=$info_addr;
      var $border_y34=(($65+232)|0);
      var $66=(tempDoubleI32[0]=HEAP32[(($border_y34)>>2)],tempDoubleI32[1]=HEAP32[((($border_y34)+(4))>>2)],tempDoubleF64[0]);
      var $call35=_double_to_d16170($66);
      var $67=$key16;
      var $outline36=(($67+36)|0);
      var $y37=(($outline36+4)|0);
      HEAP32[(($y37)>>2)]=$call35;
      var $68=$info_addr;
      var $flags=(($68+248)|0);
      var $69=HEAP32[(($flags)>>2)];
      var $70=$key16;
      var $flags38=(($70+44)|0);
      HEAP32[(($flags38)>>2)]=$69;
      var $71=$priv_addr;
      var $state39=(($71+176)|0);
      var $style40=(($state39+4)|0);
      var $72=HEAP32[(($style40)>>2)];
      var $BorderStyle41=(($72+76)|0);
      var $73=HEAP32[(($BorderStyle41)>>2)];
      var $74=$key16;
      var $border_style42=(($74+48)|0);
      HEAP32[(($border_style42)>>2)]=$73;
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_fill_glyph_hash["X"]=1;

function _ass_utf8_get_char($str) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $str_addr;
      var $strp;
      var $c;
      var $mask;
      var $len;
      $str_addr=$str;
      var $0=$str_addr;
      var $1=HEAP32[(($0)>>2)];
      $strp=$1;
      var $2=$strp;
      var $incdec_ptr=(($2+1)|0);
      $strp=$incdec_ptr;
      var $3=HEAPU8[($2)];
      var $conv=(($3)&255);
      $c=$conv;
      $mask=128;
      $len=-1;
      __label__ = 3; break;
    case 3: 
      var $4=$c;
      var $5=$mask;
      var $and=$4 & $5;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $6=$mask;
      var $shr=$6 >>> 1;
      $mask=$shr;
      var $7=$len;
      var $inc=((($7)+(1))|0);
      $len=$inc;
      __label__ = 3; break;
    case 5: 
      var $8=$len;
      var $cmp=(($8)|0) <= 0;
      if ($cmp) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $9=$len;
      var $cmp2=(($9)|0) > 4;
      if ($cmp2) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      __label__ = 16; break;
    case 8: 
      var $10=$mask;
      var $sub=((($10)-(1))|0);
      var $11=$c;
      var $and4=$11 & $sub;
      $c=$and4;
      __label__ = 9; break;
    case 9: 
      var $12=$strp;
      var $13=HEAPU8[($12)];
      var $conv6=(($13)&255);
      var $and7=$conv6 & 192;
      var $cmp8=(($and7)|0)==128;
      if ($cmp8) { __label__ = 10; break; } else { __label__ = 13; break; }
    case 10: 
      var $14=$len;
      var $dec=((($14)-(1))|0);
      $len=$dec;
      var $cmp11=(($14)|0) <= 0;
      if ($cmp11) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      __label__ = 16; break;
    case 12: 
      var $15=$c;
      var $shl=$15 << 6;
      var $16=$strp;
      var $incdec_ptr15=(($16+1)|0);
      $strp=$incdec_ptr15;
      var $17=HEAPU8[($16)];
      var $conv16=(($17)&255);
      var $and17=$conv16 & 63;
      var $or=$shl | $and17;
      $c=$or;
      __label__ = 9; break;
    case 13: 
      var $18=$len;
      var $tobool19=(($18)|0)!=0;
      if ($tobool19) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      __label__ = 16; break;
    case 15: 
      var $19=$strp;
      var $20=$str_addr;
      HEAP32[(($20)>>2)]=$19;
      var $21=$c;
      $retval=$21;
      __label__ = 17; break;
    case 16: 
      var $22=$str_addr;
      var $23=HEAP32[(($22)>>2)];
      $strp=$23;
      var $24=$strp;
      var $incdec_ptr22=(($24+1)|0);
      $strp=$incdec_ptr22;
      var $25=HEAPU8[($24)];
      var $conv23=(($25)&255);
      $c=$conv23;
      var $26=$strp;
      var $27=$str_addr;
      HEAP32[(($27)>>2)]=$26;
      var $28=$c;
      $retval=$28;
      __label__ = 17; break;
    case 17: 
      var $29=$retval;
      ;
      return $29;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_utf8_get_char["X"]=1;

function _draw_opaque_box($render_priv, $asc, $desc, $ol, $advance_0, $advance_1, $sx, $sy) {
  var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      var $asc_addr;
      var $desc_addr;
      var $ol_addr;
      var $advance=__stackBase__;
      var $sx_addr;
      var $sy_addr;
      var $i;
      var $adv;
      var $scale_y;
      var $scale_x;
      var $points=(__stackBase__)+(8);
      $render_priv_addr=$render_priv;
      $asc_addr=$asc;
      $desc_addr=$desc;
      $ol_addr=$ol;
      var $x=(($advance)|0);
      HEAP32[(($x)>>2)]=$advance_0;
      var $y=(($advance+4)|0);
      HEAP32[(($y)>>2)]=$advance_1;
      $sx_addr=$sx;
      $sy_addr=$sy;
      var $x1=(($advance)|0);
      var $0=HEAP32[(($x1)>>2)];
      $adv=$0;
      var $1=$render_priv_addr;
      var $state=(($1+176)|0);
      var $scale_y2=(($state+124)|0);
      var $2=(tempDoubleI32[0]=HEAP32[(($scale_y2)>>2)],tempDoubleI32[1]=HEAP32[((($scale_y2)+(4))>>2)],tempDoubleF64[0]);
      $scale_y=$2;
      var $3=$render_priv_addr;
      var $state3=(($3+176)|0);
      var $scale_x4=(($state3+116)|0);
      var $4=(tempDoubleI32[0]=HEAP32[(($scale_x4)>>2)],tempDoubleI32[1]=HEAP32[((($scale_x4)+(4))>>2)],tempDoubleF64[0]);
      $scale_x=$4;
      var $5=$sx_addr;
      var $cmp=64 > (($5)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $cond = 64;__label__ = 5; break;
    case 4: 
      var $6=$sx_addr;
      var $cond = $6;__label__ = 5; break;
    case 5: 
      var $cond;
      $sx_addr=$cond;
      var $7=$sy_addr;
      var $cmp5=64 > (($7)|0);
      if ($cmp5) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $cond9 = 64;__label__ = 8; break;
    case 7: 
      var $8=$sy_addr;
      var $cond9 = $8;__label__ = 8; break;
    case 8: 
      var $cond9;
      $sy_addr=$cond9;
      var $9=$render_priv_addr;
      var $state10=(($9+176)|0);
      var $hspacing=(($state10+132)|0);
      var $10=(tempDoubleI32[0]=HEAP32[(($hspacing)>>2)],tempDoubleI32[1]=HEAP32[((($hspacing)+(4))>>2)],tempDoubleF64[0]);
      var $11=$render_priv_addr;
      var $font_scale=(($11+152)|0);
      var $12=(tempDoubleI32[0]=HEAP32[(($font_scale)>>2)],tempDoubleI32[1]=HEAP32[((($font_scale)+(4))>>2)],tempDoubleF64[0]);
      var $mul=($10)*($12);
      var $13=$scale_x;
      var $mul11=($mul)*($13);
      var $call=_double_to_d6169($mul11);
      var $14=$adv;
      var $add=((($14)+($call))|0);
      $adv=$add;
      var $15=$scale_x;
      var $16=$adv;
      var $conv=(($16)|0);
      var $mul12=($conv)*($15);
      var $conv13=(($mul12)&-1);
      $adv=$conv13;
      var $17=$scale_x;
      var $18=$sx_addr;
      var $conv14=(($18)|0);
      var $mul15=($conv14)*($17);
      var $conv16=(($mul15)&-1);
      $sx_addr=$conv16;
      var $19=$scale_y;
      var $20=$sy_addr;
      var $conv17=(($20)|0);
      var $mul18=($conv17)*($19);
      var $conv19=(($mul18)&-1);
      $sy_addr=$conv19;
      var $21=$scale_y;
      var $22=$desc_addr;
      var $conv20=(($22)|0);
      var $mul21=($conv20)*($21);
      var $conv22=(($mul21)&-1);
      $desc_addr=$conv22;
      var $23=$asc_addr;
      var $conv23=(($23)|0);
      var $24=$scale_y;
      var $sub=($24)-(1);
      var $mul24=($conv23)*($sub);
      var $25=$desc_addr;
      var $conv25=(($25)|0);
      var $add26=($conv25)+($mul24);
      var $conv27=(($add26)&-1);
      $desc_addr=$conv27;
      var $arrayinit_begin=(($points)|0);
      var $x28=(($arrayinit_begin)|0);
      var $26=$sx_addr;
      var $sub29=(((-$26))|0);
      HEAP32[(($x28)>>2)]=$sub29;
      var $y30=(($arrayinit_begin+4)|0);
      var $27=$asc_addr;
      var $28=$sy_addr;
      var $add31=((($27)+($28))|0);
      HEAP32[(($y30)>>2)]=$add31;
      var $arrayinit_element=(($arrayinit_begin+8)|0);
      var $x32=(($arrayinit_element)|0);
      var $29=$adv;
      var $30=$sx_addr;
      var $add33=((($29)+($30))|0);
      HEAP32[(($x32)>>2)]=$add33;
      var $y34=(($arrayinit_element+4)|0);
      var $31=$asc_addr;
      var $32=$sy_addr;
      var $add35=((($31)+($32))|0);
      HEAP32[(($y34)>>2)]=$add35;
      var $arrayinit_element36=(($arrayinit_element+8)|0);
      var $x37=(($arrayinit_element36)|0);
      var $33=$adv;
      var $34=$sx_addr;
      var $add38=((($33)+($34))|0);
      HEAP32[(($x37)>>2)]=$add38;
      var $y39=(($arrayinit_element36+4)|0);
      var $35=$desc_addr;
      var $sub40=(((-$35))|0);
      var $36=$sy_addr;
      var $sub41=((($sub40)-($36))|0);
      HEAP32[(($y39)>>2)]=$sub41;
      var $arrayinit_element42=(($arrayinit_element36+8)|0);
      var $x43=(($arrayinit_element42)|0);
      var $37=$sx_addr;
      var $sub44=(((-$37))|0);
      HEAP32[(($x43)>>2)]=$sub44;
      var $y45=(($arrayinit_element42+4)|0);
      var $38=$desc_addr;
      var $sub46=(((-$38))|0);
      var $39=$sy_addr;
      var $sub47=((($sub46)-($39))|0);
      HEAP32[(($y45)>>2)]=$sub47;
      var $40=$render_priv_addr;
      var $ftlibrary=(($40+4)|0);
      var $41=HEAP32[(($ftlibrary)>>2)];
      var $42=$ol_addr;
      var $call48=_FT_Outline_New($41, 4, 1, $42);
      var $43=$ol_addr;
      var $n_contours=(($43)|0);
      HEAP16[(($n_contours)>>1)]=0;
      var $44=$ol_addr;
      var $n_points=(($44+2)|0);
      HEAP16[(($n_points)>>1)]=0;
      $i=0;
      __label__ = 9; break;
    case 9: 
      var $45=$i;
      var $cmp49=(($45)|0) < 4;
      if ($cmp49) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $46=$ol_addr;
      var $n_points51=(($46+2)|0);
      var $47=HEAP16[(($n_points51)>>1)];
      var $idxprom=(($47 << 16) >> 16);
      var $48=$ol_addr;
      var $points52=(($48+4)|0);
      var $49=HEAP32[(($points52)>>2)];
      var $arrayidx=(($49+($idxprom<<3))|0);
      var $50=$i;
      var $arrayidx53=(($points+($50<<3))|0);
      var $51=$arrayidx;
      var $52=$arrayidx53;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($51)>>2)]=HEAP32[(($52)>>2)];HEAP32[((($51)+(4))>>2)]=HEAP32[((($52)+(4))>>2)];
      var $53=$ol_addr;
      var $n_points54=(($53+2)|0);
      var $54=HEAP16[(($n_points54)>>1)];
      var $inc=((($54)+(1))&65535);
      HEAP16[(($n_points54)>>1)]=$inc;
      var $idxprom55=(($54 << 16) >> 16);
      var $55=$ol_addr;
      var $tags=(($55+8)|0);
      var $56=HEAP32[(($tags)>>2)];
      var $arrayidx56=(($56+$idxprom55)|0);
      HEAP8[($arrayidx56)]=1;
      __label__ = 11; break;
    case 11: 
      var $57=$i;
      var $inc57=((($57)+(1))|0);
      $i=$inc57;
      __label__ = 9; break;
    case 12: 
      var $58=$ol_addr;
      var $n_points58=(($58+2)|0);
      var $59=HEAP16[(($n_points58)>>1)];
      var $conv59=(($59 << 16) >> 16);
      var $sub60=((($conv59)-(1))|0);
      var $conv61=(($sub60) & 65535);
      var $60=$ol_addr;
      var $n_contours62=(($60)|0);
      var $61=HEAP16[(($n_contours62)>>1)];
      var $inc63=((($61)+(1))&65535);
      HEAP16[(($n_contours62)>>1)]=$inc63;
      var $idxprom64=(($61 << 16) >> 16);
      var $62=$ol_addr;
      var $contours=(($62+12)|0);
      var $63=HEAP32[(($contours)>>2)];
      var $arrayidx65=(($63+($idxprom64<<1))|0);
      HEAP16[(($arrayidx65)>>1)]=$conv61;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_draw_opaque_box["X"]=1;

function _stroke_outline($render_priv, $outline, $sx, $sy) {
  var __stackBase__  = STACKTOP; STACKTOP += 28; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      var $outline_addr;
      var $sx_addr;
      var $sy_addr;
      var $error;
      var $n_points=__stackBase__;
      var $n_contours=(__stackBase__)+(4);
      var $border;
      var $i;
      var $nol=(__stackBase__)+(8);
      $render_priv_addr=$render_priv;
      $outline_addr=$outline;
      $sx_addr=$sx;
      $sy_addr=$sy;
      var $0=$sx_addr;
      var $cmp=(($0)|0) <= 0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $1=$sy_addr;
      var $cmp1=(($1)|0) <= 0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 17; break;
    case 5: 
      var $2=$outline_addr;
      var $3=$sx_addr;
      var $4=$sy_addr;
      _fix_freetype_stroker($2, $3, $4);
      var $5=$sx_addr;
      var $6=$sy_addr;
      var $cmp2=(($5)|0)==(($6)|0);
      if ($cmp2) { __label__ = 6; break; } else { __label__ = 12; break; }
    case 6: 
      var $7=$render_priv_addr;
      var $state=(($7+176)|0);
      var $stroker=(($state+28)|0);
      var $8=HEAP32[(($stroker)>>2)];
      var $tobool=(($8)|0)!=0;
      if ($tobool) { __label__ = 7; break; } else { __label__ = 12; break; }
    case 7: 
      var $9=$outline_addr;
      var $call=_FT_Outline_GetOutsideBorder($9);
      $border=$call;
      var $10=$render_priv_addr;
      var $state5=(($10+176)|0);
      var $stroker6=(($state5+28)|0);
      var $11=HEAP32[(($stroker6)>>2)];
      var $12=$outline_addr;
      var $call7=_FT_Stroker_ParseOutline($11, $12, 0);
      $error=$call7;
      var $13=$error;
      var $tobool8=(($13)|0)!=0;
      if ($tobool8) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $14=$render_priv_addr;
      var $library=(($14)|0);
      var $15=HEAP32[(($library)>>2)];
      var $16=$error;
      _ass_msg($15, 2, ((STRING_TABLE.__str22167)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$16,tempInt));
      __label__ = 9; break;
    case 9: 
      var $17=$render_priv_addr;
      var $state11=(($17+176)|0);
      var $stroker12=(($state11+28)|0);
      var $18=HEAP32[(($stroker12)>>2)];
      var $19=$border;
      var $call13=_FT_Stroker_GetBorderCounts($18, $19, $n_points, $n_contours);
      $error=$call13;
      var $20=$error;
      var $tobool14=(($20)|0)!=0;
      if ($tobool14) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $21=$render_priv_addr;
      var $library16=(($21)|0);
      var $22=HEAP32[(($library16)>>2)];
      var $23=$error;
      _ass_msg($22, 2, ((STRING_TABLE.__str23168)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$23,tempInt));
      __label__ = 11; break;
    case 11: 
      var $24=$render_priv_addr;
      var $ftlibrary=(($24+4)|0);
      var $25=HEAP32[(($ftlibrary)>>2)];
      var $26=$outline_addr;
      var $call18=_FT_Outline_Done($25, $26);
      var $27=$render_priv_addr;
      var $ftlibrary19=(($27+4)|0);
      var $28=HEAP32[(($ftlibrary19)>>2)];
      var $29=HEAP32[(($n_points)>>2)];
      var $30=HEAP32[(($n_contours)>>2)];
      var $31=$outline_addr;
      var $call20=_FT_Outline_New($28, $29, $30, $31);
      var $32=$outline_addr;
      var $n_contours21=(($32)|0);
      HEAP16[(($n_contours21)>>1)]=0;
      var $33=$outline_addr;
      var $n_points22=(($33+2)|0);
      HEAP16[(($n_points22)>>1)]=0;
      var $34=$render_priv_addr;
      var $state23=(($34+176)|0);
      var $stroker24=(($state23+28)|0);
      var $35=HEAP32[(($stroker24)>>2)];
      var $36=$border;
      var $37=$outline_addr;
      _FT_Stroker_ExportBorder($35, $36, $37);
      __label__ = 17; break;
    case 12: 
      var $38=$render_priv_addr;
      var $ftlibrary25=(($38+4)|0);
      var $39=HEAP32[(($ftlibrary25)>>2)];
      var $40=$outline_addr;
      var $n_points26=(($40+2)|0);
      var $41=HEAP16[(($n_points26)>>1)];
      var $conv=(($41 << 16) >> 16);
      var $42=$outline_addr;
      var $n_contours27=(($42)|0);
      var $43=HEAP16[(($n_contours27)>>1)];
      var $conv28=(($43 << 16) >> 16);
      var $call29=_FT_Outline_New($39, $conv, $conv28, $nol);
      var $44=$outline_addr;
      var $call30=_FT_Outline_Copy($44, $nol);
      var $45=$outline_addr;
      var $46=$sx_addr;
      var $mul=((($46<<1))|0);
      var $call31=_FT_Outline_Embolden($45, $mul);
      var $47=$outline_addr;
      var $48=$sx_addr;
      var $sub=(((-$48))|0);
      var $49=$sx_addr;
      var $sub32=(((-$49))|0);
      _FT_Outline_Translate($47, $sub, $sub32);
      var $50=$sy_addr;
      var $mul33=((($50<<1))|0);
      var $call34=_FT_Outline_Embolden($nol, $mul33);
      var $51=$sy_addr;
      var $sub35=(((-$51))|0);
      var $52=$sy_addr;
      var $sub36=(((-$52))|0);
      _FT_Outline_Translate($nol, $sub35, $sub36);
      $i=0;
      __label__ = 13; break;
    case 13: 
      var $53=$i;
      var $54=$outline_addr;
      var $n_points37=(($54+2)|0);
      var $55=HEAP16[(($n_points37)>>1)];
      var $conv38=(($55 << 16) >> 16);
      var $cmp39=(($53)|0) < (($conv38)|0);
      if ($cmp39) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $56=$i;
      var $points=(($nol+4)|0);
      var $57=HEAP32[(($points)>>2)];
      var $arrayidx=(($57+($56<<3))|0);
      var $y=(($arrayidx+4)|0);
      var $58=HEAP32[(($y)>>2)];
      var $59=$i;
      var $60=$outline_addr;
      var $points41=(($60+4)|0);
      var $61=HEAP32[(($points41)>>2)];
      var $arrayidx42=(($61+($59<<3))|0);
      var $y43=(($arrayidx42+4)|0);
      HEAP32[(($y43)>>2)]=$58;
      __label__ = 15; break;
    case 15: 
      var $62=$i;
      var $inc=((($62)+(1))|0);
      $i=$inc;
      __label__ = 13; break;
    case 16: 
      var $63=$render_priv_addr;
      var $ftlibrary44=(($63+4)|0);
      var $64=HEAP32[(($ftlibrary44)>>2)];
      var $call45=_FT_Outline_Done($64, $nol);
      __label__ = 17; break;
    case 17: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_stroke_outline["X"]=1;

function _check_cache_limits($priv, $cache) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $priv_addr;
      var $cache_addr;
      $priv_addr=$priv;
      $cache_addr=$cache;
      var $0=$cache_addr;
      var $bitmap_cache=(($0+8)|0);
      var $1=HEAP32[(($bitmap_cache)>>2)];
      var $2=$cache_addr;
      var $bitmap_max_size=(($2+20)|0);
      var $3=HEAP32[(($bitmap_max_size)>>2)];
      var $call=_ass_cache_empty($1, $3);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $4=$cache_addr;
      var $composite_cache=(($4+12)|0);
      var $5=HEAP32[(($composite_cache)>>2)];
      var $call1=_ass_cache_empty($5, 0);
      var $6=$priv_addr;
      var $prev_images_root=(($6+104)|0);
      var $7=HEAP32[(($prev_images_root)>>2)];
      _ass_free_images($7);
      var $8=$priv_addr;
      var $prev_images_root2=(($8+104)|0);
      HEAP32[(($prev_images_root2)>>2)]=0;
      __label__ = 4; break;
    case 4: 
      var $9=$cache_addr;
      var $outline_cache=(($9+4)|0);
      var $10=HEAP32[(($outline_cache)>>2)];
      var $11=$cache_addr;
      var $glyph_max=(($11+16)|0);
      var $12=HEAP32[(($glyph_max)>>2)];
      var $call3=_ass_cache_empty($10, $12);
      var $tobool4=(($call3)|0)!=0;
      if ($tobool4) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $13=$cache_addr;
      var $bitmap_cache6=(($13+8)|0);
      var $14=HEAP32[(($bitmap_cache6)>>2)];
      var $call7=_ass_cache_empty($14, 0);
      var $15=$cache_addr;
      var $composite_cache8=(($15+12)|0);
      var $16=HEAP32[(($composite_cache8)>>2)];
      var $call9=_ass_cache_empty($16, 0);
      var $17=$priv_addr;
      var $prev_images_root10=(($17+104)|0);
      var $18=HEAP32[(($prev_images_root10)>>2)];
      _ass_free_images($18);
      var $19=$priv_addr;
      var $prev_images_root11=(($19+104)|0);
      HEAP32[(($prev_images_root11)>>2)]=0;
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_check_cache_limits["X"]=1;

function _mystrtoi($p, $res) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $p_addr;
      var $res_addr;
      var $temp_res;
      var $start;
      $p_addr=$p;
      $res_addr=$res;
      var $0=$p_addr;
      var $1=HEAP32[(($0)>>2)];
      $start=$1;
      var $2=$p_addr;
      var $3=HEAP32[(($2)>>2)];
      var $4=$p_addr;
      var $call=_ass_strtod($3, $4);
      $temp_res=$call;
      var $5=$temp_res;
      var $6=$temp_res;
      var $cmp=$6 > 0;
      var $cond=$cmp ? 0.5 : -0.5;
      var $add=($5)+($cond);
      var $conv=(($add)&-1);
      var $7=$res_addr;
      HEAP32[(($7)>>2)]=$conv;
      var $8=$p_addr;
      var $9=HEAP32[(($8)>>2)];
      var $10=$start;
      var $cmp1=(($9)|0)!=(($10)|0);
      if ($cmp1) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=1;
      __label__ = 5; break;
    case 4: 
      $retval=0;
      __label__ = 5; break;
    case 5: 
      var $11=$retval;
      ;
      return $11;
    default: assert(0, "bad label: " + __label__);
  }
}


function _mystrtoll($p, $res) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $p_addr;
      var $res_addr;
      var $temp_res;
      var $start;
      $p_addr=$p;
      $res_addr=$res;
      var $0=$p_addr;
      var $1=HEAP32[(($0)>>2)];
      $start=$1;
      var $2=$p_addr;
      var $3=HEAP32[(($2)>>2)];
      var $4=$p_addr;
      var $call=_ass_strtod($3, $4);
      $temp_res=$call;
      var $5=$temp_res;
      var $6=$temp_res;
      var $cmp=$6 > 0;
      var $cond=$cmp ? 0.5 : -0.5;
      var $add=($5)+($cond);
      var $conv=(($add)&-1);
      var $conv1$0=$conv;
      var $conv1$1=(($conv|0) < 0 ? -1 : 0);
      var $7=$res_addr;
      var $st$24$0=(($7)|0);
      HEAP32[(($st$24$0)>>2)]=$conv1$0;
      var $st$24$1=(($7+4)|0);
      HEAP32[(($st$24$1)>>2)]=$conv1$1;
      var $8=$p_addr;
      var $9=HEAP32[(($8)>>2)];
      var $10=$start;
      var $cmp2=(($9)|0)!=(($10)|0);
      if ($cmp2) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=1;
      __label__ = 5; break;
    case 4: 
      $retval=0;
      __label__ = 5; break;
    case 5: 
      var $11=$retval;
      ;
      return $11;
    default: assert(0, "bad label: " + __label__);
  }
}


function _mystrtou32($p, $base, $res) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $p_addr;
      var $base_addr;
      var $res_addr;
      var $start;
      $p_addr=$p;
      $base_addr=$base;
      $res_addr=$res;
      var $0=$p_addr;
      var $1=HEAP32[(($0)>>2)];
      $start=$1;
      var $2=$p_addr;
      var $3=HEAP32[(($2)>>2)];
      var $4=$p_addr;
      var $5=$base_addr;
      var $call=_strtoll($3, $4, $5);
      var $call$0=$call[0];
      var $call$1=$call[1];
      var $conv$0=$call$0;
      var $conv=$conv$0;
      var $6=$res_addr;
      HEAP32[(($6)>>2)]=$conv;
      var $7=$p_addr;
      var $8=HEAP32[(($7)>>2)];
      var $9=$start;
      var $cmp=(($8)|0)!=(($9)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=1;
      __label__ = 5; break;
    case 4: 
      $retval=0;
      __label__ = 5; break;
    case 5: 
      var $10=$retval;
      ;
      return $10;
    default: assert(0, "bad label: " + __label__);
  }
}


function _mystrtod($p, $res) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $p_addr;
      var $res_addr;
      var $start;
      $p_addr=$p;
      $res_addr=$res;
      var $0=$p_addr;
      var $1=HEAP32[(($0)>>2)];
      $start=$1;
      var $2=$p_addr;
      var $3=HEAP32[(($2)>>2)];
      var $4=$p_addr;
      var $call=_ass_strtod($3, $4);
      var $5=$res_addr;
      (tempDoubleF64[0]=$call,HEAP32[(($5)>>2)]=tempDoubleI32[0],HEAP32[((($5)+(4))>>2)]=tempDoubleI32[1]);
      var $6=$p_addr;
      var $7=HEAP32[(($6)>>2)];
      var $8=$start;
      var $cmp=(($7)|0)!=(($8)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=1;
      __label__ = 5; break;
    case 4: 
      $retval=0;
      __label__ = 5; break;
    case 5: 
      var $9=$retval;
      ;
      return $9;
    default: assert(0, "bad label: " + __label__);
  }
}


function _strtocolor($library, $q, $res, $hex) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $library_addr;
      var $q_addr;
      var $res_addr;
      var $hex_addr;
      var $color=__stackBase__;
      var $result;
      var $p=(__stackBase__)+(4);
      var $base;
      var $tmp;
      var $b;
      $library_addr=$library;
      $q_addr=$q;
      $res_addr=$res;
      $hex_addr=$hex;
      HEAP32[(($color)>>2)]=0;
      var $0=$q_addr;
      var $1=HEAP32[(($0)>>2)];
      HEAP32[(($p)>>2)]=$1;
      var $2=$hex_addr;
      var $tobool=(($2)|0)!=0;
      var $cond=$tobool ? 16 : 10;
      $base=$cond;
      var $3=HEAP32[(($p)>>2)];
      var $4=HEAP8[($3)];
      var $conv=(($4 << 24) >> 24);
      var $cmp=(($conv)|0)==38;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $5=HEAP32[(($p)>>2)];
      var $incdec_ptr=(($5+1)|0);
      HEAP32[(($p)>>2)]=$incdec_ptr;
      __label__ = 5; break;
    case 4: 
      var $6=$library_addr;
      var $7=HEAP32[(($p)>>2)];
      _ass_msg($6, 7, ((STRING_TABLE.__str172)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$7,tempInt));
      __label__ = 5; break;
    case 5: 
      var $8=HEAP32[(($p)>>2)];
      var $9=HEAP8[($8)];
      var $conv2=(($9 << 24) >> 24);
      var $cmp3=(($conv2)|0)==72;
      if ($cmp3) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $10=HEAP32[(($p)>>2)];
      var $11=HEAP8[($10)];
      var $conv5=(($11 << 24) >> 24);
      var $cmp6=(($conv5)|0)==104;
      if ($cmp6) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $12=HEAP32[(($p)>>2)];
      var $incdec_ptr9=(($12+1)|0);
      HEAP32[(($p)>>2)]=$incdec_ptr9;
      var $call=_mystrtou32($p, 16, $color);
      $result=$call;
      __label__ = 9; break;
    case 8: 
      var $13=$base;
      var $call11=_mystrtou32($p, $13, $color);
      $result=$call11;
      __label__ = 9; break;
    case 9: 
      var $14=$color;
      $tmp=$14;
      var $15=$tmp;
      var $arrayidx=(($15)|0);
      var $16=HEAP8[($arrayidx)];
      $b=$16;
      var $17=$tmp;
      var $arrayidx14=(($17+3)|0);
      var $18=HEAP8[($arrayidx14)];
      var $19=$tmp;
      var $arrayidx15=(($19)|0);
      HEAP8[($arrayidx15)]=$18;
      var $20=$b;
      var $21=$tmp;
      var $arrayidx16=(($21+3)|0);
      HEAP8[($arrayidx16)]=$20;
      var $22=$tmp;
      var $arrayidx17=(($22+1)|0);
      var $23=HEAP8[($arrayidx17)];
      $b=$23;
      var $24=$tmp;
      var $arrayidx18=(($24+2)|0);
      var $25=HEAP8[($arrayidx18)];
      var $26=$tmp;
      var $arrayidx19=(($26+1)|0);
      HEAP8[($arrayidx19)]=$25;
      var $27=$b;
      var $28=$tmp;
      var $arrayidx20=(($28+2)|0);
      HEAP8[($arrayidx20)]=$27;
      var $29=HEAP32[(($p)>>2)];
      var $30=HEAP8[($29)];
      var $conv21=(($30 << 24) >> 24);
      var $cmp22=(($conv21)|0)==38;
      if ($cmp22) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $31=HEAP32[(($p)>>2)];
      var $incdec_ptr25=(($31+1)|0);
      HEAP32[(($p)>>2)]=$incdec_ptr25;
      __label__ = 11; break;
    case 11: 
      var $32=HEAP32[(($p)>>2)];
      var $33=$q_addr;
      HEAP32[(($33)>>2)]=$32;
      var $34=HEAP32[(($color)>>2)];
      var $35=$res_addr;
      HEAP32[(($35)>>2)]=$34;
      var $36=$result;
      STACKTOP = __stackBase__;
      return $36;
    default: assert(0, "bad label: " + __label__);
  }
}
_strtocolor["X"]=1;

function _ass_msg($priv, $lvl, $fmt) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $priv_addr;
  var $lvl_addr;
  var $fmt_addr;
  var $va=__stackBase__;
  $priv_addr=$priv;
  $lvl_addr=$lvl;
  $fmt_addr=$fmt;
  var $va1=$va;
  HEAP32[(($va1)>>2)]=arguments[_ass_msg.length];
  var $0=$priv_addr;
  var $msg_callback=(($0+20)|0);
  var $1=HEAP32[(($msg_callback)>>2)];
  var $2=$lvl_addr;
  var $3=$fmt_addr;
  var $4=HEAP32[(($va)>>2)];
  var $5=$priv_addr;
  var $msg_callback_data=(($5+24)|0);
  var $6=HEAP32[(($msg_callback_data)>>2)];
  FUNCTION_TABLE[$1]($2, $3, $4, $6);
  var $va2=$va;
  ;
  STACKTOP = __stackBase__;
  return;
}


function _parse_bool($str) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $str_addr;
      $str_addr=$str;
      __label__ = 3; break;
    case 3: 
      var $0=$str_addr;
      var $1=HEAP8[($0)];
      var $conv=(($1 << 24) >> 24);
      var $cmp=(($conv)|0)==32;
      if ($cmp) { var $4 = 1;__label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $2=$str_addr;
      var $3=HEAP8[($2)];
      var $conv2=(($3 << 24) >> 24);
      var $cmp3=(($conv2)|0)==9;
      var $4 = $cmp3;__label__ = 5; break;
    case 5: 
      var $4;
      if ($4) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $5=$str_addr;
      var $incdec_ptr=(($5+1)|0);
      $str_addr=$incdec_ptr;
      __label__ = 3; break;
    case 7: 
      var $6=$str_addr;
      var $call=_strncasecmp($6, ((STRING_TABLE.__str1173)|0), 3);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      $retval=1;
      __label__ = 13; break;
    case 9: 
      var $7=$str_addr;
      var $call5=_strtol($7, 0, 10);
      var $cmp6=(($call5)|0) > 0;
      if ($cmp6) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      $retval=1;
      __label__ = 13; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      $retval=0;
      __label__ = 13; break;
    case 13: 
      var $8=$retval;
      ;
      return $8;
    default: assert(0, "bad label: " + __label__);
  }
}


function _ass_guess_buffer_cp($library, $buffer, $buflen, $preferred_language, $fallback) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $library_addr;
      var $buffer_addr;
      var $buflen_addr;
      var $preferred_language_addr;
      var $fallback_addr;
      var $languages;
      var $langcnt=__stackBase__;
      var $analyser;
      var $encoding=(__stackBase__)+(4);
      var $detected_sub_cp;
      var $i;
      var $tmp;
      var $tmp9=(__stackBase__)+(12);
      $library_addr=$library;
      $buffer_addr=$buffer;
      $buflen_addr=$buflen;
      $preferred_language_addr=$preferred_language;
      $fallback_addr=$fallback;
      $detected_sub_cp=0;
      var $call=_enca_get_languages($langcnt);
      $languages=$call;
      var $0=$library_addr;
      _ass_msg($0, 6, ((STRING_TABLE.__str2174)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $1=$i;
      var $2=HEAPU32[(($langcnt)>>2)];
      var $cmp=(($1)>>>0) < (($2)>>>0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $3=$library_addr;
      var $4=$i;
      var $5=$languages;
      var $arrayidx=(($5+($4<<2))|0);
      var $6=HEAP32[(($arrayidx)>>2)];
      _ass_msg($3, 6, ((STRING_TABLE.__str3175)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$6,tempInt));
      __label__ = 5; break;
    case 5: 
      var $7=$i;
      var $inc=((($7)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 6: 
      $i=0;
      __label__ = 7; break;
    case 7: 
      var $8=$i;
      var $9=HEAPU32[(($langcnt)>>2)];
      var $cmp2=(($8)>>>0) < (($9)>>>0);
      if ($cmp2) { __label__ = 8; break; } else { __label__ = 15; break; }
    case 8: 
      var $10=$i;
      var $11=$languages;
      var $arrayidx4=(($11+($10<<2))|0);
      var $12=HEAP32[(($arrayidx4)>>2)];
      var $13=$preferred_language_addr;
      var $call5=_strcasecmp($12, $13);
      var $cmp6=(($call5)|0)!=0;
      if ($cmp6) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      __label__ = 14; break;
    case 10: 
      var $14=$i;
      var $15=$languages;
      var $arrayidx7=(($15+($14<<2))|0);
      var $16=HEAP32[(($arrayidx7)>>2)];
      var $call8=_enca_analyser_alloc($16);
      $analyser=$call8;
      var $17=$analyser;
      var $18=$buffer_addr;
      var $19=$buflen_addr;
      _enca_analyse_const($tmp9, $17, $18, $19);
      var $20=$encoding;
      var $21=$tmp9;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];
      var $charset=(($encoding)|0);
      var $22=HEAP32[(($charset)>>2)];
      var $call10=_enca_charset_name($22, 3);
      $tmp=$call10;
      var $23=$tmp;
      var $tobool=(($23)|0)!=0;
      if ($tobool) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $charset11=(($encoding)|0);
      var $24=HEAP32[(($charset11)>>2)];
      var $cmp12=(($24)|0)!=-1;
      if ($cmp12) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $25=$tmp;
      var $call14=_strdup($25);
      $detected_sub_cp=$call14;
      var $26=$library_addr;
      var $27=$tmp;
      _ass_msg($26, 4, ((STRING_TABLE.__str4176)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$27,tempInt));
      __label__ = 13; break;
    case 13: 
      var $28=$analyser;
      _enca_analyser_free($28);
      __label__ = 14; break;
    case 14: 
      var $29=$i;
      var $inc17=((($29)+(1))|0);
      $i=$inc17;
      __label__ = 7; break;
    case 15: 
      var $30=$languages;
      var $31=$30;
      _free($31);
      var $32=$detected_sub_cp;
      var $tobool19=(($32)|0)!=0;
      if ($tobool19) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      var $33=$fallback_addr;
      var $call21=_strdup($33);
      $detected_sub_cp=$call21;
      var $34=$library_addr;
      var $35=$fallback_addr;
      _ass_msg($34, 4, ((STRING_TABLE.__str5177)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$35,tempInt));
      __label__ = 17; break;
    case 17: 
      var $36=$detected_sub_cp;
      STACKTOP = __stackBase__;
      return $36;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_guess_buffer_cp["X"]=1;

function _ass_synth_init($radius) {
  ;
  var __label__;

  var $radius_addr;
  var $priv;
  $radius_addr=$radius;
  var $call=_calloc(1, 36);
  var $0=$call;
  $priv=$0;
  var $1=$priv;
  var $2=$radius_addr;
  var $call1=_generate_tables($1, $2);
  var $3=$priv;
  ;
  return $3;
}


function _generate_tables($priv, $radius) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $priv_addr;
      var $radius_addr;
      var $A;
      var $mx;
      var $i;
      var $volume_diff;
      var $volume_factor;
      var $volume;
      $priv_addr=$priv;
      $radius_addr=$radius;
      var $call=_log(0.00390625);
      var $0=$radius_addr;
      var $1=$radius_addr;
      var $mul=($0)*($1);
      var $mul1=($mul)*(2);
      var $div=($call)/($mul1);
      $A=$div;
      $volume_factor=0;
      var $2=$priv_addr;
      var $radius2=(($2+28)|0);
      var $3=(tempDoubleI32[0]=HEAP32[(($radius2)>>2)],tempDoubleI32[1]=HEAP32[((($radius2)+(4))>>2)],tempDoubleF64[0]);
      var $4=$radius_addr;
      var $cmp=$3 == $4;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=0;
      __label__ = 35; break;
    case 4: 
      var $5=$radius_addr;
      var $6=$priv_addr;
      var $radius3=(($6+28)|0);
      (tempDoubleF64[0]=$5,HEAP32[(($radius3)>>2)]=tempDoubleI32[0],HEAP32[((($radius3)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 5; break;
    case 5: 
      var $7=$radius_addr;
      var $call4=_ceil($7);
      var $conv=(($call4)&-1);
      var $8=$priv_addr;
      var $g_r=(($8+12)|0);
      HEAP32[(($g_r)>>2)]=$conv;
      var $9=$priv_addr;
      var $g_r5=(($9+12)|0);
      var $10=HEAP32[(($g_r5)>>2)];
      var $mul6=((($10<<1))|0);
      var $add=((($mul6)+(1))|0);
      var $11=$priv_addr;
      var $g_w=(($11+16)|0);
      HEAP32[(($g_w)>>2)]=$add;
      var $12=$priv_addr;
      var $g_r7=(($12+12)|0);
      var $13=HEAP32[(($g_r7)>>2)];
      var $tobool=(($13)|0)!=0;
      if ($tobool) { __label__ = 6; break; } else { __label__ = 10; break; }
    case 6: 
      var $14=$priv_addr;
      var $g=(($14+20)|0);
      var $15=HEAP32[(($g)>>2)];
      var $16=$15;
      var $17=$priv_addr;
      var $g_w9=(($17+16)|0);
      var $18=HEAP32[(($g_w9)>>2)];
      var $mul10=((($18<<2))|0);
      var $call11=_realloc($16, $mul10);
      var $19=$call11;
      var $20=$priv_addr;
      var $g12=(($20+20)|0);
      HEAP32[(($g12)>>2)]=$19;
      var $21=$priv_addr;
      var $gt2=(($21+24)|0);
      var $22=HEAP32[(($gt2)>>2)];
      var $23=$22;
      var $24=$priv_addr;
      var $g_w13=(($24+16)|0);
      var $25=HEAP32[(($g_w13)>>2)];
      var $mul14=((($25<<8))|0);
      var $mul15=((($mul14<<2))|0);
      var $call16=_realloc($23, $mul15);
      var $26=$call16;
      var $27=$priv_addr;
      var $gt217=(($27+24)|0);
      HEAP32[(($gt217)>>2)]=$26;
      var $28=$priv_addr;
      var $g18=(($28+20)|0);
      var $29=HEAP32[(($g18)>>2)];
      var $cmp19=(($29)|0)==0;
      if ($cmp19) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $30=$priv_addr;
      var $gt221=(($30+24)|0);
      var $31=HEAP32[(($gt221)>>2)];
      var $cmp22=(($31)|0)==0;
      if ($cmp22) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      $retval=-1;
      __label__ = 35; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $32=$priv_addr;
      var $g_r27=(($32+12)|0);
      var $33=HEAP32[(($g_r27)>>2)];
      var $tobool28=(($33)|0)!=0;
      if ($tobool28) { __label__ = 11; break; } else { __label__ = 34; break; }
    case 11: 
      $volume_diff=10000000;
      __label__ = 12; break;
    case 12: 
      var $34=$volume_diff;
      var $cmp30=$34 > 1e-7;
      if ($cmp30) { __label__ = 13; break; } else { __label__ = 21; break; }
    case 13: 
      var $35=$volume_diff;
      var $36=$volume_factor;
      var $add32=($36)+($35);
      $volume_factor=$add32;
      $volume=0;
      $i=0;
      __label__ = 14; break;
    case 14: 
      var $37=$i;
      var $38=$priv_addr;
      var $g_w34=(($38+16)|0);
      var $39=HEAP32[(($g_w34)>>2)];
      var $cmp35=(($37)|0) < (($39)|0);
      if ($cmp35) { __label__ = 15; break; } else { __label__ = 17; break; }
    case 15: 
      var $40=$A;
      var $41=$i;
      var $42=$priv_addr;
      var $g_r38=(($42+12)|0);
      var $43=HEAP32[(($g_r38)>>2)];
      var $sub=((($41)-($43))|0);
      var $conv39=(($sub)|0);
      var $mul40=($40)*($conv39);
      var $44=$i;
      var $45=$priv_addr;
      var $g_r41=(($45+12)|0);
      var $46=HEAP32[(($g_r41)>>2)];
      var $sub42=((($44)-($46))|0);
      var $conv43=(($sub42)|0);
      var $mul44=($mul40)*($conv43);
      var $call45=_exp($mul44);
      var $47=$volume_factor;
      var $mul46=($call45)*($47);
      var $add47=($mul46)+(0.5);
      var $conv48=($add47 >= 0 ? Math.floor($add47) : Math.ceil($add47));
      var $48=$i;
      var $49=$priv_addr;
      var $g49=(($49+20)|0);
      var $50=HEAP32[(($g49)>>2)];
      var $arrayidx=(($50+($48<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$conv48;
      var $51=$i;
      var $52=$priv_addr;
      var $g50=(($52+20)|0);
      var $53=HEAP32[(($g50)>>2)];
      var $arrayidx51=(($53+($51<<2))|0);
      var $54=HEAP32[(($arrayidx51)>>2)];
      var $55=$volume;
      var $add52=((($55)+($54))|0);
      $volume=$add52;
      __label__ = 16; break;
    case 16: 
      var $56=$i;
      var $inc=((($56)+(1))|0);
      $i=$inc;
      __label__ = 14; break;
    case 17: 
      var $57=$volume;
      var $cmp53=(($57)>>>0) > 256;
      if ($cmp53) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $58=$volume_diff;
      var $59=$volume_factor;
      var $sub56=($59)-($58);
      $volume_factor=$sub56;
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $60=$volume_diff;
      var $mul59=($60)*(0.5);
      $volume_diff=$mul59;
      __label__ = 12; break;
    case 21: 
      $volume=0;
      $i=0;
      __label__ = 22; break;
    case 22: 
      var $61=$i;
      var $62=$priv_addr;
      var $g_w62=(($62+16)|0);
      var $63=HEAP32[(($g_w62)>>2)];
      var $cmp63=(($61)|0) < (($63)|0);
      if ($cmp63) { __label__ = 23; break; } else { __label__ = 25; break; }
    case 23: 
      var $64=$A;
      var $65=$i;
      var $66=$priv_addr;
      var $g_r66=(($66+12)|0);
      var $67=HEAP32[(($g_r66)>>2)];
      var $sub67=((($65)-($67))|0);
      var $conv68=(($sub67)|0);
      var $mul69=($64)*($conv68);
      var $68=$i;
      var $69=$priv_addr;
      var $g_r70=(($69+12)|0);
      var $70=HEAP32[(($g_r70)>>2)];
      var $sub71=((($68)-($70))|0);
      var $conv72=(($sub71)|0);
      var $mul73=($mul69)*($conv72);
      var $call74=_exp($mul73);
      var $71=$volume_factor;
      var $mul75=($call74)*($71);
      var $add76=($mul75)+(0.5);
      var $conv77=($add76 >= 0 ? Math.floor($add76) : Math.ceil($add76));
      var $72=$i;
      var $73=$priv_addr;
      var $g78=(($73+20)|0);
      var $74=HEAP32[(($g78)>>2)];
      var $arrayidx79=(($74+($72<<2))|0);
      HEAP32[(($arrayidx79)>>2)]=$conv77;
      var $75=$i;
      var $76=$priv_addr;
      var $g80=(($76+20)|0);
      var $77=HEAP32[(($g80)>>2)];
      var $arrayidx81=(($77+($75<<2))|0);
      var $78=HEAP32[(($arrayidx81)>>2)];
      var $79=$volume;
      var $add82=((($79)+($78))|0);
      $volume=$add82;
      __label__ = 24; break;
    case 24: 
      var $80=$i;
      var $inc84=((($80)+(1))|0);
      $i=$inc84;
      __label__ = 22; break;
    case 25: 
      $mx=0;
      __label__ = 26; break;
    case 26: 
      var $81=$mx;
      var $82=$priv_addr;
      var $g_w87=(($82+16)|0);
      var $83=HEAP32[(($g_w87)>>2)];
      var $cmp88=(($81)|0) < (($83)|0);
      if ($cmp88) { __label__ = 27; break; } else { __label__ = 33; break; }
    case 27: 
      $i=0;
      __label__ = 28; break;
    case 28: 
      var $84=$i;
      var $cmp92=(($84)|0) < 256;
      if ($cmp92) { __label__ = 29; break; } else { __label__ = 31; break; }
    case 29: 
      var $85=$i;
      var $86=$mx;
      var $87=$priv_addr;
      var $g95=(($87+20)|0);
      var $88=HEAP32[(($g95)>>2)];
      var $arrayidx96=(($88+($86<<2))|0);
      var $89=HEAP32[(($arrayidx96)>>2)];
      var $mul97=((($85)*($89))|0);
      var $90=$mx;
      var $91=$i;
      var $92=$priv_addr;
      var $g_w98=(($92+16)|0);
      var $93=HEAP32[(($g_w98)>>2)];
      var $mul99=((($91)*($93))|0);
      var $add100=((($90)+($mul99))|0);
      var $94=$priv_addr;
      var $gt2101=(($94+24)|0);
      var $95=HEAP32[(($gt2101)>>2)];
      var $arrayidx102=(($95+($add100<<2))|0);
      HEAP32[(($arrayidx102)>>2)]=$mul97;
      __label__ = 30; break;
    case 30: 
      var $96=$i;
      var $inc104=((($96)+(1))|0);
      $i=$inc104;
      __label__ = 28; break;
    case 31: 
      __label__ = 32; break;
    case 32: 
      var $97=$mx;
      var $inc107=((($97)+(1))|0);
      $mx=$inc107;
      __label__ = 26; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      $retval=0;
      __label__ = 35; break;
    case 35: 
      var $98=$retval;
      ;
      return $98;
    default: assert(0, "bad label: " + __label__);
  }
}
_generate_tables["X"]=1;

function _ass_synth_done($priv) {
  ;
  var __label__;

  var $priv_addr;
  $priv_addr=$priv;
  var $0=$priv_addr;
  var $tmp=(($0+8)|0);
  var $1=HEAP32[(($tmp)>>2)];
  var $2=$1;
  _free($2);
  var $3=$priv_addr;
  var $g=(($3+20)|0);
  var $4=HEAP32[(($g)>>2)];
  var $5=$4;
  _free($5);
  var $6=$priv_addr;
  var $gt2=(($6+24)|0);
  var $7=HEAP32[(($gt2)>>2)];
  var $8=$7;
  _free($8);
  var $9=$priv_addr;
  var $10=$9;
  _free($10);
  ;
  return;
}


function _ass_free_bitmap($bm) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $bm_addr;
      $bm_addr=$bm;
      var $0=$bm_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $1=$bm_addr;
      var $buffer=(($1+20)|0);
      var $2=HEAP32[(($buffer)>>2)];
      _free($2);
      __label__ = 4; break;
    case 4: 
      var $3=$bm_addr;
      var $4=$3;
      _free($4);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _outline_to_bitmap($library, $ftlib, $outline, $bord) {
  var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $library_addr;
      var $ftlib_addr;
      var $outline_addr;
      var $bord_addr;
      var $bm;
      var $w;
      var $h;
      var $error;
      var $bbox=__stackBase__;
      var $bitmap=(__stackBase__)+(16);
      $library_addr=$library;
      $ftlib_addr=$ftlib;
      $outline_addr=$outline;
      $bord_addr=$bord;
      var $0=$outline_addr;
      _FT_Outline_Get_CBox($0, $bbox);
      var $xMin=(($bbox)|0);
      var $1=HEAP32[(($xMin)>>2)];
      var $and=$1 & -64;
      HEAP32[(($xMin)>>2)]=$and;
      var $yMin=(($bbox+4)|0);
      var $2=HEAP32[(($yMin)>>2)];
      var $and1=$2 & -64;
      HEAP32[(($yMin)>>2)]=$and1;
      var $3=$outline_addr;
      var $xMin2=(($bbox)|0);
      var $4=HEAP32[(($xMin2)>>2)];
      var $sub=(((-$4))|0);
      var $yMin3=(($bbox+4)|0);
      var $5=HEAP32[(($yMin3)>>2)];
      var $sub4=(((-$5))|0);
      _FT_Outline_Translate($3, $sub, $sub4);
      var $xMax=(($bbox+8)|0);
      var $6=HEAP32[(($xMax)>>2)];
      var $add=((($6)+(63))|0);
      var $and5=$add & -64;
      var $xMax6=(($bbox+8)|0);
      HEAP32[(($xMax6)>>2)]=$and5;
      var $yMax=(($bbox+12)|0);
      var $7=HEAP32[(($yMax)>>2)];
      var $add7=((($7)+(63))|0);
      var $and8=$add7 & -64;
      var $yMax9=(($bbox+12)|0);
      HEAP32[(($yMax9)>>2)]=$and8;
      var $xMax10=(($bbox+8)|0);
      var $8=HEAP32[(($xMax10)>>2)];
      var $xMin11=(($bbox)|0);
      var $9=HEAP32[(($xMin11)>>2)];
      var $sub12=((($8)-($9))|0);
      var $shr=$sub12 >> 6;
      $w=$shr;
      var $yMax13=(($bbox+12)|0);
      var $10=HEAP32[(($yMax13)>>2)];
      var $yMin14=(($bbox+4)|0);
      var $11=HEAP32[(($yMin14)>>2)];
      var $sub15=((($10)-($11))|0);
      var $shr16=$sub15 >> 6;
      $h=$shr16;
      var $xMin17=(($bbox)|0);
      var $12=HEAP32[(($xMin17)>>2)];
      var $shr18=$12 >> 6;
      HEAP32[(($xMin17)>>2)]=$shr18;
      var $yMax19=(($bbox+12)|0);
      var $13=HEAP32[(($yMax19)>>2)];
      var $shr20=$13 >> 6;
      HEAP32[(($yMax19)>>2)]=$shr20;
      var $14=$w;
      var $15=$h;
      var $mul=((($14)*($15))|0);
      var $cmp=(($mul)|0) > 8000000;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $16=$library_addr;
      var $17=$w;
      var $18=$h;
      _ass_msg($16, 2, ((STRING_TABLE.__str186)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$17,HEAP32[(((tempInt)+(4))>>2)]=$18,tempInt));
      $retval=0;
      __label__ = 7; break;
    case 4: 
      var $19=$w;
      var $20=$bord_addr;
      var $mul21=((($20<<1))|0);
      var $add22=((($19)+($mul21))|0);
      var $21=$h;
      var $22=$bord_addr;
      var $mul23=((($22<<1))|0);
      var $add24=((($21)+($mul23))|0);
      var $call=_alloc_bitmap($add22, $add24);
      $bm=$call;
      var $xMin25=(($bbox)|0);
      var $23=HEAP32[(($xMin25)>>2)];
      var $24=$bord_addr;
      var $sub26=((($23)-($24))|0);
      var $25=$bm;
      var $left=(($25)|0);
      HEAP32[(($left)>>2)]=$sub26;
      var $yMax27=(($bbox+12)|0);
      var $26=HEAP32[(($yMax27)>>2)];
      var $sub28=(((-$26))|0);
      var $27=$bord_addr;
      var $sub29=((($sub28)-($27))|0);
      var $28=$bm;
      var $top=(($28+4)|0);
      HEAP32[(($top)>>2)]=$sub29;
      var $29=$w;
      var $width=(($bitmap+4)|0);
      HEAP32[(($width)>>2)]=$29;
      var $30=$h;
      var $rows=(($bitmap)|0);
      HEAP32[(($rows)>>2)]=$30;
      var $31=$bm;
      var $stride=(($31+16)|0);
      var $32=HEAP32[(($stride)>>2)];
      var $pitch=(($bitmap+8)|0);
      HEAP32[(($pitch)>>2)]=$32;
      var $33=$bm;
      var $buffer=(($33+20)|0);
      var $34=HEAP32[(($buffer)>>2)];
      var $35=$bord_addr;
      var $add_ptr=(($34+$35)|0);
      var $36=$bm;
      var $stride30=(($36+16)|0);
      var $37=HEAP32[(($stride30)>>2)];
      var $38=$bord_addr;
      var $mul31=((($37)*($38))|0);
      var $add_ptr32=(($add_ptr+$mul31)|0);
      var $buffer33=(($bitmap+12)|0);
      HEAP32[(($buffer33)>>2)]=$add_ptr32;
      var $num_grays=(($bitmap+16)|0);
      HEAP16[(($num_grays)>>1)]=256;
      var $pixel_mode=(($bitmap+18)|0);
      HEAP8[($pixel_mode)]=2;
      var $39=$ftlib_addr;
      var $40=$outline_addr;
      var $call34=_FT_Outline_Get_Bitmap($39, $40, $bitmap);
      $error=$call34;
      var $tobool=(($call34)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $41=$library_addr;
      var $42=$error;
      _ass_msg($41, 2, ((STRING_TABLE.__str1187)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$42,tempInt));
      var $43=$bm;
      _ass_free_bitmap($43);
      $retval=0;
      __label__ = 7; break;
    case 6: 
      var $44=$bm;
      $retval=$44;
      __label__ = 7; break;
    case 7: 
      var $45=$retval;
      STACKTOP = __stackBase__;
      return $45;
    default: assert(0, "bad label: " + __label__);
  }
}
_outline_to_bitmap["X"]=1;

function _alloc_bitmap($w, $h) {
  ;
  var __label__;

  var $w_addr;
  var $h_addr;
  var $bm;
  var $s;
  $w_addr=$w;
  $h_addr=$h;
  var $0=$w_addr;
  $s=$0;
  var $call=_malloc(24);
  var $1=$call;
  $bm=$1;
  var $2=$s;
  var $3=$h_addr;
  var $call1=_calloc($2, $3);
  var $4=$bm;
  var $buffer=(($4+20)|0);
  HEAP32[(($buffer)>>2)]=$call1;
  var $5=$w_addr;
  var $6=$bm;
  var $w2=(($6+8)|0);
  HEAP32[(($w2)>>2)]=$5;
  var $7=$h_addr;
  var $8=$bm;
  var $h3=(($8+12)|0);
  HEAP32[(($h3)>>2)]=$7;
  var $9=$s;
  var $10=$bm;
  var $stride=(($10+16)|0);
  HEAP32[(($stride)>>2)]=$9;
  var $11=$bm;
  var $top=(($11+4)|0);
  HEAP32[(($top)>>2)]=0;
  var $12=$bm;
  var $left=(($12)|0);
  HEAP32[(($left)>>2)]=0;
  var $13=$bm;
  ;
  return $13;
}


function _be_blur($bm) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $bm_addr;
      var $w;
      var $h;
      var $s;
      var $buf;
      var $x;
      var $y;
      var $old_sum;
      var $new_sum;
      $bm_addr=$bm;
      var $0=$bm_addr;
      var $w1=(($0+8)|0);
      var $1=HEAP32[(($w1)>>2)];
      $w=$1;
      var $2=$bm_addr;
      var $h2=(($2+12)|0);
      var $3=HEAP32[(($h2)>>2)];
      $h=$3;
      var $4=$bm_addr;
      var $stride=(($4+16)|0);
      var $5=HEAP32[(($stride)>>2)];
      $s=$5;
      var $6=$bm_addr;
      var $buffer=(($6+20)|0);
      var $7=HEAP32[(($buffer)>>2)];
      $buf=$7;
      $y=0;
      __label__ = 3; break;
    case 3: 
      var $8=$y;
      var $9=$h;
      var $cmp=(($8)>>>0) < (($9)>>>0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 10; break; }
    case 4: 
      var $10=$y;
      var $11=$s;
      var $mul=((($10)*($11))|0);
      var $12=$buf;
      var $arrayidx=(($12+$mul)|0);
      var $13=HEAPU8[($arrayidx)];
      var $conv=(($13)&255);
      var $mul3=((($conv<<1))|0);
      $old_sum=$mul3;
      $x=0;
      __label__ = 5; break;
    case 5: 
      var $14=$x;
      var $15=$w;
      var $sub=((($15)-(1))|0);
      var $cmp5=(($14)>>>0) < (($sub)>>>0);
      if ($cmp5) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $16=$y;
      var $17=$s;
      var $mul8=((($16)*($17))|0);
      var $18=$x;
      var $add=((($mul8)+($18))|0);
      var $19=$buf;
      var $arrayidx9=(($19+$add)|0);
      var $20=HEAPU8[($arrayidx9)];
      var $conv10=(($20)&255);
      var $21=$y;
      var $22=$s;
      var $mul11=((($21)*($22))|0);
      var $23=$x;
      var $add12=((($mul11)+($23))|0);
      var $add13=((($add12)+(1))|0);
      var $24=$buf;
      var $arrayidx14=(($24+$add13)|0);
      var $25=HEAPU8[($arrayidx14)];
      var $conv15=(($25)&255);
      var $add16=((($conv10)+($conv15))|0);
      $new_sum=$add16;
      var $26=$old_sum;
      var $27=$new_sum;
      var $add17=((($26)+($27))|0);
      var $shr=$add17 >>> 2;
      var $conv18=(($shr) & 255);
      var $28=$y;
      var $29=$s;
      var $mul19=((($28)*($29))|0);
      var $30=$x;
      var $add20=((($mul19)+($30))|0);
      var $31=$buf;
      var $arrayidx21=(($31+$add20)|0);
      HEAP8[($arrayidx21)]=$conv18;
      var $32=$new_sum;
      $old_sum=$32;
      __label__ = 7; break;
    case 7: 
      var $33=$x;
      var $inc=((($33)+(1))|0);
      $x=$inc;
      __label__ = 5; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $34=$y;
      var $inc23=((($34)+(1))|0);
      $y=$inc23;
      __label__ = 3; break;
    case 10: 
      $x=0;
      __label__ = 11; break;
    case 11: 
      var $35=$x;
      var $36=$w;
      var $cmp26=(($35)>>>0) < (($36)>>>0);
      if ($cmp26) { __label__ = 12; break; } else { __label__ = 18; break; }
    case 12: 
      var $37=$x;
      var $38=$buf;
      var $arrayidx29=(($38+$37)|0);
      var $39=HEAPU8[($arrayidx29)];
      var $conv30=(($39)&255);
      var $mul31=((($conv30<<1))|0);
      $old_sum=$mul31;
      $y=0;
      __label__ = 13; break;
    case 13: 
      var $40=$y;
      var $41=$h;
      var $sub33=((($41)-(1))|0);
      var $cmp34=(($40)>>>0) < (($sub33)>>>0);
      if ($cmp34) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $42=$y;
      var $43=$s;
      var $mul37=((($42)*($43))|0);
      var $44=$x;
      var $add38=((($mul37)+($44))|0);
      var $45=$buf;
      var $arrayidx39=(($45+$add38)|0);
      var $46=HEAPU8[($arrayidx39)];
      var $conv40=(($46)&255);
      var $47=$y;
      var $add41=((($47)+(1))|0);
      var $48=$s;
      var $mul42=((($add41)*($48))|0);
      var $49=$x;
      var $add43=((($mul42)+($49))|0);
      var $50=$buf;
      var $arrayidx44=(($50+$add43)|0);
      var $51=HEAPU8[($arrayidx44)];
      var $conv45=(($51)&255);
      var $add46=((($conv40)+($conv45))|0);
      $new_sum=$add46;
      var $52=$old_sum;
      var $53=$new_sum;
      var $add47=((($52)+($53))|0);
      var $shr48=$add47 >>> 2;
      var $conv49=(($shr48) & 255);
      var $54=$y;
      var $55=$s;
      var $mul50=((($54)*($55))|0);
      var $56=$x;
      var $add51=((($mul50)+($56))|0);
      var $57=$buf;
      var $arrayidx52=(($57+$add51)|0);
      HEAP8[($arrayidx52)]=$conv49;
      var $58=$new_sum;
      $old_sum=$58;
      __label__ = 15; break;
    case 15: 
      var $59=$y;
      var $inc54=((($59)+(1))|0);
      $y=$inc54;
      __label__ = 13; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $60=$x;
      var $inc57=((($60)+(1))|0);
      $x=$inc57;
      __label__ = 11; break;
    case 18: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_be_blur["X"]=1;

function _outline_to_bitmap3($library, $priv_blur, $ftlib, $outline, $border, $bm_g, $bm_o, $bm_s, $be, $blur_radius, $shadow_offset_0, $shadow_offset_1, $border_style) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $library_addr;
      var $priv_blur_addr;
      var $ftlib_addr;
      var $outline_addr;
      var $border_addr;
      var $bm_g_addr;
      var $bm_o_addr;
      var $bm_s_addr;
      var $be_addr;
      var $blur_radius_addr;
      var $shadow_offset=__stackBase__;
      var $border_style_addr;
      var $bbord;
      var $gbord;
      var $bord;
      $library_addr=$library;
      $priv_blur_addr=$priv_blur;
      $ftlib_addr=$ftlib;
      $outline_addr=$outline;
      $border_addr=$border;
      $bm_g_addr=$bm_g;
      $bm_o_addr=$bm_o;
      $bm_s_addr=$bm_s;
      $be_addr=$be;
      $blur_radius_addr=$blur_radius;
      var $x=(($shadow_offset)|0);
      HEAP32[(($x)>>2)]=$shadow_offset_0;
      var $y=(($shadow_offset+4)|0);
      HEAP32[(($y)>>2)]=$shadow_offset_1;
      $border_style_addr=$border_style;
      var $0=$blur_radius_addr;
      var $mul=($0)*(2);
      $blur_radius_addr=$mul;
      var $1=$be_addr;
      var $cmp=(($1)|0) > 0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=$be_addr;
      var $mul1=((($2<<1))|0);
      var $conv=(($mul1)|0);
      var $call=_sqrt($conv);
      var $cond = $call;__label__ = 5; break;
    case 4: 
      var $cond = 0;__label__ = 5; break;
    case 5: 
      var $cond;
      var $conv2=(($cond)&-1);
      $bbord=$conv2;
      var $3=$blur_radius_addr;
      var $cmp3=$3 > 0;
      if ($cmp3) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $4=$blur_radius_addr;
      var $add=($4)+(1);
      var $cond8 = $add;__label__ = 8; break;
    case 7: 
      var $cond8 = 0;__label__ = 8; break;
    case 8: 
      var $cond8;
      var $conv9=(($cond8)&-1);
      $gbord=$conv9;
      var $5=$bbord;
      var $6=$gbord;
      var $cmp10=(($5)|0) > (($6)|0);
      if ($cmp10) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $7=$bbord;
      var $cond15 = $7;__label__ = 11; break;
    case 10: 
      var $8=$gbord;
      var $cond15 = $8;__label__ = 11; break;
    case 11: 
      var $cond15;
      $bord=$cond15;
      var $9=$bord;
      var $cmp16=(($9)|0)==0;
      if ($cmp16) { __label__ = 12; break; } else { __label__ = 15; break; }
    case 12: 
      var $x18=(($shadow_offset)|0);
      var $10=HEAP32[(($x18)>>2)];
      var $tobool=(($10)|0)!=0;
      if ($tobool) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: 
      var $y19=(($shadow_offset+4)|0);
      var $11=HEAP32[(($y19)>>2)];
      var $tobool20=(($11)|0)!=0;
      if ($tobool20) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      $bord=1;
      __label__ = 15; break;
    case 15: 
      var $12=$bm_g_addr;
      var $tobool21=(($12)|0)!=0;
      if ($tobool21) { __label__ = 16; break; } else { __label__ = 19; break; }
    case 16: 
      var $13=$bm_o_addr;
      var $tobool23=(($13)|0)!=0;
      if ($tobool23) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 17: 
      var $14=$bm_s_addr;
      var $tobool25=(($14)|0)!=0;
      if ($tobool25) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      __label__ = 20; break;
    case 19: 
      ___assert_func(((STRING_TABLE.__str2188)|0), 468, ((STRING_TABLE.___func___outline_to_bitmap3)|0), ((STRING_TABLE.__str3189)|0));
      __label__ = 20; break;
    case 20: 
      var $15=$bm_s_addr;
      HEAP32[(($15)>>2)]=0;
      var $16=$bm_o_addr;
      HEAP32[(($16)>>2)]=0;
      var $17=$bm_g_addr;
      HEAP32[(($17)>>2)]=0;
      var $18=$outline_addr;
      var $tobool29=(($18)|0)!=0;
      if ($tobool29) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $19=$library_addr;
      var $20=$ftlib_addr;
      var $21=$outline_addr;
      var $22=$bord;
      var $call31=_outline_to_bitmap($19, $20, $21, $22);
      var $23=$bm_g_addr;
      HEAP32[(($23)>>2)]=$call31;
      __label__ = 22; break;
    case 22: 
      var $24=$bm_g_addr;
      var $25=HEAP32[(($24)>>2)];
      var $tobool33=(($25)|0)!=0;
      if ($tobool33) { __label__ = 24; break; } else { __label__ = 23; break; }
    case 23: 
      $retval=1;
      __label__ = 53; break;
    case 24: 
      var $26=$border_addr;
      var $tobool36=(($26)|0)!=0;
      if ($tobool36) { __label__ = 25; break; } else { __label__ = 28; break; }
    case 25: 
      var $27=$library_addr;
      var $28=$ftlib_addr;
      var $29=$border_addr;
      var $30=$bord;
      var $call38=_outline_to_bitmap($27, $28, $29, $30);
      var $31=$bm_o_addr;
      HEAP32[(($31)>>2)]=$call38;
      var $32=$bm_o_addr;
      var $33=HEAP32[(($32)>>2)];
      var $tobool39=(($33)|0)!=0;
      if ($tobool39) { __label__ = 27; break; } else { __label__ = 26; break; }
    case 26: 
      $retval=1;
      __label__ = 53; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $34=$be_addr;
      var $dec=((($34)-(1))|0);
      $be_addr=$dec;
      var $tobool43=(($34)|0)!=0;
      if ($tobool43) { __label__ = 30; break; } else { __label__ = 34; break; }
    case 30: 
      var $35=$bm_o_addr;
      var $36=HEAP32[(($35)>>2)];
      var $tobool44=(($36)|0)!=0;
      if ($tobool44) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $37=$bm_o_addr;
      var $38=HEAP32[(($37)>>2)];
      _be_blur($38);
      __label__ = 33; break;
    case 32: 
      var $39=$bm_g_addr;
      var $40=HEAP32[(($39)>>2)];
      _be_blur($40);
      __label__ = 33; break;
    case 33: 
      __label__ = 29; break;
    case 34: 
      var $41=$blur_radius_addr;
      var $cmp47=$41 > 0;
      if ($cmp47) { __label__ = 35; break; } else { __label__ = 42; break; }
    case 35: 
      var $42=$bm_o_addr;
      var $43=HEAP32[(($42)>>2)];
      var $tobool50=(($43)|0)!=0;
      if ($tobool50) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $44=$priv_blur_addr;
      var $45=$bm_o_addr;
      var $46=HEAP32[(($45)>>2)];
      var $w=(($46+8)|0);
      var $47=HEAP32[(($w)>>2)];
      var $48=$bm_o_addr;
      var $49=HEAP32[(($48)>>2)];
      var $h=(($49+12)|0);
      var $50=HEAP32[(($h)>>2)];
      _resize_tmp($44, $47, $50);
      __label__ = 38; break;
    case 37: 
      var $51=$priv_blur_addr;
      var $52=$bm_g_addr;
      var $53=HEAP32[(($52)>>2)];
      var $w53=(($53+8)|0);
      var $54=HEAP32[(($w53)>>2)];
      var $55=$bm_g_addr;
      var $56=HEAP32[(($55)>>2)];
      var $h54=(($56+12)|0);
      var $57=HEAP32[(($h54)>>2)];
      _resize_tmp($51, $54, $57);
      __label__ = 38; break;
    case 38: 
      var $58=$priv_blur_addr;
      var $59=$blur_radius_addr;
      var $call56=_generate_tables($58, $59);
      var $60=$bm_o_addr;
      var $61=HEAP32[(($60)>>2)];
      var $tobool57=(($61)|0)!=0;
      if ($tobool57) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $62=$bm_o_addr;
      var $63=HEAP32[(($62)>>2)];
      var $buffer=(($63+20)|0);
      var $64=HEAP32[(($buffer)>>2)];
      var $65=$priv_blur_addr;
      var $tmp=(($65+8)|0);
      var $66=HEAP32[(($tmp)>>2)];
      var $67=$bm_o_addr;
      var $68=HEAP32[(($67)>>2)];
      var $w59=(($68+8)|0);
      var $69=HEAP32[(($w59)>>2)];
      var $70=$bm_o_addr;
      var $71=HEAP32[(($70)>>2)];
      var $h60=(($71+12)|0);
      var $72=HEAP32[(($h60)>>2)];
      var $73=$bm_o_addr;
      var $74=HEAP32[(($73)>>2)];
      var $stride=(($74+16)|0);
      var $75=HEAP32[(($stride)>>2)];
      var $76=$priv_blur_addr;
      var $gt2=(($76+24)|0);
      var $77=HEAP32[(($gt2)>>2)];
      var $78=$priv_blur_addr;
      var $g_r=(($78+12)|0);
      var $79=HEAP32[(($g_r)>>2)];
      var $80=$priv_blur_addr;
      var $g_w=(($80+16)|0);
      var $81=HEAP32[(($g_w)>>2)];
      _ass_gauss_blur($64, $66, $69, $72, $75, $77, $79, $81);
      __label__ = 41; break;
    case 40: 
      var $82=$bm_g_addr;
      var $83=HEAP32[(($82)>>2)];
      var $buffer62=(($83+20)|0);
      var $84=HEAP32[(($buffer62)>>2)];
      var $85=$priv_blur_addr;
      var $tmp63=(($85+8)|0);
      var $86=HEAP32[(($tmp63)>>2)];
      var $87=$bm_g_addr;
      var $88=HEAP32[(($87)>>2)];
      var $w64=(($88+8)|0);
      var $89=HEAP32[(($w64)>>2)];
      var $90=$bm_g_addr;
      var $91=HEAP32[(($90)>>2)];
      var $h65=(($91+12)|0);
      var $92=HEAP32[(($h65)>>2)];
      var $93=$bm_g_addr;
      var $94=HEAP32[(($93)>>2)];
      var $stride66=(($94+16)|0);
      var $95=HEAP32[(($stride66)>>2)];
      var $96=$priv_blur_addr;
      var $gt267=(($96+24)|0);
      var $97=HEAP32[(($gt267)>>2)];
      var $98=$priv_blur_addr;
      var $g_r68=(($98+12)|0);
      var $99=HEAP32[(($g_r68)>>2)];
      var $100=$priv_blur_addr;
      var $g_w69=(($100+16)|0);
      var $101=HEAP32[(($g_w69)>>2)];
      _ass_gauss_blur($84, $86, $89, $92, $95, $97, $99, $101);
      __label__ = 41; break;
    case 41: 
      __label__ = 42; break;
    case 42: 
      var $102=$bm_o_addr;
      var $103=HEAP32[(($102)>>2)];
      var $tobool72=(($103)|0)!=0;
      if ($tobool72) { __label__ = 43; break; } else { __label__ = 45; break; }
    case 43: 
      var $104=$border_style_addr;
      var $cmp74=(($104)|0)!=3;
      if ($cmp74) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $105=$bm_o_addr;
      var $106=HEAP32[(($105)>>2)];
      var $call77=_copy_bitmap($106);
      var $107=$bm_s_addr;
      HEAP32[(($107)>>2)]=$call77;
      var $108=$bm_g_addr;
      var $109=HEAP32[(($108)>>2)];
      var $110=$bm_o_addr;
      var $111=HEAP32[(($110)>>2)];
      _fix_outline($109, $111);
      __label__ = 49; break;
    case 45: 
      var $112=$bm_o_addr;
      var $113=HEAP32[(($112)>>2)];
      var $tobool79=(($113)|0)!=0;
      if ($tobool79) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      var $114=$bm_o_addr;
      var $115=HEAP32[(($114)>>2)];
      var $call81=_copy_bitmap($115);
      var $116=$bm_s_addr;
      HEAP32[(($116)>>2)]=$call81;
      __label__ = 48; break;
    case 47: 
      var $117=$bm_g_addr;
      var $118=HEAP32[(($117)>>2)];
      var $call83=_copy_bitmap($118);
      var $119=$bm_s_addr;
      HEAP32[(($119)>>2)]=$call83;
      __label__ = 48; break;
    case 48: 
      __label__ = 49; break;
    case 49: 
      var $120=$bm_s_addr;
      var $tobool86=(($120)|0)!=0;
      if ($tobool86) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      __label__ = 52; break;
    case 51: 
      ___assert_func(((STRING_TABLE.__str2188)|0), 520, ((STRING_TABLE.___func___outline_to_bitmap3)|0), ((STRING_TABLE.__str4190)|0));
      __label__ = 52; break;
    case 52: 
      var $121=$bm_s_addr;
      var $122=HEAP32[(($121)>>2)];
      var $x90=(($shadow_offset)|0);
      var $123=HEAP32[(($x90)>>2)];
      var $y91=(($shadow_offset+4)|0);
      var $124=HEAP32[(($y91)>>2)];
      _shift_bitmap($122, $123, $124);
      $retval=0;
      __label__ = 53; break;
    case 53: 
      var $125=$retval;
      STACKTOP = __stackBase__;
      return $125;
    default: assert(0, "bad label: " + __label__);
  }
}
_outline_to_bitmap3["X"]=1;

function _resize_tmp($priv, $w, $h) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $priv_addr;
      var $w_addr;
      var $h_addr;
      $priv_addr=$priv;
      $w_addr=$w;
      $h_addr=$h;
      var $0=$priv_addr;
      var $tmp_w=(($0)|0);
      var $1=HEAP32[(($tmp_w)>>2)];
      var $2=$w_addr;
      var $cmp=(($1)|0) >= (($2)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $3=$priv_addr;
      var $tmp_h=(($3+4)|0);
      var $4=HEAP32[(($tmp_h)>>2)];
      var $5=$h_addr;
      var $cmp1=(($4)|0) >= (($5)|0);
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 16; break;
    case 5: 
      var $6=$priv_addr;
      var $tmp_w2=(($6)|0);
      var $7=HEAP32[(($tmp_w2)>>2)];
      var $cmp3=(($7)|0)==0;
      if ($cmp3) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $8=$priv_addr;
      var $tmp_w5=(($8)|0);
      HEAP32[(($tmp_w5)>>2)]=64;
      __label__ = 7; break;
    case 7: 
      var $9=$priv_addr;
      var $tmp_h7=(($9+4)|0);
      var $10=HEAP32[(($tmp_h7)>>2)];
      var $cmp8=(($10)|0)==0;
      if ($cmp8) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $11=$priv_addr;
      var $tmp_h10=(($11+4)|0);
      HEAP32[(($tmp_h10)>>2)]=64;
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $12=$priv_addr;
      var $tmp_w12=(($12)|0);
      var $13=HEAP32[(($tmp_w12)>>2)];
      var $14=$w_addr;
      var $cmp13=(($13)|0) < (($14)|0);
      if ($cmp13) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $15=$priv_addr;
      var $tmp_w14=(($15)|0);
      var $16=HEAP32[(($tmp_w14)>>2)];
      var $mul=((($16<<1))|0);
      HEAP32[(($tmp_w14)>>2)]=$mul;
      __label__ = 10; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $17=$priv_addr;
      var $tmp_h16=(($17+4)|0);
      var $18=HEAP32[(($tmp_h16)>>2)];
      var $19=$h_addr;
      var $cmp17=(($18)|0) < (($19)|0);
      if ($cmp17) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $20=$priv_addr;
      var $tmp_h19=(($20+4)|0);
      var $21=HEAP32[(($tmp_h19)>>2)];
      var $mul20=((($21<<1))|0);
      HEAP32[(($tmp_h19)>>2)]=$mul20;
      __label__ = 13; break;
    case 15: 
      var $22=$priv_addr;
      var $tmp=(($22+8)|0);
      var $23=HEAP32[(($tmp)>>2)];
      var $24=$23;
      _free($24);
      var $25=$priv_addr;
      var $tmp_w22=(($25)|0);
      var $26=HEAP32[(($tmp_w22)>>2)];
      var $add=((($26)+(1))|0);
      var $27=$priv_addr;
      var $tmp_h23=(($27+4)|0);
      var $28=HEAP32[(($tmp_h23)>>2)];
      var $mul24=((($add)*($28))|0);
      var $mul25=((($mul24<<1))|0);
      var $call=_malloc($mul25);
      var $29=$call;
      var $30=$priv_addr;
      var $tmp26=(($30+8)|0);
      HEAP32[(($tmp26)>>2)]=$29;
      __label__ = 16; break;
    case 16: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_resize_tmp["X"]=1;

function _ass_gauss_blur($buffer, $tmp2, $width, $height, $stride, $m2, $r, $mwidth) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $buffer_addr;
      var $tmp2_addr;
      var $width_addr;
      var $height_addr;
      var $stride_addr;
      var $m2_addr;
      var $r_addr;
      var $mwidth_addr;
      var $x;
      var $y;
      var $s;
      var $t;
      var $src;
      var $dstp;
      var $mx;
      var $m3;
      var $src26;
      var $dstp31;
      var $mx35;
      var $m336;
      var $src59;
      var $dstp64;
      var $mx68;
      var $x2;
      var $m371;
      var $srcp;
      var $src108;
      var $dstp112;
      var $src2;
      var $m3117;
      var $mx120;
      var $srcp144;
      var $src149;
      var $dstp153;
      var $src2159;
      var $m3162;
      var $mx165;
      var $srcp187;
      var $src192;
      var $y2;
      var $dstp198;
      var $src2204;
      var $m3207;
      var $mx210;
      $buffer_addr=$buffer;
      $tmp2_addr=$tmp2;
      $width_addr=$width;
      $height_addr=$height;
      $stride_addr=$stride;
      $m2_addr=$m2;
      $r_addr=$r;
      $mwidth_addr=$mwidth;
      var $0=$buffer_addr;
      $s=$0;
      var $1=$tmp2_addr;
      var $add_ptr=(($1+2)|0);
      $t=$add_ptr;
      $y=0;
      __label__ = 3; break;
    case 3: 
      var $2=$y;
      var $3=$height_addr;
      var $cmp=(($2)|0) < (($3)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 36; break; }
    case 4: 
      var $4=$t;
      var $add_ptr1=((($4)-(2))|0);
      var $5=$add_ptr1;
      var $6=$width_addr;
      var $add=((($6)+(1))|0);
      var $mul=((($add<<1))|0);
      _memset($5, 0, $mul, 2);
      $x=0;
      __label__ = 5; break;
    case 5: 
      var $7=$x;
      var $8=$r_addr;
      var $cmp3=(($7)|0) < (($8)|0);
      if ($cmp3) { __label__ = 6; break; } else { __label__ = 14; break; }
    case 6: 
      var $9=$x;
      var $10=$s;
      var $arrayidx=(($10+$9)|0);
      var $11=HEAPU8[($arrayidx)];
      var $conv=(($11)&255);
      $src=$conv;
      var $12=$src;
      var $tobool=(($12)|0)!=0;
      if ($tobool) { __label__ = 7; break; } else { __label__ = 12; break; }
    case 7: 
      var $13=$t;
      var $14=$x;
      var $add_ptr5=(($13+($14<<1))|0);
      var $15=$r_addr;
      var $idx_neg=(((-$15))|0);
      var $add_ptr6=(($add_ptr5+($idx_neg<<1))|0);
      $dstp=$add_ptr6;
      var $16=$m2_addr;
      var $17=$src;
      var $18=$mwidth_addr;
      var $mul7=((($17)*($18))|0);
      var $add_ptr8=(($16+($mul7<<2))|0);
      $m3=$add_ptr8;
      var $19=$r_addr;
      var $20=$x;
      var $sub=((($19)-($20))|0);
      $mx=$sub;
      __label__ = 8; break;
    case 8: 
      var $21=$mx;
      var $22=$mwidth_addr;
      var $cmp10=(($21)|0) < (($22)|0);
      if ($cmp10) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $23=$mx;
      var $24=$m3;
      var $arrayidx13=(($24+($23<<2))|0);
      var $25=HEAP32[(($arrayidx13)>>2)];
      var $26=$mx;
      var $27=$dstp;
      var $arrayidx14=(($27+($26<<1))|0);
      var $28=HEAPU16[(($arrayidx14)>>1)];
      var $conv15=(($28)&65535);
      var $add16=((($conv15)+($25))|0);
      var $conv17=(($add16) & 65535);
      HEAP16[(($arrayidx14)>>1)]=$conv17;
      __label__ = 10; break;
    case 10: 
      var $29=$mx;
      var $inc=((($29)+(1))|0);
      $mx=$inc;
      __label__ = 8; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $30=$x;
      var $inc19=((($30)+(1))|0);
      $x=$inc19;
      __label__ = 5; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $31=$x;
      var $32=$width_addr;
      var $33=$r_addr;
      var $sub22=((($32)-($33))|0);
      var $cmp23=(($31)|0) < (($sub22)|0);
      if ($cmp23) { __label__ = 16; break; } else { __label__ = 24; break; }
    case 16: 
      var $34=$x;
      var $35=$s;
      var $arrayidx27=(($35+$34)|0);
      var $36=HEAPU8[($arrayidx27)];
      var $conv28=(($36)&255);
      $src26=$conv28;
      var $37=$src26;
      var $tobool29=(($37)|0)!=0;
      if ($tobool29) { __label__ = 17; break; } else { __label__ = 22; break; }
    case 17: 
      var $38=$t;
      var $39=$x;
      var $add_ptr32=(($38+($39<<1))|0);
      var $40=$r_addr;
      var $idx_neg33=(((-$40))|0);
      var $add_ptr34=(($add_ptr32+($idx_neg33<<1))|0);
      $dstp31=$add_ptr34;
      var $41=$m2_addr;
      var $42=$src26;
      var $43=$mwidth_addr;
      var $mul37=((($42)*($43))|0);
      var $add_ptr38=(($41+($mul37<<2))|0);
      $m336=$add_ptr38;
      $mx35=0;
      __label__ = 18; break;
    case 18: 
      var $44=$mx35;
      var $45=$mwidth_addr;
      var $cmp40=(($44)|0) < (($45)|0);
      if ($cmp40) { __label__ = 19; break; } else { __label__ = 21; break; }
    case 19: 
      var $46=$mx35;
      var $47=$m336;
      var $arrayidx43=(($47+($46<<2))|0);
      var $48=HEAP32[(($arrayidx43)>>2)];
      var $49=$mx35;
      var $50=$dstp31;
      var $arrayidx44=(($50+($49<<1))|0);
      var $51=HEAPU16[(($arrayidx44)>>1)];
      var $conv45=(($51)&65535);
      var $add46=((($conv45)+($48))|0);
      var $conv47=(($add46) & 65535);
      HEAP16[(($arrayidx44)>>1)]=$conv47;
      __label__ = 20; break;
    case 20: 
      var $52=$mx35;
      var $inc49=((($52)+(1))|0);
      $mx35=$inc49;
      __label__ = 18; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $53=$x;
      var $inc53=((($53)+(1))|0);
      $x=$inc53;
      __label__ = 15; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      var $54=$x;
      var $55=$width_addr;
      var $cmp56=(($54)|0) < (($55)|0);
      if ($cmp56) { __label__ = 26; break; } else { __label__ = 34; break; }
    case 26: 
      var $56=$x;
      var $57=$s;
      var $arrayidx60=(($57+$56)|0);
      var $58=HEAPU8[($arrayidx60)];
      var $conv61=(($58)&255);
      $src59=$conv61;
      var $59=$src59;
      var $tobool62=(($59)|0)!=0;
      if ($tobool62) { __label__ = 27; break; } else { __label__ = 32; break; }
    case 27: 
      var $60=$t;
      var $61=$x;
      var $add_ptr65=(($60+($61<<1))|0);
      var $62=$r_addr;
      var $idx_neg66=(((-$62))|0);
      var $add_ptr67=(($add_ptr65+($idx_neg66<<1))|0);
      $dstp64=$add_ptr67;
      var $63=$r_addr;
      var $64=$width_addr;
      var $add69=((($63)+($64))|0);
      var $65=$x;
      var $sub70=((($add69)-($65))|0);
      $x2=$sub70;
      var $66=$m2_addr;
      var $67=$src59;
      var $68=$mwidth_addr;
      var $mul72=((($67)*($68))|0);
      var $add_ptr73=(($66+($mul72<<2))|0);
      $m371=$add_ptr73;
      $mx68=0;
      __label__ = 28; break;
    case 28: 
      var $69=$mx68;
      var $70=$x2;
      var $cmp75=(($69)|0) < (($70)|0);
      if ($cmp75) { __label__ = 29; break; } else { __label__ = 31; break; }
    case 29: 
      var $71=$mx68;
      var $72=$m371;
      var $arrayidx78=(($72+($71<<2))|0);
      var $73=HEAP32[(($arrayidx78)>>2)];
      var $74=$mx68;
      var $75=$dstp64;
      var $arrayidx79=(($75+($74<<1))|0);
      var $76=HEAPU16[(($arrayidx79)>>1)];
      var $conv80=(($76)&65535);
      var $add81=((($conv80)+($73))|0);
      var $conv82=(($add81) & 65535);
      HEAP16[(($arrayidx79)>>1)]=$conv82;
      __label__ = 30; break;
    case 30: 
      var $77=$mx68;
      var $inc84=((($77)+(1))|0);
      $mx68=$inc84;
      __label__ = 28; break;
    case 31: 
      __label__ = 32; break;
    case 32: 
      __label__ = 33; break;
    case 33: 
      var $78=$x;
      var $inc88=((($78)+(1))|0);
      $x=$inc88;
      __label__ = 25; break;
    case 34: 
      var $79=$stride_addr;
      var $80=$s;
      var $add_ptr90=(($80+$79)|0);
      $s=$add_ptr90;
      var $81=$width_addr;
      var $add91=((($81)+(1))|0);
      var $82=$t;
      var $add_ptr92=(($82+($add91<<1))|0);
      $t=$add_ptr92;
      __label__ = 35; break;
    case 35: 
      var $83=$y;
      var $inc94=((($83)+(1))|0);
      $y=$inc94;
      __label__ = 3; break;
    case 36: 
      var $84=$tmp2_addr;
      $t=$84;
      $x=0;
      __label__ = 37; break;
    case 37: 
      var $85=$x;
      var $86=$width_addr;
      var $cmp97=(($85)|0) < (($86)|0);
      if ($cmp97) { __label__ = 38; break; } else { __label__ = 70; break; }
    case 38: 
      $y=0;
      __label__ = 39; break;
    case 39: 
      var $87=$y;
      var $88=$r_addr;
      var $cmp101=(($87)|0) < (($88)|0);
      if ($cmp101) { __label__ = 40; break; } else { __label__ = 48; break; }
    case 40: 
      var $89=$t;
      var $90=$y;
      var $91=$width_addr;
      var $add104=((($91)+(1))|0);
      var $mul105=((($90)*($add104))|0);
      var $add_ptr106=(($89+($mul105<<1))|0);
      var $add_ptr107=(($add_ptr106+2)|0);
      $srcp=$add_ptr107;
      var $92=$srcp;
      var $93=HEAPU16[(($92)>>1)];
      var $conv109=(($93)&65535);
      $src108=$conv109;
      var $94=$src108;
      var $tobool110=(($94)|0)!=0;
      if ($tobool110) { __label__ = 41; break; } else { __label__ = 46; break; }
    case 41: 
      var $95=$srcp;
      var $add_ptr113=((($95)-(2))|0);
      var $96=$width_addr;
      var $add_ptr114=(($add_ptr113+($96<<1))|0);
      var $add_ptr115=(($add_ptr114+2)|0);
      $dstp112=$add_ptr115;
      var $97=$src108;
      var $add116=((($97)+(128))|0);
      var $shr=$add116 >> 8;
      $src2=$shr;
      var $98=$m2_addr;
      var $99=$src2;
      var $100=$mwidth_addr;
      var $mul118=((($99)*($100))|0);
      var $add_ptr119=(($98+($mul118<<2))|0);
      $m3117=$add_ptr119;
      var $101=$srcp;
      HEAP16[(($101)>>1)]=128;
      var $102=$r_addr;
      var $sub121=((($102)-(1))|0);
      $mx120=$sub121;
      __label__ = 42; break;
    case 42: 
      var $103=$mx120;
      var $104=$mwidth_addr;
      var $cmp123=(($103)|0) < (($104)|0);
      if ($cmp123) { __label__ = 43; break; } else { __label__ = 45; break; }
    case 43: 
      var $105=$mx120;
      var $106=$m3117;
      var $arrayidx126=(($106+($105<<2))|0);
      var $107=HEAP32[(($arrayidx126)>>2)];
      var $108=$dstp112;
      var $109=HEAPU16[(($108)>>1)];
      var $conv127=(($109)&65535);
      var $add128=((($conv127)+($107))|0);
      var $conv129=(($add128) & 65535);
      HEAP16[(($108)>>1)]=$conv129;
      var $110=$width_addr;
      var $add130=((($110)+(1))|0);
      var $111=$dstp112;
      var $add_ptr131=(($111+($add130<<1))|0);
      $dstp112=$add_ptr131;
      __label__ = 44; break;
    case 44: 
      var $112=$mx120;
      var $inc133=((($112)+(1))|0);
      $mx120=$inc133;
      __label__ = 42; break;
    case 45: 
      __label__ = 46; break;
    case 46: 
      __label__ = 47; break;
    case 47: 
      var $113=$y;
      var $inc137=((($113)+(1))|0);
      $y=$inc137;
      __label__ = 39; break;
    case 48: 
      __label__ = 49; break;
    case 49: 
      var $114=$y;
      var $115=$height_addr;
      var $116=$r_addr;
      var $sub140=((($115)-($116))|0);
      var $cmp141=(($114)|0) < (($sub140)|0);
      if ($cmp141) { __label__ = 50; break; } else { __label__ = 58; break; }
    case 50: 
      var $117=$t;
      var $118=$y;
      var $119=$width_addr;
      var $add145=((($119)+(1))|0);
      var $mul146=((($118)*($add145))|0);
      var $add_ptr147=(($117+($mul146<<1))|0);
      var $add_ptr148=(($add_ptr147+2)|0);
      $srcp144=$add_ptr148;
      var $120=$srcp144;
      var $121=HEAPU16[(($120)>>1)];
      var $conv150=(($121)&65535);
      $src149=$conv150;
      var $122=$src149;
      var $tobool151=(($122)|0)!=0;
      if ($tobool151) { __label__ = 51; break; } else { __label__ = 56; break; }
    case 51: 
      var $123=$srcp144;
      var $add_ptr154=((($123)-(2))|0);
      var $124=$r_addr;
      var $125=$width_addr;
      var $add155=((($125)+(1))|0);
      var $mul156=((($124)*($add155))|0);
      var $idx_neg157=(((-$mul156))|0);
      var $add_ptr158=(($add_ptr154+($idx_neg157<<1))|0);
      $dstp153=$add_ptr158;
      var $126=$src149;
      var $add160=((($126)+(128))|0);
      var $shr161=$add160 >> 8;
      $src2159=$shr161;
      var $127=$m2_addr;
      var $128=$src2159;
      var $129=$mwidth_addr;
      var $mul163=((($128)*($129))|0);
      var $add_ptr164=(($127+($mul163<<2))|0);
      $m3162=$add_ptr164;
      var $130=$srcp144;
      HEAP16[(($130)>>1)]=128;
      $mx165=0;
      __label__ = 52; break;
    case 52: 
      var $131=$mx165;
      var $132=$mwidth_addr;
      var $cmp167=(($131)|0) < (($132)|0);
      if ($cmp167) { __label__ = 53; break; } else { __label__ = 55; break; }
    case 53: 
      var $133=$mx165;
      var $134=$m3162;
      var $arrayidx170=(($134+($133<<2))|0);
      var $135=HEAP32[(($arrayidx170)>>2)];
      var $136=$dstp153;
      var $137=HEAPU16[(($136)>>1)];
      var $conv171=(($137)&65535);
      var $add172=((($conv171)+($135))|0);
      var $conv173=(($add172) & 65535);
      HEAP16[(($136)>>1)]=$conv173;
      var $138=$width_addr;
      var $add174=((($138)+(1))|0);
      var $139=$dstp153;
      var $add_ptr175=(($139+($add174<<1))|0);
      $dstp153=$add_ptr175;
      __label__ = 54; break;
    case 54: 
      var $140=$mx165;
      var $inc177=((($140)+(1))|0);
      $mx165=$inc177;
      __label__ = 52; break;
    case 55: 
      __label__ = 56; break;
    case 56: 
      __label__ = 57; break;
    case 57: 
      var $141=$y;
      var $inc181=((($141)+(1))|0);
      $y=$inc181;
      __label__ = 49; break;
    case 58: 
      __label__ = 59; break;
    case 59: 
      var $142=$y;
      var $143=$height_addr;
      var $cmp184=(($142)|0) < (($143)|0);
      if ($cmp184) { __label__ = 60; break; } else { __label__ = 68; break; }
    case 60: 
      var $144=$t;
      var $145=$y;
      var $146=$width_addr;
      var $add188=((($146)+(1))|0);
      var $mul189=((($145)*($add188))|0);
      var $add_ptr190=(($144+($mul189<<1))|0);
      var $add_ptr191=(($add_ptr190+2)|0);
      $srcp187=$add_ptr191;
      var $147=$srcp187;
      var $148=HEAPU16[(($147)>>1)];
      var $conv193=(($148)&65535);
      $src192=$conv193;
      var $149=$src192;
      var $tobool194=(($149)|0)!=0;
      if ($tobool194) { __label__ = 61; break; } else { __label__ = 66; break; }
    case 61: 
      var $150=$r_addr;
      var $151=$height_addr;
      var $add196=((($150)+($151))|0);
      var $152=$y;
      var $sub197=((($add196)-($152))|0);
      $y2=$sub197;
      var $153=$srcp187;
      var $add_ptr199=((($153)-(2))|0);
      var $154=$r_addr;
      var $155=$width_addr;
      var $add200=((($155)+(1))|0);
      var $mul201=((($154)*($add200))|0);
      var $idx_neg202=(((-$mul201))|0);
      var $add_ptr203=(($add_ptr199+($idx_neg202<<1))|0);
      $dstp198=$add_ptr203;
      var $156=$src192;
      var $add205=((($156)+(128))|0);
      var $shr206=$add205 >> 8;
      $src2204=$shr206;
      var $157=$m2_addr;
      var $158=$src2204;
      var $159=$mwidth_addr;
      var $mul208=((($158)*($159))|0);
      var $add_ptr209=(($157+($mul208<<2))|0);
      $m3207=$add_ptr209;
      var $160=$srcp187;
      HEAP16[(($160)>>1)]=128;
      $mx210=0;
      __label__ = 62; break;
    case 62: 
      var $161=$mx210;
      var $162=$y2;
      var $cmp212=(($161)|0) < (($162)|0);
      if ($cmp212) { __label__ = 63; break; } else { __label__ = 65; break; }
    case 63: 
      var $163=$mx210;
      var $164=$m3207;
      var $arrayidx215=(($164+($163<<2))|0);
      var $165=HEAP32[(($arrayidx215)>>2)];
      var $166=$dstp198;
      var $167=HEAPU16[(($166)>>1)];
      var $conv216=(($167)&65535);
      var $add217=((($conv216)+($165))|0);
      var $conv218=(($add217) & 65535);
      HEAP16[(($166)>>1)]=$conv218;
      var $168=$width_addr;
      var $add219=((($168)+(1))|0);
      var $169=$dstp198;
      var $add_ptr220=(($169+($add219<<1))|0);
      $dstp198=$add_ptr220;
      __label__ = 64; break;
    case 64: 
      var $170=$mx210;
      var $inc222=((($170)+(1))|0);
      $mx210=$inc222;
      __label__ = 62; break;
    case 65: 
      __label__ = 66; break;
    case 66: 
      __label__ = 67; break;
    case 67: 
      var $171=$y;
      var $inc226=((($171)+(1))|0);
      $y=$inc226;
      __label__ = 59; break;
    case 68: 
      var $172=$t;
      var $incdec_ptr=(($172+2)|0);
      $t=$incdec_ptr;
      __label__ = 69; break;
    case 69: 
      var $173=$x;
      var $inc229=((($173)+(1))|0);
      $x=$inc229;
      __label__ = 37; break;
    case 70: 
      var $174=$tmp2_addr;
      $t=$174;
      var $175=$buffer_addr;
      $s=$175;
      $y=0;
      __label__ = 71; break;
    case 71: 
      var $176=$y;
      var $177=$height_addr;
      var $cmp232=(($176)|0) < (($177)|0);
      if ($cmp232) { __label__ = 72; break; } else { __label__ = 78; break; }
    case 72: 
      $x=0;
      __label__ = 73; break;
    case 73: 
      var $178=$x;
      var $179=$width_addr;
      var $cmp236=(($178)|0) < (($179)|0);
      if ($cmp236) { __label__ = 74; break; } else { __label__ = 76; break; }
    case 74: 
      var $180=$x;
      var $181=$t;
      var $arrayidx239=(($181+($180<<1))|0);
      var $182=HEAPU16[(($arrayidx239)>>1)];
      var $conv240=(($182)&65535);
      var $shr241=$conv240 >> 8;
      var $conv242=(($shr241) & 255);
      var $183=$x;
      var $184=$s;
      var $arrayidx243=(($184+$183)|0);
      HEAP8[($arrayidx243)]=$conv242;
      __label__ = 75; break;
    case 75: 
      var $185=$x;
      var $inc245=((($185)+(1))|0);
      $x=$inc245;
      __label__ = 73; break;
    case 76: 
      var $186=$stride_addr;
      var $187=$s;
      var $add_ptr247=(($187+$186)|0);
      $s=$add_ptr247;
      var $188=$width_addr;
      var $add248=((($188)+(1))|0);
      var $189=$t;
      var $add_ptr249=(($189+($add248<<1))|0);
      $t=$add_ptr249;
      __label__ = 77; break;
    case 77: 
      var $190=$y;
      var $inc251=((($190)+(1))|0);
      $y=$inc251;
      __label__ = 71; break;
    case 78: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_gauss_blur["X"]=1;

function _copy_bitmap($src) {
  ;
  var __label__;

  var $src_addr;
  var $dst;
  $src_addr=$src;
  var $0=$src_addr;
  var $w=(($0+8)|0);
  var $1=HEAP32[(($w)>>2)];
  var $2=$src_addr;
  var $h=(($2+12)|0);
  var $3=HEAP32[(($h)>>2)];
  var $call=_alloc_bitmap($1, $3);
  $dst=$call;
  var $4=$src_addr;
  var $left=(($4)|0);
  var $5=HEAP32[(($left)>>2)];
  var $6=$dst;
  var $left1=(($6)|0);
  HEAP32[(($left1)>>2)]=$5;
  var $7=$src_addr;
  var $top=(($7+4)|0);
  var $8=HEAP32[(($top)>>2)];
  var $9=$dst;
  var $top2=(($9+4)|0);
  HEAP32[(($top2)>>2)]=$8;
  var $10=$dst;
  var $buffer=(($10+20)|0);
  var $11=HEAP32[(($buffer)>>2)];
  var $12=$src_addr;
  var $buffer3=(($12+20)|0);
  var $13=HEAP32[(($buffer3)>>2)];
  var $14=$src_addr;
  var $stride=(($14+16)|0);
  var $15=HEAP32[(($stride)>>2)];
  var $16=$src_addr;
  var $h4=(($16+12)|0);
  var $17=HEAP32[(($h4)>>2)];
  var $mul=((($15)*($17))|0);
  assert($mul % 1 === 0, 'memcpy given ' + $mul + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($11, $13, $mul, 1);
  var $18=$dst;
  ;
  return $18;
}


function _fix_outline($bm_g, $bm_o) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $bm_g_addr;
      var $bm_o_addr;
      var $x;
      var $y;
      var $l;
      var $t;
      var $r;
      var $b;
      var $g;
      var $o;
      var $c_g;
      var $c_o;
      $bm_g_addr=$bm_g;
      $bm_o_addr=$bm_o;
      var $0=$bm_o_addr;
      var $left=(($0)|0);
      var $1=HEAP32[(($left)>>2)];
      var $2=$bm_g_addr;
      var $left1=(($2)|0);
      var $3=HEAP32[(($left1)>>2)];
      var $cmp=(($1)|0) > (($3)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $4=$bm_o_addr;
      var $left2=(($4)|0);
      var $5=HEAP32[(($left2)>>2)];
      var $cond = $5;__label__ = 5; break;
    case 4: 
      var $6=$bm_g_addr;
      var $left3=(($6)|0);
      var $7=HEAP32[(($left3)>>2)];
      var $cond = $7;__label__ = 5; break;
    case 5: 
      var $cond;
      $l=$cond;
      var $8=$bm_o_addr;
      var $top=(($8+4)|0);
      var $9=HEAP32[(($top)>>2)];
      var $10=$bm_g_addr;
      var $top4=(($10+4)|0);
      var $11=HEAP32[(($top4)>>2)];
      var $cmp5=(($9)|0) > (($11)|0);
      if ($cmp5) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $12=$bm_o_addr;
      var $top7=(($12+4)|0);
      var $13=HEAP32[(($top7)>>2)];
      var $cond11 = $13;__label__ = 8; break;
    case 7: 
      var $14=$bm_g_addr;
      var $top9=(($14+4)|0);
      var $15=HEAP32[(($top9)>>2)];
      var $cond11 = $15;__label__ = 8; break;
    case 8: 
      var $cond11;
      $t=$cond11;
      var $16=$bm_o_addr;
      var $left12=(($16)|0);
      var $17=HEAP32[(($left12)>>2)];
      var $18=$bm_o_addr;
      var $stride=(($18+16)|0);
      var $19=HEAP32[(($stride)>>2)];
      var $add=((($17)+($19))|0);
      var $20=$bm_g_addr;
      var $left13=(($20)|0);
      var $21=HEAP32[(($left13)>>2)];
      var $22=$bm_g_addr;
      var $stride14=(($22+16)|0);
      var $23=HEAP32[(($stride14)>>2)];
      var $add15=((($21)+($23))|0);
      var $cmp16=(($add)|0) < (($add15)|0);
      if ($cmp16) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $24=$bm_o_addr;
      var $left18=(($24)|0);
      var $25=HEAP32[(($left18)>>2)];
      var $26=$bm_o_addr;
      var $stride19=(($26+16)|0);
      var $27=HEAP32[(($stride19)>>2)];
      var $add20=((($25)+($27))|0);
      var $cond26 = $add20;__label__ = 11; break;
    case 10: 
      var $28=$bm_g_addr;
      var $left22=(($28)|0);
      var $29=HEAP32[(($left22)>>2)];
      var $30=$bm_g_addr;
      var $stride23=(($30+16)|0);
      var $31=HEAP32[(($stride23)>>2)];
      var $add24=((($29)+($31))|0);
      var $cond26 = $add24;__label__ = 11; break;
    case 11: 
      var $cond26;
      $r=$cond26;
      var $32=$bm_o_addr;
      var $top27=(($32+4)|0);
      var $33=HEAP32[(($top27)>>2)];
      var $34=$bm_o_addr;
      var $h=(($34+12)|0);
      var $35=HEAP32[(($h)>>2)];
      var $add28=((($33)+($35))|0);
      var $36=$bm_g_addr;
      var $top29=(($36+4)|0);
      var $37=HEAP32[(($top29)>>2)];
      var $38=$bm_g_addr;
      var $h30=(($38+12)|0);
      var $39=HEAP32[(($h30)>>2)];
      var $add31=((($37)+($39))|0);
      var $cmp32=(($add28)|0) < (($add31)|0);
      if ($cmp32) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $40=$bm_o_addr;
      var $top34=(($40+4)|0);
      var $41=HEAP32[(($top34)>>2)];
      var $42=$bm_o_addr;
      var $h35=(($42+12)|0);
      var $43=HEAP32[(($h35)>>2)];
      var $add36=((($41)+($43))|0);
      var $cond42 = $add36;__label__ = 14; break;
    case 13: 
      var $44=$bm_g_addr;
      var $top38=(($44+4)|0);
      var $45=HEAP32[(($top38)>>2)];
      var $46=$bm_g_addr;
      var $h39=(($46+12)|0);
      var $47=HEAP32[(($h39)>>2)];
      var $add40=((($45)+($47))|0);
      var $cond42 = $add40;__label__ = 14; break;
    case 14: 
      var $cond42;
      $b=$cond42;
      var $48=$bm_g_addr;
      var $buffer=(($48+20)|0);
      var $49=HEAP32[(($buffer)>>2)];
      var $50=$t;
      var $51=$bm_g_addr;
      var $top43=(($51+4)|0);
      var $52=HEAP32[(($top43)>>2)];
      var $sub=((($50)-($52))|0);
      var $53=$bm_g_addr;
      var $stride44=(($53+16)|0);
      var $54=HEAP32[(($stride44)>>2)];
      var $mul=((($sub)*($54))|0);
      var $add_ptr=(($49+$mul)|0);
      var $55=$l;
      var $56=$bm_g_addr;
      var $left45=(($56)|0);
      var $57=HEAP32[(($left45)>>2)];
      var $sub46=((($55)-($57))|0);
      var $add_ptr47=(($add_ptr+$sub46)|0);
      $g=$add_ptr47;
      var $58=$bm_o_addr;
      var $buffer48=(($58+20)|0);
      var $59=HEAP32[(($buffer48)>>2)];
      var $60=$t;
      var $61=$bm_o_addr;
      var $top49=(($61+4)|0);
      var $62=HEAP32[(($top49)>>2)];
      var $sub50=((($60)-($62))|0);
      var $63=$bm_o_addr;
      var $stride51=(($63+16)|0);
      var $64=HEAP32[(($stride51)>>2)];
      var $mul52=((($sub50)*($64))|0);
      var $add_ptr53=(($59+$mul52)|0);
      var $65=$l;
      var $66=$bm_o_addr;
      var $left54=(($66)|0);
      var $67=HEAP32[(($left54)>>2)];
      var $sub55=((($65)-($67))|0);
      var $add_ptr56=(($add_ptr53+$sub55)|0);
      $o=$add_ptr56;
      $y=0;
      __label__ = 15; break;
    case 15: 
      var $68=$y;
      var $69=$b;
      var $70=$t;
      var $sub57=((($69)-($70))|0);
      var $cmp58=(($68)|0) < (($sub57)|0);
      if ($cmp58) { __label__ = 16; break; } else { __label__ = 25; break; }
    case 16: 
      $x=0;
      __label__ = 17; break;
    case 17: 
      var $71=$x;
      var $72=$r;
      var $73=$l;
      var $sub60=((($72)-($73))|0);
      var $cmp61=(($71)|0) < (($sub60)|0);
      if ($cmp61) { __label__ = 18; break; } else { __label__ = 23; break; }
    case 18: 
      var $74=$x;
      var $75=$g;
      var $arrayidx=(($75+$74)|0);
      var $76=HEAP8[($arrayidx)];
      $c_g=$76;
      var $77=$x;
      var $78=$o;
      var $arrayidx63=(($78+$77)|0);
      var $79=HEAP8[($arrayidx63)];
      $c_o=$79;
      var $80=$c_o;
      var $conv=(($80)&255);
      var $81=$c_g;
      var $conv64=(($81)&255);
      var $cmp65=(($conv)|0) > (($conv64)|0);
      if ($cmp65) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $82=$c_o;
      var $conv68=(($82)&255);
      var $83=$c_g;
      var $conv69=(($83)&255);
      var $div=((((($conv69)|0))/(2))&-1);
      var $sub70=((($conv68)-($div))|0);
      var $cond73 = $sub70;__label__ = 21; break;
    case 20: 
      var $cond73 = 0;__label__ = 21; break;
    case 21: 
      var $cond73;
      var $conv74=(($cond73) & 255);
      var $84=$x;
      var $85=$o;
      var $arrayidx75=(($85+$84)|0);
      HEAP8[($arrayidx75)]=$conv74;
      __label__ = 22; break;
    case 22: 
      var $86=$x;
      var $inc=((($86)+(1))|0);
      $x=$inc;
      __label__ = 17; break;
    case 23: 
      var $87=$bm_g_addr;
      var $stride76=(($87+16)|0);
      var $88=HEAP32[(($stride76)>>2)];
      var $89=$g;
      var $add_ptr77=(($89+$88)|0);
      $g=$add_ptr77;
      var $90=$bm_o_addr;
      var $stride78=(($90+16)|0);
      var $91=HEAP32[(($stride78)>>2)];
      var $92=$o;
      var $add_ptr79=(($92+$91)|0);
      $o=$add_ptr79;
      __label__ = 24; break;
    case 24: 
      var $93=$y;
      var $inc81=((($93)+(1))|0);
      $y=$inc81;
      __label__ = 15; break;
    case 25: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_fix_outline["X"]=1;

function _shift_bitmap($bm, $shift_x, $shift_y) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $bm_addr;
      var $shift_x_addr;
      var $shift_y_addr;
      var $x;
      var $y;
      var $b;
      var $w;
      var $h;
      var $s;
      var $buf;
      $bm_addr=$bm;
      $shift_x_addr=$shift_x;
      $shift_y_addr=$shift_y;
      var $0=$bm_addr;
      var $w1=(($0+8)|0);
      var $1=HEAP32[(($w1)>>2)];
      $w=$1;
      var $2=$bm_addr;
      var $h2=(($2+12)|0);
      var $3=HEAP32[(($h2)>>2)];
      $h=$3;
      var $4=$bm_addr;
      var $stride=(($4+16)|0);
      var $5=HEAP32[(($stride)>>2)];
      $s=$5;
      var $6=$bm_addr;
      var $buffer=(($6+20)|0);
      var $7=HEAP32[(($buffer)>>2)];
      $buf=$7;
      var $8=$shift_x_addr;
      var $cmp=(($8)|0) > 0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 12; break; }
    case 3: 
      $y=0;
      __label__ = 4; break;
    case 4: 
      var $9=$y;
      var $10=$h;
      var $cmp3=(($9)|0) < (($10)|0);
      if ($cmp3) { __label__ = 5; break; } else { __label__ = 11; break; }
    case 5: 
      var $11=$w;
      var $sub=((($11)-(1))|0);
      $x=$sub;
      __label__ = 6; break;
    case 6: 
      var $12=$x;
      var $cmp5=(($12)|0) > 0;
      if ($cmp5) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $13=$x;
      var $14=$y;
      var $15=$s;
      var $mul=((($14)*($15))|0);
      var $add=((($13)+($mul))|0);
      var $sub7=((($add)-(1))|0);
      var $16=$buf;
      var $arrayidx=(($16+$sub7)|0);
      var $17=HEAPU8[($arrayidx)];
      var $conv=(($17)&255);
      var $18=$shift_x_addr;
      var $mul8=((($conv)*($18))|0);
      var $shr=$mul8 >> 6;
      $b=$shr;
      var $19=$b;
      var $20=$x;
      var $21=$y;
      var $22=$s;
      var $mul9=((($21)*($22))|0);
      var $add10=((($20)+($mul9))|0);
      var $sub11=((($add10)-(1))|0);
      var $23=$buf;
      var $arrayidx12=(($23+$sub11)|0);
      var $24=HEAPU8[($arrayidx12)];
      var $conv13=(($24)&255);
      var $sub14=((($conv13)-($19))|0);
      var $conv15=(($sub14) & 255);
      HEAP8[($arrayidx12)]=$conv15;
      var $25=$b;
      var $26=$x;
      var $27=$y;
      var $28=$s;
      var $mul16=((($27)*($28))|0);
      var $add17=((($26)+($mul16))|0);
      var $29=$buf;
      var $arrayidx18=(($29+$add17)|0);
      var $30=HEAPU8[($arrayidx18)];
      var $conv19=(($30)&255);
      var $add20=((($conv19)+($25))|0);
      var $conv21=(($add20) & 255);
      HEAP8[($arrayidx18)]=$conv21;
      __label__ = 8; break;
    case 8: 
      var $31=$x;
      var $dec=((($31)-(1))|0);
      $x=$dec;
      __label__ = 6; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $32=$y;
      var $inc=((($32)+(1))|0);
      $y=$inc;
      __label__ = 4; break;
    case 11: 
      __label__ = 23; break;
    case 12: 
      var $33=$shift_x_addr;
      var $cmp24=(($33)|0) < 0;
      if ($cmp24) { __label__ = 13; break; } else { __label__ = 22; break; }
    case 13: 
      var $34=$shift_x_addr;
      var $sub27=(((-$34))|0);
      $shift_x_addr=$sub27;
      $y=0;
      __label__ = 14; break;
    case 14: 
      var $35=$y;
      var $36=$h;
      var $cmp29=(($35)|0) < (($36)|0);
      if ($cmp29) { __label__ = 15; break; } else { __label__ = 21; break; }
    case 15: 
      $x=0;
      __label__ = 16; break;
    case 16: 
      var $37=$x;
      var $38=$w;
      var $sub33=((($38)-(1))|0);
      var $cmp34=(($37)|0) < (($sub33)|0);
      if ($cmp34) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 17: 
      var $39=$x;
      var $40=$y;
      var $41=$s;
      var $mul37=((($40)*($41))|0);
      var $add38=((($39)+($mul37))|0);
      var $add39=((($add38)+(1))|0);
      var $42=$buf;
      var $arrayidx40=(($42+$add39)|0);
      var $43=HEAPU8[($arrayidx40)];
      var $conv41=(($43)&255);
      var $44=$shift_x_addr;
      var $mul42=((($conv41)*($44))|0);
      var $shr43=$mul42 >> 6;
      $b=$shr43;
      var $45=$b;
      var $46=$x;
      var $47=$y;
      var $48=$s;
      var $mul44=((($47)*($48))|0);
      var $add45=((($46)+($mul44))|0);
      var $add46=((($add45)+(1))|0);
      var $49=$buf;
      var $arrayidx47=(($49+$add46)|0);
      var $50=HEAPU8[($arrayidx47)];
      var $conv48=(($50)&255);
      var $sub49=((($conv48)-($45))|0);
      var $conv50=(($sub49) & 255);
      HEAP8[($arrayidx47)]=$conv50;
      var $51=$b;
      var $52=$x;
      var $53=$y;
      var $54=$s;
      var $mul51=((($53)*($54))|0);
      var $add52=((($52)+($mul51))|0);
      var $55=$buf;
      var $arrayidx53=(($55+$add52)|0);
      var $56=HEAPU8[($arrayidx53)];
      var $conv54=(($56)&255);
      var $add55=((($conv54)+($51))|0);
      var $conv56=(($add55) & 255);
      HEAP8[($arrayidx53)]=$conv56;
      __label__ = 18; break;
    case 18: 
      var $57=$x;
      var $inc58=((($57)+(1))|0);
      $x=$inc58;
      __label__ = 16; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $58=$y;
      var $inc61=((($58)+(1))|0);
      $y=$inc61;
      __label__ = 14; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $59=$shift_y_addr;
      var $cmp64=(($59)|0) > 0;
      if ($cmp64) { __label__ = 24; break; } else { __label__ = 33; break; }
    case 24: 
      $x=0;
      __label__ = 25; break;
    case 25: 
      var $60=$x;
      var $61=$w;
      var $cmp68=(($60)|0) < (($61)|0);
      if ($cmp68) { __label__ = 26; break; } else { __label__ = 32; break; }
    case 26: 
      var $62=$h;
      var $sub71=((($62)-(1))|0);
      $y=$sub71;
      __label__ = 27; break;
    case 27: 
      var $63=$y;
      var $cmp73=(($63)|0) > 0;
      if ($cmp73) { __label__ = 28; break; } else { __label__ = 30; break; }
    case 28: 
      var $64=$x;
      var $65=$y;
      var $sub76=((($65)-(1))|0);
      var $66=$s;
      var $mul77=((($sub76)*($66))|0);
      var $add78=((($64)+($mul77))|0);
      var $67=$buf;
      var $arrayidx79=(($67+$add78)|0);
      var $68=HEAPU8[($arrayidx79)];
      var $conv80=(($68)&255);
      var $69=$shift_y_addr;
      var $mul81=((($conv80)*($69))|0);
      var $shr82=$mul81 >> 6;
      $b=$shr82;
      var $70=$b;
      var $71=$x;
      var $72=$y;
      var $sub83=((($72)-(1))|0);
      var $73=$s;
      var $mul84=((($sub83)*($73))|0);
      var $add85=((($71)+($mul84))|0);
      var $74=$buf;
      var $arrayidx86=(($74+$add85)|0);
      var $75=HEAPU8[($arrayidx86)];
      var $conv87=(($75)&255);
      var $sub88=((($conv87)-($70))|0);
      var $conv89=(($sub88) & 255);
      HEAP8[($arrayidx86)]=$conv89;
      var $76=$b;
      var $77=$x;
      var $78=$y;
      var $79=$s;
      var $mul90=((($78)*($79))|0);
      var $add91=((($77)+($mul90))|0);
      var $80=$buf;
      var $arrayidx92=(($80+$add91)|0);
      var $81=HEAPU8[($arrayidx92)];
      var $conv93=(($81)&255);
      var $add94=((($conv93)+($76))|0);
      var $conv95=(($add94) & 255);
      HEAP8[($arrayidx92)]=$conv95;
      __label__ = 29; break;
    case 29: 
      var $82=$y;
      var $dec97=((($82)-(1))|0);
      $y=$dec97;
      __label__ = 27; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      var $83=$x;
      var $inc100=((($83)+(1))|0);
      $x=$inc100;
      __label__ = 25; break;
    case 32: 
      __label__ = 44; break;
    case 33: 
      var $84=$shift_y_addr;
      var $cmp103=(($84)|0) < 0;
      if ($cmp103) { __label__ = 34; break; } else { __label__ = 43; break; }
    case 34: 
      var $85=$shift_y_addr;
      var $sub106=(((-$85))|0);
      $shift_y_addr=$sub106;
      $x=0;
      __label__ = 35; break;
    case 35: 
      var $86=$x;
      var $87=$w;
      var $cmp108=(($86)|0) < (($87)|0);
      if ($cmp108) { __label__ = 36; break; } else { __label__ = 42; break; }
    case 36: 
      $y=0;
      __label__ = 37; break;
    case 37: 
      var $88=$y;
      var $89=$h;
      var $sub112=((($89)-(1))|0);
      var $cmp113=(($88)|0) < (($sub112)|0);
      if ($cmp113) { __label__ = 38; break; } else { __label__ = 40; break; }
    case 38: 
      var $90=$x;
      var $91=$y;
      var $add116=((($91)+(1))|0);
      var $92=$s;
      var $mul117=((($add116)*($92))|0);
      var $add118=((($90)+($mul117))|0);
      var $93=$buf;
      var $arrayidx119=(($93+$add118)|0);
      var $94=HEAPU8[($arrayidx119)];
      var $conv120=(($94)&255);
      var $95=$shift_y_addr;
      var $mul121=((($conv120)*($95))|0);
      var $shr122=$mul121 >> 6;
      $b=$shr122;
      var $96=$b;
      var $97=$x;
      var $98=$y;
      var $add123=((($98)+(1))|0);
      var $99=$s;
      var $mul124=((($add123)*($99))|0);
      var $add125=((($97)+($mul124))|0);
      var $100=$buf;
      var $arrayidx126=(($100+$add125)|0);
      var $101=HEAPU8[($arrayidx126)];
      var $conv127=(($101)&255);
      var $sub128=((($conv127)-($96))|0);
      var $conv129=(($sub128) & 255);
      HEAP8[($arrayidx126)]=$conv129;
      var $102=$b;
      var $103=$x;
      var $104=$y;
      var $105=$s;
      var $mul130=((($104)*($105))|0);
      var $add131=((($103)+($mul130))|0);
      var $106=$buf;
      var $arrayidx132=(($106+$add131)|0);
      var $107=HEAPU8[($arrayidx132)];
      var $conv133=(($107)&255);
      var $add134=((($conv133)+($102))|0);
      var $conv135=(($add134) & 255);
      HEAP8[($arrayidx132)]=$conv135;
      __label__ = 39; break;
    case 39: 
      var $108=$y;
      var $inc137=((($108)+(1))|0);
      $y=$inc137;
      __label__ = 37; break;
    case 40: 
      __label__ = 41; break;
    case 41: 
      var $109=$x;
      var $inc140=((($109)+(1))|0);
      $x=$inc140;
      __label__ = 35; break;
    case 42: 
      __label__ = 43; break;
    case 43: 
      __label__ = 44; break;
    case 44: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_shift_bitmap["X"]=1;

function _ass_set_extract_fonts($priv, $extract) {
  ;
  var __label__;

  var $priv_addr;
  var $extract_addr;
  $priv_addr=$priv;
  $extract_addr=$extract;
  var $0=$extract_addr;
  var $tobool=(($0)|0)!=0;
  var $lnot=$tobool ^ 1;
  var $lnot1=$lnot ^ 1;
  var $lnot_ext=(($lnot1)&1);
  var $1=$priv_addr;
  var $extract_fonts=(($1+4)|0);
  HEAP32[(($extract_fonts)>>2)]=$lnot_ext;
  ;
  return;
}


function _ass_library_init() {
  ;
  var __label__;

  var $lib;
  var $call=_calloc(1, 28);
  var $0=$call;
  $lib=$0;
  var $1=$lib;
  var $msg_callback=(($1+20)|0);
  HEAP32[(($msg_callback)>>2)]=42;
  var $2=$lib;
  ;
  return $2;
}


function _ass_msg_handler($level, $fmt, $va, $data) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $level_addr;
      var $fmt_addr;
      var $va_addr;
      var $data_addr;
      $level_addr=$level;
      $fmt_addr=$fmt;
      $va_addr=$va;
      $data_addr=$data;
      var $0=$level_addr;
      var $cmp=(($0)|0) > 4;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      var $1=HEAP32[((_stderr)>>2)];
      var $call=_fprintf($1, ((STRING_TABLE.__str201)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $2=HEAP32[((_stderr)>>2)];
      var $3=$fmt_addr;
      var $4=$va_addr;
      var $call1=_vfprintf($2, $3, $4);
      var $5=HEAP32[((_stderr)>>2)];
      var $call2=_fprintf($5, ((STRING_TABLE.__str1202)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _ass_library_done($priv) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $priv_addr;
      $priv_addr=$priv;
      var $0=$priv_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $1=$priv_addr;
      _ass_set_fonts_dir($1, 0);
      var $2=$priv_addr;
      _ass_set_style_overrides($2, 0);
      var $3=$priv_addr;
      _ass_clear_fonts($3);
      var $4=$priv_addr;
      var $5=$4;
      _free($5);
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _ass_set_fonts_dir($priv, $fonts_dir) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $priv_addr;
      var $fonts_dir_addr;
      $priv_addr=$priv;
      $fonts_dir_addr=$fonts_dir;
      var $0=$priv_addr;
      var $fonts_dir1=(($0)|0);
      var $1=HEAP32[(($fonts_dir1)>>2)];
      _free($1);
      var $2=$fonts_dir_addr;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $3=$fonts_dir_addr;
      var $call=_strdup($3);
      var $cond = $call;__label__ = 5; break;
    case 4: 
      var $cond = 0;__label__ = 5; break;
    case 5: 
      var $cond;
      var $4=$priv_addr;
      var $fonts_dir2=(($4)|0);
      HEAP32[(($fonts_dir2)>>2)]=$cond;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _ass_set_style_overrides($priv, $list) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $priv_addr;
      var $list_addr;
      var $p;
      var $q;
      var $cnt;
      $priv_addr=$priv;
      $list_addr=$list;
      var $0=$priv_addr;
      var $style_overrides=(($0+8)|0);
      var $1=HEAP32[(($style_overrides)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 8; break; }
    case 3: 
      var $2=$priv_addr;
      var $style_overrides1=(($2+8)|0);
      var $3=HEAP32[(($style_overrides1)>>2)];
      $p=$3;
      __label__ = 4; break;
    case 4: 
      var $4=$p;
      var $5=HEAP32[(($4)>>2)];
      var $tobool2=(($5)|0)!=0;
      if ($tobool2) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $6=$p;
      var $7=HEAP32[(($6)>>2)];
      _free($7);
      __label__ = 6; break;
    case 6: 
      var $8=$p;
      var $incdec_ptr=(($8+4)|0);
      $p=$incdec_ptr;
      __label__ = 4; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $9=$priv_addr;
      var $style_overrides3=(($9+8)|0);
      var $10=HEAP32[(($style_overrides3)>>2)];
      var $11=$10;
      _free($11);
      var $12=$priv_addr;
      var $style_overrides4=(($12+8)|0);
      HEAP32[(($style_overrides4)>>2)]=0;
      var $13=$list_addr;
      var $tobool5=(($13)|0)!=0;
      if ($tobool5) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      __label__ = 19; break;
    case 10: 
      var $14=$list_addr;
      $p=$14;
      $cnt=0;
      __label__ = 11; break;
    case 11: 
      var $15=$p;
      var $16=HEAP32[(($15)>>2)];
      var $tobool9=(($16)|0)!=0;
      if ($tobool9) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $17=$p;
      var $incdec_ptr12=(($17+4)|0);
      $p=$incdec_ptr12;
      var $18=$cnt;
      var $inc=((($18)+(1))|0);
      $cnt=$inc;
      __label__ = 11; break;
    case 14: 
      var $19=$cnt;
      var $add=((($19)+(1))|0);
      var $mul=((($add<<2))|0);
      var $call=_malloc($mul);
      var $20=$call;
      var $21=$priv_addr;
      var $style_overrides14=(($21+8)|0);
      HEAP32[(($style_overrides14)>>2)]=$20;
      var $22=$list_addr;
      $p=$22;
      var $23=$priv_addr;
      var $style_overrides15=(($23+8)|0);
      var $24=HEAP32[(($style_overrides15)>>2)];
      $q=$24;
      __label__ = 15; break;
    case 15: 
      var $25=$p;
      var $26=HEAP32[(($25)>>2)];
      var $tobool17=(($26)|0)!=0;
      if ($tobool17) { __label__ = 16; break; } else { __label__ = 18; break; }
    case 16: 
      var $27=$p;
      var $28=HEAP32[(($27)>>2)];
      var $call19=_strdup($28);
      var $29=$q;
      HEAP32[(($29)>>2)]=$call19;
      __label__ = 17; break;
    case 17: 
      var $30=$p;
      var $incdec_ptr21=(($30+4)|0);
      $p=$incdec_ptr21;
      var $31=$q;
      var $incdec_ptr22=(($31+4)|0);
      $q=$incdec_ptr22;
      __label__ = 15; break;
    case 18: 
      var $32=$cnt;
      var $33=$priv_addr;
      var $style_overrides24=(($33+8)|0);
      var $34=HEAP32[(($style_overrides24)>>2)];
      var $arrayidx=(($34+($32<<2))|0);
      HEAP32[(($arrayidx)>>2)]=0;
      __label__ = 19; break;
    case 19: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_set_style_overrides["X"]=1;

function _ass_clear_fonts($priv) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $priv_addr;
      var $i;
      $priv_addr=$priv;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $0=$i;
      var $1=$priv_addr;
      var $num_fontdata=(($1+16)|0);
      var $2=HEAP32[(($num_fontdata)>>2)];
      var $cmp=(($0)|0) < (($2)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $3=$i;
      var $4=$priv_addr;
      var $fontdata=(($4+12)|0);
      var $5=HEAP32[(($fontdata)>>2)];
      var $arrayidx=(($5+($3)*(12))|0);
      var $name=(($arrayidx)|0);
      var $6=HEAP32[(($name)>>2)];
      _free($6);
      var $7=$i;
      var $8=$priv_addr;
      var $fontdata1=(($8+12)|0);
      var $9=HEAP32[(($fontdata1)>>2)];
      var $arrayidx2=(($9+($7)*(12))|0);
      var $data=(($arrayidx2+4)|0);
      var $10=HEAP32[(($data)>>2)];
      _free($10);
      __label__ = 5; break;
    case 5: 
      var $11=$i;
      var $inc=((($11)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 6: 
      var $12=$priv_addr;
      var $fontdata3=(($12+12)|0);
      var $13=HEAP32[(($fontdata3)>>2)];
      var $14=$13;
      _free($14);
      var $15=$priv_addr;
      var $fontdata4=(($15+12)|0);
      HEAP32[(($fontdata4)>>2)]=0;
      var $16=$priv_addr;
      var $num_fontdata5=(($16+16)|0);
      HEAP32[(($num_fontdata5)>>2)]=0;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _ass_set_message_cb($priv, $msg_cb, $data) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $priv_addr;
      var $msg_cb_addr;
      var $data_addr;
      $priv_addr=$priv;
      $msg_cb_addr=$msg_cb;
      $data_addr=$data;
      var $0=$msg_cb_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $1=$msg_cb_addr;
      var $2=$priv_addr;
      var $msg_callback=(($2+20)|0);
      HEAP32[(($msg_callback)>>2)]=$1;
      var $3=$data_addr;
      var $4=$priv_addr;
      var $msg_callback_data=(($4+24)|0);
      HEAP32[(($msg_callback_data)>>2)]=$3;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _fnv_32a_str214($str, $hval) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $str_addr;
      var $hval_addr;
      var $s;
      $str_addr=$str;
      $hval_addr=$hval;
      var $0=$str_addr;
      $s=$0;
      __label__ = 3; break;
    case 3: 
      var $1=$s;
      var $2=HEAP8[($1)];
      var $tobool=(($2 << 24) >> 24)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $3=$s;
      var $incdec_ptr=(($3+1)|0);
      $s=$incdec_ptr;
      var $4=HEAPU8[($3)];
      var $conv=(($4)&255);
      var $5=$hval_addr;
      var $xor=$5 ^ $conv;
      $hval_addr=$xor;
      var $6=$hval_addr;
      var $shl=$6 << 1;
      var $7=$hval_addr;
      var $shl1=$7 << 4;
      var $add=((($shl)+($shl1))|0);
      var $8=$hval_addr;
      var $shl2=$8 << 7;
      var $add3=((($add)+($shl2))|0);
      var $9=$hval_addr;
      var $shl4=$9 << 8;
      var $add5=((($add3)+($shl4))|0);
      var $10=$hval_addr;
      var $shl6=$10 << 24;
      var $add7=((($add5)+($shl6))|0);
      var $11=$hval_addr;
      var $add8=((($11)+($add7))|0);
      $hval_addr=$add8;
      __label__ = 3; break;
    case 5: 
      var $12=$hval_addr;
      ;
      return $12;
    default: assert(0, "bad label: " + __label__);
  }
}


function _drawing_prepare($drawing) {
  ;
  var __label__;

  var $drawing_addr;
  $drawing_addr=$drawing;
  var $0=$drawing_addr;
  var $scale_x=(($0+20)|0);
  var $1=(tempDoubleI32[0]=HEAP32[(($scale_x)>>2)],tempDoubleI32[1]=HEAP32[((($scale_x)+(4))>>2)],tempDoubleF64[0]);
  var $mul=($1)*(64);
  var $2=$drawing_addr;
  var $scale=(($2+8)|0);
  var $3=HEAP32[(($scale)>>2)];
  var $sub=((($3)-(1))|0);
  var $shl=1 << $sub;
  var $conv=(($shl)|0);
  var $div=($mul)/($conv);
  var $4=$drawing_addr;
  var $point_scale_x=(($4+100)|0);
  (tempDoubleF64[0]=$div,HEAP32[(($point_scale_x)>>2)]=tempDoubleI32[0],HEAP32[((($point_scale_x)+(4))>>2)]=tempDoubleI32[1]);
  var $5=$drawing_addr;
  var $scale_y=(($5+28)|0);
  var $6=(tempDoubleI32[0]=HEAP32[(($scale_y)>>2)],tempDoubleI32[1]=HEAP32[((($scale_y)+(4))>>2)],tempDoubleF64[0]);
  var $mul1=($6)*(64);
  var $7=$drawing_addr;
  var $scale2=(($7+8)|0);
  var $8=HEAP32[(($scale2)>>2)];
  var $sub3=((($8)-(1))|0);
  var $shl4=1 << $sub3;
  var $conv5=(($shl4)|0);
  var $div6=($mul1)/($conv5);
  var $9=$drawing_addr;
  var $point_scale_y=(($9+108)|0);
  (tempDoubleF64[0]=$div6,HEAP32[(($point_scale_y)>>2)]=tempDoubleI32[0],HEAP32[((($point_scale_y)+(4))>>2)]=tempDoubleI32[1]);
  ;
  return;
}


function _ass_add_font($priv, $name, $data, $size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $priv_addr;
      var $name_addr;
      var $data_addr;
      var $size_addr;
      var $idx;
      $priv_addr=$priv;
      $name_addr=$name;
      $data_addr=$data;
      $size_addr=$size;
      var $0=$priv_addr;
      var $num_fontdata=(($0+16)|0);
      var $1=HEAP32[(($num_fontdata)>>2)];
      $idx=$1;
      var $2=$name_addr;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $3=$data_addr;
      var $tobool1=(($3)|0)!=0;
      if ($tobool1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $4=$size_addr;
      var $tobool3=(($4)|0)!=0;
      if ($tobool3) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      __label__ = 7; break;
    case 6: 
      var $5=$priv_addr;
      var $fontdata=(($5+12)|0);
      var $6=$fontdata;
      var $7=$priv_addr;
      var $num_fontdata4=(($7+16)|0);
      var $8=HEAP32[(($num_fontdata4)>>2)];
      _grow_array($6, $8, 12);
      var $9=$name_addr;
      var $call=_strdup($9);
      var $10=$idx;
      var $11=$priv_addr;
      var $fontdata5=(($11+12)|0);
      var $12=HEAP32[(($fontdata5)>>2)];
      var $arrayidx=(($12+($10)*(12))|0);
      var $name6=(($arrayidx)|0);
      HEAP32[(($name6)>>2)]=$call;
      var $13=$size_addr;
      var $call7=_malloc($13);
      var $14=$idx;
      var $15=$priv_addr;
      var $fontdata8=(($15+12)|0);
      var $16=HEAP32[(($fontdata8)>>2)];
      var $arrayidx9=(($16+($14)*(12))|0);
      var $data10=(($arrayidx9+4)|0);
      HEAP32[(($data10)>>2)]=$call7;
      var $17=$idx;
      var $18=$priv_addr;
      var $fontdata11=(($18+12)|0);
      var $19=HEAP32[(($fontdata11)>>2)];
      var $arrayidx12=(($19+($17)*(12))|0);
      var $data13=(($arrayidx12+4)|0);
      var $20=HEAP32[(($data13)>>2)];
      var $21=$data_addr;
      var $22=$size_addr;
      assert($22 % 1 === 0, 'memcpy given ' + $22 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($20, $21, $22, 1);
      var $23=$size_addr;
      var $24=$idx;
      var $25=$priv_addr;
      var $fontdata14=(($25+12)|0);
      var $26=HEAP32[(($fontdata14)>>2)];
      var $arrayidx15=(($26+($24)*(12))|0);
      var $size16=(($arrayidx15+8)|0);
      HEAP32[(($size16)>>2)]=$23;
      var $27=$priv_addr;
      var $num_fontdata17=(($27+16)|0);
      var $28=HEAP32[(($num_fontdata17)>>2)];
      var $inc=((($28)+(1))|0);
      HEAP32[(($num_fontdata17)>>2)]=$inc;
      __label__ = 7; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_add_font["X"]=1;

function _grow_array($array, $nelem, $elsize) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $array_addr;
      var $nelem_addr;
      var $elsize_addr;
      $array_addr=$array;
      $nelem_addr=$nelem;
      $elsize_addr=$elsize;
      var $0=$nelem_addr;
      var $and=$0 & 31;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $1=$array_addr;
      var $2=HEAP32[(($1)>>2)];
      var $3=$nelem_addr;
      var $add=((($3)+(32))|0);
      var $4=$elsize_addr;
      var $mul=((($add)*($4))|0);
      var $call=_realloc($2, $mul);
      var $5=$array_addr;
      HEAP32[(($5)>>2)]=$call;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _ass_drawing_new($lib, $ftlib) {
  ;
  var __label__;

  var $lib_addr;
  var $ftlib_addr;
  var $drawing;
  $lib_addr=$lib;
  $ftlib_addr=$ftlib;
  var $call=_calloc(1, 132);
  var $0=$call;
  $drawing=$0;
  var $call1=_calloc(1, 256);
  var $1=$drawing;
  var $text=(($1)|0);
  HEAP32[(($text)>>2)]=$call1;
  var $2=$drawing;
  var $size=(($2+84)|0);
  HEAP32[(($size)>>2)]=256;
  var $3=$drawing;
  var $cbox=(($3+116)|0);
  var $yMin=(($cbox+4)|0);
  HEAP32[(($yMin)>>2)]=2147483647;
  var $4=$drawing;
  var $cbox2=(($4+116)|0);
  var $xMin=(($cbox2)|0);
  HEAP32[(($xMin)>>2)]=2147483647;
  var $5=$drawing;
  var $cbox3=(($5+116)|0);
  var $yMax=(($cbox3+12)|0);
  HEAP32[(($yMax)>>2)]=-2147483648;
  var $6=$drawing;
  var $cbox4=(($6+116)|0);
  var $xMax=(($cbox4+8)|0);
  HEAP32[(($xMax)>>2)]=-2147483648;
  var $7=$ftlib_addr;
  var $8=$drawing;
  var $ftlibrary=(($8+76)|0);
  HEAP32[(($ftlibrary)>>2)]=$7;
  var $9=$lib_addr;
  var $10=$drawing;
  var $library=(($10+80)|0);
  HEAP32[(($library)>>2)]=$9;
  var $11=$drawing;
  var $scale_x=(($11+20)|0);
  (tempDoubleF64[0]=1,HEAP32[(($scale_x)>>2)]=tempDoubleI32[0],HEAP32[((($scale_x)+(4))>>2)]=tempDoubleI32[1]);
  var $12=$drawing;
  var $scale_y=(($12+28)|0);
  (tempDoubleF64[0]=1,HEAP32[(($scale_y)>>2)]=tempDoubleI32[0],HEAP32[((($scale_y)+(4))>>2)]=tempDoubleI32[1]);
  var $13=$drawing;
  var $max_contours=(($13+96)|0);
  HEAP32[(($max_contours)>>2)]=5;
  var $14=$drawing;
  var $max_points=(($14+92)|0);
  HEAP32[(($max_points)>>2)]=100;
  var $15=$drawing;
  var $ftlibrary5=(($15+76)|0);
  var $16=HEAP32[(($ftlibrary5)>>2)];
  var $17=$drawing;
  var $outline=(($17+44)|0);
  var $call6=_FT_Outline_New($16, 100, 5, $outline);
  var $18=$drawing;
  var $outline7=(($18+44)|0);
  var $n_contours=(($outline7)|0);
  HEAP16[(($n_contours)>>1)]=0;
  var $19=$drawing;
  var $outline8=(($19+44)|0);
  var $n_points=(($outline8+2)|0);
  HEAP16[(($n_points)>>1)]=0;
  var $20=$drawing;
  ;
  return $20;
}
_ass_drawing_new["X"]=1;

function _ass_drawing_free($drawing) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $drawing_addr;
      $drawing_addr=$drawing;
      var $0=$drawing_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $1=$drawing_addr;
      var $text=(($1)|0);
      var $2=HEAP32[(($text)>>2)];
      _free($2);
      var $3=$drawing_addr;
      var $ftlibrary=(($3+76)|0);
      var $4=HEAP32[(($ftlibrary)>>2)];
      var $5=$drawing_addr;
      var $outline=(($5+44)|0);
      var $call=_FT_Outline_Done($4, $outline);
      __label__ = 4; break;
    case 4: 
      var $6=$drawing_addr;
      var $7=$6;
      _free($7);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _ass_drawing_add_char($drawing, $symbol) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $drawing_addr;
      var $symbol_addr;
      $drawing_addr=$drawing;
      $symbol_addr=$symbol;
      var $0=$symbol_addr;
      var $1=$drawing_addr;
      var $i=(($1+4)|0);
      var $2=HEAP32[(($i)>>2)];
      var $inc=((($2)+(1))|0);
      HEAP32[(($i)>>2)]=$inc;
      var $3=$drawing_addr;
      var $text=(($3)|0);
      var $4=HEAP32[(($text)>>2)];
      var $arrayidx=(($4+$2)|0);
      HEAP8[($arrayidx)]=$0;
      var $5=$drawing_addr;
      var $i1=(($5+4)|0);
      var $6=HEAP32[(($i1)>>2)];
      var $7=$drawing_addr;
      var $text2=(($7)|0);
      var $8=HEAP32[(($text2)>>2)];
      var $arrayidx3=(($8+$6)|0);
      HEAP8[($arrayidx3)]=0;
      var $9=$drawing_addr;
      var $i4=(($9+4)|0);
      var $10=HEAP32[(($i4)>>2)];
      var $add=((($10)+(1))|0);
      var $11=$drawing_addr;
      var $size=(($11+84)|0);
      var $12=HEAP32[(($size)>>2)];
      var $cmp=(($add)|0) >= (($12)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $13=$drawing_addr;
      var $size5=(($13+84)|0);
      var $14=HEAP32[(($size5)>>2)];
      var $mul=((($14<<1))|0);
      HEAP32[(($size5)>>2)]=$mul;
      var $15=$drawing_addr;
      var $text6=(($15)|0);
      var $16=HEAP32[(($text6)>>2)];
      var $17=$drawing_addr;
      var $size7=(($17+84)|0);
      var $18=HEAP32[(($size7)>>2)];
      var $call=_realloc($16, $18);
      var $19=$drawing_addr;
      var $text8=(($19)|0);
      HEAP32[(($text8)>>2)]=$call;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _ass_drawing_hash($drawing) {
  ;
  var __label__;

  var $drawing_addr;
  $drawing_addr=$drawing;
  var $0=$drawing_addr;
  var $text=(($0)|0);
  var $1=HEAP32[(($text)>>2)];
  var $call=_fnv_32a_str214($1, -2128831035);
  var $2=$drawing_addr;
  var $hash=(($2+72)|0);
  HEAP32[(($hash)>>2)]=$call;
  ;
  return;
}


function _ass_drawing_parse($drawing, $raw_mode) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $drawing_addr;
      var $raw_mode_addr;
      var $started;
      var $token;
      var $pen=__stackBase__;
      var $to=(__stackBase__)+(8);
      $drawing_addr=$drawing;
      $raw_mode_addr=$raw_mode;
      $started=0;
      var $0=$pen;
      HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0;
      var $1=$drawing_addr;
      var $text=(($1)|0);
      var $2=HEAP32[(($text)>>2)];
      var $call=_drawing_tokenize($2);
      var $3=$drawing_addr;
      var $tokens=(($3+88)|0);
      HEAP32[(($tokens)>>2)]=$call;
      var $4=$drawing_addr;
      _drawing_prepare($4);
      var $5=$drawing_addr;
      var $tokens1=(($5+88)|0);
      var $6=HEAP32[(($tokens1)>>2)];
      $token=$6;
      __label__ = 3; break;
    case 3: 
      var $7=$token;
      var $tobool=(($7)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 24; break; }
    case 4: 
      var $8=$token;
      var $type=(($8)|0);
      var $9=HEAP32[(($type)>>2)];
      if ((($9)|0) == 1) {
        __label__ = 5; break;
      }
      else if ((($9)|0) == 0) {
        __label__ = 6; break;
      }
      else if ((($9)|0) == 2) {
        __label__ = 9; break;
      }
      else if ((($9)|0) == 3) {
        __label__ = 12; break;
      }
      else if ((($9)|0) == 5) {
        __label__ = 17; break;
      }
      else {
      __label__ = 22; break;
      }
      
    case 5: 
      var $10=$token;
      var $point=(($10+4)|0);
      var $11=$pen;
      var $12=$point;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($11)>>2)]=HEAP32[(($12)>>2)];HEAP32[((($11)+(4))>>2)]=HEAP32[((($12)+(4))>>2)];
      var $13=$drawing_addr;
      _translate_point($13, $pen);
      var $14=$token;
      var $next=(($14+12)|0);
      var $15=HEAP32[(($next)>>2)];
      $token=$15;
      __label__ = 23; break;
    case 6: 
      var $16=$token;
      var $point3=(($16+4)|0);
      var $17=$pen;
      var $18=$point3;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($17)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($17)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];
      var $19=$drawing_addr;
      _translate_point($19, $pen);
      var $20=$started;
      var $tobool4=(($20)|0)!=0;
      if ($tobool4) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $21=$drawing_addr;
      _drawing_close_shape($21);
      $started=0;
      __label__ = 8; break;
    case 8: 
      var $22=$token;
      var $next5=(($22+12)|0);
      var $23=HEAP32[(($next5)>>2)];
      $token=$23;
      __label__ = 23; break;
    case 9: 
      var $24=$token;
      var $point7=(($24+4)|0);
      var $25=$to;
      var $26=$point7;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($25)>>2)]=HEAP32[(($26)>>2)];HEAP32[((($25)+(4))>>2)]=HEAP32[((($26)+(4))>>2)];
      var $27=$drawing_addr;
      _translate_point($27, $to);
      var $28=$started;
      var $tobool8=(($28)|0)!=0;
      if ($tobool8) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $29=$drawing_addr;
      _drawing_add_point($29, $pen);
      __label__ = 11; break;
    case 11: 
      var $30=$drawing_addr;
      _drawing_add_point($30, $to);
      $started=1;
      var $31=$token;
      var $next11=(($31+12)|0);
      var $32=HEAP32[(($next11)>>2)];
      $token=$32;
      __label__ = 23; break;
    case 12: 
      var $33=$token;
      var $call13=_token_check_values($33, 3, 3);
      var $tobool14=(($call13)|0)!=0;
      if ($tobool14) { __label__ = 13; break; } else { __label__ = 15; break; }
    case 13: 
      var $34=$token;
      var $prev=(($34+16)|0);
      var $35=HEAP32[(($prev)>>2)];
      var $tobool15=(($35)|0)!=0;
      if ($tobool15) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $36=$drawing_addr;
      var $37=$token;
      var $prev17=(($37+16)|0);
      var $38=HEAP32[(($prev17)>>2)];
      var $39=$started;
      _drawing_evaluate_curve($36, $38, 0, $39);
      var $40=$token;
      var $next18=(($40+12)|0);
      var $41=HEAP32[(($next18)>>2)];
      $token=$41;
      var $42=$token;
      var $next19=(($42+12)|0);
      var $43=HEAP32[(($next19)>>2)];
      $token=$43;
      var $44=$token;
      var $next20=(($44+12)|0);
      var $45=HEAP32[(($next20)>>2)];
      $token=$45;
      $started=1;
      __label__ = 16; break;
    case 15: 
      var $46=$token;
      var $next21=(($46+12)|0);
      var $47=HEAP32[(($next21)>>2)];
      $token=$47;
      __label__ = 16; break;
    case 16: 
      __label__ = 23; break;
    case 17: 
      var $48=$token;
      var $call24=_token_check_values($48, 3, 5);
      var $tobool25=(($call24)|0)!=0;
      if ($tobool25) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: 
      var $49=$token;
      var $prev27=(($49+16)|0);
      var $50=HEAP32[(($prev27)>>2)];
      var $tobool28=(($50)|0)!=0;
      if ($tobool28) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $51=$drawing_addr;
      var $52=$token;
      var $prev30=(($52+16)|0);
      var $53=HEAP32[(($prev30)>>2)];
      var $54=$started;
      _drawing_evaluate_curve($51, $53, 1, $54);
      var $55=$token;
      var $next31=(($55+12)|0);
      var $56=HEAP32[(($next31)>>2)];
      $token=$56;
      $started=1;
      __label__ = 21; break;
    case 20: 
      var $57=$token;
      var $next33=(($57+12)|0);
      var $58=HEAP32[(($next33)>>2)];
      $token=$58;
      __label__ = 21; break;
    case 21: 
      __label__ = 23; break;
    case 22: 
      var $59=$token;
      var $next35=(($59+12)|0);
      var $60=HEAP32[(($next35)>>2)];
      $token=$60;
      __label__ = 23; break;
    case 23: 
      __label__ = 3; break;
    case 24: 
      var $61=$drawing_addr;
      var $62=$raw_mode_addr;
      _drawing_finish($61, $62);
      var $63=$drawing_addr;
      var $tokens36=(($63+88)|0);
      var $64=HEAP32[(($tokens36)>>2)];
      _drawing_free_tokens($64);
      var $65=$drawing_addr;
      var $outline=(($65+44)|0);
      STACKTOP = __stackBase__;
      return $outline;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_drawing_parse["X"]=1;

function _drawing_tokenize($str) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $str_addr;
      var $p=__stackBase__;
      var $i;
      var $val=(__stackBase__)+(4);
      var $type;
      var $is_set;
      var $point=(__stackBase__)+(8);
      var $root;
      var $tail;
      var $spline_start;
      $str_addr=$str;
      var $0=$str_addr;
      HEAP32[(($p)>>2)]=$0;
      $type=-1;
      $is_set=0;
      var $1=$point;
      HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0;
      $root=0;
      $tail=0;
      $spline_start=0;
      __label__ = 3; break;
    case 3: 
      var $2=HEAP32[(($p)>>2)];
      var $3=HEAP8[($2)];
      var $tobool=(($3 << 24) >> 24)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 49; break; }
    case 4: 
      var $4=HEAP32[(($p)>>2)];
      var $5=HEAP8[($4)];
      var $conv=(($5 << 24) >> 24);
      var $cmp=(($conv)|0)==99;
      if ($cmp) { __label__ = 5; break; } else { __label__ = 13; break; }
    case 5: 
      var $6=$spline_start;
      var $tobool2=(($6)|0)!=0;
      if ($tobool2) { __label__ = 6; break; } else { __label__ = 13; break; }
    case 6: 
      var $7=$spline_start;
      var $next=(($7+12)|0);
      var $8=HEAP32[(($next)>>2)];
      var $call=_token_check_values($8, 2, 5);
      var $tobool3=(($call)|0)!=0;
      if ($tobool3) { __label__ = 7; break; } else { __label__ = 12; break; }
    case 7: 
      $i=0;
      __label__ = 8; break;
    case 8: 
      var $9=$i;
      var $cmp5=(($9)|0) < 3;
      if ($cmp5) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $call7=_calloc(1, 20);
      var $10=$call7;
      var $11=$tail;
      var $next8=(($11+12)|0);
      HEAP32[(($next8)>>2)]=$10;
      var $12=$tail;
      var $13=$tail;
      var $next9=(($13+12)|0);
      var $14=HEAP32[(($next9)>>2)];
      var $prev=(($14+16)|0);
      HEAP32[(($prev)>>2)]=$12;
      var $15=$tail;
      var $next10=(($15+12)|0);
      var $16=HEAP32[(($next10)>>2)];
      $tail=$16;
      var $17=$tail;
      var $type11=(($17)|0);
      HEAP32[(($type11)>>2)]=5;
      var $18=$tail;
      var $point12=(($18+4)|0);
      var $19=$spline_start;
      var $point13=(($19+4)|0);
      var $20=$point12;
      var $21=$point13;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($20)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($20)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];
      var $22=$spline_start;
      var $next14=(($22+12)|0);
      var $23=HEAP32[(($next14)>>2)];
      $spline_start=$23;
      __label__ = 10; break;
    case 10: 
      var $24=$i;
      var $inc=((($24)+(1))|0);
      $i=$inc;
      __label__ = 8; break;
    case 11: 
      $spline_start=0;
      __label__ = 12; break;
    case 12: 
      __label__ = 39; break;
    case 13: 
      var $25=$is_set;
      var $tobool15=(($25)|0)!=0;
      if ($tobool15) { __label__ = 16; break; } else { __label__ = 14; break; }
    case 14: 
      var $call17=_mystrtoi($p, $val);
      var $tobool18=(($call17)|0)!=0;
      if ($tobool18) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $26=HEAP32[(($val)>>2)];
      var $x=(($point)|0);
      HEAP32[(($x)>>2)]=$26;
      $is_set=1;
      var $27=HEAP32[(($p)>>2)];
      var $incdec_ptr=((($27)-(1))|0);
      HEAP32[(($p)>>2)]=$incdec_ptr;
      __label__ = 38; break;
    case 16: 
      var $28=$is_set;
      var $cmp21=(($28)|0)==1;
      if ($cmp21) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 17: 
      var $call24=_mystrtoi($p, $val);
      var $tobool25=(($call24)|0)!=0;
      if ($tobool25) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $29=HEAP32[(($val)>>2)];
      var $y=(($point+4)|0);
      HEAP32[(($y)>>2)]=$29;
      $is_set=2;
      var $30=HEAP32[(($p)>>2)];
      var $incdec_ptr27=((($30)-(1))|0);
      HEAP32[(($p)>>2)]=$incdec_ptr27;
      __label__ = 37; break;
    case 19: 
      var $31=HEAP32[(($p)>>2)];
      var $32=HEAP8[($31)];
      var $conv29=(($32 << 24) >> 24);
      var $cmp30=(($conv29)|0)==109;
      if ($cmp30) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      $type=0;
      __label__ = 36; break;
    case 21: 
      var $33=HEAP32[(($p)>>2)];
      var $34=HEAP8[($33)];
      var $conv34=(($34 << 24) >> 24);
      var $cmp35=(($conv34)|0)==110;
      if ($cmp35) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      $type=1;
      __label__ = 35; break;
    case 23: 
      var $35=HEAP32[(($p)>>2)];
      var $36=HEAP8[($35)];
      var $conv39=(($36 << 24) >> 24);
      var $cmp40=(($conv39)|0)==108;
      if ($cmp40) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      $type=2;
      __label__ = 34; break;
    case 25: 
      var $37=HEAP32[(($p)>>2)];
      var $38=HEAP8[($37)];
      var $conv44=(($38 << 24) >> 24);
      var $cmp45=(($conv44)|0)==98;
      if ($cmp45) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      $type=3;
      __label__ = 33; break;
    case 27: 
      var $39=HEAP32[(($p)>>2)];
      var $40=HEAP8[($39)];
      var $conv49=(($40 << 24) >> 24);
      var $cmp50=(($conv49)|0)==113;
      if ($cmp50) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      $type=4;
      __label__ = 32; break;
    case 29: 
      var $41=HEAP32[(($p)>>2)];
      var $42=HEAP8[($41)];
      var $conv54=(($42 << 24) >> 24);
      var $cmp55=(($conv54)|0)==115;
      if ($cmp55) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      $type=5;
      __label__ = 31; break;
    case 31: 
      __label__ = 32; break;
    case 32: 
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      __label__ = 38; break;
    case 38: 
      __label__ = 39; break;
    case 39: 
      var $43=$type;
      var $cmp67=(($43)|0)!=-1;
      if ($cmp67) { __label__ = 40; break; } else { __label__ = 48; break; }
    case 40: 
      var $44=$is_set;
      var $cmp70=(($44)|0)==2;
      if ($cmp70) { __label__ = 41; break; } else { __label__ = 48; break; }
    case 41: 
      var $45=$root;
      var $tobool73=(($45)|0)!=0;
      if ($tobool73) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      var $call75=_calloc(1, 20);
      var $46=$call75;
      var $47=$tail;
      var $next76=(($47+12)|0);
      HEAP32[(($next76)>>2)]=$46;
      var $48=$tail;
      var $49=$tail;
      var $next77=(($49+12)|0);
      var $50=HEAP32[(($next77)>>2)];
      var $prev78=(($50+16)|0);
      HEAP32[(($prev78)>>2)]=$48;
      var $51=$tail;
      var $next79=(($51+12)|0);
      var $52=HEAP32[(($next79)>>2)];
      $tail=$52;
      __label__ = 44; break;
    case 43: 
      var $call81=_calloc(1, 20);
      var $53=$call81;
      $tail=$53;
      $root=$53;
      __label__ = 44; break;
    case 44: 
      var $54=$type;
      var $55=$tail;
      var $type83=(($55)|0);
      HEAP32[(($type83)>>2)]=$54;
      var $56=$tail;
      var $point84=(($56+4)|0);
      var $57=$point84;
      var $58=$point;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($57)>>2)]=HEAP32[(($58)>>2)];HEAP32[((($57)+(4))>>2)]=HEAP32[((($58)+(4))>>2)];
      $is_set=0;
      var $59=$type;
      var $cmp85=(($59)|0)==5;
      if ($cmp85) { __label__ = 45; break; } else { __label__ = 47; break; }
    case 45: 
      var $60=$spline_start;
      var $tobool88=(($60)|0)!=0;
      if ($tobool88) { __label__ = 47; break; } else { __label__ = 46; break; }
    case 46: 
      var $61=$tail;
      var $prev90=(($61+16)|0);
      var $62=HEAP32[(($prev90)>>2)];
      $spline_start=$62;
      __label__ = 47; break;
    case 47: 
      __label__ = 48; break;
    case 48: 
      var $63=HEAP32[(($p)>>2)];
      var $incdec_ptr93=(($63+1)|0);
      HEAP32[(($p)>>2)]=$incdec_ptr93;
      __label__ = 3; break;
    case 49: 
      var $64=$root;
      STACKTOP = __stackBase__;
      return $64;
    default: assert(0, "bad label: " + __label__);
  }
}
_drawing_tokenize["X"]=1;

function _translate_point($drawing, $point) {
  ;
  var __label__;

  var $drawing_addr;
  var $point_addr;
  $drawing_addr=$drawing;
  $point_addr=$point;
  var $0=$drawing_addr;
  var $point_scale_x=(($0+100)|0);
  var $1=(tempDoubleI32[0]=HEAP32[(($point_scale_x)>>2)],tempDoubleI32[1]=HEAP32[((($point_scale_x)+(4))>>2)],tempDoubleF64[0]);
  var $2=$point_addr;
  var $x=(($2)|0);
  var $3=HEAP32[(($x)>>2)];
  var $conv=(($3)|0);
  var $mul=($1)*($conv);
  var $conv1=(($mul)&-1);
  var $4=$point_addr;
  var $x2=(($4)|0);
  HEAP32[(($x2)>>2)]=$conv1;
  var $5=$drawing_addr;
  var $point_scale_y=(($5+108)|0);
  var $6=(tempDoubleI32[0]=HEAP32[(($point_scale_y)>>2)],tempDoubleI32[1]=HEAP32[((($point_scale_y)+(4))>>2)],tempDoubleF64[0]);
  var $7=$point_addr;
  var $y=(($7+4)|0);
  var $8=HEAP32[(($y)>>2)];
  var $sub=(((-$8))|0);
  var $conv3=(($sub)|0);
  var $mul4=($6)*($conv3);
  var $conv5=(($mul4)&-1);
  var $9=$point_addr;
  var $y6=(($9+4)|0);
  HEAP32[(($y6)>>2)]=$conv5;
  var $10=$drawing_addr;
  var $11=$point_addr;
  _update_cbox($10, $11);
  ;
  return;
}


function _double_to_d6217($x) {
  ;
  var __label__;

  var $x_addr;
  $x_addr=$x;
  var $0=$x_addr;
  var $mul=($0)*(64);
  var $conv=(($mul)&-1);
  ;
  return $conv;
}


function _token_check_values($token, $i, $type) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $token_addr;
      var $i_addr;
      var $type_addr;
      var $j;
      $token_addr=$token;
      $i_addr=$i;
      $type_addr=$type;
      $j=0;
      __label__ = 3; break;
    case 3: 
      var $0=$j;
      var $1=$i_addr;
      var $cmp=(($0)|0) < (($1)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: 
      var $2=$token_addr;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $3=$token_addr;
      var $type1=(($3)|0);
      var $4=HEAP32[(($type1)>>2)];
      var $5=$type_addr;
      var $cmp2=(($4)|0)!=(($5)|0);
      if ($cmp2) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $retval=0;
      __label__ = 10; break;
    case 7: 
      var $6=$token_addr;
      var $next=(($6+12)|0);
      var $7=HEAP32[(($next)>>2)];
      $token_addr=$7;
      __label__ = 8; break;
    case 8: 
      var $8=$j;
      var $inc=((($8)+(1))|0);
      $j=$inc;
      __label__ = 3; break;
    case 9: 
      $retval=1;
      __label__ = 10; break;
    case 10: 
      var $9=$retval;
      ;
      return $9;
    default: assert(0, "bad label: " + __label__);
  }
}


function _update_cbox($drawing, $point) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $drawing_addr;
      var $point_addr;
      var $box;
      $drawing_addr=$drawing;
      $point_addr=$point;
      var $0=$drawing_addr;
      var $cbox=(($0+116)|0);
      $box=$cbox;
      var $1=$box;
      var $xMin=(($1)|0);
      var $2=HEAP32[(($xMin)>>2)];
      var $3=$point_addr;
      var $x=(($3)|0);
      var $4=HEAP32[(($x)>>2)];
      var $cmp=(($2)|0) > (($4)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $5=$point_addr;
      var $x1=(($5)|0);
      var $6=HEAP32[(($x1)>>2)];
      var $cond = $6;__label__ = 5; break;
    case 4: 
      var $7=$box;
      var $xMin2=(($7)|0);
      var $8=HEAP32[(($xMin2)>>2)];
      var $cond = $8;__label__ = 5; break;
    case 5: 
      var $cond;
      var $9=$box;
      var $xMin3=(($9)|0);
      HEAP32[(($xMin3)>>2)]=$cond;
      var $10=$box;
      var $xMax=(($10+8)|0);
      var $11=HEAP32[(($xMax)>>2)];
      var $12=$point_addr;
      var $x4=(($12)|0);
      var $13=HEAP32[(($x4)>>2)];
      var $cmp5=(($11)|0) > (($13)|0);
      if ($cmp5) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $14=$box;
      var $xMax7=(($14+8)|0);
      var $15=HEAP32[(($xMax7)>>2)];
      var $cond11 = $15;__label__ = 8; break;
    case 7: 
      var $16=$point_addr;
      var $x9=(($16)|0);
      var $17=HEAP32[(($x9)>>2)];
      var $cond11 = $17;__label__ = 8; break;
    case 8: 
      var $cond11;
      var $18=$box;
      var $xMax12=(($18+8)|0);
      HEAP32[(($xMax12)>>2)]=$cond11;
      var $19=$box;
      var $yMin=(($19+4)|0);
      var $20=HEAP32[(($yMin)>>2)];
      var $21=$point_addr;
      var $y=(($21+4)|0);
      var $22=HEAP32[(($y)>>2)];
      var $cmp13=(($20)|0) > (($22)|0);
      if ($cmp13) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $23=$point_addr;
      var $y15=(($23+4)|0);
      var $24=HEAP32[(($y15)>>2)];
      var $cond19 = $24;__label__ = 11; break;
    case 10: 
      var $25=$box;
      var $yMin17=(($25+4)|0);
      var $26=HEAP32[(($yMin17)>>2)];
      var $cond19 = $26;__label__ = 11; break;
    case 11: 
      var $cond19;
      var $27=$box;
      var $yMin20=(($27+4)|0);
      HEAP32[(($yMin20)>>2)]=$cond19;
      var $28=$box;
      var $yMax=(($28+12)|0);
      var $29=HEAP32[(($yMax)>>2)];
      var $30=$point_addr;
      var $y21=(($30+4)|0);
      var $31=HEAP32[(($y21)>>2)];
      var $cmp22=(($29)|0) > (($31)|0);
      if ($cmp22) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $32=$box;
      var $yMax24=(($32+12)|0);
      var $33=HEAP32[(($yMax24)>>2)];
      var $cond28 = $33;__label__ = 14; break;
    case 13: 
      var $34=$point_addr;
      var $y26=(($34+4)|0);
      var $35=HEAP32[(($y26)>>2)];
      var $cond28 = $35;__label__ = 14; break;
    case 14: 
      var $cond28;
      var $36=$box;
      var $yMax29=(($36+12)|0);
      HEAP32[(($yMax29)>>2)]=$cond28;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_update_cbox["X"]=1;

function _ensure_font_size($priv, $size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $priv_addr;
      var $size_addr;
      $priv_addr=$priv;
      $size_addr=$size;
      var $0=$size_addr;
      var $cmp=$0 < 1;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $size_addr=1;
      __label__ = 7; break;
    case 4: 
      var $1=$size_addr;
      var $2=$priv_addr;
      var $height=(($2+120)|0);
      var $3=HEAP32[(($height)>>2)];
      var $mul=((($3<<1))|0);
      var $conv=(($mul)|0);
      var $cmp1=$1 > $conv;
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $4=$priv_addr;
      var $height4=(($4+120)|0);
      var $5=HEAP32[(($height4)>>2)];
      var $mul5=((($5<<1))|0);
      var $conv6=(($mul5)|0);
      $size_addr=$conv6;
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $6=$size_addr;
      ;
      return $6;
    default: assert(0, "bad label: " + __label__);
  }
}


function _drawing_close_shape($drawing) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $drawing_addr;
      var $ol;
      $drawing_addr=$drawing;
      var $0=$drawing_addr;
      var $outline=(($0+44)|0);
      $ol=$outline;
      var $1=$ol;
      var $n_contours=(($1)|0);
      var $2=HEAP16[(($n_contours)>>1)];
      var $conv=(($2 << 16) >> 16);
      var $3=$drawing_addr;
      var $max_contours=(($3+96)|0);
      var $4=HEAP32[(($max_contours)>>2)];
      var $cmp=(($conv)|0) >= (($4)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $5=$drawing_addr;
      var $max_contours2=(($5+96)|0);
      var $6=HEAP32[(($max_contours2)>>2)];
      var $mul=((($6<<1))|0);
      HEAP32[(($max_contours2)>>2)]=$mul;
      var $7=$ol;
      var $contours=(($7+12)|0);
      var $8=HEAP32[(($contours)>>2)];
      var $9=$8;
      var $10=$drawing_addr;
      var $max_contours3=(($10+96)|0);
      var $11=HEAP32[(($max_contours3)>>2)];
      var $mul4=((($11<<1))|0);
      var $call=_realloc($9, $mul4);
      var $12=$call;
      var $13=$ol;
      var $contours5=(($13+12)|0);
      HEAP32[(($contours5)>>2)]=$12;
      __label__ = 4; break;
    case 4: 
      var $14=$ol;
      var $n_points=(($14+2)|0);
      var $15=HEAP16[(($n_points)>>1)];
      var $tobool=(($15 << 16) >> 16)!=0;
      if ($tobool) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $16=$ol;
      var $n_points7=(($16+2)|0);
      var $17=HEAP16[(($n_points7)>>1)];
      var $conv8=(($17 << 16) >> 16);
      var $sub=((($conv8)-(1))|0);
      var $conv9=(($sub) & 65535);
      var $18=$ol;
      var $n_contours10=(($18)|0);
      var $19=HEAP16[(($n_contours10)>>1)];
      var $idxprom=(($19 << 16) >> 16);
      var $20=$ol;
      var $contours11=(($20+12)|0);
      var $21=HEAP32[(($contours11)>>2)];
      var $arrayidx=(($21+($idxprom<<1))|0);
      HEAP16[(($arrayidx)>>1)]=$conv9;
      var $22=$ol;
      var $n_contours12=(($22)|0);
      var $23=HEAP16[(($n_contours12)>>1)];
      var $inc=((($23)+(1))&65535);
      HEAP16[(($n_contours12)>>1)]=$inc;
      __label__ = 6; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_drawing_close_shape["X"]=1;

function _drawing_add_point($drawing, $point) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $drawing_addr;
      var $point_addr;
      var $ol;
      $drawing_addr=$drawing;
      $point_addr=$point;
      var $0=$drawing_addr;
      var $outline=(($0+44)|0);
      $ol=$outline;
      var $1=$ol;
      var $n_points=(($1+2)|0);
      var $2=HEAP16[(($n_points)>>1)];
      var $conv=(($2 << 16) >> 16);
      var $3=$drawing_addr;
      var $max_points=(($3+92)|0);
      var $4=HEAP32[(($max_points)>>2)];
      var $cmp=(($conv)|0) >= (($4)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $5=$drawing_addr;
      var $max_points2=(($5+92)|0);
      var $6=HEAP32[(($max_points2)>>2)];
      var $mul=((($6<<1))|0);
      HEAP32[(($max_points2)>>2)]=$mul;
      var $7=$ol;
      var $points=(($7+4)|0);
      var $8=HEAP32[(($points)>>2)];
      var $9=$8;
      var $10=$drawing_addr;
      var $max_points3=(($10+92)|0);
      var $11=HEAP32[(($max_points3)>>2)];
      var $mul4=((($11<<3))|0);
      var $call=_realloc($9, $mul4);
      var $12=$call;
      var $13=$ol;
      var $points5=(($13+4)|0);
      HEAP32[(($points5)>>2)]=$12;
      var $14=$ol;
      var $tags=(($14+8)|0);
      var $15=HEAP32[(($tags)>>2)];
      var $16=$drawing_addr;
      var $max_points6=(($16+92)|0);
      var $17=HEAP32[(($max_points6)>>2)];
      var $call7=_realloc($15, $17);
      var $18=$ol;
      var $tags8=(($18+8)|0);
      HEAP32[(($tags8)>>2)]=$call7;
      __label__ = 4; break;
    case 4: 
      var $19=$point_addr;
      var $x=(($19)|0);
      var $20=HEAP32[(($x)>>2)];
      var $21=$ol;
      var $n_points9=(($21+2)|0);
      var $22=HEAP16[(($n_points9)>>1)];
      var $idxprom=(($22 << 16) >> 16);
      var $23=$ol;
      var $points10=(($23+4)|0);
      var $24=HEAP32[(($points10)>>2)];
      var $arrayidx=(($24+($idxprom<<3))|0);
      var $x11=(($arrayidx)|0);
      HEAP32[(($x11)>>2)]=$20;
      var $25=$point_addr;
      var $y=(($25+4)|0);
      var $26=HEAP32[(($y)>>2)];
      var $27=$ol;
      var $n_points12=(($27+2)|0);
      var $28=HEAP16[(($n_points12)>>1)];
      var $idxprom13=(($28 << 16) >> 16);
      var $29=$ol;
      var $points14=(($29+4)|0);
      var $30=HEAP32[(($points14)>>2)];
      var $arrayidx15=(($30+($idxprom13<<3))|0);
      var $y16=(($arrayidx15+4)|0);
      HEAP32[(($y16)>>2)]=$26;
      var $31=$ol;
      var $n_points17=(($31+2)|0);
      var $32=HEAP16[(($n_points17)>>1)];
      var $idxprom18=(($32 << 16) >> 16);
      var $33=$ol;
      var $tags19=(($33+8)|0);
      var $34=HEAP32[(($tags19)>>2)];
      var $arrayidx20=(($34+$idxprom18)|0);
      HEAP8[($arrayidx20)]=1;
      var $35=$ol;
      var $n_points21=(($35+2)|0);
      var $36=HEAP16[(($n_points21)>>1)];
      var $inc=((($36)+(1))&65535);
      HEAP16[(($n_points21)>>1)]=$inc;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_drawing_add_point["X"]=1;

function _drawing_evaluate_curve($drawing, $token, $spline, $started) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $drawing_addr;
      var $token_addr;
      var $spline_addr;
      var $started_addr;
      var $cx3;
      var $cx2;
      var $cx1;
      var $cx0;
      var $cy3;
      var $cy2;
      var $cy1;
      var $cy0;
      var $t;
      var $h;
      var $max_accel;
      var $max_accel1;
      var $max_accel2;
      var $cur=__stackBase__;
      var $x0;
      var $y0;
      var $x1;
      var $y1;
      var $x26;
      var $y2;
      var $x3;
      var $y312;
      var $div6;
      $drawing_addr=$drawing;
      $token_addr=$token;
      $spline_addr=$spline;
      $started_addr=$started;
      var $0=$cur;
      HEAP32[(($0)>>2)]=0; HEAP32[((($0)+(4))>>2)]=0;
      var $1=$token_addr;
      var $point=(($1+4)|0);
      var $2=$cur;
      var $3=$point;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($2)>>2)]=HEAP32[(($3)>>2)];HEAP32[((($2)+(4))>>2)]=HEAP32[((($3)+(4))>>2)];
      var $4=$drawing_addr;
      _translate_point($4, $cur);
      var $x=(($cur)|0);
      var $5=HEAP32[(($x)>>2)];
      $x0=$5;
      var $y=(($cur+4)|0);
      var $6=HEAP32[(($y)>>2)];
      $y0=$6;
      var $7=$token_addr;
      var $next=(($7+12)|0);
      var $8=HEAP32[(($next)>>2)];
      $token_addr=$8;
      var $9=$token_addr;
      var $point1=(($9+4)|0);
      var $10=$cur;
      var $11=$point1;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($10)>>2)]=HEAP32[(($11)>>2)];HEAP32[((($10)+(4))>>2)]=HEAP32[((($11)+(4))>>2)];
      var $12=$drawing_addr;
      _translate_point($12, $cur);
      var $x2=(($cur)|0);
      var $13=HEAP32[(($x2)>>2)];
      $x1=$13;
      var $y3=(($cur+4)|0);
      var $14=HEAP32[(($y3)>>2)];
      $y1=$14;
      var $15=$token_addr;
      var $next4=(($15+12)|0);
      var $16=HEAP32[(($next4)>>2)];
      $token_addr=$16;
      var $17=$token_addr;
      var $point5=(($17+4)|0);
      var $18=$cur;
      var $19=$point5;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($18)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($18)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];
      var $20=$drawing_addr;
      _translate_point($20, $cur);
      var $x7=(($cur)|0);
      var $21=HEAP32[(($x7)>>2)];
      $x26=$21;
      var $y8=(($cur+4)|0);
      var $22=HEAP32[(($y8)>>2)];
      $y2=$22;
      var $23=$token_addr;
      var $next9=(($23+12)|0);
      var $24=HEAP32[(($next9)>>2)];
      $token_addr=$24;
      var $25=$token_addr;
      var $point10=(($25+4)|0);
      var $26=$cur;
      var $27=$point10;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($26)>>2)]=HEAP32[(($27)>>2)];HEAP32[((($26)+(4))>>2)]=HEAP32[((($27)+(4))>>2)];
      var $28=$drawing_addr;
      _translate_point($28, $cur);
      var $x11=(($cur)|0);
      var $29=HEAP32[(($x11)>>2)];
      $x3=$29;
      var $y13=(($cur+4)|0);
      var $30=HEAP32[(($y13)>>2)];
      $y312=$30;
      var $31=$spline_addr;
      var $tobool=(($31 << 24) >> 24)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $div6=0.16666666666666666;
      var $32=$div6;
      var $33=$x0;
      var $sub=(((-$33))|0);
      var $34=$x1;
      var $mul=((($34)*(3))|0);
      var $add=((($sub)+($mul))|0);
      var $35=$x26;
      var $mul14=((($35)*(3))|0);
      var $sub15=((($add)-($mul14))|0);
      var $36=$x3;
      var $add16=((($sub15)+($36))|0);
      var $conv=(($add16)|0);
      var $mul17=($32)*($conv);
      $cx3=$mul17;
      var $37=$div6;
      var $38=$x0;
      var $mul18=((($38)*(3))|0);
      var $39=$x1;
      var $mul19=((($39)*(6))|0);
      var $sub20=((($mul18)-($mul19))|0);
      var $40=$x26;
      var $mul21=((($40)*(3))|0);
      var $add22=((($sub20)+($mul21))|0);
      var $conv23=(($add22)|0);
      var $mul24=($37)*($conv23);
      $cx2=$mul24;
      var $41=$div6;
      var $42=$x0;
      var $mul25=((($42)*(-3))|0);
      var $43=$x26;
      var $mul26=((($43)*(3))|0);
      var $add27=((($mul25)+($mul26))|0);
      var $conv28=(($add27)|0);
      var $mul29=($41)*($conv28);
      $cx1=$mul29;
      var $44=$div6;
      var $45=$x0;
      var $46=$x1;
      var $mul30=((($46<<2))|0);
      var $add31=((($45)+($mul30))|0);
      var $47=$x26;
      var $mul32=(($47)|0);
      var $add33=((($add31)+($mul32))|0);
      var $conv34=(($add33)|0);
      var $mul35=($44)*($conv34);
      $cx0=$mul35;
      var $48=$div6;
      var $49=$y0;
      var $sub36=(((-$49))|0);
      var $50=$y1;
      var $mul37=((($50)*(3))|0);
      var $add38=((($sub36)+($mul37))|0);
      var $51=$y2;
      var $mul39=((($51)*(3))|0);
      var $sub40=((($add38)-($mul39))|0);
      var $52=$y312;
      var $add41=((($sub40)+($52))|0);
      var $conv42=(($add41)|0);
      var $mul43=($48)*($conv42);
      $cy3=$mul43;
      var $53=$div6;
      var $54=$y0;
      var $mul44=((($54)*(3))|0);
      var $55=$y1;
      var $mul45=((($55)*(6))|0);
      var $sub46=((($mul44)-($mul45))|0);
      var $56=$y2;
      var $mul47=((($56)*(3))|0);
      var $add48=((($sub46)+($mul47))|0);
      var $conv49=(($add48)|0);
      var $mul50=($53)*($conv49);
      $cy2=$mul50;
      var $57=$div6;
      var $58=$y0;
      var $mul51=((($58)*(-3))|0);
      var $59=$y2;
      var $mul52=((($59)*(3))|0);
      var $add53=((($mul51)+($mul52))|0);
      var $conv54=(($add53)|0);
      var $mul55=($57)*($conv54);
      $cy1=$mul55;
      var $60=$div6;
      var $61=$y0;
      var $62=$y1;
      var $mul56=((($62<<2))|0);
      var $add57=((($61)+($mul56))|0);
      var $63=$y2;
      var $mul58=(($63)|0);
      var $add59=((($add57)+($mul58))|0);
      var $conv60=(($add59)|0);
      var $mul61=($60)*($conv60);
      $cy0=$mul61;
      __label__ = 5; break;
    case 4: 
      var $64=$x0;
      var $sub62=(((-$64))|0);
      var $65=$x1;
      var $mul63=((($65)*(3))|0);
      var $add64=((($sub62)+($mul63))|0);
      var $66=$x26;
      var $mul65=((($66)*(3))|0);
      var $sub66=((($add64)-($mul65))|0);
      var $67=$x3;
      var $add67=((($sub66)+($67))|0);
      var $conv68=(($add67)|0);
      $cx3=$conv68;
      var $68=$x0;
      var $mul69=((($68)*(3))|0);
      var $69=$x1;
      var $mul70=((($69)*(6))|0);
      var $sub71=((($mul69)-($mul70))|0);
      var $70=$x26;
      var $mul72=((($70)*(3))|0);
      var $add73=((($sub71)+($mul72))|0);
      var $conv74=(($add73)|0);
      $cx2=$conv74;
      var $71=$x0;
      var $mul75=((($71)*(-3))|0);
      var $72=$x1;
      var $mul76=((($72)*(3))|0);
      var $add77=((($mul75)+($mul76))|0);
      var $conv78=(($add77)|0);
      $cx1=$conv78;
      var $73=$x0;
      var $conv79=(($73)|0);
      $cx0=$conv79;
      var $74=$y0;
      var $sub80=(((-$74))|0);
      var $75=$y1;
      var $mul81=((($75)*(3))|0);
      var $add82=((($sub80)+($mul81))|0);
      var $76=$y2;
      var $mul83=((($76)*(3))|0);
      var $sub84=((($add82)-($mul83))|0);
      var $77=$y312;
      var $add85=((($sub84)+($77))|0);
      var $conv86=(($add85)|0);
      $cy3=$conv86;
      var $78=$y0;
      var $mul87=((($78)*(3))|0);
      var $79=$y1;
      var $mul88=((($79)*(6))|0);
      var $sub89=((($mul87)-($mul88))|0);
      var $80=$y2;
      var $mul90=((($80)*(3))|0);
      var $add91=((($sub89)+($mul90))|0);
      var $conv92=(($add91)|0);
      $cy2=$conv92;
      var $81=$y0;
      var $mul93=((($81)*(-3))|0);
      var $82=$y1;
      var $mul94=((($82)*(3))|0);
      var $add95=((($mul93)+($mul94))|0);
      var $conv96=(($add95)|0);
      $cy1=$conv96;
      var $83=$y0;
      var $conv97=(($83)|0);
      $cy0=$conv97;
      __label__ = 5; break;
    case 5: 
      var $84=$cy2;
      var $mul98=($84)*(2);
      var $call=_fabs($mul98);
      var $85=$cy3;
      var $mul99=($85)*(6);
      var $call100=_fabs($mul99);
      var $add101=($call)+($call100);
      $max_accel1=$add101;
      var $86=$cx2;
      var $mul102=($86)*(2);
      var $call103=_fabs($mul102);
      var $87=$cx3;
      var $mul104=($87)*(6);
      var $call105=_fabs($mul104);
      var $add106=($call103)+($call105);
      $max_accel2=$add106;
      var $88=$max_accel1;
      var $89=$max_accel2;
      var $cmp=$88 > $89;
      if ($cmp) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $90=$max_accel1;
      var $cond = $90;__label__ = 8; break;
    case 7: 
      var $91=$max_accel2;
      var $cond = $91;__label__ = 8; break;
    case 8: 
      var $cond;
      $max_accel=$cond;
      $h=1;
      var $92=$max_accel;
      var $cmp108=$92 > 64;
      if ($cmp108) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $93=$max_accel;
      var $div=(64)/($93);
      var $call111=_sqrt($div);
      $h=$call111;
      __label__ = 10; break;
    case 10: 
      var $94=$started_addr;
      var $tobool113=(($94)|0)!=0;
      if ($tobool113) { __label__ = 12; break; } else { __label__ = 11; break; }
    case 11: 
      var $95=$cx0;
      var $conv115=(($95)&-1);
      var $x116=(($cur)|0);
      HEAP32[(($x116)>>2)]=$conv115;
      var $96=$cy0;
      var $conv117=(($96)&-1);
      var $y118=(($cur+4)|0);
      HEAP32[(($y118)>>2)]=$conv117;
      var $97=$drawing_addr;
      _drawing_add_point($97, $cur);
      __label__ = 12; break;
    case 12: 
      $t=0;
      __label__ = 13; break;
    case 13: 
      var $98=$t;
      var $cmp120=$98 < 1;
      if ($cmp120) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $99=$cx0;
      var $100=$t;
      var $101=$cx1;
      var $102=$t;
      var $103=$cx2;
      var $104=$t;
      var $105=$cx3;
      var $mul122=($104)*($105);
      var $add123=($103)+($mul122);
      var $mul124=($102)*($add123);
      var $add125=($101)+($mul124);
      var $mul126=($100)*($add125);
      var $add127=($99)+($mul126);
      var $conv128=(($add127)&-1);
      var $x129=(($cur)|0);
      HEAP32[(($x129)>>2)]=$conv128;
      var $106=$cy0;
      var $107=$t;
      var $108=$cy1;
      var $109=$t;
      var $110=$cy2;
      var $111=$t;
      var $112=$cy3;
      var $mul130=($111)*($112);
      var $add131=($110)+($mul130);
      var $mul132=($109)*($add131);
      var $add133=($108)+($mul132);
      var $mul134=($107)*($add133);
      var $add135=($106)+($mul134);
      var $conv136=(($add135)&-1);
      var $y137=(($cur+4)|0);
      HEAP32[(($y137)>>2)]=$conv136;
      var $113=$drawing_addr;
      _drawing_add_point($113, $cur);
      __label__ = 15; break;
    case 15: 
      var $114=$h;
      var $115=$t;
      var $add138=($115)+($114);
      $t=$add138;
      __label__ = 13; break;
    case 16: 
      var $116=$cx0;
      var $117=$cx1;
      var $add139=($116)+($117);
      var $118=$cx2;
      var $add140=($add139)+($118);
      var $119=$cx3;
      var $add141=($add140)+($119);
      var $conv142=(($add141)&-1);
      var $x143=(($cur)|0);
      HEAP32[(($x143)>>2)]=$conv142;
      var $120=$cy0;
      var $121=$cy1;
      var $add144=($120)+($121);
      var $122=$cy2;
      var $add145=($add144)+($122);
      var $123=$cy3;
      var $add146=($add145)+($123);
      var $conv147=(($add146)&-1);
      var $y148=(($cur+4)|0);
      HEAP32[(($y148)>>2)]=$conv147;
      var $124=$drawing_addr;
      _drawing_add_point($124, $cur);
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_drawing_evaluate_curve["X"]=1;

function _drawing_finish($drawing, $raw_mode) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $drawing_addr;
      var $raw_mode_addr;
      var $i;
      var $offset;
      var $bbox=__stackBase__;
      var $ol;
      $drawing_addr=$drawing;
      $raw_mode_addr=$raw_mode;
      var $0=$drawing_addr;
      var $cbox=(($0+116)|0);
      var $1=$bbox;
      var $2=$cbox;
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($1)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($1)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($1)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];HEAP32[((($1)+(12))>>2)]=HEAP32[((($2)+(12))>>2)];
      var $3=$drawing_addr;
      var $outline=(($3+44)|0);
      $ol=$outline;
      var $4=$drawing_addr;
      _drawing_close_shape($4);
      var $5=$drawing_addr;
      var $library=(($5+80)|0);
      var $6=HEAP32[(($library)>>2)];
      var $tobool=(($6)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $7=$drawing_addr;
      var $library1=(($7+80)|0);
      var $8=HEAP32[(($library1)>>2)];
      var $9=$ol;
      var $n_points=(($9+2)|0);
      var $10=HEAP16[(($n_points)>>1)];
      var $conv=(($10 << 16) >> 16);
      var $11=$ol;
      var $n_contours=(($11)|0);
      var $12=HEAP16[(($n_contours)>>1)];
      var $conv2=(($12 << 16) >> 16);
      _ass_msg($8, 6, ((STRING_TABLE.__str205)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$conv,HEAP32[(((tempInt)+(4))>>2)]=$conv2,tempInt));
      __label__ = 4; break;
    case 4: 
      var $13=$raw_mode_addr;
      var $tobool3=(($13)|0)!=0;
      if ($tobool3) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 10; break;
    case 6: 
      var $xMax=(($bbox+8)|0);
      var $14=HEAP32[(($xMax)>>2)];
      var $xMin=(($bbox)|0);
      var $15=HEAP32[(($xMin)>>2)];
      var $sub=((($14)-($15))|0);
      var $16=$drawing_addr;
      var $advance=(($16+64)|0);
      var $x=(($advance)|0);
      HEAP32[(($x)>>2)]=$sub;
      var $17=$drawing_addr;
      var $pbo=(($17+12)|0);
      var $18=(tempDoubleI32[0]=HEAP32[(($pbo)>>2)],tempDoubleI32[1]=HEAP32[((($pbo)+(4))>>2)],tempDoubleF64[0]);
      var $sub6=(-$18);
      var $19=$drawing_addr;
      var $scale_y=(($19+28)|0);
      var $20=(tempDoubleI32[0]=HEAP32[(($scale_y)>>2)],tempDoubleI32[1]=HEAP32[((($scale_y)+(4))>>2)],tempDoubleF64[0]);
      var $mul=($sub6)*($20);
      var $call=_double_to_d6217($mul);
      var $21=$drawing_addr;
      var $desc=(($21+40)|0);
      HEAP32[(($desc)>>2)]=$call;
      var $yMax=(($bbox+12)|0);
      var $22=HEAP32[(($yMax)>>2)];
      var $yMin=(($bbox+4)|0);
      var $23=HEAP32[(($yMin)>>2)];
      var $sub7=((($22)-($23))|0);
      var $24=$drawing_addr;
      var $desc8=(($24+40)|0);
      var $25=HEAP32[(($desc8)>>2)];
      var $add=((($sub7)+($25))|0);
      var $26=$drawing_addr;
      var $asc=(($26+36)|0);
      HEAP32[(($asc)>>2)]=$add;
      var $yMax9=(($bbox+12)|0);
      var $27=HEAP32[(($yMax9)>>2)];
      var $yMin10=(($bbox+4)|0);
      var $28=HEAP32[(($yMin10)>>2)];
      var $sub11=((($27)-($28))|0);
      var $29=$drawing_addr;
      var $pbo12=(($29+12)|0);
      var $30=(tempDoubleI32[0]=HEAP32[(($pbo12)>>2)],tempDoubleI32[1]=HEAP32[((($pbo12)+(4))>>2)],tempDoubleF64[0]);
      var $sub13=(-$30);
      var $31=$drawing_addr;
      var $scale_y14=(($31+28)|0);
      var $32=(tempDoubleI32[0]=HEAP32[(($scale_y14)>>2)],tempDoubleI32[1]=HEAP32[((($scale_y14)+(4))>>2)],tempDoubleF64[0]);
      var $mul15=($sub13)*($32);
      var $call16=_double_to_d6217($mul15);
      var $add17=((($sub11)+($call16))|0);
      $offset=$add17;
      $i=0;
      __label__ = 7; break;
    case 7: 
      var $33=$i;
      var $34=$ol;
      var $n_points18=(($34+2)|0);
      var $35=HEAP16[(($n_points18)>>1)];
      var $conv19=(($35 << 16) >> 16);
      var $cmp=(($33)|0) < (($conv19)|0);
      if ($cmp) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $36=$offset;
      var $37=$i;
      var $38=$ol;
      var $points=(($38+4)|0);
      var $39=HEAP32[(($points)>>2)];
      var $arrayidx=(($39+($37<<3))|0);
      var $y=(($arrayidx+4)|0);
      var $40=HEAP32[(($y)>>2)];
      var $add21=((($40)+($36))|0);
      HEAP32[(($y)>>2)]=$add21;
      __label__ = 9; break;
    case 9: 
      var $41=$i;
      var $inc=((($41)+(1))|0);
      $i=$inc;
      __label__ = 7; break;
    case 10: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_drawing_finish["X"]=1;

function _drawing_free_tokens($token) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $token_addr;
      var $at;
      $token_addr=$token;
      __label__ = 3; break;
    case 3: 
      var $0=$token_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $1=$token_addr;
      $at=$1;
      var $2=$token_addr;
      var $next=(($2+12)|0);
      var $3=HEAP32[(($next)>>2)];
      $token_addr=$3;
      var $4=$at;
      var $5=$4;
      _free($5);
      __label__ = 3; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _change_alpha($var, $new, $pwr) {
  ;
  var __label__;

  var $var_addr;
  var $new_addr;
  var $pwr_addr;
  $var_addr=$var;
  $new_addr=$new;
  $pwr_addr=$pwr;
  var $0=$var_addr;
  var $1=HEAPU32[(($0)>>2)];
  var $shr=$1 >>> 24;
  var $shl=$shr << 24;
  var $2=$var_addr;
  var $3=HEAPU32[(($2)>>2)];
  var $shr1=$3 >>> 16;
  var $and=$shr1 & 255;
  var $shl2=$and << 16;
  var $add=((($shl)+($shl2))|0);
  var $4=$var_addr;
  var $5=HEAPU32[(($4)>>2)];
  var $shr3=$5 >>> 8;
  var $and4=$shr3 & 255;
  var $shl5=$and4 << 8;
  var $add6=((($add)+($shl5))|0);
  var $6=$var_addr;
  var $7=HEAP32[(($6)>>2)];
  var $and7=$7 & 255;
  var $conv=(($and7)>>>0);
  var $8=$pwr_addr;
  var $sub=(1)-($8);
  var $mul=($conv)*($sub);
  var $9=$new_addr;
  var $and8=$9 & 255;
  var $conv9=(($and8)>>>0);
  var $10=$pwr_addr;
  var $mul10=($conv9)*($10);
  var $add11=($mul)+($mul10);
  var $conv12=($add11 >= 0 ? Math.floor($add11) : Math.ceil($add11));
  var $add13=((($add6)+($conv12))|0);
  var $11=$var_addr;
  HEAP32[(($11)>>2)]=$add13;
  ;
  return;
}


function _mult_alpha($a, $b) {
  ;
  var __label__;

  var $a_addr;
  var $b_addr;
  $a_addr=$a;
  $b_addr=$b;
  var $0=$a_addr;
  var $sub=(((255)-($0))|0);
  var $1=$b_addr;
  var $sub1=(((255)-($1))|0);
  var $mul=((($sub)*($sub1))|0);
  var $div=Math.floor(((($mul)>>>0))/(255));
  var $sub2=(((255)-($div))|0);
  ;
  return $sub2;
}


function _change_font_size($render_priv, $sz) {
  ;
  var __label__;

  var $render_priv_addr;
  var $sz_addr;
  $render_priv_addr=$render_priv;
  $sz_addr=$sz;
  var $0=$sz_addr;
  var $1=$render_priv_addr;
  var $state=(($1+176)|0);
  var $font_size=(($state+16)|0);
  (tempDoubleF64[0]=$0,HEAP32[(($font_size)>>2)]=tempDoubleI32[0],HEAP32[((($font_size)+(4))>>2)]=tempDoubleI32[1]);
  ;
  return;
}


function _update_font($render_priv) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      var $val;
      var $desc=__stackBase__;
      $render_priv_addr=$render_priv;
      var $0=$render_priv_addr;
      var $state=(($0+176)|0);
      var $treat_family_as_pattern=(($state+276)|0);
      var $1=HEAP32[(($treat_family_as_pattern)>>2)];
      var $treat_family_as_pattern1=(($desc+12)|0);
      HEAP32[(($treat_family_as_pattern1)>>2)]=$1;
      var $2=$render_priv_addr;
      var $state2=(($2+176)|0);
      var $family=(($state2+264)|0);
      var $3=HEAP32[(($family)>>2)];
      var $arrayidx=(($3)|0);
      var $4=HEAP8[($arrayidx)];
      var $conv=(($4 << 24) >> 24);
      var $cmp=(($conv)|0)==64;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $vertical=(($desc+16)|0);
      HEAP32[(($vertical)>>2)]=1;
      var $5=$render_priv_addr;
      var $state4=(($5+176)|0);
      var $family5=(($state4+264)|0);
      var $6=HEAP32[(($family5)>>2)];
      var $add_ptr=(($6+1)|0);
      var $call=_strdup($add_ptr);
      var $family6=(($desc)|0);
      HEAP32[(($family6)>>2)]=$call;
      __label__ = 5; break;
    case 4: 
      var $vertical7=(($desc+16)|0);
      HEAP32[(($vertical7)>>2)]=0;
      var $7=$render_priv_addr;
      var $state8=(($7+176)|0);
      var $family9=(($state8+264)|0);
      var $8=HEAP32[(($family9)>>2)];
      var $call10=_strdup($8);
      var $family11=(($desc)|0);
      HEAP32[(($family11)>>2)]=$call10;
      __label__ = 5; break;
    case 5: 
      var $9=$render_priv_addr;
      var $state12=(($9+176)|0);
      var $bold=(($state12+268)|0);
      var $10=HEAP32[(($bold)>>2)];
      $val=$10;
      var $11=$val;
      var $cmp13=(($11)|0)==1;
      if ($cmp13) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $12=$val;
      var $cmp15=(($12)|0)==-1;
      if ($cmp15) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $val=200;
      __label__ = 11; break;
    case 8: 
      var $13=$val;
      var $cmp19=(($13)>>>0) <= 0;
      if ($cmp19) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $val=80;
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $14=$val;
      var $bold24=(($desc+4)|0);
      HEAP32[(($bold24)>>2)]=$14;
      var $15=$render_priv_addr;
      var $state25=(($15+176)|0);
      var $italic=(($state25+272)|0);
      var $16=HEAP32[(($italic)>>2)];
      $val=$16;
      var $17=$val;
      var $cmp26=(($17)|0)==1;
      if ($cmp26) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $18=$val;
      var $cmp29=(($18)|0)==-1;
      if ($cmp29) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      $val=110;
      __label__ = 17; break;
    case 14: 
      var $19=$val;
      var $cmp33=(($19)>>>0) <= 0;
      if ($cmp33) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      $val=0;
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $20=$val;
      var $italic38=(($desc+8)|0);
      HEAP32[(($italic38)>>2)]=$20;
      var $21=$render_priv_addr;
      var $cache=(($21+496)|0);
      var $font_cache=(($cache)|0);
      var $22=HEAP32[(($font_cache)>>2)];
      var $23=$render_priv_addr;
      var $library=(($23)|0);
      var $24=HEAP32[(($library)>>2)];
      var $25=$render_priv_addr;
      var $ftlibrary=(($25+4)|0);
      var $26=HEAP32[(($ftlibrary)>>2)];
      var $27=$render_priv_addr;
      var $fontconfig_priv=(($27+8)|0);
      var $28=HEAP32[(($fontconfig_priv)>>2)];
      var $29=$28;
      var $call39=_ass_font_new($22, $24, $26, $29, $desc);
      var $30=$render_priv_addr;
      var $state40=(($30+176)|0);
      var $font=(($state40+12)|0);
      HEAP32[(($font)>>2)]=$call39;
      var $family41=(($desc)|0);
      var $31=HEAP32[(($family41)>>2)];
      _free($31);
      var $32=$render_priv_addr;
      var $state42=(($32+176)|0);
      var $font43=(($state42+12)|0);
      var $33=HEAP32[(($font43)>>2)];
      var $tobool=(($33)|0)!=0;
      if ($tobool) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $34=$render_priv_addr;
      var $35=$render_priv_addr;
      var $state45=(($35+176)|0);
      var $font_size=(($state45+16)|0);
      var $36=(tempDoubleI32[0]=HEAP32[(($font_size)>>2)],tempDoubleI32[1]=HEAP32[((($font_size)+(4))>>2)],tempDoubleF64[0]);
      _change_font_size($34, $36);
      __label__ = 19; break;
    case 19: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_update_font["X"]=1;

function _change_border($render_priv, $border_x, $border_y) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      var $border_x_addr;
      var $border_y_addr;
      var $bord;
      var $error;
      $render_priv_addr=$render_priv;
      $border_x_addr=$border_x;
      $border_y_addr=$border_y;
      var $0=$render_priv_addr;
      var $state=(($0+176)|0);
      var $font=(($state+12)|0);
      var $1=HEAP32[(($font)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      __label__ = 21; break;
    case 4: 
      var $2=$border_x_addr;
      var $cmp=$2 < 0;
      if ($cmp) { __label__ = 5; break; } else { __label__ = 11; break; }
    case 5: 
      var $3=$border_y_addr;
      var $cmp1=$3 < 0;
      if ($cmp1) { __label__ = 6; break; } else { __label__ = 11; break; }
    case 6: 
      var $4=$render_priv_addr;
      var $state3=(($4+176)|0);
      var $style=(($state3+4)|0);
      var $5=HEAP32[(($style)>>2)];
      var $BorderStyle=(($5+76)|0);
      var $6=HEAP32[(($BorderStyle)>>2)];
      var $cmp4=(($6)|0)==1;
      if ($cmp4) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $7=$render_priv_addr;
      var $state5=(($7+176)|0);
      var $style6=(($state5+4)|0);
      var $8=HEAP32[(($style6)>>2)];
      var $BorderStyle7=(($8+76)|0);
      var $9=HEAP32[(($BorderStyle7)>>2)];
      var $cmp8=(($9)|0)==3;
      if ($cmp8) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $10=$render_priv_addr;
      var $state10=(($10+176)|0);
      var $style11=(($state10+4)|0);
      var $11=HEAP32[(($style11)>>2)];
      var $Outline=(($11+80)|0);
      var $12=(tempDoubleI32[0]=HEAP32[(($Outline)>>2)],tempDoubleI32[1]=HEAP32[((($Outline)+(4))>>2)],tempDoubleF64[0]);
      $border_y_addr=$12;
      $border_x_addr=$12;
      __label__ = 10; break;
    case 9: 
      $border_y_addr=1;
      $border_x_addr=1;
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $13=$border_x_addr;
      var $14=$render_priv_addr;
      var $state14=(($14+176)|0);
      var $border_x15=(($state14+140)|0);
      (tempDoubleF64[0]=$13,HEAP32[(($border_x15)>>2)]=tempDoubleI32[0],HEAP32[((($border_x15)+(4))>>2)]=tempDoubleI32[1]);
      var $15=$border_y_addr;
      var $16=$render_priv_addr;
      var $state16=(($16+176)|0);
      var $border_y17=(($state16+148)|0);
      (tempDoubleF64[0]=$15,HEAP32[(($border_y17)>>2)]=tempDoubleI32[0],HEAP32[((($border_y17)+(4))>>2)]=tempDoubleI32[1]);
      var $17=$border_x_addr;
      var $mul=($17)*(64);
      var $18=$render_priv_addr;
      var $border_scale=(($18+168)|0);
      var $19=(tempDoubleI32[0]=HEAP32[(($border_scale)>>2)],tempDoubleI32[1]=HEAP32[((($border_scale)+(4))>>2)],tempDoubleF64[0]);
      var $mul18=($mul)*($19);
      var $conv=(($mul18)&-1);
      $bord=$conv;
      var $20=$bord;
      var $cmp19=(($20)|0) > 0;
      if ($cmp19) { __label__ = 12; break; } else { __label__ = 20; break; }
    case 12: 
      var $21=$border_x_addr;
      var $22=$border_y_addr;
      var $cmp22=$21 == $22;
      if ($cmp22) { __label__ = 13; break; } else { __label__ = 20; break; }
    case 13: 
      var $23=$render_priv_addr;
      var $state25=(($23+176)|0);
      var $stroker=(($state25+28)|0);
      var $24=HEAP32[(($stroker)>>2)];
      var $tobool26=(($24)|0)!=0;
      if ($tobool26) { __label__ = 17; break; } else { __label__ = 14; break; }
    case 14: 
      var $25=$render_priv_addr;
      var $ftlibrary=(($25+4)|0);
      var $26=HEAP32[(($ftlibrary)>>2)];
      var $27=$render_priv_addr;
      var $state28=(($27+176)|0);
      var $stroker29=(($state28+28)|0);
      var $call=_FT_Stroker_New($26, $stroker29);
      $error=$call;
      var $28=$error;
      var $tobool30=(($28)|0)!=0;
      if ($tobool30) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $29=$render_priv_addr;
      var $library=(($29)|0);
      var $30=HEAP32[(($library)>>2)];
      _ass_msg($30, 6, ((STRING_TABLE.__str218)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      var $31=$render_priv_addr;
      var $state32=(($31+176)|0);
      var $stroker33=(($state32+28)|0);
      HEAP32[(($stroker33)>>2)]=0;
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $32=$render_priv_addr;
      var $state36=(($32+176)|0);
      var $stroker37=(($state36+28)|0);
      var $33=HEAP32[(($stroker37)>>2)];
      var $tobool38=(($33)|0)!=0;
      if ($tobool38) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $34=$render_priv_addr;
      var $state40=(($34+176)|0);
      var $stroker41=(($state40+28)|0);
      var $35=HEAP32[(($stroker41)>>2)];
      var $36=$bord;
      _FT_Stroker_Set($35, $36, 1, 0, 0);
      __label__ = 19; break;
    case 19: 
      __label__ = 21; break;
    case 20: 
      var $37=$render_priv_addr;
      var $state44=(($37+176)|0);
      var $stroker45=(($state44+28)|0);
      var $38=HEAP32[(($stroker45)>>2)];
      _FT_Stroker_Done($38);
      var $39=$render_priv_addr;
      var $state46=(($39+176)|0);
      var $stroker47=(($state46+28)|0);
      HEAP32[(($stroker47)>>2)]=0;
      __label__ = 21; break;
    case 21: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_change_border["X"]=1;

function _apply_transition_effects($render_priv, $event) {
  var __stackBase__  = STACKTOP; STACKTOP += 16; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      var $event_addr;
      var $v=__stackBase__;
      var $cnt;
      var $p;
      var $delay;
      var $delay49;
      var $y0;
      var $y1;
      $render_priv_addr=$render_priv;
      $event_addr=$event;
      var $0=$event_addr;
      var $Effect=(($0+44)|0);
      var $1=HEAP32[(($Effect)>>2)];
      $p=$1;
      var $2=$p;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $3=$p;
      var $4=HEAP8[($3)];
      var $tobool1=(($4 << 24) >> 24)!=0;
      if ($tobool1) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      __label__ = 36; break;
    case 5: 
      $cnt=0;
      __label__ = 6; break;
    case 6: 
      var $5=$cnt;
      var $cmp=(($5)|0) < 4;
      if ($cmp) { __label__ = 7; break; } else { var $7 = 0;__label__ = 8; break; }
    case 7: 
      var $6=$p;
      var $call=_strchr($6, 59);
      $p=$call;
      var $tobool2=(($call)|0)!=0;
      var $7 = $tobool2;__label__ = 8; break;
    case 8: 
      var $7;
      if ($7) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $8=$p;
      var $incdec_ptr=(($8+1)|0);
      $p=$incdec_ptr;
      var $call3=_atoi($incdec_ptr);
      var $9=$cnt;
      var $inc=((($9)+(1))|0);
      $cnt=$inc;
      var $arrayidx=(($v+($9<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$call3;
      __label__ = 6; break;
    case 10: 
      var $10=$event_addr;
      var $Effect4=(($10+44)|0);
      var $11=HEAP32[(($Effect4)>>2)];
      var $call5=_strncmp($11, ((STRING_TABLE.__str1219)|0), 7);
      var $cmp6=(($call5)|0)==0;
      if ($cmp6) { __label__ = 11; break; } else { __label__ = 20; break; }
    case 11: 
      var $12=$cnt;
      var $cmp8=(($12)|0) < 1;
      if ($cmp8) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $13=$render_priv_addr;
      var $library=(($13)|0);
      var $14=HEAP32[(($library)>>2)];
      var $15=$event_addr;
      var $Effect10=(($15+44)|0);
      var $16=HEAP32[(($Effect10)>>2)];
      _ass_msg($14, 6, ((STRING_TABLE.__str2220)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$16,tempInt));
      __label__ = 36; break;
    case 13: 
      var $17=$cnt;
      var $cmp12=(($17)|0) >= 2;
      if ($cmp12) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $arrayidx13=(($v+4)|0);
      var $18=HEAP32[(($arrayidx13)>>2)];
      var $cmp14=(($18)|0)==0;
      if ($cmp14) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $19=$render_priv_addr;
      var $state=(($19+176)|0);
      var $scroll_direction=(($state+256)|0);
      HEAP32[(($scroll_direction)>>2)]=1;
      __label__ = 17; break;
    case 16: 
      var $20=$render_priv_addr;
      var $state16=(($20+176)|0);
      var $scroll_direction17=(($state16+256)|0);
      HEAP32[(($scroll_direction17)>>2)]=0;
      __label__ = 17; break;
    case 17: 
      var $arrayidx19=(($v)|0);
      var $21=HEAP32[(($arrayidx19)>>2)];
      $delay=$21;
      var $22=$delay;
      var $cmp20=(($22)|0)==0;
      if ($cmp20) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      $delay=1;
      __label__ = 19; break;
    case 19: 
      var $23=$render_priv_addr;
      var $time=(($23+144)|0);
      var $st$2$0=(($time)|0);
      var $24$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($time+4)|0);
      var $24$1=HEAP32[(($st$2$1)>>2)];
      var $25=$render_priv_addr;
      var $state23=(($25+176)|0);
      var $event24=(($state23)|0);
      var $26=HEAP32[(($event24)>>2)];
      var $Start=(($26)|0);
      var $st$11$0=(($Start)|0);
      var $27$0=HEAP32[(($st$11$0)>>2)];
      var $st$11$1=(($Start+4)|0);
      var $27$1=HEAP32[(($st$11$1)>>2)];
      var $sub$0 = (i64Math.subtract($24$0,$24$1,$27$0,$27$1),i64Math.result[0]); var $sub$1 = i64Math.result[1];
      var $28=$delay;
      var $conv$0=$28;
      var $conv$1=(($28|0) < 0 ? -1 : 0);
      var $div$0 = (i64Math.divide($sub$0,$sub$1,$conv$0,$conv$1),i64Math.result[0]); var $div$1 = i64Math.result[1];
      var $conv25$0=$div$0;
      var $conv25=$conv25$0;
      var $29=$render_priv_addr;
      var $state26=(($29+176)|0);
      var $scroll_shift=(($state26+260)|0);
      HEAP32[(($scroll_shift)>>2)]=$conv25;
      var $30=$render_priv_addr;
      var $state27=(($30+176)|0);
      var $evt_type=(($state27+76)|0);
      HEAP32[(($evt_type)>>2)]=2;
      __label__ = 36; break;
    case 20: 
      var $31=$event_addr;
      var $Effect29=(($31+44)|0);
      var $32=HEAP32[(($Effect29)>>2)];
      var $call30=_strncmp($32, ((STRING_TABLE.__str3221)|0), 10);
      var $cmp31=(($call30)|0)==0;
      if ($cmp31) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $33=$render_priv_addr;
      var $state34=(($33+176)|0);
      var $scroll_direction35=(($state34+256)|0);
      HEAP32[(($scroll_direction35)>>2)]=3;
      __label__ = 26; break;
    case 22: 
      var $34=$event_addr;
      var $Effect37=(($34+44)|0);
      var $35=HEAP32[(($Effect37)>>2)];
      var $call38=_strncmp($35, ((STRING_TABLE.__str4222)|0), 12);
      var $cmp39=(($call38)|0)==0;
      if ($cmp39) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $36=$render_priv_addr;
      var $state42=(($36+176)|0);
      var $scroll_direction43=(($state42+256)|0);
      HEAP32[(($scroll_direction43)>>2)]=2;
      __label__ = 25; break;
    case 24: 
      var $37=$render_priv_addr;
      var $library45=(($37)|0);
      var $38=HEAP32[(($library45)>>2)];
      var $39=$event_addr;
      var $Effect46=(($39+44)|0);
      var $40=HEAP32[(($Effect46)>>2)];
      _ass_msg($38, 7, ((STRING_TABLE.__str5223)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$40,tempInt));
      __label__ = 36; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      var $41=$cnt;
      var $cmp50=(($41)|0) < 3;
      if ($cmp50) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $42=$render_priv_addr;
      var $library53=(($42)|0);
      var $43=HEAP32[(($library53)>>2)];
      var $44=$event_addr;
      var $Effect54=(($44+44)|0);
      var $45=HEAP32[(($Effect54)>>2)];
      _ass_msg($43, 6, ((STRING_TABLE.__str2220)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$45,tempInt));
      __label__ = 36; break;
    case 28: 
      var $arrayidx56=(($v+8)|0);
      var $46=HEAP32[(($arrayidx56)>>2)];
      $delay49=$46;
      var $47=$delay49;
      var $cmp57=(($47)|0)==0;
      if ($cmp57) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      $delay49=1;
      __label__ = 30; break;
    case 30: 
      var $48=$render_priv_addr;
      var $time61=(($48+144)|0);
      var $st$2$0=(($time61)|0);
      var $49$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($time61+4)|0);
      var $49$1=HEAP32[(($st$2$1)>>2)];
      var $50=$render_priv_addr;
      var $state62=(($50+176)|0);
      var $event63=(($state62)|0);
      var $51=HEAP32[(($event63)>>2)];
      var $Start64=(($51)|0);
      var $st$11$0=(($Start64)|0);
      var $52$0=HEAP32[(($st$11$0)>>2)];
      var $st$11$1=(($Start64+4)|0);
      var $52$1=HEAP32[(($st$11$1)>>2)];
      var $sub65$0 = (i64Math.subtract($49$0,$49$1,$52$0,$52$1),i64Math.result[0]); var $sub65$1 = i64Math.result[1];
      var $53=$delay49;
      var $conv66$0=$53;
      var $conv66$1=(($53|0) < 0 ? -1 : 0);
      var $div67$0 = (i64Math.divide($sub65$0,$sub65$1,$conv66$0,$conv66$1),i64Math.result[0]); var $div67$1 = i64Math.result[1];
      var $conv68$0=$div67$0;
      var $conv68=$conv68$0;
      var $54=$render_priv_addr;
      var $state69=(($54+176)|0);
      var $scroll_shift70=(($state69+260)|0);
      HEAP32[(($scroll_shift70)>>2)]=$conv68;
      var $arrayidx71=(($v)|0);
      var $55=HEAP32[(($arrayidx71)>>2)];
      var $arrayidx72=(($v+4)|0);
      var $56=HEAP32[(($arrayidx72)>>2)];
      var $cmp73=(($55)|0) < (($56)|0);
      if ($cmp73) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $arrayidx76=(($v)|0);
      var $57=HEAP32[(($arrayidx76)>>2)];
      $y0=$57;
      var $arrayidx77=(($v+4)|0);
      var $58=HEAP32[(($arrayidx77)>>2)];
      $y1=$58;
      __label__ = 33; break;
    case 32: 
      var $arrayidx79=(($v+4)|0);
      var $59=HEAP32[(($arrayidx79)>>2)];
      $y0=$59;
      var $arrayidx80=(($v)|0);
      var $60=HEAP32[(($arrayidx80)>>2)];
      $y1=$60;
      __label__ = 33; break;
    case 33: 
      var $61=$y1;
      var $cmp82=(($61)|0)==0;
      if ($cmp82) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $62=$render_priv_addr;
      var $track=(($62+140)|0);
      var $63=HEAP32[(($track)>>2)];
      var $PlayResY=(($63+40)|0);
      var $64=HEAP32[(($PlayResY)>>2)];
      $y1=$64;
      __label__ = 35; break;
    case 35: 
      var $65=$y0;
      var $66=$render_priv_addr;
      var $state86=(($66+176)|0);
      var $clip_y0=(($state86+176)|0);
      HEAP32[(($clip_y0)>>2)]=$65;
      var $67=$y1;
      var $68=$render_priv_addr;
      var $state87=(($68+176)|0);
      var $clip_y1=(($state87+184)|0);
      HEAP32[(($clip_y1)>>2)]=$67;
      var $69=$render_priv_addr;
      var $state88=(($69+176)|0);
      var $evt_type89=(($state88+76)|0);
      HEAP32[(($evt_type89)>>2)]=3;
      var $70=$render_priv_addr;
      var $state90=(($70+176)|0);
      var $detect_collisions=(($state90+189)|0);
      HEAP8[($detect_collisions)]=0;
      __label__ = 36; break;
    case 36: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_apply_transition_effects["X"]=1;

function _d6_to_int($x) {
  ;
  var __label__;

  var $x_addr;
  $x_addr=$x;
  var $0=$x_addr;
  var $add=((($0)+(32))|0);
  var $shr=$add >> 6;
  ;
  return $shr;
}


function _process_karaoke_effects($render_priv) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      var $cur;
      var $cur2;
      var $s1;
      var $e1;
      var $s2;
      var $i;
      var $timing;
      var $tm_start;
      var $tm_end;
      var $tm_current;
      var $dt;
      var $x;
      var $x_start;
      var $x_end;
      $render_priv_addr=$render_priv;
      var $0=$render_priv_addr;
      var $time=(($0+144)|0);
      var $st$18$0=(($time)|0);
      var $1$0=HEAP32[(($st$18$0)>>2)];
      var $st$18$1=(($time+4)|0);
      var $1$1=HEAP32[(($st$18$1)>>2)];
      var $2=$render_priv_addr;
      var $state=(($2+176)|0);
      var $event=(($state)|0);
      var $3=HEAP32[(($event)>>2)];
      var $Start=(($3)|0);
      var $st$27$0=(($Start)|0);
      var $4$0=HEAP32[(($st$27$0)>>2)];
      var $st$27$1=(($Start+4)|0);
      var $4$1=HEAP32[(($st$27$1)>>2)];
      var $sub$0 = (i64Math.subtract($1$0,$1$1,$4$0,$4$1),i64Math.result[0]); var $sub$1 = i64Math.result[1];
      var $conv$0=$sub$0;
      var $conv=$conv$0;
      $tm_current=$conv;
      $timing=0;
      $s2=0;
      $s1=0;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $5=$i;
      var $6=$render_priv_addr;
      var $text_info=(($6+464)|0);
      var $length=(($text_info+4)|0);
      var $7=HEAP32[(($length)>>2)];
      var $cmp=(($5)|0) <= (($7)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 35; break; }
    case 4: 
      var $8=$render_priv_addr;
      var $text_info2=(($8+464)|0);
      var $glyphs=(($text_info2)|0);
      var $9=HEAP32[(($glyphs)>>2)];
      var $10=$i;
      var $add_ptr=(($9+($10)*(328))|0);
      $cur=$add_ptr;
      var $11=$i;
      var $12=$render_priv_addr;
      var $text_info3=(($12+464)|0);
      var $length4=(($text_info3+4)|0);
      var $13=HEAP32[(($length4)>>2)];
      var $cmp5=(($11)|0)==(($13)|0);
      if ($cmp5) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $14=$cur;
      var $effect_type=(($14+120)|0);
      var $15=HEAP32[(($effect_type)>>2)];
      var $cmp7=(($15)|0)!=0;
      if ($cmp7) { __label__ = 6; break; } else { __label__ = 33; break; }
    case 6: 
      var $16=$s2;
      $s1=$16;
      var $17=$cur;
      $s2=$17;
      var $18=$s1;
      var $tobool=(($18)|0)!=0;
      if ($tobool) { __label__ = 7; break; } else { __label__ = 32; break; }
    case 7: 
      var $19=$s2;
      var $add_ptr10=((($19)-(328))|0);
      $e1=$add_ptr10;
      var $20=$timing;
      var $21=$s1;
      var $effect_skip_timing=(($21+128)|0);
      var $22=HEAP32[(($effect_skip_timing)>>2)];
      var $add=((($20)+($22))|0);
      $tm_start=$add;
      var $23=$tm_start;
      var $24=$s1;
      var $effect_timing=(($24+124)|0);
      var $25=HEAP32[(($effect_timing)>>2)];
      var $add11=((($23)+($25))|0);
      $tm_end=$add11;
      var $26=$tm_end;
      $timing=$26;
      $x_start=1000000;
      $x_end=-1000000;
      var $27=$s1;
      $cur2=$27;
      __label__ = 8; break;
    case 8: 
      var $28=$cur2;
      var $29=$e1;
      var $cmp13=(($28)>>>0) <= (($29)>>>0);
      if ($cmp13) { __label__ = 9; break; } else { __label__ = 17; break; }
    case 9: 
      var $30=$x_start;
      var $31=$cur2;
      var $bbox=(($31+52)|0);
      var $xMin=(($bbox)|0);
      var $32=HEAP32[(($xMin)>>2)];
      var $33=$cur2;
      var $pos=(($33+68)|0);
      var $x16=(($pos)|0);
      var $34=HEAP32[(($x16)>>2)];
      var $add17=((($32)+($34))|0);
      var $call=_d6_to_int($add17);
      var $cmp18=(($30)|0) > (($call)|0);
      if ($cmp18) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $35=$cur2;
      var $bbox20=(($35+52)|0);
      var $xMin21=(($bbox20)|0);
      var $36=HEAP32[(($xMin21)>>2)];
      var $37=$cur2;
      var $pos22=(($37+68)|0);
      var $x23=(($pos22)|0);
      var $38=HEAP32[(($x23)>>2)];
      var $add24=((($36)+($38))|0);
      var $call25=_d6_to_int($add24);
      var $cond = $call25;__label__ = 12; break;
    case 11: 
      var $39=$x_start;
      var $cond = $39;__label__ = 12; break;
    case 12: 
      var $cond;
      $x_start=$cond;
      var $40=$x_end;
      var $41=$cur2;
      var $bbox26=(($41+52)|0);
      var $xMax=(($bbox26+8)|0);
      var $42=HEAP32[(($xMax)>>2)];
      var $43=$cur2;
      var $pos27=(($43+68)|0);
      var $x28=(($pos27)|0);
      var $44=HEAP32[(($x28)>>2)];
      var $add29=((($42)+($44))|0);
      var $call30=_d6_to_int($add29);
      var $cmp31=(($40)|0) > (($call30)|0);
      if ($cmp31) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $45=$x_end;
      var $cond42 = $45;__label__ = 15; break;
    case 14: 
      var $46=$cur2;
      var $bbox35=(($46+52)|0);
      var $xMax36=(($bbox35+8)|0);
      var $47=HEAP32[(($xMax36)>>2)];
      var $48=$cur2;
      var $pos37=(($48+68)|0);
      var $x38=(($pos37)|0);
      var $49=HEAP32[(($x38)>>2)];
      var $add39=((($47)+($49))|0);
      var $call40=_d6_to_int($add39);
      var $cond42 = $call40;__label__ = 15; break;
    case 15: 
      var $cond42;
      $x_end=$cond42;
      __label__ = 16; break;
    case 16: 
      var $50=$cur2;
      var $incdec_ptr=(($50+328)|0);
      $cur2=$incdec_ptr;
      __label__ = 8; break;
    case 17: 
      var $51=$tm_current;
      var $52=$tm_start;
      var $sub43=((($51)-($52))|0);
      var $conv44=(($sub43)|0);
      $dt=$conv44;
      var $53=$s1;
      var $effect_type45=(($53+120)|0);
      var $54=HEAP32[(($effect_type45)>>2)];
      var $cmp46=(($54)|0)==1;
      if ($cmp46) { __label__ = 19; break; } else { __label__ = 18; break; }
    case 18: 
      var $55=$s1;
      var $effect_type49=(($55+120)|0);
      var $56=HEAP32[(($effect_type49)>>2)];
      var $cmp50=(($56)|0)==3;
      if ($cmp50) { __label__ = 19; break; } else { __label__ = 23; break; }
    case 19: 
      var $57=$dt;
      var $cmp53=$57 > 0;
      if ($cmp53) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $58=$x_end;
      var $add56=((($58)+(1))|0);
      $x=$add56;
      __label__ = 22; break;
    case 21: 
      var $59=$x_start;
      $x=$59;
      __label__ = 22; break;
    case 22: 
      __label__ = 27; break;
    case 23: 
      var $60=$s1;
      var $effect_type58=(($60+120)|0);
      var $61=HEAP32[(($effect_type58)>>2)];
      var $cmp59=(($61)|0)==2;
      if ($cmp59) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $62=$tm_end;
      var $63=$tm_start;
      var $sub62=((($62)-($63))|0);
      var $conv63=(($sub62)|0);
      var $64=$dt;
      var $div=($64)/($conv63);
      $dt=$div;
      var $65=$x_start;
      var $conv64=(($65)|0);
      var $66=$x_end;
      var $67=$x_start;
      var $sub65=((($66)-($67))|0);
      var $conv66=(($sub65)|0);
      var $68=$dt;
      var $mul=($conv66)*($68);
      var $add67=($conv64)+($mul);
      var $conv68=(($add67)&-1);
      $x=$conv68;
      __label__ = 26; break;
    case 25: 
      var $69=$render_priv_addr;
      var $library=(($69)|0);
      var $70=HEAP32[(($library)>>2)];
      _ass_msg($70, 1, ((STRING_TABLE.__str6224)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 34; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $71=$s1;
      $cur2=$71;
      __label__ = 28; break;
    case 28: 
      var $72=$cur2;
      var $73=$e1;
      var $cmp73=(($72)>>>0) <= (($73)>>>0);
      if ($cmp73) { __label__ = 29; break; } else { __label__ = 31; break; }
    case 29: 
      var $74=$s1;
      var $effect_type76=(($74+120)|0);
      var $75=HEAP32[(($effect_type76)>>2)];
      var $76=$cur2;
      var $effect_type77=(($76+120)|0);
      HEAP32[(($effect_type77)>>2)]=$75;
      var $77=$x;
      var $78=$cur2;
      var $pos78=(($78+68)|0);
      var $x79=(($pos78)|0);
      var $79=HEAP32[(($x79)>>2)];
      var $call80=_d6_to_int($79);
      var $sub81=((($77)-($call80))|0);
      var $80=$cur2;
      var $effect_timing82=(($80+124)|0);
      HEAP32[(($effect_timing82)>>2)]=$sub81;
      __label__ = 30; break;
    case 30: 
      var $81=$cur2;
      var $incdec_ptr84=(($81+328)|0);
      $cur2=$incdec_ptr84;
      __label__ = 28; break;
    case 31: 
      __label__ = 32; break;
    case 32: 
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      var $82=$i;
      var $inc=((($82)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 35: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_process_karaoke_effects["X"]=1;

function _get_next_char($render_priv, $str) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $render_priv_addr;
      var $str_addr;
      var $p=__stackBase__;
      var $chr;
      $render_priv_addr=$render_priv;
      $str_addr=$str;
      var $0=$str_addr;
      var $1=HEAP32[(($0)>>2)];
      HEAP32[(($p)>>2)]=$1;
      var $2=HEAP32[(($p)>>2)];
      var $3=HEAP8[($2)];
      var $conv=(($3 << 24) >> 24);
      var $cmp=(($conv)|0)==123;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 15; break; }
    case 3: 
      var $4=HEAP32[(($p)>>2)];
      var $incdec_ptr=(($4+1)|0);
      HEAP32[(($p)>>2)]=$incdec_ptr;
      __label__ = 4; break;
    case 4: 
      var $5=$render_priv_addr;
      var $6=HEAP32[(($p)>>2)];
      var $call=_parse_tag($5, $6, 1);
      HEAP32[(($p)>>2)]=$call;
      var $7=HEAP32[(($p)>>2)];
      var $8=HEAP8[($7)];
      var $conv2=(($8 << 24) >> 24);
      var $cmp3=(($conv2)|0)==125;
      if ($cmp3) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $9=HEAP32[(($p)>>2)];
      var $incdec_ptr6=(($9+1)|0);
      HEAP32[(($p)>>2)]=$incdec_ptr6;
      var $10=HEAP32[(($p)>>2)];
      var $11=HEAP8[($10)];
      var $conv7=(($11 << 24) >> 24);
      var $cmp8=(($conv7)|0)==123;
      if ($cmp8) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $12=HEAP32[(($p)>>2)];
      var $incdec_ptr11=(($12+1)|0);
      HEAP32[(($p)>>2)]=$incdec_ptr11;
      __label__ = 4; break;
    case 7: 
      __label__ = 14; break;
    case 8: 
      var $13=HEAP32[(($p)>>2)];
      var $14=HEAP8[($13)];
      var $conv13=(($14 << 24) >> 24);
      var $cmp14=(($conv13)|0)!=92;
      if ($cmp14) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $15=$render_priv_addr;
      var $library=(($15)|0);
      var $16=HEAP32[(($library)>>2)];
      var $17=HEAP32[(($p)>>2)];
      _ass_msg($16, 6, ((STRING_TABLE.__str7225)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$17,tempInt));
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $18=HEAP32[(($p)>>2)];
      var $19=HEAP8[($18)];
      var $conv18=(($19 << 24) >> 24);
      var $cmp19=(($conv18)|0)==0;
      if ($cmp19) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      __label__ = 14; break;
    case 13: 
      __label__ = 4; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $20=HEAP32[(($p)>>2)];
      var $21=HEAP8[($20)];
      var $conv24=(($21 << 24) >> 24);
      var $cmp25=(($conv24)|0)==9;
      if ($cmp25) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $22=HEAP32[(($p)>>2)];
      var $incdec_ptr28=(($22+1)|0);
      HEAP32[(($p)>>2)]=$incdec_ptr28;
      var $23=HEAP32[(($p)>>2)];
      var $24=$str_addr;
      HEAP32[(($24)>>2)]=$23;
      $retval=32;
      __label__ = 36; break;
    case 17: 
      var $25=HEAP32[(($p)>>2)];
      var $26=HEAP8[($25)];
      var $conv30=(($26 << 24) >> 24);
      var $cmp31=(($conv30)|0)==92;
      if ($cmp31) { __label__ = 18; break; } else { __label__ = 35; break; }
    case 18: 
      var $27=HEAP32[(($p)>>2)];
      var $arrayidx=(($27+1)|0);
      var $28=HEAP8[($arrayidx)];
      var $conv34=(($28 << 24) >> 24);
      var $cmp35=(($conv34)|0)==78;
      if ($cmp35) { __label__ = 21; break; } else { __label__ = 19; break; }
    case 19: 
      var $29=HEAP32[(($p)>>2)];
      var $arrayidx37=(($29+1)|0);
      var $30=HEAP8[($arrayidx37)];
      var $conv38=(($30 << 24) >> 24);
      var $cmp39=(($conv38)|0)==110;
      if ($cmp39) { __label__ = 20; break; } else { __label__ = 22; break; }
    case 20: 
      var $31=$render_priv_addr;
      var $state=(($31+176)|0);
      var $wrap_style=(($state+280)|0);
      var $32=HEAP32[(($wrap_style)>>2)];
      var $cmp41=(($32)|0)==2;
      if ($cmp41) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $33=HEAP32[(($p)>>2)];
      var $add_ptr=(($33+2)|0);
      HEAP32[(($p)>>2)]=$add_ptr;
      var $34=HEAP32[(($p)>>2)];
      var $35=$str_addr;
      HEAP32[(($35)>>2)]=$34;
      $retval=10;
      __label__ = 36; break;
    case 22: 
      var $36=HEAP32[(($p)>>2)];
      var $arrayidx45=(($36+1)|0);
      var $37=HEAP8[($arrayidx45)];
      var $conv46=(($37 << 24) >> 24);
      var $cmp47=(($conv46)|0)==110;
      if ($cmp47) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $38=HEAP32[(($p)>>2)];
      var $add_ptr50=(($38+2)|0);
      HEAP32[(($p)>>2)]=$add_ptr50;
      var $39=HEAP32[(($p)>>2)];
      var $40=$str_addr;
      HEAP32[(($40)>>2)]=$39;
      $retval=32;
      __label__ = 36; break;
    case 24: 
      var $41=HEAP32[(($p)>>2)];
      var $arrayidx52=(($41+1)|0);
      var $42=HEAP8[($arrayidx52)];
      var $conv53=(($42 << 24) >> 24);
      var $cmp54=(($conv53)|0)==104;
      if ($cmp54) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $43=HEAP32[(($p)>>2)];
      var $add_ptr57=(($43+2)|0);
      HEAP32[(($p)>>2)]=$add_ptr57;
      var $44=HEAP32[(($p)>>2)];
      var $45=$str_addr;
      HEAP32[(($45)>>2)]=$44;
      $retval=160;
      __label__ = 36; break;
    case 26: 
      var $46=HEAP32[(($p)>>2)];
      var $arrayidx59=(($46+1)|0);
      var $47=HEAP8[($arrayidx59)];
      var $conv60=(($47 << 24) >> 24);
      var $cmp61=(($conv60)|0)==123;
      if ($cmp61) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $48=HEAP32[(($p)>>2)];
      var $add_ptr64=(($48+2)|0);
      HEAP32[(($p)>>2)]=$add_ptr64;
      var $49=HEAP32[(($p)>>2)];
      var $50=$str_addr;
      HEAP32[(($50)>>2)]=$49;
      $retval=123;
      __label__ = 36; break;
    case 28: 
      var $51=HEAP32[(($p)>>2)];
      var $arrayidx66=(($51+1)|0);
      var $52=HEAP8[($arrayidx66)];
      var $conv67=(($52 << 24) >> 24);
      var $cmp68=(($conv67)|0)==125;
      if ($cmp68) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $53=HEAP32[(($p)>>2)];
      var $add_ptr71=(($53+2)|0);
      HEAP32[(($p)>>2)]=$add_ptr71;
      var $54=HEAP32[(($p)>>2)];
      var $55=$str_addr;
      HEAP32[(($55)>>2)]=$54;
      $retval=125;
      __label__ = 36; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      __label__ = 32; break;
    case 32: 
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      var $call78=_ass_utf8_get_char($p);
      $chr=$call78;
      var $56=HEAP32[(($p)>>2)];
      var $57=$str_addr;
      HEAP32[(($57)>>2)]=$56;
      var $58=$chr;
      $retval=$58;
      __label__ = 36; break;
    case 36: 
      var $59=$retval;
      STACKTOP = __stackBase__;
      return $59;
    default: assert(0, "bad label: " + __label__);
  }
}
_get_next_char["X"]=1;

function _parse_tag($render_priv, $p, $pwr) {
  var __stackBase__  = STACKTOP; STACKTOP += 432; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $render_priv_addr;
      var $p_addr=__stackBase__;
      var $pwr_addr;
      var $val=(__stackBase__)+(4);
      var $val33=(__stackBase__)+(12);
      var $val51=(__stackBase__)+(20);
      var $val71=(__stackBase__)+(28);
      var $val91=(__stackBase__)+(36);
      var $val110=(__stackBase__)+(44);
      var $x0=(__stackBase__)+(52);
      var $y0=(__stackBase__)+(56);
      var $x1=(__stackBase__)+(60);
      var $y1=(__stackBase__)+(64);
      var $res;
      var $start;
      var $val224=(__stackBase__)+(68);
      var $tp;
      var $val255=(__stackBase__)+(76);
      var $val303=(__stackBase__)+(84);
      var $val324=(__stackBase__)+(92);
      var $val343=(__stackBase__)+(100);
      var $val365=(__stackBase__)+(108);
      var $val389=(__stackBase__)+(116);
      var $x1416=(__stackBase__)+(124);
      var $x2=(__stackBase__)+(132);
      var $y1417=(__stackBase__)+(140);
      var $y2=(__stackBase__)+(148);
      var $t1=(__stackBase__)+(156);
      var $t2=(__stackBase__)+(164);
      var $delta_t=(__stackBase__)+(172);
      var $t=(__stackBase__)+(180);
      var $x;
      var $y;
      var $k;
      var $val519=(__stackBase__)+(188);
      var $val539=(__stackBase__)+(196);
      var $val562=(__stackBase__)+(204);
      var $start587;
      var $family;
      var $val629=(__stackBase__)+(212);
      var $i;
      var $hex;
      var $a;
      var $val672=(__stackBase__)+(216);
      var $v;
      var $val710=(__stackBase__)+(220);
      var $v1=(__stackBase__)+(224);
      var $v2=(__stackBase__)+(232);
      var $a1=(__stackBase__)+(240);
      var $a2=(__stackBase__)+(244);
      var $a3=(__stackBase__)+(248);
      var $t1789=(__stackBase__)+(252);
      var $t2790=(__stackBase__)+(260);
      var $t3=(__stackBase__)+(268);
      var $t4=(__stackBase__)+(276);
      var $v1893=(__stackBase__)+(284);
      var $v2894=(__stackBase__)+(288);
      var $v935=(__stackBase__)+(292);
      var $v1936;
      var $v2937;
      var $v3;
      var $cnt;
      var $t1938=(__stackBase__)+(316);
      var $t2939=(__stackBase__)+(324);
      var $t940=(__stackBase__)+(332);
      var $delta_t941=(__stackBase__)+(340);
      var $k942;
      var $start1097;
      var $x01098=(__stackBase__)+(348);
      var $y01099=(__stackBase__)+(352);
      var $x11100=(__stackBase__)+(356);
      var $y11101=(__stackBase__)+(360);
      var $res1102;
      var $val1212=(__stackBase__)+(364);
      var $hex1213;
      var $n;
      var $cidx;
      var $cmd;
      var $val1254=(__stackBase__)+(368);
      var $hex1255;
      var $val1327=(__stackBase__)+(372);
      var $b=(__stackBase__)+(376);
      var $i1374=(__stackBase__)+(380);
      var $val1396=(__stackBase__)+(384);
      var $val1414=(__stackBase__)+(388);
      var $val1435=(__stackBase__)+(392);
      var $val1456=(__stackBase__)+(396);
      var $val1487=(__stackBase__)+(404);
      var $val1507=(__stackBase__)+(408);
      var $val1528=(__stackBase__)+(412);
      var $val1538=(__stackBase__)+(420);
      var $val1555=(__stackBase__)+(424);
      var $val1566=(__stackBase__)+(428);
      $render_priv_addr=$render_priv;
      HEAP32[(($p_addr)>>2)]=$p;
      $pwr_addr=$pwr;
      __label__ = 3; break;
    case 3: 
      var $0=HEAP32[(($p_addr)>>2)];
      var $1=HEAP8[($0)];
      var $conv=(($1 << 24) >> 24);
      var $cmp=(($conv)|0)!=92;
      if ($cmp) { __label__ = 4; break; } else { var $6 = 0;__label__ = 6; break; }
    case 4: 
      var $2=HEAP32[(($p_addr)>>2)];
      var $3=HEAP8[($2)];
      var $conv2=(($3 << 24) >> 24);
      var $cmp3=(($conv2)|0)!=125;
      if ($cmp3) { __label__ = 5; break; } else { var $6 = 0;__label__ = 6; break; }
    case 5: 
      var $4=HEAP32[(($p_addr)>>2)];
      var $5=HEAP8[($4)];
      var $conv5=(($5 << 24) >> 24);
      var $cmp6=(($conv5)|0)!=0;
      var $6 = $cmp6;__label__ = 6; break;
    case 6: 
      var $6;
      if ($6) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $7=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr=(($7+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr;
      __label__ = 3; break;
    case 8: 
      var $8=HEAP32[(($p_addr)>>2)];
      var $9=HEAP8[($8)];
      var $conv8=(($9 << 24) >> 24);
      var $cmp9=(($conv8)|0)==92;
      if ($cmp9) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $10=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr11=(($10+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr11;
      __label__ = 11; break;
    case 10: 
      var $11=HEAP32[(($p_addr)>>2)];
      $retval=$11;
      __label__ = 486; break;
    case 11: 
      var $12=HEAP32[(($p_addr)>>2)];
      var $13=HEAP8[($12)];
      var $conv12=(($13 << 24) >> 24);
      var $cmp13=(($conv12)|0)==125;
      if ($cmp13) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $14=HEAP32[(($p_addr)>>2)];
      var $15=HEAP8[($14)];
      var $conv15=(($15 << 24) >> 24);
      var $cmp16=(($conv15)|0)==0;
      if ($cmp16) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $16=HEAP32[(($p_addr)>>2)];
      $retval=$16;
      __label__ = 486; break;
    case 14: 
      var $call=_mystrcmp($p_addr, ((STRING_TABLE.__str8226)|0));
      var $tobool=(($call)|0)!=0;
      if ($tobool) { __label__ = 15; break; } else { __label__ = 19; break; }
    case 15: 
      var $call21=_mystrtod($p_addr, $val);
      var $tobool22=(($call21)|0)!=0;
      if ($tobool22) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $17=$render_priv_addr;
      var $state=(($17+176)|0);
      var $border_x=(($state+140)|0);
      var $18=(tempDoubleI32[0]=HEAP32[(($border_x)>>2)],tempDoubleI32[1]=HEAP32[((($border_x)+(4))>>2)],tempDoubleF64[0]);
      var $19=$pwr_addr;
      var $sub=(1)-($19);
      var $mul=($18)*($sub);
      var $20=(tempDoubleI32[0]=HEAP32[(($val)>>2)],tempDoubleI32[1]=HEAP32[((($val)+(4))>>2)],tempDoubleF64[0]);
      var $21=$pwr_addr;
      var $mul24=($20)*($21);
      var $add=($mul)+($mul24);
      (tempDoubleF64[0]=$add,HEAP32[(($val)>>2)]=tempDoubleI32[0],HEAP32[((($val)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 18; break;
    case 17: 
      (tempDoubleF64[0]=-1,HEAP32[(($val)>>2)]=tempDoubleI32[0],HEAP32[((($val)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 18; break;
    case 18: 
      var $22=$render_priv_addr;
      var $23=(tempDoubleI32[0]=HEAP32[(($val)>>2)],tempDoubleI32[1]=HEAP32[((($val)+(4))>>2)],tempDoubleF64[0]);
      var $24=$render_priv_addr;
      var $state27=(($24+176)|0);
      var $border_y=(($state27+148)|0);
      var $25=(tempDoubleI32[0]=HEAP32[(($border_y)>>2)],tempDoubleI32[1]=HEAP32[((($border_y)+(4))>>2)],tempDoubleF64[0]);
      _change_border($22, $23, $25);
      var $26=$render_priv_addr;
      var $state28=(($26+176)|0);
      var $bm_run_id=(($state28+252)|0);
      var $27=HEAP32[(($bm_run_id)>>2)];
      var $inc=((($27)+(1))|0);
      HEAP32[(($bm_run_id)>>2)]=$inc;
      __label__ = 485; break;
    case 19: 
      var $call30=_mystrcmp($p_addr, ((STRING_TABLE.__str9227)|0));
      var $tobool31=(($call30)|0)!=0;
      if ($tobool31) { __label__ = 20; break; } else { __label__ = 24; break; }
    case 20: 
      var $call34=_mystrtod($p_addr, $val33);
      var $tobool35=(($call34)|0)!=0;
      if ($tobool35) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $28=$render_priv_addr;
      var $state37=(($28+176)|0);
      var $border_y38=(($state37+148)|0);
      var $29=(tempDoubleI32[0]=HEAP32[(($border_y38)>>2)],tempDoubleI32[1]=HEAP32[((($border_y38)+(4))>>2)],tempDoubleF64[0]);
      var $30=$pwr_addr;
      var $sub39=(1)-($30);
      var $mul40=($29)*($sub39);
      var $31=(tempDoubleI32[0]=HEAP32[(($val33)>>2)],tempDoubleI32[1]=HEAP32[((($val33)+(4))>>2)],tempDoubleF64[0]);
      var $32=$pwr_addr;
      var $mul41=($31)*($32);
      var $add42=($mul40)+($mul41);
      (tempDoubleF64[0]=$add42,HEAP32[(($val33)>>2)]=tempDoubleI32[0],HEAP32[((($val33)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 23; break;
    case 22: 
      (tempDoubleF64[0]=-1,HEAP32[(($val33)>>2)]=tempDoubleI32[0],HEAP32[((($val33)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 23; break;
    case 23: 
      var $33=$render_priv_addr;
      var $34=$render_priv_addr;
      var $state45=(($34+176)|0);
      var $border_x46=(($state45+140)|0);
      var $35=(tempDoubleI32[0]=HEAP32[(($border_x46)>>2)],tempDoubleI32[1]=HEAP32[((($border_x46)+(4))>>2)],tempDoubleF64[0]);
      var $36=(tempDoubleI32[0]=HEAP32[(($val33)>>2)],tempDoubleI32[1]=HEAP32[((($val33)+(4))>>2)],tempDoubleF64[0]);
      _change_border($33, $35, $36);
      __label__ = 484; break;
    case 24: 
      var $call48=_mystrcmp($p_addr, ((STRING_TABLE.__str10228)|0));
      var $tobool49=(($call48)|0)!=0;
      if ($tobool49) { __label__ = 25; break; } else { __label__ = 29; break; }
    case 25: 
      var $call52=_mystrtod($p_addr, $val51);
      var $tobool53=(($call52)|0)!=0;
      if ($tobool53) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      var $37=$render_priv_addr;
      var $state55=(($37+176)|0);
      var $shadow_x=(($state55+208)|0);
      var $38=(tempDoubleI32[0]=HEAP32[(($shadow_x)>>2)],tempDoubleI32[1]=HEAP32[((($shadow_x)+(4))>>2)],tempDoubleF64[0]);
      var $39=$pwr_addr;
      var $sub56=(1)-($39);
      var $mul57=($38)*($sub56);
      var $40=(tempDoubleI32[0]=HEAP32[(($val51)>>2)],tempDoubleI32[1]=HEAP32[((($val51)+(4))>>2)],tempDoubleF64[0]);
      var $41=$pwr_addr;
      var $mul58=($40)*($41);
      var $add59=($mul57)+($mul58);
      (tempDoubleF64[0]=$add59,HEAP32[(($val51)>>2)]=tempDoubleI32[0],HEAP32[((($val51)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 28; break;
    case 27: 
      (tempDoubleF64[0]=0,HEAP32[(($val51)>>2)]=tempDoubleI32[0],HEAP32[((($val51)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 28; break;
    case 28: 
      var $42=(tempDoubleI32[0]=HEAP32[(($val51)>>2)],tempDoubleI32[1]=HEAP32[((($val51)+(4))>>2)],tempDoubleF64[0]);
      var $43=$render_priv_addr;
      var $state62=(($43+176)|0);
      var $shadow_x63=(($state62+208)|0);
      (tempDoubleF64[0]=$42,HEAP32[(($shadow_x63)>>2)]=tempDoubleI32[0],HEAP32[((($shadow_x63)+(4))>>2)]=tempDoubleI32[1]);
      var $44=$render_priv_addr;
      var $state64=(($44+176)|0);
      var $bm_run_id65=(($state64+252)|0);
      var $45=HEAP32[(($bm_run_id65)>>2)];
      var $inc66=((($45)+(1))|0);
      HEAP32[(($bm_run_id65)>>2)]=$inc66;
      __label__ = 483; break;
    case 29: 
      var $call68=_mystrcmp($p_addr, ((STRING_TABLE.__str11229)|0));
      var $tobool69=(($call68)|0)!=0;
      if ($tobool69) { __label__ = 30; break; } else { __label__ = 34; break; }
    case 30: 
      var $call72=_mystrtod($p_addr, $val71);
      var $tobool73=(($call72)|0)!=0;
      if ($tobool73) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $46=$render_priv_addr;
      var $state75=(($46+176)|0);
      var $shadow_y=(($state75+216)|0);
      var $47=(tempDoubleI32[0]=HEAP32[(($shadow_y)>>2)],tempDoubleI32[1]=HEAP32[((($shadow_y)+(4))>>2)],tempDoubleF64[0]);
      var $48=$pwr_addr;
      var $sub76=(1)-($48);
      var $mul77=($47)*($sub76);
      var $49=(tempDoubleI32[0]=HEAP32[(($val71)>>2)],tempDoubleI32[1]=HEAP32[((($val71)+(4))>>2)],tempDoubleF64[0]);
      var $50=$pwr_addr;
      var $mul78=($49)*($50);
      var $add79=($mul77)+($mul78);
      (tempDoubleF64[0]=$add79,HEAP32[(($val71)>>2)]=tempDoubleI32[0],HEAP32[((($val71)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 33; break;
    case 32: 
      (tempDoubleF64[0]=0,HEAP32[(($val71)>>2)]=tempDoubleI32[0],HEAP32[((($val71)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 33; break;
    case 33: 
      var $51=(tempDoubleI32[0]=HEAP32[(($val71)>>2)],tempDoubleI32[1]=HEAP32[((($val71)+(4))>>2)],tempDoubleF64[0]);
      var $52=$render_priv_addr;
      var $state82=(($52+176)|0);
      var $shadow_y83=(($state82+216)|0);
      (tempDoubleF64[0]=$51,HEAP32[(($shadow_y83)>>2)]=tempDoubleI32[0],HEAP32[((($shadow_y83)+(4))>>2)]=tempDoubleI32[1]);
      var $53=$render_priv_addr;
      var $state84=(($53+176)|0);
      var $bm_run_id85=(($state84+252)|0);
      var $54=HEAP32[(($bm_run_id85)>>2)];
      var $inc86=((($54)+(1))|0);
      HEAP32[(($bm_run_id85)>>2)]=$inc86;
      __label__ = 482; break;
    case 34: 
      var $call88=_mystrcmp($p_addr, ((STRING_TABLE.__str12230)|0));
      var $tobool89=(($call88)|0)!=0;
      if ($tobool89) { __label__ = 35; break; } else { __label__ = 39; break; }
    case 35: 
      var $call92=_mystrtod($p_addr, $val91);
      var $tobool93=(($call92)|0)!=0;
      if ($tobool93) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $55=(tempDoubleI32[0]=HEAP32[(($val91)>>2)],tempDoubleI32[1]=HEAP32[((($val91)+(4))>>2)],tempDoubleF64[0]);
      var $56=$pwr_addr;
      var $mul95=($55)*($56);
      var $57=$render_priv_addr;
      var $state96=(($57+176)|0);
      var $fax=(($state96+60)|0);
      var $58=(tempDoubleI32[0]=HEAP32[(($fax)>>2)],tempDoubleI32[1]=HEAP32[((($fax)+(4))>>2)],tempDoubleF64[0]);
      var $59=$pwr_addr;
      var $sub97=(1)-($59);
      var $mul98=($58)*($sub97);
      var $add99=($mul95)+($mul98);
      var $60=$render_priv_addr;
      var $state100=(($60+176)|0);
      var $fax101=(($state100+60)|0);
      (tempDoubleF64[0]=$add99,HEAP32[(($fax101)>>2)]=tempDoubleI32[0],HEAP32[((($fax101)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 38; break;
    case 37: 
      var $61=$render_priv_addr;
      var $state103=(($61+176)|0);
      var $fax104=(($state103+60)|0);
      (tempDoubleF64[0]=0,HEAP32[(($fax104)>>2)]=tempDoubleI32[0],HEAP32[((($fax104)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 38; break;
    case 38: 
      __label__ = 481; break;
    case 39: 
      var $call107=_mystrcmp($p_addr, ((STRING_TABLE.__str13231)|0));
      var $tobool108=(($call107)|0)!=0;
      if ($tobool108) { __label__ = 40; break; } else { __label__ = 44; break; }
    case 40: 
      var $call111=_mystrtod($p_addr, $val110);
      var $tobool112=(($call111)|0)!=0;
      if ($tobool112) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $62=(tempDoubleI32[0]=HEAP32[(($val110)>>2)],tempDoubleI32[1]=HEAP32[((($val110)+(4))>>2)],tempDoubleF64[0]);
      var $63=$pwr_addr;
      var $mul114=($62)*($63);
      var $64=$render_priv_addr;
      var $state115=(($64+176)|0);
      var $fay=(($state115+68)|0);
      var $65=(tempDoubleI32[0]=HEAP32[(($fay)>>2)],tempDoubleI32[1]=HEAP32[((($fay)+(4))>>2)],tempDoubleF64[0]);
      var $66=$pwr_addr;
      var $sub116=(1)-($66);
      var $mul117=($65)*($sub116);
      var $add118=($mul114)+($mul117);
      var $67=$render_priv_addr;
      var $state119=(($67+176)|0);
      var $fay120=(($state119+68)|0);
      (tempDoubleF64[0]=$add118,HEAP32[(($fay120)>>2)]=tempDoubleI32[0],HEAP32[((($fay120)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 43; break;
    case 42: 
      var $68=$render_priv_addr;
      var $state122=(($68+176)|0);
      var $fay123=(($state122+68)|0);
      (tempDoubleF64[0]=0,HEAP32[(($fay123)>>2)]=tempDoubleI32[0],HEAP32[((($fay123)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 43; break;
    case 43: 
      __label__ = 480; break;
    case 44: 
      var $call126=_mystrcmp($p_addr, ((STRING_TABLE.__str14232)|0));
      var $tobool127=(($call126)|0)!=0;
      if ($tobool127) { __label__ = 45; break; } else { __label__ = 62; break; }
    case 45: 
      $res=1;
      var $69=HEAP32[(($p_addr)>>2)];
      $start=$69;
      var $70=HEAP32[(($p_addr)>>2)];
      var $71=HEAP8[($70)];
      var $conv129=(($71 << 24) >> 24);
      var $cmp130=(($conv129)|0)==40;
      if ($cmp130) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      var $72=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr133=(($72+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr133;
      __label__ = 47; break;
    case 47: 
      var $call135=_mystrtoi($p_addr, $x0);
      var $73=$res;
      var $and=$73 & $call135;
      $res=$and;
      var $74=HEAP32[(($p_addr)>>2)];
      var $75=HEAP8[($74)];
      var $conv136=(($75 << 24) >> 24);
      var $cmp137=(($conv136)|0)==44;
      if ($cmp137) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $76=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr140=(($76+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr140;
      __label__ = 49; break;
    case 49: 
      var $call142=_mystrtoi($p_addr, $y0);
      var $77=$res;
      var $and143=$77 & $call142;
      $res=$and143;
      var $78=HEAP32[(($p_addr)>>2)];
      var $79=HEAP8[($78)];
      var $conv144=(($79 << 24) >> 24);
      var $cmp145=(($conv144)|0)==44;
      if ($cmp145) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $80=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr148=(($80+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr148;
      __label__ = 51; break;
    case 51: 
      var $call150=_mystrtoi($p_addr, $x1);
      var $81=$res;
      var $and151=$81 & $call150;
      $res=$and151;
      var $82=HEAP32[(($p_addr)>>2)];
      var $83=HEAP8[($82)];
      var $conv152=(($83 << 24) >> 24);
      var $cmp153=(($conv152)|0)==44;
      if ($cmp153) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      var $84=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr156=(($84+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr156;
      __label__ = 53; break;
    case 53: 
      var $call158=_mystrtoi($p_addr, $y1);
      var $85=$res;
      var $and159=$85 & $call158;
      $res=$and159;
      var $86=HEAP32[(($p_addr)>>2)];
      var $87=HEAP8[($86)];
      var $conv160=(($87 << 24) >> 24);
      var $cmp161=(($conv160)|0)==41;
      if ($cmp161) { __label__ = 54; break; } else { __label__ = 55; break; }
    case 54: 
      var $88=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr164=(($88+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr164;
      __label__ = 55; break;
    case 55: 
      var $89=$res;
      var $tobool166=(($89)|0)!=0;
      if ($tobool166) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      var $90=$render_priv_addr;
      var $state168=(($90+176)|0);
      var $clip_x0=(($state168+172)|0);
      var $91=HEAP32[(($clip_x0)>>2)];
      var $conv169=(($91)|0);
      var $92=$pwr_addr;
      var $sub170=(1)-($92);
      var $mul171=($conv169)*($sub170);
      var $93=HEAP32[(($x0)>>2)];
      var $conv172=(($93)|0);
      var $94=$pwr_addr;
      var $mul173=($conv172)*($94);
      var $add174=($mul171)+($mul173);
      var $conv175=(($add174)&-1);
      var $95=$render_priv_addr;
      var $state176=(($95+176)|0);
      var $clip_x0177=(($state176+172)|0);
      HEAP32[(($clip_x0177)>>2)]=$conv175;
      var $96=$render_priv_addr;
      var $state178=(($96+176)|0);
      var $clip_x1=(($state178+180)|0);
      var $97=HEAP32[(($clip_x1)>>2)];
      var $conv179=(($97)|0);
      var $98=$pwr_addr;
      var $sub180=(1)-($98);
      var $mul181=($conv179)*($sub180);
      var $99=HEAP32[(($x1)>>2)];
      var $conv182=(($99)|0);
      var $100=$pwr_addr;
      var $mul183=($conv182)*($100);
      var $add184=($mul181)+($mul183);
      var $conv185=(($add184)&-1);
      var $101=$render_priv_addr;
      var $state186=(($101+176)|0);
      var $clip_x1187=(($state186+180)|0);
      HEAP32[(($clip_x1187)>>2)]=$conv185;
      var $102=$render_priv_addr;
      var $state188=(($102+176)|0);
      var $clip_y0=(($state188+176)|0);
      var $103=HEAP32[(($clip_y0)>>2)];
      var $conv189=(($103)|0);
      var $104=$pwr_addr;
      var $sub190=(1)-($104);
      var $mul191=($conv189)*($sub190);
      var $105=HEAP32[(($y0)>>2)];
      var $conv192=(($105)|0);
      var $106=$pwr_addr;
      var $mul193=($conv192)*($106);
      var $add194=($mul191)+($mul193);
      var $conv195=(($add194)&-1);
      var $107=$render_priv_addr;
      var $state196=(($107+176)|0);
      var $clip_y0197=(($state196+176)|0);
      HEAP32[(($clip_y0197)>>2)]=$conv195;
      var $108=$render_priv_addr;
      var $state198=(($108+176)|0);
      var $clip_y1=(($state198+184)|0);
      var $109=HEAP32[(($clip_y1)>>2)];
      var $conv199=(($109)|0);
      var $110=$pwr_addr;
      var $sub200=(1)-($110);
      var $mul201=($conv199)*($sub200);
      var $111=HEAP32[(($y1)>>2)];
      var $conv202=(($111)|0);
      var $112=$pwr_addr;
      var $mul203=($conv202)*($112);
      var $add204=($mul201)+($mul203);
      var $conv205=(($add204)&-1);
      var $113=$render_priv_addr;
      var $state206=(($113+176)|0);
      var $clip_y1207=(($state206+184)|0);
      HEAP32[(($clip_y1207)>>2)]=$conv205;
      var $114=$render_priv_addr;
      var $state208=(($114+176)|0);
      var $clip_mode=(($state208+188)|0);
      HEAP8[($clip_mode)]=1;
      __label__ = 61; break;
    case 57: 
      var $115=$render_priv_addr;
      var $state210=(($115+176)|0);
      var $clip_drawing=(($state210+232)|0);
      var $116=HEAP32[(($clip_drawing)>>2)];
      var $tobool211=(($116)|0)!=0;
      if ($tobool211) { __label__ = 59; break; } else { __label__ = 58; break; }
    case 58: 
      var $117=$render_priv_addr;
      var $118=$start;
      var $call213=_parse_vector_clip($117, $118);
      HEAP32[(($p_addr)>>2)]=$call213;
      var $119=$render_priv_addr;
      var $state214=(($119+176)|0);
      var $clip_drawing_mode=(($state214+236)|0);
      HEAP32[(($clip_drawing_mode)>>2)]=1;
      __label__ = 60; break;
    case 59: 
      var $120=$render_priv_addr;
      var $state216=(($120+176)|0);
      var $clip_mode217=(($state216+188)|0);
      HEAP8[($clip_mode217)]=0;
      __label__ = 60; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      __label__ = 479; break;
    case 62: 
      var $call221=_mystrcmp($p_addr, ((STRING_TABLE.__str15233)|0));
      var $tobool222=(($call221)|0)!=0;
      if ($tobool222) { __label__ = 63; break; } else { __label__ = 73; break; }
    case 63: 
      var $call225=_mystrtod($p_addr, $val224);
      var $tobool226=(($call225)|0)!=0;
      if ($tobool226) { __label__ = 64; break; } else { __label__ = 71; break; }
    case 64: 
      var $121=$render_priv_addr;
      var $state228=(($121+176)|0);
      var $blur=(($state228+200)|0);
      var $122=(tempDoubleI32[0]=HEAP32[(($blur)>>2)],tempDoubleI32[1]=HEAP32[((($blur)+(4))>>2)],tempDoubleF64[0]);
      var $123=$pwr_addr;
      var $sub229=(1)-($123);
      var $mul230=($122)*($sub229);
      var $124=(tempDoubleI32[0]=HEAP32[(($val224)>>2)],tempDoubleI32[1]=HEAP32[((($val224)+(4))>>2)],tempDoubleF64[0]);
      var $125=$pwr_addr;
      var $mul231=($124)*($125);
      var $add232=($mul230)+($mul231);
      (tempDoubleF64[0]=$add232,HEAP32[(($val224)>>2)]=tempDoubleI32[0],HEAP32[((($val224)+(4))>>2)]=tempDoubleI32[1]);
      var $126=(tempDoubleI32[0]=HEAP32[(($val224)>>2)],tempDoubleI32[1]=HEAP32[((($val224)+(4))>>2)],tempDoubleF64[0]);
      var $cmp233=$126 < 0;
      if ($cmp233) { __label__ = 65; break; } else { __label__ = 66; break; }
    case 65: 
      var $cond = 0;__label__ = 67; break;
    case 66: 
      var $127=(tempDoubleI32[0]=HEAP32[(($val224)>>2)],tempDoubleI32[1]=HEAP32[((($val224)+(4))>>2)],tempDoubleF64[0]);
      var $cond = $127;__label__ = 67; break;
    case 67: 
      var $cond;
      (tempDoubleF64[0]=$cond,HEAP32[(($val224)>>2)]=tempDoubleI32[0],HEAP32[((($val224)+(4))>>2)]=tempDoubleI32[1]);
      var $128=(tempDoubleI32[0]=HEAP32[(($val224)>>2)],tempDoubleI32[1]=HEAP32[((($val224)+(4))>>2)],tempDoubleF64[0]);
      var $cmp235=$128 > 100;
      if ($cmp235) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $cond240 = 100;__label__ = 70; break;
    case 69: 
      var $129=(tempDoubleI32[0]=HEAP32[(($val224)>>2)],tempDoubleI32[1]=HEAP32[((($val224)+(4))>>2)],tempDoubleF64[0]);
      var $cond240 = $129;__label__ = 70; break;
    case 70: 
      var $cond240;
      (tempDoubleF64[0]=$cond240,HEAP32[(($val224)>>2)]=tempDoubleI32[0],HEAP32[((($val224)+(4))>>2)]=tempDoubleI32[1]);
      var $130=(tempDoubleI32[0]=HEAP32[(($val224)>>2)],tempDoubleI32[1]=HEAP32[((($val224)+(4))>>2)],tempDoubleF64[0]);
      var $131=$render_priv_addr;
      var $state241=(($131+176)|0);
      var $blur242=(($state241+200)|0);
      (tempDoubleF64[0]=$130,HEAP32[(($blur242)>>2)]=tempDoubleI32[0],HEAP32[((($blur242)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 72; break;
    case 71: 
      var $132=$render_priv_addr;
      var $state244=(($132+176)|0);
      var $blur245=(($state244+200)|0);
      (tempDoubleF64[0]=0,HEAP32[(($blur245)>>2)]=tempDoubleI32[0],HEAP32[((($blur245)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 72; break;
    case 72: 
      var $133=$render_priv_addr;
      var $state247=(($133+176)|0);
      var $bm_run_id248=(($state247+252)|0);
      var $134=HEAP32[(($bm_run_id248)>>2)];
      var $inc249=((($134)+(1))|0);
      HEAP32[(($bm_run_id248)>>2)]=$inc249;
      __label__ = 478; break;
    case 73: 
      var $call251=_mystrcmp($p_addr, ((STRING_TABLE.__str16234)|0));
      var $tobool252=(($call251)|0)!=0;
      if ($tobool252) { __label__ = 74; break; } else { __label__ = 86; break; }
    case 74: 
      var $135=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr254=(($135+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr254;
      var $136=HEAP8[($135)];
      $tp=$136;
      var $137=$tp;
      var $conv256=(($137 << 24) >> 24);
      var $cmp257=(($conv256)|0)==120;
      if ($cmp257) { __label__ = 75; break; } else { __label__ = 79; break; }
    case 75: 
      var $call260=_mystrtod($p_addr, $val255);
      var $tobool261=(($call260)|0)!=0;
      if ($tobool261) { __label__ = 76; break; } else { __label__ = 77; break; }
    case 76: 
      var $138=(tempDoubleI32[0]=HEAP32[(($val255)>>2)],tempDoubleI32[1]=HEAP32[((($val255)+(4))>>2)],tempDoubleF64[0]);
      var $div=($138)/(100);
      (tempDoubleF64[0]=$div,HEAP32[(($val255)>>2)]=tempDoubleI32[0],HEAP32[((($val255)+(4))>>2)]=tempDoubleI32[1]);
      var $139=$render_priv_addr;
      var $state263=(($139+176)|0);
      var $scale_x=(($state263+116)|0);
      var $140=(tempDoubleI32[0]=HEAP32[(($scale_x)>>2)],tempDoubleI32[1]=HEAP32[((($scale_x)+(4))>>2)],tempDoubleF64[0]);
      var $141=$pwr_addr;
      var $sub264=(1)-($141);
      var $mul265=($140)*($sub264);
      var $142=(tempDoubleI32[0]=HEAP32[(($val255)>>2)],tempDoubleI32[1]=HEAP32[((($val255)+(4))>>2)],tempDoubleF64[0]);
      var $143=$pwr_addr;
      var $mul266=($142)*($143);
      var $add267=($mul265)+($mul266);
      var $144=$render_priv_addr;
      var $state268=(($144+176)|0);
      var $scale_x269=(($state268+116)|0);
      (tempDoubleF64[0]=$add267,HEAP32[(($scale_x269)>>2)]=tempDoubleI32[0],HEAP32[((($scale_x269)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 78; break;
    case 77: 
      var $145=$render_priv_addr;
      var $state271=(($145+176)|0);
      var $style=(($state271+4)|0);
      var $146=HEAP32[(($style)>>2)];
      var $ScaleX=(($146+48)|0);
      var $147=(tempDoubleI32[0]=HEAP32[(($ScaleX)>>2)],tempDoubleI32[1]=HEAP32[((($ScaleX)+(4))>>2)],tempDoubleF64[0]);
      var $148=$render_priv_addr;
      var $state272=(($148+176)|0);
      var $scale_x273=(($state272+116)|0);
      (tempDoubleF64[0]=$147,HEAP32[(($scale_x273)>>2)]=tempDoubleI32[0],HEAP32[((($scale_x273)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 78; break;
    case 78: 
      __label__ = 85; break;
    case 79: 
      var $149=$tp;
      var $conv276=(($149 << 24) >> 24);
      var $cmp277=(($conv276)|0)==121;
      if ($cmp277) { __label__ = 80; break; } else { __label__ = 84; break; }
    case 80: 
      var $call280=_mystrtod($p_addr, $val255);
      var $tobool281=(($call280)|0)!=0;
      if ($tobool281) { __label__ = 81; break; } else { __label__ = 82; break; }
    case 81: 
      var $150=(tempDoubleI32[0]=HEAP32[(($val255)>>2)],tempDoubleI32[1]=HEAP32[((($val255)+(4))>>2)],tempDoubleF64[0]);
      var $div283=($150)/(100);
      (tempDoubleF64[0]=$div283,HEAP32[(($val255)>>2)]=tempDoubleI32[0],HEAP32[((($val255)+(4))>>2)]=tempDoubleI32[1]);
      var $151=$render_priv_addr;
      var $state284=(($151+176)|0);
      var $scale_y=(($state284+124)|0);
      var $152=(tempDoubleI32[0]=HEAP32[(($scale_y)>>2)],tempDoubleI32[1]=HEAP32[((($scale_y)+(4))>>2)],tempDoubleF64[0]);
      var $153=$pwr_addr;
      var $sub285=(1)-($153);
      var $mul286=($152)*($sub285);
      var $154=(tempDoubleI32[0]=HEAP32[(($val255)>>2)],tempDoubleI32[1]=HEAP32[((($val255)+(4))>>2)],tempDoubleF64[0]);
      var $155=$pwr_addr;
      var $mul287=($154)*($155);
      var $add288=($mul286)+($mul287);
      var $156=$render_priv_addr;
      var $state289=(($156+176)|0);
      var $scale_y290=(($state289+124)|0);
      (tempDoubleF64[0]=$add288,HEAP32[(($scale_y290)>>2)]=tempDoubleI32[0],HEAP32[((($scale_y290)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 83; break;
    case 82: 
      var $157=$render_priv_addr;
      var $state292=(($157+176)|0);
      var $style293=(($state292+4)|0);
      var $158=HEAP32[(($style293)>>2)];
      var $ScaleY=(($158+56)|0);
      var $159=(tempDoubleI32[0]=HEAP32[(($ScaleY)>>2)],tempDoubleI32[1]=HEAP32[((($ScaleY)+(4))>>2)],tempDoubleF64[0]);
      var $160=$render_priv_addr;
      var $state294=(($160+176)|0);
      var $scale_y295=(($state294+124)|0);
      (tempDoubleF64[0]=$159,HEAP32[(($scale_y295)>>2)]=tempDoubleI32[0],HEAP32[((($scale_y295)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 83; break;
    case 83: 
      __label__ = 84; break;
    case 84: 
      __label__ = 85; break;
    case 85: 
      __label__ = 477; break;
    case 86: 
      var $call300=_mystrcmp($p_addr, ((STRING_TABLE.__str17235)|0));
      var $tobool301=(($call300)|0)!=0;
      if ($tobool301) { __label__ = 87; break; } else { __label__ = 91; break; }
    case 87: 
      var $call304=_mystrtod($p_addr, $val303);
      var $tobool305=(($call304)|0)!=0;
      if ($tobool305) { __label__ = 88; break; } else { __label__ = 89; break; }
    case 88: 
      var $161=$render_priv_addr;
      var $state307=(($161+176)|0);
      var $hspacing=(($state307+132)|0);
      var $162=(tempDoubleI32[0]=HEAP32[(($hspacing)>>2)],tempDoubleI32[1]=HEAP32[((($hspacing)+(4))>>2)],tempDoubleF64[0]);
      var $163=$pwr_addr;
      var $sub308=(1)-($163);
      var $mul309=($162)*($sub308);
      var $164=(tempDoubleI32[0]=HEAP32[(($val303)>>2)],tempDoubleI32[1]=HEAP32[((($val303)+(4))>>2)],tempDoubleF64[0]);
      var $165=$pwr_addr;
      var $mul310=($164)*($165);
      var $add311=($mul309)+($mul310);
      var $166=$render_priv_addr;
      var $state312=(($166+176)|0);
      var $hspacing313=(($state312+132)|0);
      (tempDoubleF64[0]=$add311,HEAP32[(($hspacing313)>>2)]=tempDoubleI32[0],HEAP32[((($hspacing313)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 90; break;
    case 89: 
      var $167=$render_priv_addr;
      var $state315=(($167+176)|0);
      var $style316=(($state315+4)|0);
      var $168=HEAP32[(($style316)>>2)];
      var $Spacing=(($168+64)|0);
      var $169=(tempDoubleI32[0]=HEAP32[(($Spacing)>>2)],tempDoubleI32[1]=HEAP32[((($Spacing)+(4))>>2)],tempDoubleF64[0]);
      var $170=$render_priv_addr;
      var $state317=(($170+176)|0);
      var $hspacing318=(($state317+132)|0);
      (tempDoubleF64[0]=$169,HEAP32[(($hspacing318)>>2)]=tempDoubleI32[0],HEAP32[((($hspacing318)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 90; break;
    case 90: 
      __label__ = 476; break;
    case 91: 
      var $call321=_mystrcmp($p_addr, ((STRING_TABLE.__str18236)|0));
      var $tobool322=(($call321)|0)!=0;
      if ($tobool322) { __label__ = 92; break; } else { __label__ = 98; break; }
    case 92: 
      var $call325=_mystrtod($p_addr, $val324);
      var $tobool326=(($call325)|0)!=0;
      if ($tobool326) { __label__ = 93; break; } else { __label__ = 94; break; }
    case 93: 
      var $171=$render_priv_addr;
      var $state328=(($171+176)|0);
      var $font_size=(($state328+16)|0);
      var $172=(tempDoubleI32[0]=HEAP32[(($font_size)>>2)],tempDoubleI32[1]=HEAP32[((($font_size)+(4))>>2)],tempDoubleF64[0]);
      var $173=$pwr_addr;
      var $174=(tempDoubleI32[0]=HEAP32[(($val324)>>2)],tempDoubleI32[1]=HEAP32[((($val324)+(4))>>2)],tempDoubleF64[0]);
      var $mul329=($173)*($174);
      var $add330=($172)+($mul329);
      (tempDoubleF64[0]=$add330,HEAP32[(($val324)>>2)]=tempDoubleI32[0],HEAP32[((($val324)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 95; break;
    case 94: 
      var $175=$render_priv_addr;
      var $state332=(($175+176)|0);
      var $style333=(($state332+4)|0);
      var $176=HEAP32[(($style333)>>2)];
      var $FontSize=(($176+8)|0);
      var $177=(tempDoubleI32[0]=HEAP32[(($FontSize)>>2)],tempDoubleI32[1]=HEAP32[((($FontSize)+(4))>>2)],tempDoubleF64[0]);
      (tempDoubleF64[0]=$177,HEAP32[(($val324)>>2)]=tempDoubleI32[0],HEAP32[((($val324)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 95; break;
    case 95: 
      var $178=$render_priv_addr;
      var $state335=(($178+176)|0);
      var $font=(($state335+12)|0);
      var $179=HEAP32[(($font)>>2)];
      var $tobool336=(($179)|0)!=0;
      if ($tobool336) { __label__ = 96; break; } else { __label__ = 97; break; }
    case 96: 
      var $180=$render_priv_addr;
      var $181=(tempDoubleI32[0]=HEAP32[(($val324)>>2)],tempDoubleI32[1]=HEAP32[((($val324)+(4))>>2)],tempDoubleF64[0]);
      _change_font_size($180, $181);
      __label__ = 97; break;
    case 97: 
      __label__ = 475; break;
    case 98: 
      var $call340=_mystrcmp($p_addr, ((STRING_TABLE.__str19237)|0));
      var $tobool341=(($call340)|0)!=0;
      if ($tobool341) { __label__ = 99; break; } else { __label__ = 105; break; }
    case 99: 
      var $call344=_mystrtod($p_addr, $val343);
      var $tobool345=(($call344)|0)!=0;
      if ($tobool345) { __label__ = 100; break; } else { __label__ = 101; break; }
    case 100: 
      var $182=$render_priv_addr;
      var $state347=(($182+176)|0);
      var $font_size348=(($state347+16)|0);
      var $183=(tempDoubleI32[0]=HEAP32[(($font_size348)>>2)],tempDoubleI32[1]=HEAP32[((($font_size348)+(4))>>2)],tempDoubleF64[0]);
      var $184=$pwr_addr;
      var $185=(tempDoubleI32[0]=HEAP32[(($val343)>>2)],tempDoubleI32[1]=HEAP32[((($val343)+(4))>>2)],tempDoubleF64[0]);
      var $mul349=($184)*($185);
      var $sub350=($183)-($mul349);
      (tempDoubleF64[0]=$sub350,HEAP32[(($val343)>>2)]=tempDoubleI32[0],HEAP32[((($val343)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 102; break;
    case 101: 
      var $186=$render_priv_addr;
      var $state352=(($186+176)|0);
      var $style353=(($state352+4)|0);
      var $187=HEAP32[(($style353)>>2)];
      var $FontSize354=(($187+8)|0);
      var $188=(tempDoubleI32[0]=HEAP32[(($FontSize354)>>2)],tempDoubleI32[1]=HEAP32[((($FontSize354)+(4))>>2)],tempDoubleF64[0]);
      (tempDoubleF64[0]=$188,HEAP32[(($val343)>>2)]=tempDoubleI32[0],HEAP32[((($val343)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 102; break;
    case 102: 
      var $189=$render_priv_addr;
      var $state356=(($189+176)|0);
      var $font357=(($state356+12)|0);
      var $190=HEAP32[(($font357)>>2)];
      var $tobool358=(($190)|0)!=0;
      if ($tobool358) { __label__ = 103; break; } else { __label__ = 104; break; }
    case 103: 
      var $191=$render_priv_addr;
      var $192=(tempDoubleI32[0]=HEAP32[(($val343)>>2)],tempDoubleI32[1]=HEAP32[((($val343)+(4))>>2)],tempDoubleF64[0]);
      _change_font_size($191, $192);
      __label__ = 104; break;
    case 104: 
      __label__ = 474; break;
    case 105: 
      var $call362=_mystrcmp($p_addr, ((STRING_TABLE.__str20238)|0));
      var $tobool363=(($call362)|0)!=0;
      if ($tobool363) { __label__ = 106; break; } else { __label__ = 112; break; }
    case 106: 
      var $call366=_mystrtod($p_addr, $val365);
      var $tobool367=(($call366)|0)!=0;
      if ($tobool367) { __label__ = 107; break; } else { __label__ = 108; break; }
    case 107: 
      var $193=$render_priv_addr;
      var $state369=(($193+176)|0);
      var $font_size370=(($state369+16)|0);
      var $194=(tempDoubleI32[0]=HEAP32[(($font_size370)>>2)],tempDoubleI32[1]=HEAP32[((($font_size370)+(4))>>2)],tempDoubleF64[0]);
      var $195=$pwr_addr;
      var $sub371=(1)-($195);
      var $mul372=($194)*($sub371);
      var $196=(tempDoubleI32[0]=HEAP32[(($val365)>>2)],tempDoubleI32[1]=HEAP32[((($val365)+(4))>>2)],tempDoubleF64[0]);
      var $197=$pwr_addr;
      var $mul373=($196)*($197);
      var $add374=($mul372)+($mul373);
      (tempDoubleF64[0]=$add374,HEAP32[(($val365)>>2)]=tempDoubleI32[0],HEAP32[((($val365)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 109; break;
    case 108: 
      var $198=$render_priv_addr;
      var $state376=(($198+176)|0);
      var $style377=(($state376+4)|0);
      var $199=HEAP32[(($style377)>>2)];
      var $FontSize378=(($199+8)|0);
      var $200=(tempDoubleI32[0]=HEAP32[(($FontSize378)>>2)],tempDoubleI32[1]=HEAP32[((($FontSize378)+(4))>>2)],tempDoubleF64[0]);
      (tempDoubleF64[0]=$200,HEAP32[(($val365)>>2)]=tempDoubleI32[0],HEAP32[((($val365)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 109; break;
    case 109: 
      var $201=$render_priv_addr;
      var $state380=(($201+176)|0);
      var $font381=(($state380+12)|0);
      var $202=HEAP32[(($font381)>>2)];
      var $tobool382=(($202)|0)!=0;
      if ($tobool382) { __label__ = 110; break; } else { __label__ = 111; break; }
    case 110: 
      var $203=$render_priv_addr;
      var $204=(tempDoubleI32[0]=HEAP32[(($val365)>>2)],tempDoubleI32[1]=HEAP32[((($val365)+(4))>>2)],tempDoubleF64[0]);
      _change_font_size($203, $204);
      __label__ = 111; break;
    case 111: 
      __label__ = 473; break;
    case 112: 
      var $call386=_mystrcmp($p_addr, ((STRING_TABLE.__str21239)|0));
      var $tobool387=(($call386)|0)!=0;
      if ($tobool387) { __label__ = 113; break; } else { __label__ = 119; break; }
    case 113: 
      var $call390=_mystrtod($p_addr, $val389);
      var $tobool391=(($call390)|0)!=0;
      if ($tobool391) { __label__ = 114; break; } else { __label__ = 117; break; }
    case 114: 
      var $205=$render_priv_addr;
      var $state393=(($205+176)|0);
      var $border_x394=(($state393+140)|0);
      var $206=(tempDoubleI32[0]=HEAP32[(($border_x394)>>2)],tempDoubleI32[1]=HEAP32[((($border_x394)+(4))>>2)],tempDoubleF64[0]);
      var $207=$render_priv_addr;
      var $state395=(($207+176)|0);
      var $border_y396=(($state395+148)|0);
      var $208=(tempDoubleI32[0]=HEAP32[(($border_y396)>>2)],tempDoubleI32[1]=HEAP32[((($border_y396)+(4))>>2)],tempDoubleF64[0]);
      var $cmp397=$206 == $208;
      if ($cmp397) { __label__ = 115; break; } else { __label__ = 116; break; }
    case 115: 
      var $209=$render_priv_addr;
      var $state400=(($209+176)|0);
      var $border_x401=(($state400+140)|0);
      var $210=(tempDoubleI32[0]=HEAP32[(($border_x401)>>2)],tempDoubleI32[1]=HEAP32[((($border_x401)+(4))>>2)],tempDoubleF64[0]);
      var $211=$pwr_addr;
      var $sub402=(1)-($211);
      var $mul403=($210)*($sub402);
      var $212=(tempDoubleI32[0]=HEAP32[(($val389)>>2)],tempDoubleI32[1]=HEAP32[((($val389)+(4))>>2)],tempDoubleF64[0]);
      var $213=$pwr_addr;
      var $mul404=($212)*($213);
      var $add405=($mul403)+($mul404);
      (tempDoubleF64[0]=$add405,HEAP32[(($val389)>>2)]=tempDoubleI32[0],HEAP32[((($val389)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 116; break;
    case 116: 
      __label__ = 118; break;
    case 117: 
      (tempDoubleF64[0]=-1,HEAP32[(($val389)>>2)]=tempDoubleI32[0],HEAP32[((($val389)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 118; break;
    case 118: 
      var $214=$render_priv_addr;
      var $215=(tempDoubleI32[0]=HEAP32[(($val389)>>2)],tempDoubleI32[1]=HEAP32[((($val389)+(4))>>2)],tempDoubleF64[0]);
      var $216=(tempDoubleI32[0]=HEAP32[(($val389)>>2)],tempDoubleI32[1]=HEAP32[((($val389)+(4))>>2)],tempDoubleF64[0]);
      _change_border($214, $215, $216);
      var $217=$render_priv_addr;
      var $state409=(($217+176)|0);
      var $bm_run_id410=(($state409+252)|0);
      var $218=HEAP32[(($bm_run_id410)>>2)];
      var $inc411=((($218)+(1))|0);
      HEAP32[(($bm_run_id410)>>2)]=$inc411;
      __label__ = 472; break;
    case 119: 
      var $call413=_mystrcmp($p_addr, ((STRING_TABLE.__str22240)|0));
      var $tobool414=(($call413)|0)!=0;
      if ($tobool414) { __label__ = 120; break; } else { __label__ = 153; break; }
    case 120: 
      var $219=HEAP32[(($p_addr)>>2)];
      var $220=HEAP8[($219)];
      var $conv418=(($220 << 24) >> 24);
      var $cmp419=(($conv418)|0)==40;
      if ($cmp419) { __label__ = 121; break; } else { __label__ = 122; break; }
    case 121: 
      var $221=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr422=(($221+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr422;
      __label__ = 123; break;
    case 122: 
      var $222=HEAP32[(($p_addr)>>2)];
      $retval=$222;
      __label__ = 486; break;
    case 123: 
      var $call425=_mystrtod($p_addr, $x1416);
      var $223=HEAP32[(($p_addr)>>2)];
      var $224=HEAP8[($223)];
      var $conv426=(($224 << 24) >> 24);
      var $cmp427=(($conv426)|0)==44;
      if ($cmp427) { __label__ = 124; break; } else { __label__ = 125; break; }
    case 124: 
      var $225=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr430=(($225+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr430;
      __label__ = 126; break;
    case 125: 
      var $226=HEAP32[(($p_addr)>>2)];
      $retval=$226;
      __label__ = 486; break;
    case 126: 
      var $call433=_mystrtod($p_addr, $y1417);
      var $227=HEAP32[(($p_addr)>>2)];
      var $228=HEAP8[($227)];
      var $conv434=(($228 << 24) >> 24);
      var $cmp435=(($conv434)|0)==44;
      if ($cmp435) { __label__ = 127; break; } else { __label__ = 128; break; }
    case 127: 
      var $229=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr438=(($229+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr438;
      __label__ = 129; break;
    case 128: 
      var $230=HEAP32[(($p_addr)>>2)];
      $retval=$230;
      __label__ = 486; break;
    case 129: 
      var $call441=_mystrtod($p_addr, $x2);
      var $231=HEAP32[(($p_addr)>>2)];
      var $232=HEAP8[($231)];
      var $conv442=(($232 << 24) >> 24);
      var $cmp443=(($conv442)|0)==44;
      if ($cmp443) { __label__ = 130; break; } else { __label__ = 131; break; }
    case 130: 
      var $233=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr446=(($233+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr446;
      __label__ = 132; break;
    case 131: 
      var $234=HEAP32[(($p_addr)>>2)];
      $retval=$234;
      __label__ = 486; break;
    case 132: 
      var $call449=_mystrtod($p_addr, $y2);
      var $235=HEAP32[(($p_addr)>>2)];
      var $236=HEAP8[($235)];
      var $conv450=(($236 << 24) >> 24);
      var $cmp451=(($conv450)|0)==44;
      if ($cmp451) { __label__ = 133; break; } else { __label__ = 140; break; }
    case 133: 
      var $237=HEAP32[(($p_addr)>>2)];
      var $238=HEAP8[($237)];
      var $conv454=(($238 << 24) >> 24);
      var $cmp455=(($conv454)|0)==44;
      if ($cmp455) { __label__ = 134; break; } else { __label__ = 135; break; }
    case 134: 
      var $239=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr458=(($239+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr458;
      __label__ = 136; break;
    case 135: 
      var $240=HEAP32[(($p_addr)>>2)];
      $retval=$240;
      __label__ = 486; break;
    case 136: 
      var $call461=_mystrtoll($p_addr, $t1);
      var $241=HEAP32[(($p_addr)>>2)];
      var $242=HEAP8[($241)];
      var $conv462=(($242 << 24) >> 24);
      var $cmp463=(($conv462)|0)==44;
      if ($cmp463) { __label__ = 137; break; } else { __label__ = 138; break; }
    case 137: 
      var $243=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr466=(($243+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr466;
      __label__ = 139; break;
    case 138: 
      var $244=HEAP32[(($p_addr)>>2)];
      $retval=$244;
      __label__ = 486; break;
    case 139: 
      var $call469=_mystrtoll($p_addr, $t2);
      var $245=$render_priv_addr;
      var $library=(($245)|0);
      var $246=HEAP32[(($library)>>2)];
      var $247=(tempDoubleI32[0]=HEAP32[(($x1416)>>2)],tempDoubleI32[1]=HEAP32[((($x1416)+(4))>>2)],tempDoubleF64[0]);
      var $248=(tempDoubleI32[0]=HEAP32[(($y1417)>>2)],tempDoubleI32[1]=HEAP32[((($y1417)+(4))>>2)],tempDoubleF64[0]);
      var $249=(tempDoubleI32[0]=HEAP32[(($x2)>>2)],tempDoubleI32[1]=HEAP32[((($x2)+(4))>>2)],tempDoubleF64[0]);
      var $250=(tempDoubleI32[0]=HEAP32[(($y2)>>2)],tempDoubleI32[1]=HEAP32[((($y2)+(4))>>2)],tempDoubleF64[0]);
      var $st$8$0=(($t1)|0);
      var $251$0=HEAP32[(($st$8$0)>>2)];
      var $st$8$1=(($t1+4)|0);
      var $251$1=HEAP32[(($st$8$1)>>2)];
      var $st$12$0=(($t2)|0);
      var $252$0=HEAP32[(($st$12$0)>>2)];
      var $st$12$1=(($t2+4)|0);
      var $252$1=HEAP32[(($st$12$1)>>2)];
      var $$emscripten$temp$0=((STRING_TABLE.__str23241)|0);
      _ass_msg($246, 7, $$emscripten$temp$0, (tempInt=STACKTOP,STACKTOP += 48,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$247,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[(((tempInt)+(4))>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$248,HEAP32[(((tempInt)+(8))>>2)]=tempDoubleI32[0],HEAP32[((((tempInt)+(8))+(4))>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$249,HEAP32[(((tempInt)+(16))>>2)]=tempDoubleI32[0],HEAP32[((((tempInt)+(16))+(4))>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$250,HEAP32[(((tempInt)+(24))>>2)]=tempDoubleI32[0],HEAP32[((((tempInt)+(24))+(4))>>2)]=tempDoubleI32[1]),HEAP32[(((tempInt)+(32))>>2)]=$251$0,HEAP32[(((tempInt)+(36))>>2)]=$251$1,HEAP32[(((tempInt)+(40))>>2)]=$252$0,HEAP32[(((tempInt)+(44))>>2)]=$252$1,tempInt));
      __label__ = 141; break;
    case 140: 
      var $$emscripten$temp$1$0=0;
      var $$emscripten$temp$1$1=0;
      var $st$2$0=(($t1)|0);
      HEAP32[(($st$2$0)>>2)]=$$emscripten$temp$1$0;
      var $st$2$1=(($t1+4)|0);
      HEAP32[(($st$2$1)>>2)]=$$emscripten$temp$1$1;
      var $253=$render_priv_addr;
      var $state471=(($253+176)|0);
      var $event=(($state471)|0);
      var $254=HEAP32[(($event)>>2)];
      var $Duration=(($254+8)|0);
      var $st$11$0=(($Duration)|0);
      var $255$0=HEAP32[(($st$11$0)>>2)];
      var $st$11$1=(($Duration+4)|0);
      var $255$1=HEAP32[(($st$11$1)>>2)];
      var $st$15$0=(($t2)|0);
      HEAP32[(($st$15$0)>>2)]=$255$0;
      var $st$15$1=(($t2+4)|0);
      HEAP32[(($st$15$1)>>2)]=$255$1;
      var $256=$render_priv_addr;
      var $library472=(($256)|0);
      var $257=HEAP32[(($library472)>>2)];
      var $258=(tempDoubleI32[0]=HEAP32[(($x1416)>>2)],tempDoubleI32[1]=HEAP32[((($x1416)+(4))>>2)],tempDoubleF64[0]);
      var $259=(tempDoubleI32[0]=HEAP32[(($y1417)>>2)],tempDoubleI32[1]=HEAP32[((($y1417)+(4))>>2)],tempDoubleF64[0]);
      var $260=(tempDoubleI32[0]=HEAP32[(($x2)>>2)],tempDoubleI32[1]=HEAP32[((($x2)+(4))>>2)],tempDoubleF64[0]);
      var $261=(tempDoubleI32[0]=HEAP32[(($y2)>>2)],tempDoubleI32[1]=HEAP32[((($y2)+(4))>>2)],tempDoubleF64[0]);
      _ass_msg($257, 7, ((STRING_TABLE.__str24242)|0), (tempInt=STACKTOP,STACKTOP += 32,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$258,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[(((tempInt)+(4))>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$259,HEAP32[(((tempInt)+(8))>>2)]=tempDoubleI32[0],HEAP32[((((tempInt)+(8))+(4))>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$260,HEAP32[(((tempInt)+(16))>>2)]=tempDoubleI32[0],HEAP32[((((tempInt)+(16))+(4))>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$261,HEAP32[(((tempInt)+(24))>>2)]=tempDoubleI32[0],HEAP32[((((tempInt)+(24))+(4))>>2)]=tempDoubleI32[1]),tempInt));
      __label__ = 141; break;
    case 141: 
      var $262=HEAP32[(($p_addr)>>2)];
      var $263=HEAP8[($262)];
      var $conv474=(($263 << 24) >> 24);
      var $cmp475=(($conv474)|0)==41;
      if ($cmp475) { __label__ = 142; break; } else { __label__ = 143; break; }
    case 142: 
      var $264=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr478=(($264+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr478;
      __label__ = 144; break;
    case 143: 
      var $265=HEAP32[(($p_addr)>>2)];
      $retval=$265;
      __label__ = 486; break;
    case 144: 
      var $st$0$0=(($t2)|0);
      var $266$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($t2+4)|0);
      var $266$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($t1)|0);
      var $267$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($t1+4)|0);
      var $267$1=HEAP32[(($st$4$1)>>2)];
      var $sub481$0 = (i64Math.subtract($266$0,$266$1,$267$0,$267$1),i64Math.result[0]); var $sub481$1 = i64Math.result[1];
      var $st$9$0=(($delta_t)|0);
      HEAP32[(($st$9$0)>>2)]=$sub481$0;
      var $st$9$1=(($delta_t+4)|0);
      HEAP32[(($st$9$1)>>2)]=$sub481$1;
      var $268=$render_priv_addr;
      var $time=(($268+144)|0);
      var $st$15$0=(($time)|0);
      var $269$0=HEAP32[(($st$15$0)>>2)];
      var $st$15$1=(($time+4)|0);
      var $269$1=HEAP32[(($st$15$1)>>2)];
      var $270=$render_priv_addr;
      var $state482=(($270+176)|0);
      var $event483=(($state482)|0);
      var $271=HEAP32[(($event483)>>2)];
      var $Start=(($271)|0);
      var $st$24$0=(($Start)|0);
      var $272$0=HEAP32[(($st$24$0)>>2)];
      var $st$24$1=(($Start+4)|0);
      var $272$1=HEAP32[(($st$24$1)>>2)];
      var $sub484$0 = (i64Math.subtract($269$0,$269$1,$272$0,$272$1),i64Math.result[0]); var $sub484$1 = i64Math.result[1];
      var $st$29$0=(($t)|0);
      HEAP32[(($st$29$0)>>2)]=$sub484$0;
      var $st$29$1=(($t+4)|0);
      HEAP32[(($st$29$1)>>2)]=$sub484$1;
      var $st$33$0=(($t)|0);
      var $273$0=HEAP32[(($st$33$0)>>2)];
      var $st$33$1=(($t+4)|0);
      var $273$1=HEAP32[(($st$33$1)>>2)];
      var $st$37$0=(($t1)|0);
      var $274$0=HEAP32[(($st$37$0)>>2)];
      var $st$37$1=(($t1+4)|0);
      var $274$1=HEAP32[(($st$37$1)>>2)];
      var $cmp485=($273$1|0) < ($274$1|0) || (($273$1|0) == ($274$1|0) && ($273$0>>>0) <  ($274$0>>>0));
      if ($cmp485) { __label__ = 145; break; } else { __label__ = 146; break; }
    case 145: 
      $k=0;
      __label__ = 150; break;
    case 146: 
      var $st$0$0=(($t)|0);
      var $275$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($t+4)|0);
      var $275$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($t2)|0);
      var $276$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($t2+4)|0);
      var $276$1=HEAP32[(($st$4$1)>>2)];
      var $cmp489=($275$1|0) > ($276$1|0) || (($275$1|0) == ($276$1|0) && ($275$0>>>0) >  ($276$0>>>0));
      if ($cmp489) { __label__ = 147; break; } else { __label__ = 148; break; }
    case 147: 
      $k=1;
      __label__ = 149; break;
    case 148: 
      var $st$0$0=(($t)|0);
      var $277$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($t+4)|0);
      var $277$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($t1)|0);
      var $278$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($t1+4)|0);
      var $278$1=HEAP32[(($st$4$1)>>2)];
      var $sub493$0 = (i64Math.subtract($277$0,$277$1,$278$0,$278$1),i64Math.result[0]); var $sub493$1 = i64Math.result[1];
      var $conv494=$sub493$0 + $sub493$1*4294967296;
      var $st$10$0=(($delta_t)|0);
      var $279$0=HEAP32[(($st$10$0)>>2)];
      var $st$10$1=(($delta_t+4)|0);
      var $279$1=HEAP32[(($st$10$1)>>2)];
      var $conv495=$279$0 + $279$1*4294967296;
      var $div496=($conv494)/($conv495);
      $k=$div496;
      __label__ = 149; break;
    case 149: 
      __label__ = 150; break;
    case 150: 
      var $280=$k;
      var $281=(tempDoubleI32[0]=HEAP32[(($x2)>>2)],tempDoubleI32[1]=HEAP32[((($x2)+(4))>>2)],tempDoubleF64[0]);
      var $282=(tempDoubleI32[0]=HEAP32[(($x1416)>>2)],tempDoubleI32[1]=HEAP32[((($x1416)+(4))>>2)],tempDoubleF64[0]);
      var $sub499=($281)-($282);
      var $mul500=($280)*($sub499);
      var $283=(tempDoubleI32[0]=HEAP32[(($x1416)>>2)],tempDoubleI32[1]=HEAP32[((($x1416)+(4))>>2)],tempDoubleF64[0]);
      var $add501=($mul500)+($283);
      $x=$add501;
      var $284=$k;
      var $285=(tempDoubleI32[0]=HEAP32[(($y2)>>2)],tempDoubleI32[1]=HEAP32[((($y2)+(4))>>2)],tempDoubleF64[0]);
      var $286=(tempDoubleI32[0]=HEAP32[(($y1417)>>2)],tempDoubleI32[1]=HEAP32[((($y1417)+(4))>>2)],tempDoubleF64[0]);
      var $sub502=($285)-($286);
      var $mul503=($284)*($sub502);
      var $287=(tempDoubleI32[0]=HEAP32[(($y1417)>>2)],tempDoubleI32[1]=HEAP32[((($y1417)+(4))>>2)],tempDoubleF64[0]);
      var $add504=($mul503)+($287);
      $y=$add504;
      var $288=$render_priv_addr;
      var $state505=(($288+176)|0);
      var $evt_type=(($state505+76)|0);
      var $289=HEAP32[(($evt_type)>>2)];
      var $cmp506=(($289)|0)!=1;
      if ($cmp506) { __label__ = 151; break; } else { __label__ = 152; break; }
    case 151: 
      var $290=$x;
      var $291=$render_priv_addr;
      var $state509=(($291+176)|0);
      var $pos_x=(($state509+80)|0);
      (tempDoubleF64[0]=$290,HEAP32[(($pos_x)>>2)]=tempDoubleI32[0],HEAP32[((($pos_x)+(4))>>2)]=tempDoubleI32[1]);
      var $292=$y;
      var $293=$render_priv_addr;
      var $state510=(($293+176)|0);
      var $pos_y=(($state510+88)|0);
      (tempDoubleF64[0]=$292,HEAP32[(($pos_y)>>2)]=tempDoubleI32[0],HEAP32[((($pos_y)+(4))>>2)]=tempDoubleI32[1]);
      var $294=$render_priv_addr;
      var $state511=(($294+176)|0);
      var $detect_collisions=(($state511+189)|0);
      HEAP8[($detect_collisions)]=0;
      var $295=$render_priv_addr;
      var $state512=(($295+176)|0);
      var $evt_type513=(($state512+76)|0);
      HEAP32[(($evt_type513)>>2)]=1;
      __label__ = 152; break;
    case 152: 
      __label__ = 471; break;
    case 153: 
      var $call516=_mystrcmp($p_addr, ((STRING_TABLE.__str25243)|0));
      var $tobool517=(($call516)|0)!=0;
      if ($tobool517) { __label__ = 154; break; } else { __label__ = 158; break; }
    case 154: 
      var $call520=_mystrtod($p_addr, $val519);
      var $tobool521=(($call520)|0)!=0;
      if ($tobool521) { __label__ = 155; break; } else { __label__ = 156; break; }
    case 155: 
      var $296=(tempDoubleI32[0]=HEAP32[(($val519)>>2)],tempDoubleI32[1]=HEAP32[((($val519)+(4))>>2)],tempDoubleF64[0]);
      var $mul523=($296)*(0.017453292519943295);
      (tempDoubleF64[0]=$mul523,HEAP32[(($val519)>>2)]=tempDoubleI32[0],HEAP32[((($val519)+(4))>>2)]=tempDoubleI32[1]);
      var $297=(tempDoubleI32[0]=HEAP32[(($val519)>>2)],tempDoubleI32[1]=HEAP32[((($val519)+(4))>>2)],tempDoubleF64[0]);
      var $298=$pwr_addr;
      var $mul524=($297)*($298);
      var $299=$render_priv_addr;
      var $state525=(($299+176)|0);
      var $frx=(($state525+36)|0);
      var $300=(tempDoubleI32[0]=HEAP32[(($frx)>>2)],tempDoubleI32[1]=HEAP32[((($frx)+(4))>>2)],tempDoubleF64[0]);
      var $301=$pwr_addr;
      var $sub526=(1)-($301);
      var $mul527=($300)*($sub526);
      var $add528=($mul524)+($mul527);
      var $302=$render_priv_addr;
      var $state529=(($302+176)|0);
      var $frx530=(($state529+36)|0);
      (tempDoubleF64[0]=$add528,HEAP32[(($frx530)>>2)]=tempDoubleI32[0],HEAP32[((($frx530)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 157; break;
    case 156: 
      var $303=$render_priv_addr;
      var $state532=(($303+176)|0);
      var $frx533=(($state532+36)|0);
      (tempDoubleF64[0]=0,HEAP32[(($frx533)>>2)]=tempDoubleI32[0],HEAP32[((($frx533)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 157; break;
    case 157: 
      __label__ = 470; break;
    case 158: 
      var $call536=_mystrcmp($p_addr, ((STRING_TABLE.__str26244)|0));
      var $tobool537=(($call536)|0)!=0;
      if ($tobool537) { __label__ = 159; break; } else { __label__ = 163; break; }
    case 159: 
      var $call540=_mystrtod($p_addr, $val539);
      var $tobool541=(($call540)|0)!=0;
      if ($tobool541) { __label__ = 160; break; } else { __label__ = 161; break; }
    case 160: 
      var $304=(tempDoubleI32[0]=HEAP32[(($val539)>>2)],tempDoubleI32[1]=HEAP32[((($val539)+(4))>>2)],tempDoubleF64[0]);
      var $mul543=($304)*(0.017453292519943295);
      (tempDoubleF64[0]=$mul543,HEAP32[(($val539)>>2)]=tempDoubleI32[0],HEAP32[((($val539)+(4))>>2)]=tempDoubleI32[1]);
      var $305=(tempDoubleI32[0]=HEAP32[(($val539)>>2)],tempDoubleI32[1]=HEAP32[((($val539)+(4))>>2)],tempDoubleF64[0]);
      var $306=$pwr_addr;
      var $mul544=($305)*($306);
      var $307=$render_priv_addr;
      var $state545=(($307+176)|0);
      var $fry=(($state545+44)|0);
      var $308=(tempDoubleI32[0]=HEAP32[(($fry)>>2)],tempDoubleI32[1]=HEAP32[((($fry)+(4))>>2)],tempDoubleF64[0]);
      var $309=$pwr_addr;
      var $sub546=(1)-($309);
      var $mul547=($308)*($sub546);
      var $add548=($mul544)+($mul547);
      var $310=$render_priv_addr;
      var $state549=(($310+176)|0);
      var $fry550=(($state549+44)|0);
      (tempDoubleF64[0]=$add548,HEAP32[(($fry550)>>2)]=tempDoubleI32[0],HEAP32[((($fry550)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 162; break;
    case 161: 
      var $311=$render_priv_addr;
      var $state552=(($311+176)|0);
      var $fry553=(($state552+44)|0);
      (tempDoubleF64[0]=0,HEAP32[(($fry553)>>2)]=tempDoubleI32[0],HEAP32[((($fry553)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 162; break;
    case 162: 
      __label__ = 469; break;
    case 163: 
      var $call556=_mystrcmp($p_addr, ((STRING_TABLE.__str27245)|0));
      var $tobool557=(($call556)|0)!=0;
      if ($tobool557) { __label__ = 165; break; } else { __label__ = 164; break; }
    case 164: 
      var $call559=_mystrcmp($p_addr, ((STRING_TABLE.__str28246)|0));
      var $tobool560=(($call559)|0)!=0;
      if ($tobool560) { __label__ = 165; break; } else { __label__ = 169; break; }
    case 165: 
      var $call563=_mystrtod($p_addr, $val562);
      var $tobool564=(($call563)|0)!=0;
      if ($tobool564) { __label__ = 166; break; } else { __label__ = 167; break; }
    case 166: 
      var $312=(tempDoubleI32[0]=HEAP32[(($val562)>>2)],tempDoubleI32[1]=HEAP32[((($val562)+(4))>>2)],tempDoubleF64[0]);
      var $mul566=($312)*(0.017453292519943295);
      (tempDoubleF64[0]=$mul566,HEAP32[(($val562)>>2)]=tempDoubleI32[0],HEAP32[((($val562)+(4))>>2)]=tempDoubleI32[1]);
      var $313=(tempDoubleI32[0]=HEAP32[(($val562)>>2)],tempDoubleI32[1]=HEAP32[((($val562)+(4))>>2)],tempDoubleF64[0]);
      var $314=$pwr_addr;
      var $mul567=($313)*($314);
      var $315=$render_priv_addr;
      var $state568=(($315+176)|0);
      var $frz=(($state568+52)|0);
      var $316=(tempDoubleI32[0]=HEAP32[(($frz)>>2)],tempDoubleI32[1]=HEAP32[((($frz)+(4))>>2)],tempDoubleF64[0]);
      var $317=$pwr_addr;
      var $sub569=(1)-($317);
      var $mul570=($316)*($sub569);
      var $add571=($mul567)+($mul570);
      var $318=$render_priv_addr;
      var $state572=(($318+176)|0);
      var $frz573=(($state572+52)|0);
      (tempDoubleF64[0]=$add571,HEAP32[(($frz573)>>2)]=tempDoubleI32[0],HEAP32[((($frz573)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 168; break;
    case 167: 
      var $319=$render_priv_addr;
      var $state575=(($319+176)|0);
      var $style576=(($state575+4)|0);
      var $320=HEAP32[(($style576)>>2)];
      var $Angle=(($320+72)|0);
      var $321=HEAP32[(($Angle)>>2)];
      var $conv577=(($321)|0);
      var $mul578=($conv577)*(3.141592653589793);
      var $div579=($mul578)/(180);
      var $322=$render_priv_addr;
      var $state580=(($322+176)|0);
      var $frz581=(($state580+52)|0);
      (tempDoubleF64[0]=$div579,HEAP32[(($frz581)>>2)]=tempDoubleI32[0],HEAP32[((($frz581)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 168; break;
    case 168: 
      __label__ = 468; break;
    case 169: 
      var $call584=_mystrcmp($p_addr, ((STRING_TABLE.__str29247)|0));
      var $tobool585=(($call584)|0)!=0;
      if ($tobool585) { __label__ = 170; break; } else { __label__ = 180; break; }
    case 170: 
      var $323=HEAP32[(($p_addr)>>2)];
      $start587=$323;
      __label__ = 171; break;
    case 171: 
      var $324=HEAP32[(($p_addr)>>2)];
      var $325=HEAP8[($324)];
      var $conv589=(($325 << 24) >> 24);
      var $cmp590=(($conv589)|0)!=92;
      if ($cmp590) { __label__ = 172; break; } else { var $330 = 0;__label__ = 174; break; }
    case 172: 
      var $326=HEAP32[(($p_addr)>>2)];
      var $327=HEAP8[($326)];
      var $conv593=(($327 << 24) >> 24);
      var $cmp594=(($conv593)|0)!=125;
      if ($cmp594) { __label__ = 173; break; } else { var $330 = 0;__label__ = 174; break; }
    case 173: 
      var $328=HEAP32[(($p_addr)>>2)];
      var $329=HEAP8[($328)];
      var $conv597=(($329 << 24) >> 24);
      var $cmp598=(($conv597)|0)!=0;
      var $330 = $cmp598;__label__ = 174; break;
    case 174: 
      var $330;
      if ($330) { __label__ = 175; break; } else { __label__ = 176; break; }
    case 175: 
      var $331=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr602=(($331+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr602;
      __label__ = 171; break;
    case 176: 
      var $332=HEAPU32[(($p_addr)>>2)];
      var $333=$start587;
      var $cmp604=(($332)>>>0) > (($333)>>>0);
      if ($cmp604) { __label__ = 177; break; } else { __label__ = 178; break; }
    case 177: 
      var $334=HEAP32[(($p_addr)>>2)];
      var $335=$start587;
      var $sub_ptr_lhs_cast=$334;
      var $sub_ptr_rhs_cast=$335;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $add607=((($sub_ptr_sub)+(1))|0);
      var $call608=_malloc($add607);
      $family=$call608;
      var $336=$family;
      var $337=$start587;
      var $338=HEAP32[(($p_addr)>>2)];
      var $339=$start587;
      var $sub_ptr_lhs_cast609=$338;
      var $sub_ptr_rhs_cast610=$339;
      var $sub_ptr_sub611=((($sub_ptr_lhs_cast609)-($sub_ptr_rhs_cast610))|0);
      var $call612=_strncpy($336, $337, $sub_ptr_sub611);
      var $340=HEAP32[(($p_addr)>>2)];
      var $341=$start587;
      var $sub_ptr_lhs_cast613=$340;
      var $sub_ptr_rhs_cast614=$341;
      var $sub_ptr_sub615=((($sub_ptr_lhs_cast613)-($sub_ptr_rhs_cast614))|0);
      var $342=$family;
      var $arrayidx=(($342+$sub_ptr_sub615)|0);
      HEAP8[($arrayidx)]=0;
      __label__ = 179; break;
    case 178: 
      var $343=$render_priv_addr;
      var $state617=(($343+176)|0);
      var $style618=(($state617+4)|0);
      var $344=HEAP32[(($style618)>>2)];
      var $FontName=(($344+4)|0);
      var $345=HEAP32[(($FontName)>>2)];
      var $call619=_strdup($345);
      $family=$call619;
      __label__ = 179; break;
    case 179: 
      var $346=$render_priv_addr;
      var $state621=(($346+176)|0);
      var $family622=(($state621+264)|0);
      var $347=HEAP32[(($family622)>>2)];
      _free($347);
      var $348=$family;
      var $349=$render_priv_addr;
      var $state623=(($349+176)|0);
      var $family624=(($state623+264)|0);
      HEAP32[(($family624)>>2)]=$348;
      var $350=$render_priv_addr;
      _update_font($350);
      __label__ = 467; break;
    case 180: 
      var $call626=_mystrcmp($p_addr, ((STRING_TABLE.__str30248)|0));
      var $tobool627=(($call626)|0)!=0;
      if ($tobool627) { __label__ = 181; break; } else { __label__ = 189; break; }
    case 181: 
      var $351=$render_priv_addr;
      var $track=(($351+140)|0);
      var $352=HEAP32[(($track)>>2)];
      var $track_type=(($352+32)|0);
      var $353=HEAP32[(($track_type)>>2)];
      var $cmp630=(($353)|0)==1;
      var $conv631=(($cmp630)&1);
      $hex=$conv631;
      var $354=$render_priv_addr;
      var $library632=(($354)|0);
      var $355=HEAP32[(($library632)>>2)];
      var $356=$hex;
      var $call633=_strtocolor($355, $p_addr, $val629, $356);
      var $tobool634=(($call633)|0)!=0;
      if ($tobool634) { __label__ = 182; break; } else { __label__ = 187; break; }
    case 182: 
      var $357=HEAPU32[(($val629)>>2)];
      var $shr=$357 >>> 24;
      var $conv636=(($shr) & 255);
      $a=$conv636;
      $i=0;
      __label__ = 183; break;
    case 183: 
      var $358=$i;
      var $cmp637=(($358)|0) < 4;
      if ($cmp637) { __label__ = 184; break; } else { __label__ = 186; break; }
    case 184: 
      var $359=$i;
      var $360=$render_priv_addr;
      var $state639=(($360+176)|0);
      var $c=(($state639+156)|0);
      var $arrayidx640=(($c+($359<<2))|0);
      var $361=$a;
      var $conv641=(($361)&255);
      var $362=$pwr_addr;
      _change_alpha($arrayidx640, $conv641, $362);
      __label__ = 185; break;
    case 185: 
      var $363=$i;
      var $inc642=((($363)+(1))|0);
      $i=$inc642;
      __label__ = 183; break;
    case 186: 
      __label__ = 188; break;
    case 187: 
      var $364=$render_priv_addr;
      var $state644=(($364+176)|0);
      var $c645=(($state644+156)|0);
      var $arrayidx646=(($c645)|0);
      var $365=$render_priv_addr;
      var $state647=(($365+176)|0);
      var $style648=(($state647+4)|0);
      var $366=HEAP32[(($style648)>>2)];
      var $PrimaryColour=(($366+16)|0);
      var $367=HEAP32[(($PrimaryColour)>>2)];
      var $368=$pwr_addr;
      _change_alpha($arrayidx646, $367, $368);
      var $369=$render_priv_addr;
      var $state649=(($369+176)|0);
      var $c650=(($state649+156)|0);
      var $arrayidx651=(($c650+4)|0);
      var $370=$render_priv_addr;
      var $state652=(($370+176)|0);
      var $style653=(($state652+4)|0);
      var $371=HEAP32[(($style653)>>2)];
      var $SecondaryColour=(($371+20)|0);
      var $372=HEAP32[(($SecondaryColour)>>2)];
      var $373=$pwr_addr;
      _change_alpha($arrayidx651, $372, $373);
      var $374=$render_priv_addr;
      var $state654=(($374+176)|0);
      var $c655=(($state654+156)|0);
      var $arrayidx656=(($c655+8)|0);
      var $375=$render_priv_addr;
      var $state657=(($375+176)|0);
      var $style658=(($state657+4)|0);
      var $376=HEAP32[(($style658)>>2)];
      var $OutlineColour=(($376+24)|0);
      var $377=HEAP32[(($OutlineColour)>>2)];
      var $378=$pwr_addr;
      _change_alpha($arrayidx656, $377, $378);
      var $379=$render_priv_addr;
      var $state659=(($379+176)|0);
      var $c660=(($state659+156)|0);
      var $arrayidx661=(($c660+12)|0);
      var $380=$render_priv_addr;
      var $state662=(($380+176)|0);
      var $style663=(($state662+4)|0);
      var $381=HEAP32[(($style663)>>2)];
      var $BackColour=(($381+28)|0);
      var $382=HEAP32[(($BackColour)>>2)];
      var $383=$pwr_addr;
      _change_alpha($arrayidx661, $382, $383);
      __label__ = 188; break;
    case 188: 
      var $384=$render_priv_addr;
      var $state665=(($384+176)|0);
      var $bm_run_id666=(($state665+252)|0);
      var $385=HEAP32[(($bm_run_id666)>>2)];
      var $inc667=((($385)+(1))|0);
      HEAP32[(($bm_run_id666)>>2)]=$inc667;
      __label__ = 466; break;
    case 189: 
      var $call669=_mystrcmp($p_addr, ((STRING_TABLE.__str31249)|0));
      var $tobool670=(($call669)|0)!=0;
      if ($tobool670) { __label__ = 190; break; } else { __label__ = 199; break; }
    case 190: 
      var $call673=_mystrtoi($p_addr, $val672);
      var $tobool674=(($call673)|0)!=0;
      if ($tobool674) { __label__ = 191; break; } else { __label__ = 197; break; }
    case 191: 
      var $386=HEAP32[(($val672)>>2)];
      var $tobool676=(($386)|0)!=0;
      if ($tobool676) { __label__ = 192; break; } else { __label__ = 197; break; }
    case 192: 
      var $387=HEAP32[(($val672)>>2)];
      var $sub678=((($387)-(1))|0);
      var $div679=((((($sub678)|0))/(3))&-1);
      $v=$div679;
      var $388=$render_priv_addr;
      var $library680=(($388)|0);
      var $389=HEAP32[(($library680)>>2)];
      var $390=HEAP32[(($val672)>>2)];
      _ass_msg($389, 7, ((STRING_TABLE.__str32250)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$390,tempInt));
      var $391=$v;
      var $cmp681=(($391)|0)!=0;
      if ($cmp681) { __label__ = 193; break; } else { __label__ = 194; break; }
    case 193: 
      var $392=$v;
      var $sub684=(((3)-($392))|0);
      $v=$sub684;
      __label__ = 194; break;
    case 194: 
      var $393=HEAP32[(($val672)>>2)];
      var $sub686=((($393)-(1))|0);
      var $rem=((($sub686)|0))%(3);
      var $add687=((($rem)+(1))|0);
      HEAP32[(($val672)>>2)]=$add687;
      var $394=$v;
      var $mul688=((($394<<2))|0);
      var $395=HEAP32[(($val672)>>2)];
      var $add689=((($395)+($mul688))|0);
      HEAP32[(($val672)>>2)]=$add689;
      var $396=$render_priv_addr;
      var $library690=(($396)|0);
      var $397=HEAP32[(($library690)>>2)];
      var $398=HEAP32[(($val672)>>2)];
      _ass_msg($397, 7, ((STRING_TABLE.__str33251)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$398,tempInt));
      var $399=$render_priv_addr;
      var $state691=(($399+176)|0);
      var $parsed_tags=(($state691+8)|0);
      var $400=HEAP32[(($parsed_tags)>>2)];
      var $and692=$400 & 2;
      var $cmp693=(($and692)|0)==0;
      if ($cmp693) { __label__ = 195; break; } else { __label__ = 196; break; }
    case 195: 
      var $401=HEAP32[(($val672)>>2)];
      var $402=$render_priv_addr;
      var $state696=(($402+176)|0);
      var $alignment=(($state696+32)|0);
      HEAP32[(($alignment)>>2)]=$401;
      var $403=$render_priv_addr;
      var $state697=(($403+176)|0);
      var $parsed_tags698=(($state697+8)|0);
      var $404=HEAP32[(($parsed_tags698)>>2)];
      var $or=$404 | 2;
      HEAP32[(($parsed_tags698)>>2)]=$or;
      __label__ = 196; break;
    case 196: 
      __label__ = 198; break;
    case 197: 
      var $405=$render_priv_addr;
      var $state701=(($405+176)|0);
      var $style702=(($state701+4)|0);
      var $406=HEAP32[(($style702)>>2)];
      var $Alignment=(($406+96)|0);
      var $407=HEAP32[(($Alignment)>>2)];
      var $408=$render_priv_addr;
      var $state703=(($408+176)|0);
      var $alignment704=(($state703+32)|0);
      HEAP32[(($alignment704)>>2)]=$407;
      __label__ = 198; break;
    case 198: 
      __label__ = 465; break;
    case 199: 
      var $call707=_mystrcmp($p_addr, ((STRING_TABLE.__str34252)|0));
      var $tobool708=(($call707)|0)!=0;
      if ($tobool708) { __label__ = 200; break; } else { __label__ = 210; break; }
    case 200: 
      var $call711=_mystrtoi($p_addr, $val710);
      var $tobool712=(($call711)|0)!=0;
      if ($tobool712) { __label__ = 201; break; } else { __label__ = 208; break; }
    case 201: 
      var $409=HEAP32[(($val710)>>2)];
      var $tobool714=(($409)|0)!=0;
      if ($tobool714) { __label__ = 202; break; } else { __label__ = 208; break; }
    case 202: 
      var $410=$render_priv_addr;
      var $state716=(($410+176)|0);
      var $parsed_tags717=(($state716+8)|0);
      var $411=HEAP32[(($parsed_tags717)>>2)];
      var $and718=$411 & 2;
      var $cmp719=(($and718)|0)==0;
      if ($cmp719) { __label__ = 203; break; } else { __label__ = 207; break; }
    case 203: 
      var $412=HEAP32[(($val710)>>2)];
      var $cmp722=(($412)|0)==8;
      if ($cmp722) { __label__ = 204; break; } else { __label__ = 205; break; }
    case 204: 
      var $cond727 = 5;__label__ = 206; break;
    case 205: 
      var $413=HEAP32[(($val710)>>2)];
      var $cond727 = $413;__label__ = 206; break;
    case 206: 
      var $cond727;
      var $414=$render_priv_addr;
      var $state728=(($414+176)|0);
      var $alignment729=(($state728+32)|0);
      HEAP32[(($alignment729)>>2)]=$cond727;
      var $415=$render_priv_addr;
      var $state730=(($415+176)|0);
      var $parsed_tags731=(($state730+8)|0);
      var $416=HEAP32[(($parsed_tags731)>>2)];
      var $or732=$416 | 2;
      HEAP32[(($parsed_tags731)>>2)]=$or732;
      __label__ = 207; break;
    case 207: 
      __label__ = 209; break;
    case 208: 
      var $417=$render_priv_addr;
      var $state735=(($417+176)|0);
      var $style736=(($state735+4)|0);
      var $418=HEAP32[(($style736)>>2)];
      var $Alignment737=(($418+96)|0);
      var $419=HEAP32[(($Alignment737)>>2)];
      var $420=$render_priv_addr;
      var $state738=(($420+176)|0);
      var $alignment739=(($state738+32)|0);
      HEAP32[(($alignment739)>>2)]=$419;
      __label__ = 209; break;
    case 209: 
      __label__ = 464; break;
    case 210: 
      var $call742=_mystrcmp($p_addr, ((STRING_TABLE.__str35253)|0));
      var $tobool743=(($call742)|0)!=0;
      if ($tobool743) { __label__ = 211; break; } else { __label__ = 224; break; }
    case 211: 
      var $421=HEAP32[(($p_addr)>>2)];
      var $422=HEAP8[($421)];
      var $conv745=(($422 << 24) >> 24);
      var $cmp746=(($conv745)|0)==40;
      if ($cmp746) { __label__ = 212; break; } else { __label__ = 213; break; }
    case 212: 
      var $423=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr749=(($423+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr749;
      __label__ = 214; break;
    case 213: 
      var $424=HEAP32[(($p_addr)>>2)];
      $retval=$424;
      __label__ = 486; break;
    case 214: 
      var $call752=_mystrtod($p_addr, $v1);
      var $425=HEAP32[(($p_addr)>>2)];
      var $426=HEAP8[($425)];
      var $conv753=(($426 << 24) >> 24);
      var $cmp754=(($conv753)|0)==44;
      if ($cmp754) { __label__ = 215; break; } else { __label__ = 216; break; }
    case 215: 
      var $427=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr757=(($427+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr757;
      __label__ = 217; break;
    case 216: 
      var $428=HEAP32[(($p_addr)>>2)];
      $retval=$428;
      __label__ = 486; break;
    case 217: 
      var $call760=_mystrtod($p_addr, $v2);
      var $429=HEAP32[(($p_addr)>>2)];
      var $430=HEAP8[($429)];
      var $conv761=(($430 << 24) >> 24);
      var $cmp762=(($conv761)|0)==41;
      if ($cmp762) { __label__ = 218; break; } else { __label__ = 219; break; }
    case 218: 
      var $431=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr765=(($431+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr765;
      __label__ = 220; break;
    case 219: 
      var $432=HEAP32[(($p_addr)>>2)];
      $retval=$432;
      __label__ = 486; break;
    case 220: 
      var $433=$render_priv_addr;
      var $library768=(($433)|0);
      var $434=HEAP32[(($library768)>>2)];
      var $435=(tempDoubleI32[0]=HEAP32[(($v1)>>2)],tempDoubleI32[1]=HEAP32[((($v1)+(4))>>2)],tempDoubleF64[0]);
      var $436=(tempDoubleI32[0]=HEAP32[(($v2)>>2)],tempDoubleI32[1]=HEAP32[((($v2)+(4))>>2)],tempDoubleF64[0]);
      _ass_msg($434, 7, ((STRING_TABLE.__str36254)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$435,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[(((tempInt)+(4))>>2)]=tempDoubleI32[1]),(tempDoubleF64[0]=$436,HEAP32[(((tempInt)+(8))>>2)]=tempDoubleI32[0],HEAP32[((((tempInt)+(8))+(4))>>2)]=tempDoubleI32[1]),tempInt));
      var $437=$render_priv_addr;
      var $state769=(($437+176)|0);
      var $evt_type770=(($state769+76)|0);
      var $438=HEAP32[(($evt_type770)>>2)];
      var $cmp771=(($438)|0)==1;
      if ($cmp771) { __label__ = 221; break; } else { __label__ = 222; break; }
    case 221: 
      var $439=$render_priv_addr;
      var $library774=(($439)|0);
      var $440=HEAP32[(($library774)>>2)];
      _ass_msg($440, 6, ((STRING_TABLE.__str37255)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 223; break;
    case 222: 
      var $441=$render_priv_addr;
      var $state776=(($441+176)|0);
      var $evt_type777=(($state776+76)|0);
      HEAP32[(($evt_type777)>>2)]=1;
      var $442=$render_priv_addr;
      var $state778=(($442+176)|0);
      var $detect_collisions779=(($state778+189)|0);
      HEAP8[($detect_collisions779)]=0;
      var $443=(tempDoubleI32[0]=HEAP32[(($v1)>>2)],tempDoubleI32[1]=HEAP32[((($v1)+(4))>>2)],tempDoubleF64[0]);
      var $444=$render_priv_addr;
      var $state780=(($444+176)|0);
      var $pos_x781=(($state780+80)|0);
      (tempDoubleF64[0]=$443,HEAP32[(($pos_x781)>>2)]=tempDoubleI32[0],HEAP32[((($pos_x781)+(4))>>2)]=tempDoubleI32[1]);
      var $445=(tempDoubleI32[0]=HEAP32[(($v2)>>2)],tempDoubleI32[1]=HEAP32[((($v2)+(4))>>2)],tempDoubleF64[0]);
      var $446=$render_priv_addr;
      var $state782=(($446+176)|0);
      var $pos_y783=(($state782+88)|0);
      (tempDoubleF64[0]=$445,HEAP32[(($pos_y783)>>2)]=tempDoubleI32[0],HEAP32[((($pos_y783)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 223; break;
    case 223: 
      __label__ = 463; break;
    case 224: 
      var $call786=_mystrcmp($p_addr, ((STRING_TABLE.__str38256)|0));
      var $tobool787=(($call786)|0)!=0;
      if ($tobool787) { __label__ = 225; break; } else { __label__ = 257; break; }
    case 225: 
      var $447=HEAP32[(($p_addr)>>2)];
      var $448=HEAP8[($447)];
      var $conv791=(($448 << 24) >> 24);
      var $cmp792=(($conv791)|0)==101;
      if ($cmp792) { __label__ = 226; break; } else { __label__ = 227; break; }
    case 226: 
      var $449=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr795=(($449+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr795;
      __label__ = 227; break;
    case 227: 
      var $450=HEAP32[(($p_addr)>>2)];
      var $451=HEAP8[($450)];
      var $conv797=(($451 << 24) >> 24);
      var $cmp798=(($conv797)|0)==40;
      if ($cmp798) { __label__ = 228; break; } else { __label__ = 229; break; }
    case 228: 
      var $452=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr801=(($452+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr801;
      __label__ = 230; break;
    case 229: 
      var $453=HEAP32[(($p_addr)>>2)];
      $retval=$453;
      __label__ = 486; break;
    case 230: 
      var $call804=_mystrtoi($p_addr, $a1);
      var $454=HEAP32[(($p_addr)>>2)];
      var $455=HEAP8[($454)];
      var $conv805=(($455 << 24) >> 24);
      var $cmp806=(($conv805)|0)==44;
      if ($cmp806) { __label__ = 231; break; } else { __label__ = 232; break; }
    case 231: 
      var $456=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr809=(($456+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr809;
      __label__ = 233; break;
    case 232: 
      var $457=HEAP32[(($p_addr)>>2)];
      $retval=$457;
      __label__ = 486; break;
    case 233: 
      var $call812=_mystrtoi($p_addr, $a2);
      var $458=HEAP32[(($p_addr)>>2)];
      var $459=HEAP8[($458)];
      var $conv813=(($459 << 24) >> 24);
      var $cmp814=(($conv813)|0)==41;
      if ($cmp814) { __label__ = 234; break; } else { __label__ = 235; break; }
    case 234: 
      var $$emscripten$temp$2$0=0;
      var $$emscripten$temp$2$1=0;
      var $st$2$0=(($t1789)|0);
      HEAP32[(($st$2$0)>>2)]=$$emscripten$temp$2$0;
      var $st$2$1=(($t1789+4)|0);
      HEAP32[(($st$2$1)>>2)]=$$emscripten$temp$2$1;
      var $460=$render_priv_addr;
      var $state817=(($460+176)|0);
      var $event818=(($state817)|0);
      var $461=HEAP32[(($event818)>>2)];
      var $Duration819=(($461+8)|0);
      var $st$11$0=(($Duration819)|0);
      var $462$0=HEAP32[(($st$11$0)>>2)];
      var $st$11$1=(($Duration819+4)|0);
      var $462$1=HEAP32[(($st$11$1)>>2)];
      var $st$15$0=(($t4)|0);
      HEAP32[(($st$15$0)>>2)]=$462$0;
      var $st$15$1=(($t4+4)|0);
      HEAP32[(($st$15$1)>>2)]=$462$1;
      var $463=HEAP32[(($a1)>>2)];
      var $conv820$0=$463;
      var $conv820$1=(($463|0) < 0 ? -1 : 0);
      var $st$22$0=(($t2790)|0);
      HEAP32[(($st$22$0)>>2)]=$conv820$0;
      var $st$22$1=(($t2790+4)|0);
      HEAP32[(($st$22$1)>>2)]=$conv820$1;
      var $st$26$0=(($t4)|0);
      var $464$0=HEAP32[(($st$26$0)>>2)];
      var $st$26$1=(($t4+4)|0);
      var $464$1=HEAP32[(($st$26$1)>>2)];
      var $465=HEAP32[(($a2)>>2)];
      var $conv821$0=$465;
      var $conv821$1=(($465|0) < 0 ? -1 : 0);
      var $sub822$0 = (i64Math.subtract($464$0,$464$1,$conv821$0,$conv821$1),i64Math.result[0]); var $sub822$1 = i64Math.result[1];
      var $st$34$0=(($t3)|0);
      HEAP32[(($st$34$0)>>2)]=$sub822$0;
      var $st$34$1=(($t3+4)|0);
      HEAP32[(($st$34$1)>>2)]=$sub822$1;
      HEAP32[(($a1)>>2)]=255;
      HEAP32[(($a2)>>2)]=0;
      HEAP32[(($a3)>>2)]=255;
      __label__ = 251; break;
    case 235: 
      var $466=HEAP32[(($p_addr)>>2)];
      var $467=HEAP8[($466)];
      var $conv824=(($467 << 24) >> 24);
      var $cmp825=(($conv824)|0)==44;
      if ($cmp825) { __label__ = 236; break; } else { __label__ = 237; break; }
    case 236: 
      var $468=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr828=(($468+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr828;
      __label__ = 238; break;
    case 237: 
      var $469=HEAP32[(($p_addr)>>2)];
      $retval=$469;
      __label__ = 486; break;
    case 238: 
      var $call831=_mystrtoi($p_addr, $a3);
      var $470=HEAP32[(($p_addr)>>2)];
      var $471=HEAP8[($470)];
      var $conv832=(($471 << 24) >> 24);
      var $cmp833=(($conv832)|0)==44;
      if ($cmp833) { __label__ = 239; break; } else { __label__ = 240; break; }
    case 239: 
      var $472=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr836=(($472+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr836;
      __label__ = 241; break;
    case 240: 
      var $473=HEAP32[(($p_addr)>>2)];
      $retval=$473;
      __label__ = 486; break;
    case 241: 
      var $call839=_mystrtoll($p_addr, $t1789);
      var $474=HEAP32[(($p_addr)>>2)];
      var $475=HEAP8[($474)];
      var $conv840=(($475 << 24) >> 24);
      var $cmp841=(($conv840)|0)==44;
      if ($cmp841) { __label__ = 242; break; } else { __label__ = 243; break; }
    case 242: 
      var $476=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr844=(($476+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr844;
      __label__ = 244; break;
    case 243: 
      var $477=HEAP32[(($p_addr)>>2)];
      $retval=$477;
      __label__ = 486; break;
    case 244: 
      var $call847=_mystrtoll($p_addr, $t2790);
      var $478=HEAP32[(($p_addr)>>2)];
      var $479=HEAP8[($478)];
      var $conv848=(($479 << 24) >> 24);
      var $cmp849=(($conv848)|0)==44;
      if ($cmp849) { __label__ = 245; break; } else { __label__ = 246; break; }
    case 245: 
      var $480=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr852=(($480+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr852;
      __label__ = 247; break;
    case 246: 
      var $481=HEAP32[(($p_addr)>>2)];
      $retval=$481;
      __label__ = 486; break;
    case 247: 
      var $call855=_mystrtoll($p_addr, $t3);
      var $482=HEAP32[(($p_addr)>>2)];
      var $483=HEAP8[($482)];
      var $conv856=(($483 << 24) >> 24);
      var $cmp857=(($conv856)|0)==44;
      if ($cmp857) { __label__ = 248; break; } else { __label__ = 249; break; }
    case 248: 
      var $484=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr860=(($484+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr860;
      __label__ = 250; break;
    case 249: 
      var $485=HEAP32[(($p_addr)>>2)];
      $retval=$485;
      __label__ = 486; break;
    case 250: 
      var $call863=_mystrtoll($p_addr, $t4);
      __label__ = 251; break;
    case 251: 
      var $486=HEAP32[(($p_addr)>>2)];
      var $487=HEAP8[($486)];
      var $conv865=(($487 << 24) >> 24);
      var $cmp866=(($conv865)|0)==41;
      if ($cmp866) { __label__ = 252; break; } else { __label__ = 253; break; }
    case 252: 
      var $488=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr869=(($488+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr869;
      __label__ = 254; break;
    case 253: 
      var $489=HEAP32[(($p_addr)>>2)];
      $retval=$489;
      __label__ = 486; break;
    case 254: 
      var $490=$render_priv_addr;
      var $state872=(($490+176)|0);
      var $parsed_tags873=(($state872+8)|0);
      var $491=HEAP32[(($parsed_tags873)>>2)];
      var $and874=$491 & 1;
      var $cmp875=(($and874)|0)==0;
      if ($cmp875) { __label__ = 255; break; } else { __label__ = 256; break; }
    case 255: 
      var $492=$render_priv_addr;
      var $time878=(($492+144)|0);
      var $st$2$0=(($time878)|0);
      var $493$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($time878+4)|0);
      var $493$1=HEAP32[(($st$2$1)>>2)];
      var $494=$render_priv_addr;
      var $state879=(($494+176)|0);
      var $event880=(($state879)|0);
      var $495=HEAP32[(($event880)>>2)];
      var $Start881=(($495)|0);
      var $st$11$0=(($Start881)|0);
      var $496$0=HEAP32[(($st$11$0)>>2)];
      var $st$11$1=(($Start881+4)|0);
      var $496$1=HEAP32[(($st$11$1)>>2)];
      var $sub882$0 = (i64Math.subtract($493$0,$493$1,$496$0,$496$1),i64Math.result[0]); var $sub882$1 = i64Math.result[1];
      var $st$16$0=(($t1789)|0);
      var $497$0=HEAP32[(($st$16$0)>>2)];
      var $st$16$1=(($t1789+4)|0);
      var $497$1=HEAP32[(($st$16$1)>>2)];
      var $st$20$0=(($t2790)|0);
      var $498$0=HEAP32[(($st$20$0)>>2)];
      var $st$20$1=(($t2790+4)|0);
      var $498$1=HEAP32[(($st$20$1)>>2)];
      var $st$24$0=(($t3)|0);
      var $499$0=HEAP32[(($st$24$0)>>2)];
      var $st$24$1=(($t3+4)|0);
      var $499$1=HEAP32[(($st$24$1)>>2)];
      var $st$28$0=(($t4)|0);
      var $500$0=HEAP32[(($st$28$0)>>2)];
      var $st$28$1=(($t4+4)|0);
      var $500$1=HEAP32[(($st$28$1)>>2)];
      var $501=HEAP32[(($a1)>>2)];
      var $502=HEAP32[(($a2)>>2)];
      var $503=HEAP32[(($a3)>>2)];
      var $call883=_interpolate_alpha($sub882$0, $sub882$1, $497$0, $497$1, $498$0, $498$1, $499$0, $499$1, $500$0, $500$1, $501, $502, $503);
      var $call883$0=$call883[0];
      var $504=$render_priv_addr;
      var $state884=(($504+176)|0);
      var $fade=(($state884+192)|0);
      HEAP32[(($fade)>>2)]=$call883;
      var $505=$render_priv_addr;
      var $state885=(($505+176)|0);
      var $parsed_tags886=(($state885+8)|0);
      var $506=HEAP32[(($parsed_tags886)>>2)];
      var $or887=$506 | 1;
      HEAP32[(($parsed_tags886)>>2)]=$or887;
      __label__ = 256; break;
    case 256: 
      __label__ = 462; break;
    case 257: 
      var $call890=_mystrcmp($p_addr, ((STRING_TABLE.__str39257)|0));
      var $tobool891=(($call890)|0)!=0;
      if ($tobool891) { __label__ = 258; break; } else { __label__ = 270; break; }
    case 258: 
      var $507=HEAP32[(($p_addr)>>2)];
      var $508=HEAP8[($507)];
      var $conv895=(($508 << 24) >> 24);
      var $cmp896=(($conv895)|0)==40;
      if ($cmp896) { __label__ = 259; break; } else { __label__ = 260; break; }
    case 259: 
      var $509=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr899=(($509+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr899;
      __label__ = 261; break;
    case 260: 
      var $510=HEAP32[(($p_addr)>>2)];
      $retval=$510;
      __label__ = 486; break;
    case 261: 
      var $call902=_mystrtoi($p_addr, $v1893);
      var $511=HEAP32[(($p_addr)>>2)];
      var $512=HEAP8[($511)];
      var $conv903=(($512 << 24) >> 24);
      var $cmp904=(($conv903)|0)==44;
      if ($cmp904) { __label__ = 262; break; } else { __label__ = 263; break; }
    case 262: 
      var $513=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr907=(($513+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr907;
      __label__ = 264; break;
    case 263: 
      var $514=HEAP32[(($p_addr)>>2)];
      $retval=$514;
      __label__ = 486; break;
    case 264: 
      var $call910=_mystrtoi($p_addr, $v2894);
      var $515=HEAP32[(($p_addr)>>2)];
      var $516=HEAP8[($515)];
      var $conv911=(($516 << 24) >> 24);
      var $cmp912=(($conv911)|0)==41;
      if ($cmp912) { __label__ = 265; break; } else { __label__ = 266; break; }
    case 265: 
      var $517=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr915=(($517+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr915;
      __label__ = 267; break;
    case 266: 
      var $518=HEAP32[(($p_addr)>>2)];
      $retval=$518;
      __label__ = 486; break;
    case 267: 
      var $519=$render_priv_addr;
      var $library918=(($519)|0);
      var $520=HEAP32[(($library918)>>2)];
      var $521=HEAP32[(($v1893)>>2)];
      var $522=HEAP32[(($v2894)>>2)];
      _ass_msg($520, 7, ((STRING_TABLE.__str40258)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$521,HEAP32[(((tempInt)+(4))>>2)]=$522,tempInt));
      var $523=$render_priv_addr;
      var $state919=(($523+176)|0);
      var $have_origin=(($state919+112)|0);
      var $524=HEAP8[($have_origin)];
      var $tobool920=(($524 << 24) >> 24)!=0;
      if ($tobool920) { __label__ = 269; break; } else { __label__ = 268; break; }
    case 268: 
      var $525=HEAP32[(($v1893)>>2)];
      var $conv922=(($525)|0);
      var $526=$render_priv_addr;
      var $state923=(($526+176)|0);
      var $org_x=(($state923+96)|0);
      (tempDoubleF64[0]=$conv922,HEAP32[(($org_x)>>2)]=tempDoubleI32[0],HEAP32[((($org_x)+(4))>>2)]=tempDoubleI32[1]);
      var $527=HEAP32[(($v2894)>>2)];
      var $conv924=(($527)|0);
      var $528=$render_priv_addr;
      var $state925=(($528+176)|0);
      var $org_y=(($state925+104)|0);
      (tempDoubleF64[0]=$conv924,HEAP32[(($org_y)>>2)]=tempDoubleI32[0],HEAP32[((($org_y)+(4))>>2)]=tempDoubleI32[1]);
      var $529=$render_priv_addr;
      var $state926=(($529+176)|0);
      var $have_origin927=(($state926+112)|0);
      HEAP8[($have_origin927)]=1;
      var $530=$render_priv_addr;
      var $state928=(($530+176)|0);
      var $detect_collisions929=(($state928+189)|0);
      HEAP8[($detect_collisions929)]=0;
      __label__ = 269; break;
    case 269: 
      __label__ = 461; break;
    case 270: 
      var $call932=_mystrcmp($p_addr, ((STRING_TABLE.__str41259)|0));
      var $tobool933=(($call932)|0)!=0;
      if ($tobool933) { __label__ = 271; break; } else { __label__ = 322; break; }
    case 271: 
      var $531=HEAP32[(($p_addr)>>2)];
      var $532=HEAP8[($531)];
      var $conv943=(($532 << 24) >> 24);
      var $cmp944=(($conv943)|0)==40;
      if ($cmp944) { __label__ = 272; break; } else { __label__ = 273; break; }
    case 272: 
      var $533=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr947=(($533+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr947;
      __label__ = 274; break;
    case 273: 
      var $534=HEAP32[(($p_addr)>>2)];
      $retval=$534;
      __label__ = 486; break;
    case 274: 
      $cnt=0;
      __label__ = 275; break;
    case 275: 
      var $535=$cnt;
      var $cmp951=(($535)|0) < 3;
      if ($cmp951) { __label__ = 276; break; } else { __label__ = 283; break; }
    case 276: 
      var $536=HEAP32[(($p_addr)>>2)];
      var $537=HEAP8[($536)];
      var $conv954=(($537 << 24) >> 24);
      var $cmp955=(($conv954)|0)==92;
      if ($cmp955) { __label__ = 277; break; } else { __label__ = 278; break; }
    case 277: 
      __label__ = 283; break;
    case 278: 
      var $538=$cnt;
      var $arrayidx959=(($v935+($538<<3))|0);
      var $call960=_mystrtod($p_addr, $arrayidx959);
      var $539=HEAP32[(($p_addr)>>2)];
      var $540=HEAP8[($539)];
      var $conv961=(($540 << 24) >> 24);
      var $cmp962=(($conv961)|0)==44;
      if ($cmp962) { __label__ = 279; break; } else { __label__ = 280; break; }
    case 279: 
      var $541=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr965=(($541+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr965;
      __label__ = 281; break;
    case 280: 
      var $542=HEAP32[(($p_addr)>>2)];
      $retval=$542;
      __label__ = 486; break;
    case 281: 
      __label__ = 282; break;
    case 282: 
      var $543=$cnt;
      var $inc969=((($543)+(1))|0);
      $cnt=$inc969;
      __label__ = 275; break;
    case 283: 
      var $544=$cnt;
      var $cmp971=(($544)|0)==3;
      if ($cmp971) { __label__ = 284; break; } else { __label__ = 288; break; }
    case 284: 
      var $arrayidx974=(($v935)|0);
      var $545=(tempDoubleI32[0]=HEAP32[(($arrayidx974)>>2)],tempDoubleI32[1]=HEAP32[((($arrayidx974)+(4))>>2)],tempDoubleF64[0]);
      var $conv975=(($545)&-1);
      $v1936=$conv975;
      var $arrayidx976=(($v935+8)|0);
      var $546=(tempDoubleI32[0]=HEAP32[(($arrayidx976)>>2)],tempDoubleI32[1]=HEAP32[((($arrayidx976)+(4))>>2)],tempDoubleF64[0]);
      var $547=$v1936;
      var $conv977=(($547)|0);
      var $cmp978=$546 < $conv977;
      if ($cmp978) { __label__ = 285; break; } else { __label__ = 286; break; }
    case 285: 
      var $548=$render_priv_addr;
      var $state981=(($548+176)|0);
      var $event982=(($state981)|0);
      var $549=HEAP32[(($event982)>>2)];
      var $Duration983=(($549+8)|0);
      var $st$5$0=(($Duration983)|0);
      var $550$0=HEAP32[(($st$5$0)>>2)];
      var $st$5$1=(($Duration983+4)|0);
      var $550$1=HEAP32[(($st$5$1)>>2)];
      var $conv984=$550$0 + $550$1*4294967296;
      var $cond988 = $conv984;__label__ = 287; break;
    case 286: 
      var $arrayidx986=(($v935+8)|0);
      var $551=(tempDoubleI32[0]=HEAP32[(($arrayidx986)>>2)],tempDoubleI32[1]=HEAP32[((($arrayidx986)+(4))>>2)],tempDoubleF64[0]);
      var $cond988 = $551;__label__ = 287; break;
    case 287: 
      var $cond988;
      var $conv989=(($cond988)&-1);
      $v2937=$conv989;
      var $arrayidx990=(($v935+16)|0);
      var $552=(tempDoubleI32[0]=HEAP32[(($arrayidx990)>>2)],tempDoubleI32[1]=HEAP32[((($arrayidx990)+(4))>>2)],tempDoubleF64[0]);
      $v3=$552;
      __label__ = 298; break;
    case 288: 
      var $553=$cnt;
      var $cmp992=(($553)|0)==2;
      if ($cmp992) { __label__ = 289; break; } else { __label__ = 293; break; }
    case 289: 
      var $arrayidx995=(($v935)|0);
      var $554=(tempDoubleI32[0]=HEAP32[(($arrayidx995)>>2)],tempDoubleI32[1]=HEAP32[((($arrayidx995)+(4))>>2)],tempDoubleF64[0]);
      var $conv996=(($554)&-1);
      $v1936=$conv996;
      var $arrayidx997=(($v935+8)|0);
      var $555=(tempDoubleI32[0]=HEAP32[(($arrayidx997)>>2)],tempDoubleI32[1]=HEAP32[((($arrayidx997)+(4))>>2)],tempDoubleF64[0]);
      var $556=$v1936;
      var $conv998=(($556)|0);
      var $cmp999=$555 < $conv998;
      if ($cmp999) { __label__ = 290; break; } else { __label__ = 291; break; }
    case 290: 
      var $557=$render_priv_addr;
      var $state1002=(($557+176)|0);
      var $event1003=(($state1002)|0);
      var $558=HEAP32[(($event1003)>>2)];
      var $Duration1004=(($558+8)|0);
      var $st$5$0=(($Duration1004)|0);
      var $559$0=HEAP32[(($st$5$0)>>2)];
      var $st$5$1=(($Duration1004+4)|0);
      var $559$1=HEAP32[(($st$5$1)>>2)];
      var $conv1005=$559$0 + $559$1*4294967296;
      var $cond1009 = $conv1005;__label__ = 292; break;
    case 291: 
      var $arrayidx1007=(($v935+8)|0);
      var $560=(tempDoubleI32[0]=HEAP32[(($arrayidx1007)>>2)],tempDoubleI32[1]=HEAP32[((($arrayidx1007)+(4))>>2)],tempDoubleF64[0]);
      var $cond1009 = $560;__label__ = 292; break;
    case 292: 
      var $cond1009;
      var $conv1010=(($cond1009)&-1);
      $v2937=$conv1010;
      $v3=1;
      __label__ = 297; break;
    case 293: 
      var $561=$cnt;
      var $cmp1012=(($561)|0)==1;
      if ($cmp1012) { __label__ = 294; break; } else { __label__ = 295; break; }
    case 294: 
      $v1936=0;
      var $562=$render_priv_addr;
      var $state1015=(($562+176)|0);
      var $event1016=(($state1015)|0);
      var $563=HEAP32[(($event1016)>>2)];
      var $Duration1017=(($563+8)|0);
      var $st$6$0=(($Duration1017)|0);
      var $564$0=HEAP32[(($st$6$0)>>2)];
      var $st$6$1=(($Duration1017+4)|0);
      var $564$1=HEAP32[(($st$6$1)>>2)];
      var $conv1018$0=$564$0;
      var $conv1018=$conv1018$0;
      $v2937=$conv1018;
      var $arrayidx1019=(($v935)|0);
      var $565=(tempDoubleI32[0]=HEAP32[(($arrayidx1019)>>2)],tempDoubleI32[1]=HEAP32[((($arrayidx1019)+(4))>>2)],tempDoubleF64[0]);
      $v3=$565;
      __label__ = 296; break;
    case 295: 
      $v1936=0;
      var $566=$render_priv_addr;
      var $state1021=(($566+176)|0);
      var $event1022=(($state1021)|0);
      var $567=HEAP32[(($event1022)>>2)];
      var $Duration1023=(($567+8)|0);
      var $st$6$0=(($Duration1023)|0);
      var $568$0=HEAP32[(($st$6$0)>>2)];
      var $st$6$1=(($Duration1023+4)|0);
      var $568$1=HEAP32[(($st$6$1)>>2)];
      var $conv1024$0=$568$0;
      var $conv1024=$conv1024$0;
      $v2937=$conv1024;
      $v3=1;
      __label__ = 296; break;
    case 296: 
      __label__ = 297; break;
    case 297: 
      __label__ = 298; break;
    case 298: 
      var $569=$render_priv_addr;
      var $state1028=(($569+176)|0);
      var $detect_collisions1029=(($state1028+189)|0);
      HEAP8[($detect_collisions1029)]=0;
      var $570=$v1936;
      var $conv1030$0=$570;
      var $conv1030$1=(($570|0) < 0 ? -1 : 0);
      var $st$7$0=(($t1938)|0);
      HEAP32[(($st$7$0)>>2)]=$conv1030$0;
      var $st$7$1=(($t1938+4)|0);
      HEAP32[(($st$7$1)>>2)]=$conv1030$1;
      var $571=$v2937;
      var $conv1031$0=$571;
      var $conv1031$1=(($571|0) < 0 ? -1 : 0);
      var $st$14$0=(($t2939)|0);
      HEAP32[(($st$14$0)>>2)]=$conv1031$0;
      var $st$14$1=(($t2939+4)|0);
      HEAP32[(($st$14$1)>>2)]=$conv1031$1;
      var $572=$v2937;
      var $573=$v1936;
      var $sub1032=((($572)-($573))|0);
      var $conv1033$0=$sub1032;
      var $conv1033$1=(($sub1032|0) < 0 ? -1 : 0);
      var $st$23$0=(($delta_t941)|0);
      HEAP32[(($st$23$0)>>2)]=$conv1033$0;
      var $st$23$1=(($delta_t941+4)|0);
      HEAP32[(($st$23$1)>>2)]=$conv1033$1;
      var $574=$v3;
      var $cmp1034=$574 < 0;
      if ($cmp1034) { __label__ = 299; break; } else { __label__ = 300; break; }
    case 299: 
      $v3=0;
      __label__ = 300; break;
    case 300: 
      var $575=$render_priv_addr;
      var $time1038=(($575+144)|0);
      var $st$2$0=(($time1038)|0);
      var $576$0=HEAP32[(($st$2$0)>>2)];
      var $st$2$1=(($time1038+4)|0);
      var $576$1=HEAP32[(($st$2$1)>>2)];
      var $577=$render_priv_addr;
      var $state1039=(($577+176)|0);
      var $event1040=(($state1039)|0);
      var $578=HEAP32[(($event1040)>>2)];
      var $Start1041=(($578)|0);
      var $st$11$0=(($Start1041)|0);
      var $579$0=HEAP32[(($st$11$0)>>2)];
      var $st$11$1=(($Start1041+4)|0);
      var $579$1=HEAP32[(($st$11$1)>>2)];
      var $sub1042$0 = (i64Math.subtract($576$0,$576$1,$579$0,$579$1),i64Math.result[0]); var $sub1042$1 = i64Math.result[1];
      var $st$16$0=(($t940)|0);
      HEAP32[(($st$16$0)>>2)]=$sub1042$0;
      var $st$16$1=(($t940+4)|0);
      HEAP32[(($st$16$1)>>2)]=$sub1042$1;
      var $st$20$0=(($t940)|0);
      var $580$0=HEAP32[(($st$20$0)>>2)];
      var $st$20$1=(($t940+4)|0);
      var $580$1=HEAP32[(($st$20$1)>>2)];
      var $st$24$0=(($t1938)|0);
      var $581$0=HEAP32[(($st$24$0)>>2)];
      var $st$24$1=(($t1938+4)|0);
      var $581$1=HEAP32[(($st$24$1)>>2)];
      var $cmp1043=($580$1|0) <= ($581$1|0) && (($580$1|0) <  ($581$1|0) || ($580$0>>>0) <= ($581$0>>>0));
      if ($cmp1043) { __label__ = 301; break; } else { __label__ = 302; break; }
    case 301: 
      $k942=0;
      __label__ = 309; break;
    case 302: 
      var $st$0$0=(($t940)|0);
      var $582$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($t940+4)|0);
      var $582$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($t2939)|0);
      var $583$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($t2939+4)|0);
      var $583$1=HEAP32[(($st$4$1)>>2)];
      var $cmp1047=($582$1|0) >= ($583$1|0) && (($582$1|0) >  ($583$1|0) || ($582$0>>>0) >= ($583$0>>>0));
      if ($cmp1047) { __label__ = 303; break; } else { __label__ = 304; break; }
    case 303: 
      $k942=1;
      __label__ = 308; break;
    case 304: 
      var $st$0$0=(($delta_t941)|0);
      var $584$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($delta_t941+4)|0);
      var $584$1=HEAP32[(($st$0$1)>>2)];
      var $conv1051=$584$0 + $584$1*4294967296;
      var $cmp1052=$conv1051 != 0;
      if ($cmp1052) { __label__ = 305; break; } else { __label__ = 306; break; }
    case 305: 
      __label__ = 307; break;
    case 306: 
      ___assert_func(((STRING_TABLE.__str42260)|0), 643, ((STRING_TABLE.___func___parse_tag)|0), ((STRING_TABLE.__str43261)|0));
      __label__ = 307; break;
    case 307: 
      var $st$0$0=(($t940)|0);
      var $585$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($t940+4)|0);
      var $585$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($t1938)|0);
      var $586$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($t1938+4)|0);
      var $586$1=HEAP32[(($st$4$1)>>2)];
      var $sub1057$0 = (i64Math.subtract($585$0,$585$1,$586$0,$586$1),i64Math.result[0]); var $sub1057$1 = i64Math.result[1];
      var $conv1058=$sub1057$0 + $sub1057$1*4294967296;
      var $st$10$0=(($delta_t941)|0);
      var $587$0=HEAP32[(($st$10$0)>>2)];
      var $st$10$1=(($delta_t941+4)|0);
      var $587$1=HEAP32[(($st$10$1)>>2)];
      var $conv1059=$587$0 + $587$1*4294967296;
      var $div1060=($conv1058)/($conv1059);
      var $588=$v3;
      var $589=_llvm_pow_f64($div1060, $588);
      $k942=$589;
      __label__ = 308; break;
    case 308: 
      __label__ = 309; break;
    case 309: 
      __label__ = 310; break;
    case 310: 
      var $590=HEAP32[(($p_addr)>>2)];
      var $591=HEAP8[($590)];
      var $conv1064=(($591 << 24) >> 24);
      var $cmp1065=(($conv1064)|0)==92;
      if ($cmp1065) { __label__ = 311; break; } else { __label__ = 312; break; }
    case 311: 
      var $592=$render_priv_addr;
      var $593=HEAP32[(($p_addr)>>2)];
      var $594=$k942;
      var $call1068=_parse_tag($592, $593, $594);
      HEAP32[(($p_addr)>>2)]=$call1068;
      __label__ = 310; break;
    case 312: 
      __label__ = 313; break;
    case 313: 
      var $595=HEAP32[(($p_addr)>>2)];
      var $596=HEAP8[($595)];
      var $conv1071=(($596 << 24) >> 24);
      var $cmp1072=(($conv1071)|0)!=41;
      if ($cmp1072) { __label__ = 314; break; } else { var $601 = 0;__label__ = 316; break; }
    case 314: 
      var $597=HEAP32[(($p_addr)>>2)];
      var $598=HEAP8[($597)];
      var $conv1075=(($598 << 24) >> 24);
      var $cmp1076=(($conv1075)|0)!=125;
      if ($cmp1076) { __label__ = 315; break; } else { var $601 = 0;__label__ = 316; break; }
    case 315: 
      var $599=HEAP32[(($p_addr)>>2)];
      var $600=HEAP8[($599)];
      var $conv1079=(($600 << 24) >> 24);
      var $cmp1080=(($conv1079)|0)!=0;
      var $601 = $cmp1080;__label__ = 316; break;
    case 316: 
      var $601;
      if ($601) { __label__ = 317; break; } else { __label__ = 318; break; }
    case 317: 
      var $602=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr1084=(($602+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr1084;
      __label__ = 313; break;
    case 318: 
      var $603=HEAP32[(($p_addr)>>2)];
      var $604=HEAP8[($603)];
      var $conv1086=(($604 << 24) >> 24);
      var $cmp1087=(($conv1086)|0)==41;
      if ($cmp1087) { __label__ = 319; break; } else { __label__ = 320; break; }
    case 319: 
      var $605=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr1090=(($605+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr1090;
      __label__ = 321; break;
    case 320: 
      var $606=HEAP32[(($p_addr)>>2)];
      $retval=$606;
      __label__ = 486; break;
    case 321: 
      __label__ = 460; break;
    case 322: 
      var $call1094=_mystrcmp($p_addr, ((STRING_TABLE.__str44262)|0));
      var $tobool1095=(($call1094)|0)!=0;
      if ($tobool1095) { __label__ = 323; break; } else { __label__ = 340; break; }
    case 323: 
      var $607=HEAP32[(($p_addr)>>2)];
      $start1097=$607;
      $res1102=1;
      var $608=HEAP32[(($p_addr)>>2)];
      var $609=HEAP8[($608)];
      var $conv1103=(($609 << 24) >> 24);
      var $cmp1104=(($conv1103)|0)==40;
      if ($cmp1104) { __label__ = 324; break; } else { __label__ = 325; break; }
    case 324: 
      var $610=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr1107=(($610+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr1107;
      __label__ = 325; break;
    case 325: 
      var $call1109=_mystrtoi($p_addr, $x01098);
      var $611=$res1102;
      var $and1110=$611 & $call1109;
      $res1102=$and1110;
      var $612=HEAP32[(($p_addr)>>2)];
      var $613=HEAP8[($612)];
      var $conv1111=(($613 << 24) >> 24);
      var $cmp1112=(($conv1111)|0)==44;
      if ($cmp1112) { __label__ = 326; break; } else { __label__ = 327; break; }
    case 326: 
      var $614=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr1115=(($614+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr1115;
      __label__ = 327; break;
    case 327: 
      var $call1117=_mystrtoi($p_addr, $y01099);
      var $615=$res1102;
      var $and1118=$615 & $call1117;
      $res1102=$and1118;
      var $616=HEAP32[(($p_addr)>>2)];
      var $617=HEAP8[($616)];
      var $conv1119=(($617 << 24) >> 24);
      var $cmp1120=(($conv1119)|0)==44;
      if ($cmp1120) { __label__ = 328; break; } else { __label__ = 329; break; }
    case 328: 
      var $618=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr1123=(($618+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr1123;
      __label__ = 329; break;
    case 329: 
      var $call1125=_mystrtoi($p_addr, $x11100);
      var $619=$res1102;
      var $and1126=$619 & $call1125;
      $res1102=$and1126;
      var $620=HEAP32[(($p_addr)>>2)];
      var $621=HEAP8[($620)];
      var $conv1127=(($621 << 24) >> 24);
      var $cmp1128=(($conv1127)|0)==44;
      if ($cmp1128) { __label__ = 330; break; } else { __label__ = 331; break; }
    case 330: 
      var $622=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr1131=(($622+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr1131;
      __label__ = 331; break;
    case 331: 
      var $call1133=_mystrtoi($p_addr, $y11101);
      var $623=$res1102;
      var $and1134=$623 & $call1133;
      $res1102=$and1134;
      var $624=HEAP32[(($p_addr)>>2)];
      var $625=HEAP8[($624)];
      var $conv1135=(($625 << 24) >> 24);
      var $cmp1136=(($conv1135)|0)==41;
      if ($cmp1136) { __label__ = 332; break; } else { __label__ = 333; break; }
    case 332: 
      var $626=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr1139=(($626+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr1139;
      __label__ = 333; break;
    case 333: 
      var $627=$res1102;
      var $tobool1141=(($627)|0)!=0;
      if ($tobool1141) { __label__ = 334; break; } else { __label__ = 335; break; }
    case 334: 
      var $628=$render_priv_addr;
      var $state1143=(($628+176)|0);
      var $clip_x01144=(($state1143+172)|0);
      var $629=HEAP32[(($clip_x01144)>>2)];
      var $conv1145=(($629)|0);
      var $630=$pwr_addr;
      var $sub1146=(1)-($630);
      var $mul1147=($conv1145)*($sub1146);
      var $631=HEAP32[(($x01098)>>2)];
      var $conv1148=(($631)|0);
      var $632=$pwr_addr;
      var $mul1149=($conv1148)*($632);
      var $add1150=($mul1147)+($mul1149);
      var $conv1151=(($add1150)&-1);
      var $633=$render_priv_addr;
      var $state1152=(($633+176)|0);
      var $clip_x01153=(($state1152+172)|0);
      HEAP32[(($clip_x01153)>>2)]=$conv1151;
      var $634=$render_priv_addr;
      var $state1154=(($634+176)|0);
      var $clip_x11155=(($state1154+180)|0);
      var $635=HEAP32[(($clip_x11155)>>2)];
      var $conv1156=(($635)|0);
      var $636=$pwr_addr;
      var $sub1157=(1)-($636);
      var $mul1158=($conv1156)*($sub1157);
      var $637=HEAP32[(($x11100)>>2)];
      var $conv1159=(($637)|0);
      var $638=$pwr_addr;
      var $mul1160=($conv1159)*($638);
      var $add1161=($mul1158)+($mul1160);
      var $conv1162=(($add1161)&-1);
      var $639=$render_priv_addr;
      var $state1163=(($639+176)|0);
      var $clip_x11164=(($state1163+180)|0);
      HEAP32[(($clip_x11164)>>2)]=$conv1162;
      var $640=$render_priv_addr;
      var $state1165=(($640+176)|0);
      var $clip_y01166=(($state1165+176)|0);
      var $641=HEAP32[(($clip_y01166)>>2)];
      var $conv1167=(($641)|0);
      var $642=$pwr_addr;
      var $sub1168=(1)-($642);
      var $mul1169=($conv1167)*($sub1168);
      var $643=HEAP32[(($y01099)>>2)];
      var $conv1170=(($643)|0);
      var $644=$pwr_addr;
      var $mul1171=($conv1170)*($644);
      var $add1172=($mul1169)+($mul1171);
      var $conv1173=(($add1172)&-1);
      var $645=$render_priv_addr;
      var $state1174=(($645+176)|0);
      var $clip_y01175=(($state1174+176)|0);
      HEAP32[(($clip_y01175)>>2)]=$conv1173;
      var $646=$render_priv_addr;
      var $state1176=(($646+176)|0);
      var $clip_y11177=(($state1176+184)|0);
      var $647=HEAP32[(($clip_y11177)>>2)];
      var $conv1178=(($647)|0);
      var $648=$pwr_addr;
      var $sub1179=(1)-($648);
      var $mul1180=($conv1178)*($sub1179);
      var $649=HEAP32[(($y11101)>>2)];
      var $conv1181=(($649)|0);
      var $650=$pwr_addr;
      var $mul1182=($conv1181)*($650);
      var $add1183=($mul1180)+($mul1182);
      var $conv1184=(($add1183)&-1);
      var $651=$render_priv_addr;
      var $state1185=(($651+176)|0);
      var $clip_y11186=(($state1185+184)|0);
      HEAP32[(($clip_y11186)>>2)]=$conv1184;
      __label__ = 339; break;
    case 335: 
      var $652=$render_priv_addr;
      var $state1188=(($652+176)|0);
      var $clip_drawing1189=(($state1188+232)|0);
      var $653=HEAP32[(($clip_drawing1189)>>2)];
      var $tobool1190=(($653)|0)!=0;
      if ($tobool1190) { __label__ = 337; break; } else { __label__ = 336; break; }
    case 336: 
      var $654=$render_priv_addr;
      var $655=$start1097;
      var $call1192=_parse_vector_clip($654, $655);
      HEAP32[(($p_addr)>>2)]=$call1192;
      var $656=$render_priv_addr;
      var $state1193=(($656+176)|0);
      var $clip_drawing_mode1194=(($state1193+236)|0);
      HEAP32[(($clip_drawing_mode1194)>>2)]=0;
      __label__ = 338; break;
    case 337: 
      var $657=$render_priv_addr;
      var $state1196=(($657+176)|0);
      var $clip_x01197=(($state1196+172)|0);
      HEAP32[(($clip_x01197)>>2)]=0;
      var $658=$render_priv_addr;
      var $state1198=(($658+176)|0);
      var $clip_y01199=(($state1198+176)|0);
      HEAP32[(($clip_y01199)>>2)]=0;
      var $659=$render_priv_addr;
      var $track1200=(($659+140)|0);
      var $660=HEAP32[(($track1200)>>2)];
      var $PlayResX=(($660+36)|0);
      var $661=HEAP32[(($PlayResX)>>2)];
      var $662=$render_priv_addr;
      var $state1201=(($662+176)|0);
      var $clip_x11202=(($state1201+180)|0);
      HEAP32[(($clip_x11202)>>2)]=$661;
      var $663=$render_priv_addr;
      var $track1203=(($663+140)|0);
      var $664=HEAP32[(($track1203)>>2)];
      var $PlayResY=(($664+40)|0);
      var $665=HEAP32[(($PlayResY)>>2)];
      var $666=$render_priv_addr;
      var $state1204=(($666+176)|0);
      var $clip_y11205=(($state1204+184)|0);
      HEAP32[(($clip_y11205)>>2)]=$665;
      __label__ = 338; break;
    case 338: 
      __label__ = 339; break;
    case 339: 
      __label__ = 459; break;
    case 340: 
      var $call1209=_mystrcmp($p_addr, ((STRING_TABLE.__str45263)|0));
      var $tobool1210=(($call1209)|0)!=0;
      if ($tobool1210) { __label__ = 341; break; } else { __label__ = 344; break; }
    case 341: 
      var $667=$render_priv_addr;
      var $track1214=(($667+140)|0);
      var $668=HEAP32[(($track1214)>>2)];
      var $track_type1215=(($668+32)|0);
      var $669=HEAP32[(($track_type1215)>>2)];
      var $cmp1216=(($669)|0)==1;
      var $conv1217=(($cmp1216)&1);
      $hex1213=$conv1217;
      var $670=$render_priv_addr;
      var $library1218=(($670)|0);
      var $671=HEAP32[(($library1218)>>2)];
      var $672=$hex1213;
      var $call1219=_strtocolor($671, $p_addr, $val1212, $672);
      var $tobool1220=(($call1219)|0)!=0;
      if ($tobool1220) { __label__ = 343; break; } else { __label__ = 342; break; }
    case 342: 
      var $673=$render_priv_addr;
      var $state1222=(($673+176)|0);
      var $style1223=(($state1222+4)|0);
      var $674=HEAP32[(($style1223)>>2)];
      var $PrimaryColour1224=(($674+16)|0);
      var $675=HEAP32[(($PrimaryColour1224)>>2)];
      HEAP32[(($val1212)>>2)]=$675;
      __label__ = 343; break;
    case 343: 
      var $676=$render_priv_addr;
      var $library1226=(($676)|0);
      var $677=HEAP32[(($library1226)>>2)];
      var $678=HEAP32[(($val1212)>>2)];
      _ass_msg($677, 7, ((STRING_TABLE.__str46264)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$678,tempInt));
      var $679=$render_priv_addr;
      var $state1227=(($679+176)|0);
      var $c1228=(($state1227+156)|0);
      var $arrayidx1229=(($c1228)|0);
      var $680=HEAP32[(($val1212)>>2)];
      var $681=$pwr_addr;
      _change_color($arrayidx1229, $680, $681);
      var $682=$render_priv_addr;
      var $state1230=(($682+176)|0);
      var $bm_run_id1231=(($state1230+252)|0);
      var $683=HEAP32[(($bm_run_id1231)>>2)];
      var $inc1232=((($683)+(1))|0);
      HEAP32[(($bm_run_id1231)>>2)]=$inc1232;
      __label__ = 458; break;
    case 344: 
      var $684=HEAP32[(($p_addr)>>2)];
      var $685=HEAP8[($684)];
      var $conv1234=(($685 << 24) >> 24);
      var $cmp1235=(($conv1234)|0) >= 49;
      if ($cmp1235) { __label__ = 345; break; } else { __label__ = 366; break; }
    case 345: 
      var $686=HEAP32[(($p_addr)>>2)];
      var $687=HEAP8[($686)];
      var $conv1238=(($687 << 24) >> 24);
      var $cmp1239=(($conv1238)|0) <= 52;
      if ($cmp1239) { __label__ = 346; break; } else { __label__ = 366; break; }
    case 346: 
      var $688=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr1242=(($688+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr1242;
      var $tobool1243=(($incdec_ptr1242)|0)!=0;
      if ($tobool1243) { __label__ = 347; break; } else { __label__ = 366; break; }
    case 347: 
      var $call1245=_mystrcmp($p_addr, ((STRING_TABLE.__str45263)|0));
      var $tobool1246=(($call1245)|0)!=0;
      if ($tobool1246) { __label__ = 349; break; } else { __label__ = 348; break; }
    case 348: 
      var $call1248=_mystrcmp($p_addr, ((STRING_TABLE.__str34252)|0));
      var $tobool1249=(($call1248)|0)!=0;
      if ($tobool1249) { __label__ = 349; break; } else { __label__ = 366; break; }
    case 349: 
      var $689=HEAP32[(($p_addr)>>2)];
      var $add_ptr=((($689)-(2))|0);
      var $690=HEAP8[($add_ptr)];
      $n=$690;
      var $691=$n;
      var $conv1251=(($691 << 24) >> 24);
      var $sub1252=((($conv1251)-(49))|0);
      $cidx=$sub1252;
      var $692=HEAP32[(($p_addr)>>2)];
      var $add_ptr1253=((($692)-(1))|0);
      var $693=HEAP8[($add_ptr1253)];
      $cmd=$693;
      var $694=$render_priv_addr;
      var $track1256=(($694+140)|0);
      var $695=HEAP32[(($track1256)>>2)];
      var $track_type1257=(($695+32)|0);
      var $696=HEAP32[(($track_type1257)>>2)];
      var $cmp1258=(($696)|0)==1;
      var $conv1259=(($cmp1258)&1);
      $hex1255=$conv1259;
      var $697=$n;
      var $conv1260=(($697 << 24) >> 24);
      var $cmp1261=(($conv1260)|0) >= 49;
      if ($cmp1261) { __label__ = 350; break; } else { __label__ = 352; break; }
    case 350: 
      var $698=$n;
      var $conv1264=(($698 << 24) >> 24);
      var $cmp1265=(($conv1264)|0) <= 52;
      if ($cmp1265) { __label__ = 351; break; } else { __label__ = 352; break; }
    case 351: 
      __label__ = 353; break;
    case 352: 
      ___assert_func(((STRING_TABLE.__str42260)|0), 697, ((STRING_TABLE.___func___parse_tag)|0), ((STRING_TABLE.__str47265)|0));
      __label__ = 353; break;
    case 353: 
      var $699=$render_priv_addr;
      var $library1270=(($699)|0);
      var $700=HEAP32[(($library1270)>>2)];
      var $701=$hex1255;
      var $call1271=_strtocolor($700, $p_addr, $val1254, $701);
      var $tobool1272=(($call1271)|0)!=0;
      if ($tobool1272) { __label__ = 361; break; } else { __label__ = 354; break; }
    case 354: 
      var $702=$n;
      var $conv1274=(($702 << 24) >> 24);
      if ((($conv1274)|0) == 49) {
        __label__ = 355; break;
      }
      else if ((($conv1274)|0) == 50) {
        __label__ = 356; break;
      }
      else if ((($conv1274)|0) == 51) {
        __label__ = 357; break;
      }
      else if ((($conv1274)|0) == 52) {
        __label__ = 358; break;
      }
      else {
      __label__ = 359; break;
      }
      
    case 355: 
      var $703=$render_priv_addr;
      var $state1275=(($703+176)|0);
      var $style1276=(($state1275+4)|0);
      var $704=HEAP32[(($style1276)>>2)];
      var $PrimaryColour1277=(($704+16)|0);
      var $705=HEAP32[(($PrimaryColour1277)>>2)];
      HEAP32[(($val1254)>>2)]=$705;
      __label__ = 360; break;
    case 356: 
      var $706=$render_priv_addr;
      var $state1279=(($706+176)|0);
      var $style1280=(($state1279+4)|0);
      var $707=HEAP32[(($style1280)>>2)];
      var $SecondaryColour1281=(($707+20)|0);
      var $708=HEAP32[(($SecondaryColour1281)>>2)];
      HEAP32[(($val1254)>>2)]=$708;
      __label__ = 360; break;
    case 357: 
      var $709=$render_priv_addr;
      var $state1283=(($709+176)|0);
      var $style1284=(($state1283+4)|0);
      var $710=HEAP32[(($style1284)>>2)];
      var $OutlineColour1285=(($710+24)|0);
      var $711=HEAP32[(($OutlineColour1285)>>2)];
      HEAP32[(($val1254)>>2)]=$711;
      __label__ = 360; break;
    case 358: 
      var $712=$render_priv_addr;
      var $state1287=(($712+176)|0);
      var $style1288=(($state1287+4)|0);
      var $713=HEAP32[(($style1288)>>2)];
      var $BackColour1289=(($713+28)|0);
      var $714=HEAP32[(($BackColour1289)>>2)];
      HEAP32[(($val1254)>>2)]=$714;
      __label__ = 360; break;
    case 359: 
      HEAP32[(($val1254)>>2)]=0;
      __label__ = 360; break;
    case 360: 
      __label__ = 361; break;
    case 361: 
      var $715=$cmd;
      var $conv1291=(($715 << 24) >> 24);
      if ((($conv1291)|0) == 99) {
        __label__ = 362; break;
      }
      else if ((($conv1291)|0) == 97) {
        __label__ = 363; break;
      }
      else {
      __label__ = 364; break;
      }
      
    case 362: 
      var $716=$render_priv_addr;
      var $state1293=(($716+176)|0);
      var $c1294=(($state1293+156)|0);
      var $arraydecay=(($c1294)|0);
      var $717=$cidx;
      var $add_ptr1295=(($arraydecay+($717<<2))|0);
      var $718=HEAP32[(($val1254)>>2)];
      var $719=$pwr_addr;
      _change_color($add_ptr1295, $718, $719);
      var $720=$render_priv_addr;
      var $state1296=(($720+176)|0);
      var $bm_run_id1297=(($state1296+252)|0);
      var $721=HEAP32[(($bm_run_id1297)>>2)];
      var $inc1298=((($721)+(1))|0);
      HEAP32[(($bm_run_id1297)>>2)]=$inc1298;
      __label__ = 365; break;
    case 363: 
      var $722=$render_priv_addr;
      var $state1300=(($722+176)|0);
      var $c1301=(($state1300+156)|0);
      var $arraydecay1302=(($c1301)|0);
      var $723=$cidx;
      var $add_ptr1303=(($arraydecay1302+($723<<2))|0);
      var $724=HEAPU32[(($val1254)>>2)];
      var $shr1304=$724 >>> 24;
      var $725=$pwr_addr;
      _change_alpha($add_ptr1303, $shr1304, $725);
      var $726=$render_priv_addr;
      var $state1305=(($726+176)|0);
      var $bm_run_id1306=(($state1305+252)|0);
      var $727=HEAP32[(($bm_run_id1306)>>2)];
      var $inc1307=((($727)+(1))|0);
      HEAP32[(($bm_run_id1306)>>2)]=$inc1307;
      __label__ = 365; break;
    case 364: 
      var $728=$render_priv_addr;
      var $library1309=(($728)|0);
      var $729=HEAP32[(($library1309)>>2)];
      var $730=$n;
      var $conv1310=(($730 << 24) >> 24);
      var $731=$cmd;
      var $conv1311=(($731 << 24) >> 24);
      _ass_msg($729, 2, ((STRING_TABLE.__str48266)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$conv1310,HEAP32[(((tempInt)+(4))>>2)]=$conv1311,tempInt));
      __label__ = 365; break;
    case 365: 
      var $732=$render_priv_addr;
      var $library1313=(($732)|0);
      var $733=HEAP32[(($library1313)>>2)];
      var $734=$pwr_addr;
      var $735=$n;
      var $conv1314=(($735 << 24) >> 24);
      var $736=$cmd;
      var $conv1315=(($736 << 24) >> 24);
      var $737=$cidx;
      var $738=$render_priv_addr;
      var $state1316=(($738+176)|0);
      var $c1317=(($state1316+156)|0);
      var $arrayidx1318=(($c1317+($737<<2))|0);
      var $739=HEAP32[(($arrayidx1318)>>2)];
      _ass_msg($733, 7, ((STRING_TABLE.__str49267)|0), (tempInt=STACKTOP,STACKTOP += 20,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$734,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[(((tempInt)+(4))>>2)]=tempDoubleI32[1]),HEAP32[(((tempInt)+(8))>>2)]=$conv1314,HEAP32[(((tempInt)+(12))>>2)]=$conv1315,HEAP32[(((tempInt)+(16))>>2)]=$739,tempInt));
      __label__ = 457; break;
    case 366: 
      var $call1320=_mystrcmp($p_addr, ((STRING_TABLE.__str50268)|0));
      var $tobool1321=(($call1320)|0)!=0;
      if ($tobool1321) { __label__ = 367; break; } else { __label__ = 368; break; }
    case 367: 
      var $740=$render_priv_addr;
      _reset_render_context($740);
      __label__ = 456; break;
    case 368: 
      var $call1324=_mystrcmp($p_addr, ((STRING_TABLE.__str51269)|0));
      var $tobool1325=(($call1324)|0)!=0;
      if ($tobool1325) { __label__ = 369; break; } else { __label__ = 379; break; }
    case 369: 
      var $call1328=_mystrtoi($p_addr, $val1327);
      var $tobool1329=(($call1328)|0)!=0;
      if ($tobool1329) { __label__ = 370; break; } else { __label__ = 377; break; }
    case 370: 
      var $741=HEAP32[(($val1327)>>2)];
      var $cmp1331=(($741)|0) < 0;
      if ($cmp1331) { __label__ = 371; break; } else { __label__ = 372; break; }
    case 371: 
      var $cond1336 = 0;__label__ = 373; break;
    case 372: 
      var $742=HEAP32[(($val1327)>>2)];
      var $cond1336 = $742;__label__ = 373; break;
    case 373: 
      var $cond1336;
      HEAP32[(($val1327)>>2)]=$cond1336;
      var $743=HEAP32[(($val1327)>>2)];
      var $cmp1337=(($743)|0) > 127;
      if ($cmp1337) { __label__ = 374; break; } else { __label__ = 375; break; }
    case 374: 
      var $cond1342 = 127;__label__ = 376; break;
    case 375: 
      var $744=HEAP32[(($val1327)>>2)];
      var $cond1342 = $744;__label__ = 376; break;
    case 376: 
      var $cond1342;
      HEAP32[(($val1327)>>2)]=$cond1342;
      var $745=HEAP32[(($val1327)>>2)];
      var $conv1343=(($745) & 255);
      var $746=$render_priv_addr;
      var $state1344=(($746+176)|0);
      var $be=(($state1344+196)|0);
      HEAP8[($be)]=$conv1343;
      __label__ = 378; break;
    case 377: 
      var $747=$render_priv_addr;
      var $state1346=(($747+176)|0);
      var $be1347=(($state1346+196)|0);
      HEAP8[($be1347)]=0;
      __label__ = 378; break;
    case 378: 
      var $748=$render_priv_addr;
      var $state1349=(($748+176)|0);
      var $bm_run_id1350=(($state1349+252)|0);
      var $749=HEAP32[(($bm_run_id1350)>>2)];
      var $inc1351=((($749)+(1))|0);
      HEAP32[(($bm_run_id1350)>>2)]=$inc1351;
      __label__ = 455; break;
    case 379: 
      var $call1353=_mystrcmp($p_addr, ((STRING_TABLE.__str52270)|0));
      var $tobool1354=(($call1353)|0)!=0;
      if ($tobool1354) { __label__ = 380; break; } else { __label__ = 386; break; }
    case 380: 
      var $call1356=_mystrtoi($p_addr, $b);
      var $tobool1357=(($call1356)|0)!=0;
      if ($tobool1357) { __label__ = 381; break; } else { __label__ = 384; break; }
    case 381: 
      var $750=$pwr_addr;
      var $cmp1359=$750 >= 0.5;
      if ($cmp1359) { __label__ = 382; break; } else { __label__ = 383; break; }
    case 382: 
      var $751=HEAP32[(($b)>>2)];
      var $752=$render_priv_addr;
      var $state1362=(($752+176)|0);
      var $bold=(($state1362+268)|0);
      HEAP32[(($bold)>>2)]=$751;
      __label__ = 383; break;
    case 383: 
      __label__ = 385; break;
    case 384: 
      var $753=$render_priv_addr;
      var $state1365=(($753+176)|0);
      var $style1366=(($state1365+4)|0);
      var $754=HEAP32[(($style1366)>>2)];
      var $Bold=(($754+32)|0);
      var $755=HEAP32[(($Bold)>>2)];
      var $756=$render_priv_addr;
      var $state1367=(($756+176)|0);
      var $bold1368=(($state1367+268)|0);
      HEAP32[(($bold1368)>>2)]=$755;
      __label__ = 385; break;
    case 385: 
      var $757=$render_priv_addr;
      _update_font($757);
      __label__ = 454; break;
    case 386: 
      var $call1371=_mystrcmp($p_addr, ((STRING_TABLE.__str53271)|0));
      var $tobool1372=(($call1371)|0)!=0;
      if ($tobool1372) { __label__ = 387; break; } else { __label__ = 393; break; }
    case 387: 
      var $call1375=_mystrtoi($p_addr, $i1374);
      var $tobool1376=(($call1375)|0)!=0;
      if ($tobool1376) { __label__ = 388; break; } else { __label__ = 391; break; }
    case 388: 
      var $758=$pwr_addr;
      var $cmp1378=$758 >= 0.5;
      if ($cmp1378) { __label__ = 389; break; } else { __label__ = 390; break; }
    case 389: 
      var $759=HEAP32[(($i1374)>>2)];
      var $760=$render_priv_addr;
      var $state1381=(($760+176)|0);
      var $italic=(($state1381+272)|0);
      HEAP32[(($italic)>>2)]=$759;
      __label__ = 390; break;
    case 390: 
      __label__ = 392; break;
    case 391: 
      var $761=$render_priv_addr;
      var $state1384=(($761+176)|0);
      var $style1385=(($state1384+4)|0);
      var $762=HEAP32[(($style1385)>>2)];
      var $Italic=(($762+36)|0);
      var $763=HEAP32[(($Italic)>>2)];
      var $764=$render_priv_addr;
      var $state1386=(($764+176)|0);
      var $italic1387=(($state1386+272)|0);
      HEAP32[(($italic1387)>>2)]=$763;
      __label__ = 392; break;
    case 392: 
      var $765=$render_priv_addr;
      _update_font($765);
      __label__ = 453; break;
    case 393: 
      var $call1390=_mystrcmp($p_addr, ((STRING_TABLE.__str54272)|0));
      var $tobool1391=(($call1390)|0)!=0;
      if ($tobool1391) { __label__ = 395; break; } else { __label__ = 394; break; }
    case 394: 
      var $call1393=_mystrcmp($p_addr, ((STRING_TABLE.__str55273)|0));
      var $tobool1394=(($call1393)|0)!=0;
      if ($tobool1394) { __label__ = 395; break; } else { __label__ = 398; break; }
    case 395: 
      HEAP32[(($val1396)>>2)]=0;
      var $call1397=_mystrtoi($p_addr, $val1396);
      var $766=$render_priv_addr;
      var $state1398=(($766+176)|0);
      var $effect_type=(($state1398+240)|0);
      HEAP32[(($effect_type)>>2)]=2;
      var $767=$render_priv_addr;
      var $state1399=(($767+176)|0);
      var $effect_timing=(($state1399+244)|0);
      var $768=HEAP32[(($effect_timing)>>2)];
      var $tobool1400=(($768)|0)!=0;
      if ($tobool1400) { __label__ = 396; break; } else { __label__ = 397; break; }
    case 396: 
      var $769=$render_priv_addr;
      var $state1402=(($769+176)|0);
      var $effect_timing1403=(($state1402+244)|0);
      var $770=HEAP32[(($effect_timing1403)>>2)];
      var $771=$render_priv_addr;
      var $state1404=(($771+176)|0);
      var $effect_skip_timing=(($state1404+248)|0);
      var $772=HEAP32[(($effect_skip_timing)>>2)];
      var $add1405=((($772)+($770))|0);
      HEAP32[(($effect_skip_timing)>>2)]=$add1405;
      __label__ = 397; break;
    case 397: 
      var $773=HEAP32[(($val1396)>>2)];
      var $mul1407=((($773)*(10))|0);
      var $774=$render_priv_addr;
      var $state1408=(($774+176)|0);
      var $effect_timing1409=(($state1408+244)|0);
      HEAP32[(($effect_timing1409)>>2)]=$mul1407;
      __label__ = 452; break;
    case 398: 
      var $call1411=_mystrcmp($p_addr, ((STRING_TABLE.__str56274)|0));
      var $tobool1412=(($call1411)|0)!=0;
      if ($tobool1412) { __label__ = 399; break; } else { __label__ = 402; break; }
    case 399: 
      HEAP32[(($val1414)>>2)]=0;
      var $call1415=_mystrtoi($p_addr, $val1414);
      var $775=$render_priv_addr;
      var $state1416=(($775+176)|0);
      var $effect_type1417=(($state1416+240)|0);
      HEAP32[(($effect_type1417)>>2)]=3;
      var $776=$render_priv_addr;
      var $state1418=(($776+176)|0);
      var $effect_timing1419=(($state1418+244)|0);
      var $777=HEAP32[(($effect_timing1419)>>2)];
      var $tobool1420=(($777)|0)!=0;
      if ($tobool1420) { __label__ = 400; break; } else { __label__ = 401; break; }
    case 400: 
      var $778=$render_priv_addr;
      var $state1422=(($778+176)|0);
      var $effect_timing1423=(($state1422+244)|0);
      var $779=HEAP32[(($effect_timing1423)>>2)];
      var $780=$render_priv_addr;
      var $state1424=(($780+176)|0);
      var $effect_skip_timing1425=(($state1424+248)|0);
      var $781=HEAP32[(($effect_skip_timing1425)>>2)];
      var $add1426=((($781)+($779))|0);
      HEAP32[(($effect_skip_timing1425)>>2)]=$add1426;
      __label__ = 401; break;
    case 401: 
      var $782=HEAP32[(($val1414)>>2)];
      var $mul1428=((($782)*(10))|0);
      var $783=$render_priv_addr;
      var $state1429=(($783+176)|0);
      var $effect_timing1430=(($state1429+244)|0);
      HEAP32[(($effect_timing1430)>>2)]=$mul1428;
      __label__ = 451; break;
    case 402: 
      var $call1432=_mystrcmp($p_addr, ((STRING_TABLE.__str57275)|0));
      var $tobool1433=(($call1432)|0)!=0;
      if ($tobool1433) { __label__ = 403; break; } else { __label__ = 406; break; }
    case 403: 
      HEAP32[(($val1435)>>2)]=0;
      var $call1436=_mystrtoi($p_addr, $val1435);
      var $784=$render_priv_addr;
      var $state1437=(($784+176)|0);
      var $effect_type1438=(($state1437+240)|0);
      HEAP32[(($effect_type1438)>>2)]=1;
      var $785=$render_priv_addr;
      var $state1439=(($785+176)|0);
      var $effect_timing1440=(($state1439+244)|0);
      var $786=HEAP32[(($effect_timing1440)>>2)];
      var $tobool1441=(($786)|0)!=0;
      if ($tobool1441) { __label__ = 404; break; } else { __label__ = 405; break; }
    case 404: 
      var $787=$render_priv_addr;
      var $state1443=(($787+176)|0);
      var $effect_timing1444=(($state1443+244)|0);
      var $788=HEAP32[(($effect_timing1444)>>2)];
      var $789=$render_priv_addr;
      var $state1445=(($789+176)|0);
      var $effect_skip_timing1446=(($state1445+248)|0);
      var $790=HEAP32[(($effect_skip_timing1446)>>2)];
      var $add1447=((($790)+($788))|0);
      HEAP32[(($effect_skip_timing1446)>>2)]=$add1447;
      __label__ = 405; break;
    case 405: 
      var $791=HEAP32[(($val1435)>>2)];
      var $mul1449=((($791)*(10))|0);
      var $792=$render_priv_addr;
      var $state1450=(($792+176)|0);
      var $effect_timing1451=(($state1450+244)|0);
      HEAP32[(($effect_timing1451)>>2)]=$mul1449;
      __label__ = 450; break;
    case 406: 
      var $call1453=_mystrcmp($p_addr, ((STRING_TABLE.__str58276)|0));
      var $tobool1454=(($call1453)|0)!=0;
      if ($tobool1454) { __label__ = 407; break; } else { __label__ = 413; break; }
    case 407: 
      var $call1457=_mystrtod($p_addr, $val1456);
      var $tobool1458=(($call1457)|0)!=0;
      if ($tobool1458) { __label__ = 408; break; } else { __label__ = 411; break; }
    case 408: 
      var $793=$render_priv_addr;
      var $state1460=(($793+176)|0);
      var $shadow_x1461=(($state1460+208)|0);
      var $794=(tempDoubleI32[0]=HEAP32[(($shadow_x1461)>>2)],tempDoubleI32[1]=HEAP32[((($shadow_x1461)+(4))>>2)],tempDoubleF64[0]);
      var $795=$render_priv_addr;
      var $state1462=(($795+176)|0);
      var $shadow_y1463=(($state1462+216)|0);
      var $796=(tempDoubleI32[0]=HEAP32[(($shadow_y1463)>>2)],tempDoubleI32[1]=HEAP32[((($shadow_y1463)+(4))>>2)],tempDoubleF64[0]);
      var $cmp1464=$794 == $796;
      if ($cmp1464) { __label__ = 409; break; } else { __label__ = 410; break; }
    case 409: 
      var $797=$render_priv_addr;
      var $state1467=(($797+176)|0);
      var $shadow_x1468=(($state1467+208)|0);
      var $798=(tempDoubleI32[0]=HEAP32[(($shadow_x1468)>>2)],tempDoubleI32[1]=HEAP32[((($shadow_x1468)+(4))>>2)],tempDoubleF64[0]);
      var $799=$pwr_addr;
      var $sub1469=(1)-($799);
      var $mul1470=($798)*($sub1469);
      var $800=(tempDoubleI32[0]=HEAP32[(($val1456)>>2)],tempDoubleI32[1]=HEAP32[((($val1456)+(4))>>2)],tempDoubleF64[0]);
      var $801=$pwr_addr;
      var $mul1471=($800)*($801);
      var $add1472=($mul1470)+($mul1471);
      (tempDoubleF64[0]=$add1472,HEAP32[(($val1456)>>2)]=tempDoubleI32[0],HEAP32[((($val1456)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 410; break;
    case 410: 
      __label__ = 412; break;
    case 411: 
      (tempDoubleF64[0]=0,HEAP32[(($val1456)>>2)]=tempDoubleI32[0],HEAP32[((($val1456)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 412; break;
    case 412: 
      var $802=(tempDoubleI32[0]=HEAP32[(($val1456)>>2)],tempDoubleI32[1]=HEAP32[((($val1456)+(4))>>2)],tempDoubleF64[0]);
      var $803=$render_priv_addr;
      var $state1476=(($803+176)|0);
      var $shadow_y1477=(($state1476+216)|0);
      (tempDoubleF64[0]=$802,HEAP32[(($shadow_y1477)>>2)]=tempDoubleI32[0],HEAP32[((($shadow_y1477)+(4))>>2)]=tempDoubleI32[1]);
      var $804=$render_priv_addr;
      var $state1478=(($804+176)|0);
      var $shadow_x1479=(($state1478+208)|0);
      (tempDoubleF64[0]=$802,HEAP32[(($shadow_x1479)>>2)]=tempDoubleI32[0],HEAP32[((($shadow_x1479)+(4))>>2)]=tempDoubleI32[1]);
      var $805=$render_priv_addr;
      var $state1480=(($805+176)|0);
      var $bm_run_id1481=(($state1480+252)|0);
      var $806=HEAP32[(($bm_run_id1481)>>2)];
      var $inc1482=((($806)+(1))|0);
      HEAP32[(($bm_run_id1481)>>2)]=$inc1482;
      __label__ = 449; break;
    case 413: 
      var $call1484=_mystrcmp($p_addr, ((STRING_TABLE.__str59277)|0));
      var $tobool1485=(($call1484)|0)!=0;
      if ($tobool1485) { __label__ = 414; break; } else { __label__ = 419; break; }
    case 414: 
      var $call1488=_mystrtoi($p_addr, $val1487);
      var $tobool1489=(($call1488)|0)!=0;
      if ($tobool1489) { __label__ = 415; break; } else { __label__ = 417; break; }
    case 415: 
      var $807=HEAP32[(($val1487)>>2)];
      var $tobool1491=(($807)|0)!=0;
      if ($tobool1491) { __label__ = 416; break; } else { __label__ = 417; break; }
    case 416: 
      var $808=$render_priv_addr;
      var $state1493=(($808+176)|0);
      var $flags=(($state1493+24)|0);
      var $809=HEAP32[(($flags)>>2)];
      var $or1494=$809 | 2;
      HEAP32[(($flags)>>2)]=$or1494;
      __label__ = 418; break;
    case 417: 
      var $810=$render_priv_addr;
      var $state1496=(($810+176)|0);
      var $flags1497=(($state1496+24)|0);
      var $811=HEAP32[(($flags1497)>>2)];
      var $and1498=$811 & -3;
      HEAP32[(($flags1497)>>2)]=$and1498;
      __label__ = 418; break;
    case 418: 
      var $812=$render_priv_addr;
      var $state1500=(($812+176)|0);
      var $bm_run_id1501=(($state1500+252)|0);
      var $813=HEAP32[(($bm_run_id1501)>>2)];
      var $inc1502=((($813)+(1))|0);
      HEAP32[(($bm_run_id1501)>>2)]=$inc1502;
      __label__ = 448; break;
    case 419: 
      var $call1504=_mystrcmp($p_addr, ((STRING_TABLE.__str60278)|0));
      var $tobool1505=(($call1504)|0)!=0;
      if ($tobool1505) { __label__ = 420; break; } else { __label__ = 425; break; }
    case 420: 
      var $call1508=_mystrtoi($p_addr, $val1507);
      var $tobool1509=(($call1508)|0)!=0;
      if ($tobool1509) { __label__ = 421; break; } else { __label__ = 423; break; }
    case 421: 
      var $814=HEAP32[(($val1507)>>2)];
      var $tobool1511=(($814)|0)!=0;
      if ($tobool1511) { __label__ = 422; break; } else { __label__ = 423; break; }
    case 422: 
      var $815=$render_priv_addr;
      var $state1513=(($815+176)|0);
      var $flags1514=(($state1513+24)|0);
      var $816=HEAP32[(($flags1514)>>2)];
      var $or1515=$816 | 1;
      HEAP32[(($flags1514)>>2)]=$or1515;
      __label__ = 424; break;
    case 423: 
      var $817=$render_priv_addr;
      var $state1517=(($817+176)|0);
      var $flags1518=(($state1517+24)|0);
      var $818=HEAP32[(($flags1518)>>2)];
      var $and1519=$818 & -2;
      HEAP32[(($flags1518)>>2)]=$and1519;
      __label__ = 424; break;
    case 424: 
      var $819=$render_priv_addr;
      var $state1521=(($819+176)|0);
      var $bm_run_id1522=(($state1521+252)|0);
      var $820=HEAP32[(($bm_run_id1522)>>2)];
      var $inc1523=((($820)+(1))|0);
      HEAP32[(($bm_run_id1522)>>2)]=$inc1523;
      __label__ = 447; break;
    case 425: 
      var $call1525=_mystrcmp($p_addr, ((STRING_TABLE.__str61279)|0));
      var $tobool1526=(($call1525)|0)!=0;
      if ($tobool1526) { __label__ = 426; break; } else { __label__ = 429; break; }
    case 426: 
      (tempDoubleF64[0]=0,HEAP32[(($val1528)>>2)]=tempDoubleI32[0],HEAP32[((($val1528)+(4))>>2)]=tempDoubleI32[1]);
      var $call1529=_mystrtod($p_addr, $val1528);
      var $tobool1530=(($call1529)|0)!=0;
      if ($tobool1530) { __label__ = 427; break; } else { __label__ = 428; break; }
    case 427: 
      var $821=(tempDoubleI32[0]=HEAP32[(($val1528)>>2)],tempDoubleI32[1]=HEAP32[((($val1528)+(4))>>2)],tempDoubleF64[0]);
      var $822=$render_priv_addr;
      var $state1532=(($822+176)|0);
      var $drawing=(($state1532+228)|0);
      var $823=HEAP32[(($drawing)>>2)];
      var $pbo=(($823+12)|0);
      (tempDoubleF64[0]=$821,HEAP32[(($pbo)>>2)]=tempDoubleI32[0],HEAP32[((($pbo)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 428; break;
    case 428: 
      __label__ = 446; break;
    case 429: 
      var $call1535=_mystrcmp($p_addr, ((STRING_TABLE.__str62280)|0));
      var $tobool1536=(($call1535)|0)!=0;
      if ($tobool1536) { __label__ = 430; break; } else { __label__ = 435; break; }
    case 430: 
      var $call1539=_mystrtoi($p_addr, $val1538);
      var $tobool1540=(($call1539)|0)!=0;
      if ($tobool1540) { __label__ = 432; break; } else { __label__ = 431; break; }
    case 431: 
      HEAP32[(($val1538)>>2)]=0;
      __label__ = 432; break;
    case 432: 
      var $824=HEAP32[(($val1538)>>2)];
      var $tobool1543=(($824)|0)!=0;
      if ($tobool1543) { __label__ = 433; break; } else { __label__ = 434; break; }
    case 433: 
      var $825=HEAP32[(($val1538)>>2)];
      var $826=$render_priv_addr;
      var $state1545=(($826+176)|0);
      var $drawing1546=(($state1545+228)|0);
      var $827=HEAP32[(($drawing1546)>>2)];
      var $scale=(($827+8)|0);
      HEAP32[(($scale)>>2)]=$825;
      __label__ = 434; break;
    case 434: 
      var $828=HEAP32[(($val1538)>>2)];
      var $tobool1548=(($828)|0)!=0;
      var $lnot=$tobool1548 ^ 1;
      var $lnot1549=$lnot ^ 1;
      var $lnot_ext=(($lnot1549)&1);
      var $829=$render_priv_addr;
      var $state1550=(($829+176)|0);
      var $drawing_mode=(($state1550+224)|0);
      HEAP32[(($drawing_mode)>>2)]=$lnot_ext;
      __label__ = 445; break;
    case 435: 
      var $call1552=_mystrcmp($p_addr, ((STRING_TABLE.__str63281)|0));
      var $tobool1553=(($call1552)|0)!=0;
      if ($tobool1553) { __label__ = 436; break; } else { __label__ = 439; break; }
    case 436: 
      var $call1556=_mystrtoi($p_addr, $val1555);
      var $tobool1557=(($call1556)|0)!=0;
      if ($tobool1557) { __label__ = 438; break; } else { __label__ = 437; break; }
    case 437: 
      var $830=$render_priv_addr;
      var $track1559=(($830+140)|0);
      var $831=HEAP32[(($track1559)>>2)];
      var $WrapStyle=(($831+52)|0);
      var $832=HEAP32[(($WrapStyle)>>2)];
      HEAP32[(($val1555)>>2)]=$832;
      __label__ = 438; break;
    case 438: 
      var $833=HEAP32[(($val1555)>>2)];
      var $834=$render_priv_addr;
      var $state1561=(($834+176)|0);
      var $wrap_style=(($state1561+280)|0);
      HEAP32[(($wrap_style)>>2)]=$833;
      __label__ = 444; break;
    case 439: 
      var $call1563=_mystrcmp($p_addr, ((STRING_TABLE.__str64282)|0));
      var $tobool1564=(($call1563)|0)!=0;
      if ($tobool1564) { __label__ = 440; break; } else { __label__ = 443; break; }
    case 440: 
      var $call1567=_mystrtoi($p_addr, $val1566);
      var $tobool1568=(($call1567)|0)!=0;
      if ($tobool1568) { __label__ = 442; break; } else { __label__ = 441; break; }
    case 441: 
      var $835=$render_priv_addr;
      var $state1570=(($835+176)|0);
      var $style1571=(($state1570+4)|0);
      var $836=HEAP32[(($style1571)>>2)];
      var $Encoding=(($836+112)|0);
      var $837=HEAP32[(($Encoding)>>2)];
      HEAP32[(($val1566)>>2)]=$837;
      __label__ = 442; break;
    case 442: 
      var $838=HEAP32[(($val1566)>>2)];
      var $839=$render_priv_addr;
      var $state1573=(($839+176)|0);
      var $font_encoding=(($state1573+284)|0);
      HEAP32[(($font_encoding)>>2)]=$838;
      __label__ = 443; break;
    case 443: 
      __label__ = 444; break;
    case 444: 
      __label__ = 445; break;
    case 445: 
      __label__ = 446; break;
    case 446: 
      __label__ = 447; break;
    case 447: 
      __label__ = 448; break;
    case 448: 
      __label__ = 449; break;
    case 449: 
      __label__ = 450; break;
    case 450: 
      __label__ = 451; break;
    case 451: 
      __label__ = 452; break;
    case 452: 
      __label__ = 453; break;
    case 453: 
      __label__ = 454; break;
    case 454: 
      __label__ = 455; break;
    case 455: 
      __label__ = 456; break;
    case 456: 
      __label__ = 457; break;
    case 457: 
      __label__ = 458; break;
    case 458: 
      __label__ = 459; break;
    case 459: 
      __label__ = 460; break;
    case 460: 
      __label__ = 461; break;
    case 461: 
      __label__ = 462; break;
    case 462: 
      __label__ = 463; break;
    case 463: 
      __label__ = 464; break;
    case 464: 
      __label__ = 465; break;
    case 465: 
      __label__ = 466; break;
    case 466: 
      __label__ = 467; break;
    case 467: 
      __label__ = 468; break;
    case 468: 
      __label__ = 469; break;
    case 469: 
      __label__ = 470; break;
    case 470: 
      __label__ = 471; break;
    case 471: 
      __label__ = 472; break;
    case 472: 
      __label__ = 473; break;
    case 473: 
      __label__ = 474; break;
    case 474: 
      __label__ = 475; break;
    case 475: 
      __label__ = 476; break;
    case 476: 
      __label__ = 477; break;
    case 477: 
      __label__ = 478; break;
    case 478: 
      __label__ = 479; break;
    case 479: 
      __label__ = 480; break;
    case 480: 
      __label__ = 481; break;
    case 481: 
      __label__ = 482; break;
    case 482: 
      __label__ = 483; break;
    case 483: 
      __label__ = 484; break;
    case 484: 
      __label__ = 485; break;
    case 485: 
      var $840=HEAP32[(($p_addr)>>2)];
      $retval=$840;
      __label__ = 486; break;
    case 486: 
      var $841=$retval;
      STACKTOP = __stackBase__;
      return $841;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_tag["X"]=1;

function _ass_set_shaper($priv, $level) {
  ;
  var __label__;

  var $priv_addr;
  var $level_addr;
  $priv_addr=$priv;
  $level_addr=$level;
  ;
  return;
}


function _change_color($var, $new, $pwr) {
  ;
  var __label__;

  var $var_addr;
  var $new_addr;
  var $pwr_addr;
  $var_addr=$var;
  $new_addr=$new;
  $pwr_addr=$pwr;
  var $0=$var_addr;
  var $1=HEAPU32[(($0)>>2)];
  var $shr=$1 >>> 24;
  var $conv=(($shr)>>>0);
  var $2=$pwr_addr;
  var $sub=(1)-($2);
  var $mul=($conv)*($sub);
  var $3=$new_addr;
  var $shr1=$3 >>> 24;
  var $conv2=(($shr1)>>>0);
  var $4=$pwr_addr;
  var $mul3=($conv2)*($4);
  var $add=($mul)+($mul3);
  var $conv4=($add >= 0 ? Math.floor($add) : Math.ceil($add));
  var $shl=$conv4 << 24;
  var $5=$var_addr;
  var $6=HEAPU32[(($5)>>2)];
  var $shr5=$6 >>> 16;
  var $and=$shr5 & 255;
  var $conv6=(($and)>>>0);
  var $7=$pwr_addr;
  var $sub7=(1)-($7);
  var $mul8=($conv6)*($sub7);
  var $8=$new_addr;
  var $shr9=$8 >>> 16;
  var $and10=$shr9 & 255;
  var $conv11=(($and10)>>>0);
  var $9=$pwr_addr;
  var $mul12=($conv11)*($9);
  var $add13=($mul8)+($mul12);
  var $conv14=($add13 >= 0 ? Math.floor($add13) : Math.ceil($add13));
  var $shl15=$conv14 << 16;
  var $add16=((($shl)+($shl15))|0);
  var $10=$var_addr;
  var $11=HEAPU32[(($10)>>2)];
  var $shr17=$11 >>> 8;
  var $and18=$shr17 & 255;
  var $conv19=(($and18)>>>0);
  var $12=$pwr_addr;
  var $sub20=(1)-($12);
  var $mul21=($conv19)*($sub20);
  var $13=$new_addr;
  var $shr22=$13 >>> 8;
  var $and23=$shr22 & 255;
  var $conv24=(($and23)>>>0);
  var $14=$pwr_addr;
  var $mul25=($conv24)*($14);
  var $add26=($mul21)+($mul25);
  var $conv27=($add26 >= 0 ? Math.floor($add26) : Math.ceil($add26));
  var $shl28=$conv27 << 8;
  var $add29=((($add16)+($shl28))|0);
  var $15=$var_addr;
  var $16=HEAP32[(($15)>>2)];
  var $and30=$16 & 255;
  var $add31=((($add29)+($and30))|0);
  var $17=$var_addr;
  HEAP32[(($17)>>2)]=$add31;
  ;
  return;
}
_change_color["X"]=1;

function _interpolate_alpha($now$0, $now$1, $t1$0, $t1$1, $t2$0, $t2$1, $t3$0, $t3$1, $t4$0, $t4$1, $a1, $a2, $a3) {
  var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $now_addr=__stackBase__;
      var $t1_addr=(__stackBase__)+(8);
      var $t2_addr=(__stackBase__)+(16);
      var $t3_addr=(__stackBase__)+(24);
      var $t4_addr=(__stackBase__)+(32);
      var $a1_addr;
      var $a2_addr;
      var $a3_addr;
      var $a;
      var $cf;
      var $st$10$0=(($now_addr)|0);
      HEAP32[(($st$10$0)>>2)]=$now$0;
      var $st$10$1=(($now_addr+4)|0);
      HEAP32[(($st$10$1)>>2)]=$now$1;
      var $st$14$0=(($t1_addr)|0);
      HEAP32[(($st$14$0)>>2)]=$t1$0;
      var $st$14$1=(($t1_addr+4)|0);
      HEAP32[(($st$14$1)>>2)]=$t1$1;
      var $st$18$0=(($t2_addr)|0);
      HEAP32[(($st$18$0)>>2)]=$t2$0;
      var $st$18$1=(($t2_addr+4)|0);
      HEAP32[(($st$18$1)>>2)]=$t2$1;
      var $st$22$0=(($t3_addr)|0);
      HEAP32[(($st$22$0)>>2)]=$t3$0;
      var $st$22$1=(($t3_addr+4)|0);
      HEAP32[(($st$22$1)>>2)]=$t3$1;
      var $st$26$0=(($t4_addr)|0);
      HEAP32[(($st$26$0)>>2)]=$t4$0;
      var $st$26$1=(($t4_addr+4)|0);
      HEAP32[(($st$26$1)>>2)]=$t4$1;
      $a1_addr=$a1;
      $a2_addr=$a2;
      $a3_addr=$a3;
      var $st$33$0=(($now_addr)|0);
      var $0$0=HEAP32[(($st$33$0)>>2)];
      var $st$33$1=(($now_addr+4)|0);
      var $0$1=HEAP32[(($st$33$1)>>2)];
      var $st$37$0=(($t1_addr)|0);
      var $1$0=HEAP32[(($st$37$0)>>2)];
      var $st$37$1=(($t1_addr+4)|0);
      var $1$1=HEAP32[(($st$37$1)>>2)];
      var $cmp=($0$1|0) < ($1$1|0) || (($0$1|0) == ($1$1|0) && ($0$0>>>0) <  ($1$0>>>0));
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=$a1_addr;
      $a=$2;
      __label__ = 16; break;
    case 4: 
      var $st$0$0=(($now_addr)|0);
      var $3$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($now_addr+4)|0);
      var $3$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($t4_addr)|0);
      var $4$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($t4_addr+4)|0);
      var $4$1=HEAP32[(($st$4$1)>>2)];
      var $cmp1=($3$1|0) >= ($4$1|0) && (($3$1|0) >  ($4$1|0) || ($3$0>>>0) >= ($4$0>>>0));
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $5=$a3_addr;
      $a=$5;
      __label__ = 15; break;
    case 6: 
      var $st$0$0=(($now_addr)|0);
      var $6$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($now_addr+4)|0);
      var $6$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($t2_addr)|0);
      var $7$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($t2_addr+4)|0);
      var $7$1=HEAP32[(($st$4$1)>>2)];
      var $cmp4=($6$1|0) < ($7$1|0) || (($6$1|0) == ($7$1|0) && ($6$0>>>0) <  ($7$0>>>0));
      if ($cmp4) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $st$0$0=(($t2_addr)|0);
      var $8$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($t2_addr+4)|0);
      var $8$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($t1_addr)|0);
      var $9$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($t1_addr+4)|0);
      var $9$1=HEAP32[(($st$4$1)>>2)];
      var $cmp5=($8$1|0) > ($9$1|0) || (($8$1|0) == ($9$1|0) && ($8$0>>>0) >  ($9$0>>>0));
      if ($cmp5) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $st$0$0=(($now_addr)|0);
      var $10$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($now_addr+4)|0);
      var $10$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($t1_addr)|0);
      var $11$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($t1_addr+4)|0);
      var $11$1=HEAP32[(($st$4$1)>>2)];
      var $sub$0 = (i64Math.subtract($10$0,$10$1,$11$0,$11$1),i64Math.result[0]); var $sub$1 = i64Math.result[1];
      var $conv=$sub$0 + $sub$1*4294967296;
      var $st$10$0=(($t2_addr)|0);
      var $12$0=HEAP32[(($st$10$0)>>2)];
      var $st$10$1=(($t2_addr+4)|0);
      var $12$1=HEAP32[(($st$10$1)>>2)];
      var $st$14$0=(($t1_addr)|0);
      var $13$0=HEAP32[(($st$14$0)>>2)];
      var $st$14$1=(($t1_addr+4)|0);
      var $13$1=HEAP32[(($st$14$1)>>2)];
      var $sub7$0 = (i64Math.subtract($12$0,$12$1,$13$0,$13$1),i64Math.result[0]); var $sub7$1 = i64Math.result[1];
      var $conv8=$sub7$0 + $sub7$1*4294967296;
      var $div=($conv)/($conv8);
      $cf=$div;
      var $14=$a1_addr;
      var $conv9=(($14)>>>0);
      var $15=$cf;
      var $sub10=(1)-($15);
      var $mul=($conv9)*($sub10);
      var $16=$a2_addr;
      var $conv11=(($16)>>>0);
      var $17=$cf;
      var $mul12=($conv11)*($17);
      var $add=($mul)+($mul12);
      var $conv13=($add >= 0 ? Math.floor($add) : Math.ceil($add));
      $a=$conv13;
      __label__ = 14; break;
    case 9: 
      var $st$0$0=(($now_addr)|0);
      var $18$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($now_addr+4)|0);
      var $18$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($t3_addr)|0);
      var $19$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($t3_addr+4)|0);
      var $19$1=HEAP32[(($st$4$1)>>2)];
      var $cmp15=($18$1|0) >= ($19$1|0) && (($18$1|0) >  ($19$1|0) || ($18$0>>>0) >= ($19$0>>>0));
      if ($cmp15) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $st$0$0=(($t4_addr)|0);
      var $20$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($t4_addr+4)|0);
      var $20$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($t3_addr)|0);
      var $21$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($t3_addr+4)|0);
      var $21$1=HEAP32[(($st$4$1)>>2)];
      var $cmp18=($20$1|0) > ($21$1|0) || (($20$1|0) == ($21$1|0) && ($20$0>>>0) >  ($21$0>>>0));
      if ($cmp18) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $st$0$0=(($now_addr)|0);
      var $22$0=HEAP32[(($st$0$0)>>2)];
      var $st$0$1=(($now_addr+4)|0);
      var $22$1=HEAP32[(($st$0$1)>>2)];
      var $st$4$0=(($t3_addr)|0);
      var $23$0=HEAP32[(($st$4$0)>>2)];
      var $st$4$1=(($t3_addr+4)|0);
      var $23$1=HEAP32[(($st$4$1)>>2)];
      var $sub21$0 = (i64Math.subtract($22$0,$22$1,$23$0,$23$1),i64Math.result[0]); var $sub21$1 = i64Math.result[1];
      var $conv22=$sub21$0 + $sub21$1*4294967296;
      var $st$10$0=(($t4_addr)|0);
      var $24$0=HEAP32[(($st$10$0)>>2)];
      var $st$10$1=(($t4_addr+4)|0);
      var $24$1=HEAP32[(($st$10$1)>>2)];
      var $st$14$0=(($t3_addr)|0);
      var $25$0=HEAP32[(($st$14$0)>>2)];
      var $st$14$1=(($t3_addr+4)|0);
      var $25$1=HEAP32[(($st$14$1)>>2)];
      var $sub23$0 = (i64Math.subtract($24$0,$24$1,$25$0,$25$1),i64Math.result[0]); var $sub23$1 = i64Math.result[1];
      var $conv24=$sub23$0 + $sub23$1*4294967296;
      var $div25=($conv22)/($conv24);
      $cf=$div25;
      var $26=$a2_addr;
      var $conv26=(($26)>>>0);
      var $27=$cf;
      var $sub27=(1)-($27);
      var $mul28=($conv26)*($sub27);
      var $28=$a3_addr;
      var $conv29=(($28)>>>0);
      var $29=$cf;
      var $mul30=($conv29)*($29);
      var $add31=($mul28)+($mul30);
      var $conv32=($add31 >= 0 ? Math.floor($add31) : Math.ceil($add31));
      $a=$conv32;
      __label__ = 13; break;
    case 12: 
      var $30=$a2_addr;
      $a=$30;
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $31=$a;
      STACKTOP = __stackBase__;
      return $31;
    default: assert(0, "bad label: " + __label__);
  }
}
_interpolate_alpha["X"]=1;

function _ass_set_use_margins($priv, $use) {
  ;
  var __label__;

  var $priv_addr;
  var $use_addr;
  $priv_addr=$priv;
  $use_addr=$use;
  var $0=$use_addr;
  var $1=$priv_addr;
  var $settings=(($1+12)|0);
  var $use_margins=(($settings+40)|0);
  HEAP32[(($use_margins)>>2)]=$0;
  ;
  return;
}


function _ass_set_line_spacing($priv, $line_spacing) {
  ;
  var __label__;

  var $priv_addr;
  var $line_spacing_addr;
  $priv_addr=$priv;
  $line_spacing_addr=$line_spacing;
  var $0=$line_spacing_addr;
  var $1=$priv_addr;
  var $settings=(($1+12)|0);
  var $line_spacing1=(($settings+16)|0);
  (tempDoubleF64[0]=$0,HEAP32[(($line_spacing1)>>2)]=tempDoubleI32[0],HEAP32[((($line_spacing1)+(4))>>2)]=tempDoubleI32[1]);
  ;
  return;
}


function _ass_set_cache_limits($render_priv, $glyph_max, $bitmap_max) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      var $glyph_max_addr;
      var $bitmap_max_addr;
      $render_priv_addr=$render_priv;
      $glyph_max_addr=$glyph_max;
      $bitmap_max_addr=$bitmap_max;
      var $0=$glyph_max_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $1=$glyph_max_addr;
      var $cond = $1;__label__ = 5; break;
    case 4: 
      var $cond = 1000;__label__ = 5; break;
    case 5: 
      var $cond;
      var $2=$render_priv_addr;
      var $cache=(($2+496)|0);
      var $glyph_max1=(($cache+16)|0);
      HEAP32[(($glyph_max1)>>2)]=$cond;
      var $3=$bitmap_max_addr;
      var $tobool2=(($3)|0)!=0;
      if ($tobool2) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $4=$bitmap_max_addr;
      var $mul=((($4<<20))|0);
      var $cond6 = $mul;__label__ = 8; break;
    case 7: 
      var $cond6 = 31457280;__label__ = 8; break;
    case 8: 
      var $cond6;
      var $5=$render_priv_addr;
      var $cache7=(($5+496)|0);
      var $bitmap_max_size=(($cache7+20)|0);
      HEAP32[(($bitmap_max_size)>>2)]=$cond6;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _mystrcmp($p, $sample) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $p_addr;
      var $sample_addr;
      var $len;
      $p_addr=$p;
      $sample_addr=$sample;
      var $0=$sample_addr;
      var $call=_strlen($0);
      $len=$call;
      var $1=$p_addr;
      var $2=HEAP32[(($1)>>2)];
      var $3=$sample_addr;
      var $4=$len;
      var $call1=_strncmp($2, $3, $4);
      var $cmp=(($call1)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $5=$len;
      var $6=$p_addr;
      var $7=HEAP32[(($6)>>2)];
      var $add_ptr=(($7+$5)|0);
      HEAP32[(($6)>>2)]=$add_ptr;
      $retval=1;
      __label__ = 5; break;
    case 4: 
      $retval=0;
      __label__ = 5; break;
    case 5: 
      var $8=$retval;
      ;
      return $8;
    default: assert(0, "bad label: " + __label__);
  }
}


function _parse_vector_clip($render_priv, $p) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $render_priv_addr;
      var $p_addr=__stackBase__;
      var $scale=(__stackBase__)+(4);
      var $res;
      var $drawing;
      $render_priv_addr=$render_priv;
      HEAP32[(($p_addr)>>2)]=$p;
      HEAP32[(($scale)>>2)]=1;
      $res=0;
      var $0=$render_priv_addr;
      var $state=(($0+176)|0);
      var $clip_drawing=(($state+232)|0);
      var $1=HEAP32[(($clip_drawing)>>2)];
      $drawing=$1;
      var $2=$drawing;
      _ass_drawing_free($2);
      var $3=$render_priv_addr;
      var $library=(($3)|0);
      var $4=HEAP32[(($library)>>2)];
      var $5=$render_priv_addr;
      var $ftlibrary=(($5+4)|0);
      var $6=HEAP32[(($ftlibrary)>>2)];
      var $call=_ass_drawing_new($4, $6);
      var $7=$render_priv_addr;
      var $state1=(($7+176)|0);
      var $clip_drawing2=(($state1+232)|0);
      HEAP32[(($clip_drawing2)>>2)]=$call;
      var $8=$render_priv_addr;
      var $state3=(($8+176)|0);
      var $clip_drawing4=(($state3+232)|0);
      var $9=HEAP32[(($clip_drawing4)>>2)];
      $drawing=$9;
      var $10=HEAP32[(($p_addr)>>2)];
      var $11=HEAP8[($10)];
      var $conv=(($11 << 24) >> 24);
      var $cmp=(($conv)|0)==40;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $12=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr=(($12+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr;
      __label__ = 4; break;
    case 4: 
      var $call6=_mystrtoi($p_addr, $scale);
      $res=$call6;
      var $13=HEAP32[(($p_addr)>>2)];
      var $14=HEAP8[($13)];
      var $conv7=(($14 << 24) >> 24);
      var $cmp8=(($conv7)|0)==44;
      if ($cmp8) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $15=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr11=(($15+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr11;
      __label__ = 6; break;
    case 6: 
      var $16=$res;
      var $tobool=(($16)|0)!=0;
      if ($tobool) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      HEAP32[(($scale)>>2)]=1;
      __label__ = 8; break;
    case 8: 
      var $17=HEAP32[(($scale)>>2)];
      var $18=$drawing;
      var $scale15=(($18+8)|0);
      HEAP32[(($scale15)>>2)]=$17;
      var $19=$render_priv_addr;
      var $font_scale_x=(($19+160)|0);
      var $20=(tempDoubleI32[0]=HEAP32[(($font_scale_x)>>2)],tempDoubleI32[1]=HEAP32[((($font_scale_x)+(4))>>2)],tempDoubleF64[0]);
      var $21=$render_priv_addr;
      var $font_scale=(($21+152)|0);
      var $22=(tempDoubleI32[0]=HEAP32[(($font_scale)>>2)],tempDoubleI32[1]=HEAP32[((($font_scale)+(4))>>2)],tempDoubleF64[0]);
      var $mul=($20)*($22);
      var $23=$drawing;
      var $scale_x=(($23+20)|0);
      (tempDoubleF64[0]=$mul,HEAP32[(($scale_x)>>2)]=tempDoubleI32[0],HEAP32[((($scale_x)+(4))>>2)]=tempDoubleI32[1]);
      var $24=$render_priv_addr;
      var $font_scale16=(($24+152)|0);
      var $25=(tempDoubleI32[0]=HEAP32[(($font_scale16)>>2)],tempDoubleI32[1]=HEAP32[((($font_scale16)+(4))>>2)],tempDoubleF64[0]);
      var $26=$drawing;
      var $scale_y=(($26+28)|0);
      (tempDoubleF64[0]=$25,HEAP32[(($scale_y)>>2)]=tempDoubleI32[0],HEAP32[((($scale_y)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 9; break;
    case 9: 
      var $27=HEAP32[(($p_addr)>>2)];
      var $28=HEAP8[($27)];
      var $conv17=(($28 << 24) >> 24);
      var $cmp18=(($conv17)|0)!=41;
      if ($cmp18) { __label__ = 10; break; } else { var $32 = 0;__label__ = 12; break; }
    case 10: 
      var $29=HEAP32[(($p_addr)>>2)];
      var $30=HEAP8[($29)];
      var $conv20=(($30 << 24) >> 24);
      var $cmp21=(($conv20)|0)!=125;
      if ($cmp21) { __label__ = 11; break; } else { var $32 = 0;__label__ = 12; break; }
    case 11: 
      var $31=HEAP32[(($p_addr)>>2)];
      var $cmp23=(($31)|0)!=0;
      var $32 = $cmp23;__label__ = 12; break;
    case 12: 
      var $32;
      if ($32) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $33=$drawing;
      var $34=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr25=(($34+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr25;
      var $35=HEAP8[($34)];
      _ass_drawing_add_char($33, $35);
      __label__ = 9; break;
    case 14: 
      var $36=HEAP32[(($p_addr)>>2)];
      var $37=HEAP8[($36)];
      var $conv26=(($37 << 24) >> 24);
      var $cmp27=(($conv26)|0)==41;
      if ($cmp27) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $38=HEAP32[(($p_addr)>>2)];
      var $incdec_ptr30=(($38+1)|0);
      HEAP32[(($p_addr)>>2)]=$incdec_ptr30;
      __label__ = 16; break;
    case 16: 
      var $39=HEAP32[(($p_addr)>>2)];
      STACKTOP = __stackBase__;
      return $39;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_vector_clip["X"]=1;

function _ass_set_frame_size($priv, $w, $h) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $priv_addr;
      var $w_addr;
      var $h_addr;
      $priv_addr=$priv;
      $w_addr=$w;
      $h_addr=$h;
      var $0=$priv_addr;
      var $settings=(($0+12)|0);
      var $frame_width=(($settings)|0);
      var $1=HEAP32[(($frame_width)>>2)];
      var $2=$w_addr;
      var $cmp=(($1)|0)!=(($2)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $3=$priv_addr;
      var $settings1=(($3+12)|0);
      var $frame_height=(($settings1+4)|0);
      var $4=HEAP32[(($frame_height)>>2)];
      var $5=$h_addr;
      var $cmp2=(($4)|0)!=(($5)|0);
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $6=$w_addr;
      var $7=$priv_addr;
      var $settings3=(($7+12)|0);
      var $frame_width4=(($settings3)|0);
      HEAP32[(($frame_width4)>>2)]=$6;
      var $8=$h_addr;
      var $9=$priv_addr;
      var $settings5=(($9+12)|0);
      var $frame_height6=(($settings5+4)|0);
      HEAP32[(($frame_height6)>>2)]=$8;
      var $10=$priv_addr;
      var $settings7=(($10+12)|0);
      var $aspect=(($settings7+44)|0);
      var $11=(tempDoubleI32[0]=HEAP32[(($aspect)>>2)],tempDoubleI32[1]=HEAP32[((($aspect)+(4))>>2)],tempDoubleF64[0]);
      var $cmp8=$11 == 0;
      if ($cmp8) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $12=$w_addr;
      var $conv=(($12)|0);
      var $13=$h_addr;
      var $conv10=(($13)|0);
      var $div=($conv)/($conv10);
      var $14=$priv_addr;
      var $settings11=(($14+12)|0);
      var $aspect12=(($settings11+44)|0);
      (tempDoubleF64[0]=$div,HEAP32[(($aspect12)>>2)]=tempDoubleI32[0],HEAP32[((($aspect12)+(4))>>2)]=tempDoubleI32[1]);
      var $15=$w_addr;
      var $conv13=(($15)|0);
      var $16=$h_addr;
      var $conv14=(($16)|0);
      var $div15=($conv13)/($conv14);
      var $17=$priv_addr;
      var $settings16=(($17+12)|0);
      var $storage_aspect=(($settings16+52)|0);
      (tempDoubleF64[0]=$div15,HEAP32[(($storage_aspect)>>2)]=tempDoubleI32[0],HEAP32[((($storage_aspect)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 6; break;
    case 6: 
      var $18=$priv_addr;
      _ass_reconfigure($18);
      __label__ = 7; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_set_frame_size["X"]=1;

function _ass_reconfigure($priv) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $priv_addr;
      var $settings;
      $priv_addr=$priv;
      var $0=$priv_addr;
      var $settings1=(($0+12)|0);
      $settings=$settings1;
      var $1=$priv_addr;
      var $render_id=(($1+88)|0);
      var $2=HEAP32[(($render_id)>>2)];
      var $inc=((($2)+(1))|0);
      HEAP32[(($render_id)>>2)]=$inc;
      var $3=$priv_addr;
      var $cache=(($3+496)|0);
      var $outline_cache=(($cache+4)|0);
      var $4=HEAP32[(($outline_cache)>>2)];
      var $call=_ass_cache_empty($4, 0);
      var $5=$priv_addr;
      var $cache2=(($5+496)|0);
      var $bitmap_cache=(($cache2+8)|0);
      var $6=HEAP32[(($bitmap_cache)>>2)];
      var $call3=_ass_cache_empty($6, 0);
      var $7=$priv_addr;
      var $cache4=(($7+496)|0);
      var $composite_cache=(($cache4+12)|0);
      var $8=HEAP32[(($composite_cache)>>2)];
      var $call5=_ass_cache_empty($8, 0);
      var $9=$priv_addr;
      var $prev_images_root=(($9+104)|0);
      var $10=HEAP32[(($prev_images_root)>>2)];
      _ass_free_images($10);
      var $11=$priv_addr;
      var $prev_images_root6=(($11+104)|0);
      HEAP32[(($prev_images_root6)>>2)]=0;
      var $12=$settings;
      var $frame_width=(($12)|0);
      var $13=HEAP32[(($frame_width)>>2)];
      var $14=$priv_addr;
      var $width=(($14+116)|0);
      HEAP32[(($width)>>2)]=$13;
      var $15=$settings;
      var $frame_height=(($15+4)|0);
      var $16=HEAP32[(($frame_height)>>2)];
      var $17=$priv_addr;
      var $height=(($17+120)|0);
      HEAP32[(($height)>>2)]=$16;
      var $18=$settings;
      var $frame_width7=(($18)|0);
      var $19=HEAP32[(($frame_width7)>>2)];
      var $20=$settings;
      var $left_margin=(($20+32)|0);
      var $21=HEAP32[(($left_margin)>>2)];
      var $sub=((($19)-($21))|0);
      var $22=$settings;
      var $right_margin=(($22+36)|0);
      var $23=HEAP32[(($right_margin)>>2)];
      var $sub8=((($sub)-($23))|0);
      var $24=$priv_addr;
      var $orig_width=(($24+128)|0);
      HEAP32[(($orig_width)>>2)]=$sub8;
      var $25=$settings;
      var $frame_height9=(($25+4)|0);
      var $26=HEAP32[(($frame_height9)>>2)];
      var $27=$settings;
      var $top_margin=(($27+24)|0);
      var $28=HEAP32[(($top_margin)>>2)];
      var $sub10=((($26)-($28))|0);
      var $29=$settings;
      var $bottom_margin=(($29+28)|0);
      var $30=HEAP32[(($bottom_margin)>>2)];
      var $sub11=((($sub10)-($30))|0);
      var $31=$priv_addr;
      var $orig_height=(($31+124)|0);
      HEAP32[(($orig_height)>>2)]=$sub11;
      var $32=$settings;
      var $frame_width12=(($32)|0);
      var $33=HEAP32[(($frame_width12)>>2)];
      var $34=$settings;
      var $left_margin13=(($34+32)|0);
      var $35=HEAP32[(($left_margin13)>>2)];
      var $cmp=(($35)|0) > 0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $36=$settings;
      var $left_margin14=(($36+32)|0);
      var $37=HEAP32[(($left_margin14)>>2)];
      var $cond = $37;__label__ = 5; break;
    case 4: 
      var $cond = 0;__label__ = 5; break;
    case 5: 
      var $cond;
      var $sub15=((($33)-($cond))|0);
      var $38=$settings;
      var $right_margin16=(($38+36)|0);
      var $39=HEAP32[(($right_margin16)>>2)];
      var $cmp17=(($39)|0) > 0;
      if ($cmp17) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $40=$settings;
      var $right_margin19=(($40+36)|0);
      var $41=HEAP32[(($right_margin19)>>2)];
      var $cond22 = $41;__label__ = 8; break;
    case 7: 
      var $cond22 = 0;__label__ = 8; break;
    case 8: 
      var $cond22;
      var $sub23=((($sub15)-($cond22))|0);
      var $42=$priv_addr;
      var $orig_width_nocrop=(($42+136)|0);
      HEAP32[(($orig_width_nocrop)>>2)]=$sub23;
      var $43=$settings;
      var $frame_height24=(($43+4)|0);
      var $44=HEAP32[(($frame_height24)>>2)];
      var $45=$settings;
      var $top_margin25=(($45+24)|0);
      var $46=HEAP32[(($top_margin25)>>2)];
      var $cmp26=(($46)|0) > 0;
      if ($cmp26) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $47=$settings;
      var $top_margin28=(($47+24)|0);
      var $48=HEAP32[(($top_margin28)>>2)];
      var $cond31 = $48;__label__ = 11; break;
    case 10: 
      var $cond31 = 0;__label__ = 11; break;
    case 11: 
      var $cond31;
      var $sub32=((($44)-($cond31))|0);
      var $49=$settings;
      var $bottom_margin33=(($49+28)|0);
      var $50=HEAP32[(($bottom_margin33)>>2)];
      var $cmp34=(($50)|0) > 0;
      if ($cmp34) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $51=$settings;
      var $bottom_margin36=(($51+28)|0);
      var $52=HEAP32[(($bottom_margin36)>>2)];
      var $cond39 = $52;__label__ = 14; break;
    case 13: 
      var $cond39 = 0;__label__ = 14; break;
    case 14: 
      var $cond39;
      var $sub40=((($sub32)-($cond39))|0);
      var $53=$priv_addr;
      var $orig_height_nocrop=(($53+132)|0);
      HEAP32[(($orig_height_nocrop)>>2)]=$sub40;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_reconfigure["X"]=1;

function _ass_set_margins($priv, $t, $b, $l, $r) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $priv_addr;
      var $t_addr;
      var $b_addr;
      var $l_addr;
      var $r_addr;
      $priv_addr=$priv;
      $t_addr=$t;
      $b_addr=$b;
      $l_addr=$l;
      $r_addr=$r;
      var $0=$priv_addr;
      var $settings=(($0+12)|0);
      var $left_margin=(($settings+32)|0);
      var $1=HEAP32[(($left_margin)>>2)];
      var $2=$l_addr;
      var $cmp=(($1)|0)!=(($2)|0);
      if ($cmp) { __label__ = 6; break; } else { __label__ = 3; break; }
    case 3: 
      var $3=$priv_addr;
      var $settings1=(($3+12)|0);
      var $right_margin=(($settings1+36)|0);
      var $4=HEAP32[(($right_margin)>>2)];
      var $5=$r_addr;
      var $cmp2=(($4)|0)!=(($5)|0);
      if ($cmp2) { __label__ = 6; break; } else { __label__ = 4; break; }
    case 4: 
      var $6=$priv_addr;
      var $settings4=(($6+12)|0);
      var $top_margin=(($settings4+24)|0);
      var $7=HEAP32[(($top_margin)>>2)];
      var $8=$t_addr;
      var $cmp5=(($7)|0)!=(($8)|0);
      if ($cmp5) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $9=$priv_addr;
      var $settings7=(($9+12)|0);
      var $bottom_margin=(($settings7+28)|0);
      var $10=HEAP32[(($bottom_margin)>>2)];
      var $11=$b_addr;
      var $cmp8=(($10)|0)!=(($11)|0);
      if ($cmp8) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $12=$l_addr;
      var $13=$priv_addr;
      var $settings9=(($13+12)|0);
      var $left_margin10=(($settings9+32)|0);
      HEAP32[(($left_margin10)>>2)]=$12;
      var $14=$r_addr;
      var $15=$priv_addr;
      var $settings11=(($15+12)|0);
      var $right_margin12=(($settings11+36)|0);
      HEAP32[(($right_margin12)>>2)]=$14;
      var $16=$t_addr;
      var $17=$priv_addr;
      var $settings13=(($17+12)|0);
      var $top_margin14=(($settings13+24)|0);
      HEAP32[(($top_margin14)>>2)]=$16;
      var $18=$b_addr;
      var $19=$priv_addr;
      var $settings15=(($19+12)|0);
      var $bottom_margin16=(($settings15+28)|0);
      HEAP32[(($bottom_margin16)>>2)]=$18;
      var $20=$priv_addr;
      _ass_reconfigure($20);
      __label__ = 7; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_set_margins["X"]=1;

function _ass_set_aspect_ratio($priv, $dar, $sar) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $priv_addr;
      var $dar_addr;
      var $sar_addr;
      $priv_addr=$priv;
      $dar_addr=$dar;
      $sar_addr=$sar;
      var $0=$priv_addr;
      var $settings=(($0+12)|0);
      var $aspect=(($settings+44)|0);
      var $1=(tempDoubleI32[0]=HEAP32[(($aspect)>>2)],tempDoubleI32[1]=HEAP32[((($aspect)+(4))>>2)],tempDoubleF64[0]);
      var $2=$dar_addr;
      var $cmp=$1 != $2;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $3=$priv_addr;
      var $settings1=(($3+12)|0);
      var $storage_aspect=(($settings1+52)|0);
      var $4=(tempDoubleI32[0]=HEAP32[(($storage_aspect)>>2)],tempDoubleI32[1]=HEAP32[((($storage_aspect)+(4))>>2)],tempDoubleF64[0]);
      var $5=$sar_addr;
      var $cmp2=$4 != $5;
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $6=$dar_addr;
      var $7=$priv_addr;
      var $settings3=(($7+12)|0);
      var $aspect4=(($settings3+44)|0);
      (tempDoubleF64[0]=$6,HEAP32[(($aspect4)>>2)]=tempDoubleI32[0],HEAP32[((($aspect4)+(4))>>2)]=tempDoubleI32[1]);
      var $8=$sar_addr;
      var $9=$priv_addr;
      var $settings5=(($9+12)|0);
      var $storage_aspect6=(($settings5+52)|0);
      (tempDoubleF64[0]=$8,HEAP32[(($storage_aspect6)>>2)]=tempDoubleI32[0],HEAP32[((($storage_aspect6)+(4))>>2)]=tempDoubleI32[1]);
      var $10=$priv_addr;
      _ass_reconfigure($10);
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _ass_set_font_scale($priv, $font_scale) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $priv_addr;
      var $font_scale_addr;
      $priv_addr=$priv;
      $font_scale_addr=$font_scale;
      var $0=$priv_addr;
      var $settings=(($0+12)|0);
      var $font_size_coeff=(($settings+8)|0);
      var $1=(tempDoubleI32[0]=HEAP32[(($font_size_coeff)>>2)],tempDoubleI32[1]=HEAP32[((($font_size_coeff)+(4))>>2)],tempDoubleF64[0]);
      var $2=$font_scale_addr;
      var $cmp=$1 != $2;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $3=$font_scale_addr;
      var $4=$priv_addr;
      var $settings1=(($4+12)|0);
      var $font_size_coeff2=(($settings1+8)|0);
      (tempDoubleF64[0]=$3,HEAP32[(($font_size_coeff2)>>2)]=tempDoubleI32[0],HEAP32[((($font_size_coeff2)+(4))>>2)]=tempDoubleI32[1]);
      var $5=$priv_addr;
      _ass_reconfigure($5);
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _ass_set_hinting($priv, $ht) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $priv_addr;
      var $ht_addr;
      $priv_addr=$priv;
      $ht_addr=$ht;
      var $0=$priv_addr;
      var $settings=(($0+12)|0);
      var $hinting=(($settings+60)|0);
      var $1=HEAP32[(($hinting)>>2)];
      var $2=$ht_addr;
      var $cmp=(($1)|0)!=(($2)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $3=$ht_addr;
      var $4=$priv_addr;
      var $settings1=(($4+12)|0);
      var $hinting2=(($settings1+60)|0);
      HEAP32[(($hinting2)>>2)]=$3;
      var $5=$priv_addr;
      _ass_reconfigure($5);
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _ass_set_fonts($priv, $default_font, $default_family, $fc, $config, $update) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $priv_addr;
      var $default_font_addr;
      var $default_family_addr;
      var $fc_addr;
      var $config_addr;
      var $update_addr;
      $priv_addr=$priv;
      $default_font_addr=$default_font;
      $default_family_addr=$default_family;
      $fc_addr=$fc;
      $config_addr=$config;
      $update_addr=$update;
      var $0=$priv_addr;
      var $settings=(($0+12)|0);
      var $default_font1=(($settings+68)|0);
      var $1=HEAP32[(($default_font1)>>2)];
      _free($1);
      var $2=$priv_addr;
      var $settings2=(($2+12)|0);
      var $default_family3=(($settings2+72)|0);
      var $3=HEAP32[(($default_family3)>>2)];
      _free($3);
      var $4=$default_font_addr;
      var $tobool=(($4)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $5=$default_font_addr;
      var $call=_strdup($5);
      var $cond = $call;__label__ = 5; break;
    case 4: 
      var $cond = 0;__label__ = 5; break;
    case 5: 
      var $cond;
      var $6=$priv_addr;
      var $settings4=(($6+12)|0);
      var $default_font5=(($settings4+68)|0);
      HEAP32[(($default_font5)>>2)]=$cond;
      var $7=$default_family_addr;
      var $tobool6=(($7)|0)!=0;
      if ($tobool6) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $8=$default_family_addr;
      var $call8=_strdup($8);
      var $cond11 = $call8;__label__ = 8; break;
    case 7: 
      var $cond11 = 0;__label__ = 8; break;
    case 8: 
      var $cond11;
      var $9=$priv_addr;
      var $settings12=(($9+12)|0);
      var $default_family13=(($settings12+72)|0);
      HEAP32[(($default_family13)>>2)]=$cond11;
      var $10=$priv_addr;
      var $fontconfig_priv=(($10+8)|0);
      var $11=HEAP32[(($fontconfig_priv)>>2)];
      var $tobool14=(($11)|0)!=0;
      if ($tobool14) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $12=$priv_addr;
      var $fontconfig_priv15=(($12+8)|0);
      var $13=HEAP32[(($fontconfig_priv15)>>2)];
      _fontconfig_done($13);
      __label__ = 10; break;
    case 10: 
      var $14=$priv_addr;
      var $library=(($14)|0);
      var $15=HEAP32[(($library)>>2)];
      var $16=$priv_addr;
      var $ftlibrary=(($16+4)|0);
      var $17=HEAP32[(($ftlibrary)>>2)];
      var $18=$default_family_addr;
      var $19=$default_font_addr;
      var $20=$fc_addr;
      var $21=$config_addr;
      var $22=$update_addr;
      var $call16=_fontconfig_init($15, $17, $18, $19, $20, $21, $22);
      var $23=$priv_addr;
      var $fontconfig_priv17=(($23+8)|0);
      HEAP32[(($fontconfig_priv17)>>2)]=$call16;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_set_fonts["X"]=1;

function _ass_fonts_update($render_priv) {
  ;
  var __label__;

  var $render_priv_addr;
  $render_priv_addr=$render_priv;
  var $0=$render_priv_addr;
  var $fontconfig_priv=(($0+8)|0);
  var $1=HEAP32[(($fontconfig_priv)>>2)];
  var $call=_fontconfig_update($1);
  ;
  return $call;
}


function _ass_shaper_info($lib) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $lib_addr;
  $lib_addr=$lib;
  var $0=$lib_addr;
  _ass_msg($0, 6, ((STRING_TABLE.__str299)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function _ass_shaper_free($shaper) {
  ;
  var __label__;

  var $shaper_addr;
  $shaper_addr=$shaper;
  var $0=$shaper_addr;
  var $event_text=(($0+8)|0);
  var $1=HEAP32[(($event_text)>>2)];
  var $2=$1;
  _free($2);
  var $3=$shaper_addr;
  var $ctypes=(($3+12)|0);
  var $4=HEAP32[(($ctypes)>>2)];
  var $5=$4;
  _free($5);
  var $6=$shaper_addr;
  var $emblevels=(($6+16)|0);
  var $7=HEAP32[(($emblevels)>>2)];
  _free($7);
  var $8=$shaper_addr;
  var $cmap=(($8+20)|0);
  var $9=HEAP32[(($cmap)>>2)];
  var $10=$9;
  _free($10);
  var $11=$shaper_addr;
  var $12=$11;
  _free($12);
  ;
  return;
}


function _ass_shaper_font_data_free($priv) {
  ;
  var __label__;

  var $priv_addr;
  $priv_addr=$priv;
  ;
  return;
}


function _ass_shaper_set_kerning($shaper, $kern) {
  ;
  var __label__;

  var $shaper_addr;
  var $kern_addr;
  $shaper_addr=$shaper;
  $kern_addr=$kern;
  ;
  return;
}


function _ass_shaper_set_language($shaper, $code) {
  ;
  var __label__;

  var $shaper_addr;
  var $code_addr;
  $shaper_addr=$shaper;
  $code_addr=$code;
  ;
  return;
}


function _resolve_base_direction($enc) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $enc_addr;
      $enc_addr=$enc;
      var $0=$enc_addr;
      if ((($0)|0) == 1) {
        __label__ = 3; break;
      }
      else if ((($0)|0) == 177 || (($0)|0) == 178) {
        __label__ = 4; break;
      }
      else {
      __label__ = 5; break;
      }
      
    case 3: 
      $retval=64;
      __label__ = 6; break;
    case 4: 
      $retval=273;
      __label__ = 6; break;
    case 5: 
      $retval=272;
      __label__ = 6; break;
    case 6: 
      var $1=$retval;
      ;
      return $1;
    default: assert(0, "bad label: " + __label__);
  }
}


function _ass_shaper_set_base_direction($shaper, $dir) {
  ;
  var __label__;

  var $shaper_addr;
  var $dir_addr;
  $shaper_addr=$shaper;
  $dir_addr=$dir;
  var $0=$dir_addr;
  var $1=$shaper_addr;
  var $base_direction=(($1+24)|0);
  HEAP32[(($base_direction)>>2)]=$0;
  ;
  return;
}


function _ass_shaper_set_level($shaper, $level) {
  ;
  var __label__;

  var $shaper_addr;
  var $level_addr;
  $shaper_addr=$shaper;
  $level_addr=$level;
  var $0=$level_addr;
  var $1=$shaper_addr;
  var $shaping_level=(($1)|0);
  HEAP32[(($shaping_level)>>2)]=$0;
  ;
  return;
}


function _ass_shaper_find_runs($shaper, $render_priv, $glyphs, $len) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $shaper_addr;
      var $render_priv_addr;
      var $glyphs_addr;
      var $len_addr;
      var $i;
      var $shape_run;
      var $last;
      var $info;
      $shaper_addr=$shaper;
      $render_priv_addr=$render_priv;
      $glyphs_addr=$glyphs;
      $len_addr=$len;
      $shape_run=0;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $0=$i;
      var $1=$len_addr;
      var $cmp=(($0)>>>0) < (($1)>>>0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 13; break; }
    case 4: 
      var $2=$glyphs_addr;
      var $3=$i;
      var $add_ptr=(($2+($3)*(328))|0);
      var $add_ptr1=((($add_ptr)-(328))|0);
      $last=$add_ptr1;
      var $4=$glyphs_addr;
      var $5=$i;
      var $add_ptr2=(($4+($5)*(328))|0);
      $info=$add_ptr2;
      var $6=$info;
      var $symbol=(($6)|0);
      var $7=HEAP32[(($symbol)>>2)];
      var $cmp3=(($7)|0)==65532;
      if ($cmp3) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 12; break;
    case 6: 
      var $8=$render_priv_addr;
      var $fontconfig_priv=(($8+8)|0);
      var $9=HEAP32[(($fontconfig_priv)>>2)];
      var $10=$9;
      var $11=$info;
      var $font=(($11+8)|0);
      var $12=HEAP32[(($font)>>2)];
      var $13=$info;
      var $symbol4=(($13)|0);
      var $14=HEAP32[(($symbol4)>>2)];
      var $15=$info;
      var $face_index=(($15+12)|0);
      var $16=$info;
      var $glyph_index=(($16+16)|0);
      var $call=_ass_font_get_index($10, $12, $14, $face_index, $glyph_index);
      var $17=$i;
      var $cmp5=(($17)|0) > 0;
      if ($cmp5) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $18=$last;
      var $font6=(($18+8)|0);
      var $19=HEAP32[(($font6)>>2)];
      var $20=$info;
      var $font7=(($20+8)|0);
      var $21=HEAP32[(($font7)>>2)];
      var $cmp8=(($19)|0)!=(($21)|0);
      if ($cmp8) { __label__ = 10; break; } else { __label__ = 8; break; }
    case 8: 
      var $22=$last;
      var $font_size=(($22+20)|0);
      var $23=(tempDoubleI32[0]=HEAP32[(($font_size)>>2)],tempDoubleI32[1]=HEAP32[((($font_size)+(4))>>2)],tempDoubleF64[0]);
      var $24=$info;
      var $font_size9=(($24+20)|0);
      var $25=(tempDoubleI32[0]=HEAP32[(($font_size9)>>2)],tempDoubleI32[1]=HEAP32[((($font_size9)+(4))>>2)],tempDoubleF64[0]);
      var $cmp10=$23 != $25;
      if ($cmp10) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $26=$last;
      var $face_index12=(($26+12)|0);
      var $27=HEAP32[(($face_index12)>>2)];
      var $28=$info;
      var $face_index13=(($28+12)|0);
      var $29=HEAP32[(($face_index13)>>2)];
      var $cmp14=(($27)|0)!=(($29)|0);
      if ($cmp14) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $30=$shape_run;
      var $inc=((($30)+(1))|0);
      $shape_run=$inc;
      __label__ = 11; break;
    case 11: 
      var $31=$shape_run;
      var $32=$info;
      var $shape_run_id=(($32+256)|0);
      HEAP32[(($shape_run_id)>>2)]=$31;
      __label__ = 12; break;
    case 12: 
      var $33=$i;
      var $inc17=((($33)+(1))|0);
      $i=$inc17;
      __label__ = 3; break;
    case 13: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_shaper_find_runs["X"]=1;

function _ass_shaper_shape($shaper, $text_info) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $shaper_addr;
      var $text_info_addr;
      var $i;
      var $last_break;
      var $dir=__stackBase__;
      var $glyphs;
      $shaper_addr=$shaper;
      $text_info_addr=$text_info;
      var $0=$text_info_addr;
      var $glyphs1=(($0)|0);
      var $1=HEAP32[(($glyphs1)>>2)];
      $glyphs=$1;
      var $2=$shaper_addr;
      var $3=$text_info_addr;
      var $length=(($3+4)|0);
      var $4=HEAP32[(($length)>>2)];
      _check_allocations($2, $4);
      $last_break=0;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $5=$i;
      var $6=$text_info_addr;
      var $length2=(($6+4)|0);
      var $7=HEAP32[(($length2)>>2)];
      var $cmp=(($5)|0) < (($7)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: 
      var $8=$i;
      var $9=$glyphs;
      var $arrayidx=(($9+($8)*(328))|0);
      var $symbol=(($arrayidx)|0);
      var $10=HEAP32[(($symbol)>>2)];
      var $11=$i;
      var $12=$shaper_addr;
      var $event_text=(($12+8)|0);
      var $13=HEAP32[(($event_text)>>2)];
      var $arrayidx3=(($13+($11<<2))|0);
      HEAP32[(($arrayidx3)>>2)]=$10;
      var $14=$i;
      var $15=$glyphs;
      var $arrayidx4=(($15+($14)*(328))|0);
      var $symbol5=(($arrayidx4)|0);
      var $16=HEAP32[(($symbol5)>>2)];
      var $cmp6=(($16)|0)==10;
      if ($cmp6) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $17=$i;
      var $18=$text_info_addr;
      var $length7=(($18+4)|0);
      var $19=HEAP32[(($length7)>>2)];
      var $sub=((($19)-(1))|0);
      var $cmp8=(($17)|0)==(($sub)|0);
      if ($cmp8) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $20=$shaper_addr;
      var $base_direction=(($20+24)|0);
      var $21=HEAP32[(($base_direction)>>2)];
      HEAP32[(($dir)>>2)]=$21;
      var $22=$shaper_addr;
      var $event_text9=(($22+8)|0);
      var $23=HEAP32[(($event_text9)>>2)];
      var $24=$last_break;
      var $add_ptr=(($23+($24<<2))|0);
      var $25=$i;
      var $26=$last_break;
      var $sub10=((($25)-($26))|0);
      var $add=((($sub10)+(1))|0);
      var $27=$shaper_addr;
      var $ctypes=(($27+12)|0);
      var $28=HEAP32[(($ctypes)>>2)];
      var $29=$last_break;
      var $add_ptr11=(($28+($29<<2))|0);
      _fribidi_get_bidi_types($add_ptr, $add, $add_ptr11);
      var $30=$shaper_addr;
      var $ctypes12=(($30+12)|0);
      var $31=HEAP32[(($ctypes12)>>2)];
      var $32=$last_break;
      var $add_ptr13=(($31+($32<<2))|0);
      var $33=$i;
      var $34=$last_break;
      var $sub14=((($33)-($34))|0);
      var $add15=((($sub14)+(1))|0);
      var $35=$shaper_addr;
      var $emblevels=(($35+16)|0);
      var $36=HEAP32[(($emblevels)>>2)];
      var $37=$last_break;
      var $add_ptr16=(($36+$37)|0);
      var $call=_fribidi_get_par_embedding_levels($add_ptr13, $add15, $dir, $add_ptr16);
      var $38=$i;
      var $add17=((($38)+(1))|0);
      $last_break=$add17;
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $39=$i;
      var $inc=((($39)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 9: 
      $i=0;
      __label__ = 10; break;
    case 10: 
      var $40=$i;
      var $41=$text_info_addr;
      var $length19=(($41+4)|0);
      var $42=HEAP32[(($length19)>>2)];
      var $cmp20=(($40)|0) < (($42)|0);
      if ($cmp20) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $43=$i;
      var $44=$shaper_addr;
      var $emblevels22=(($44+16)|0);
      var $45=HEAP32[(($emblevels22)>>2)];
      var $arrayidx23=(($45+$43)|0);
      var $46=HEAP8[($arrayidx23)];
      var $conv=(($46 << 24) >> 24);
      var $47=$i;
      var $48=$glyphs;
      var $arrayidx24=(($48+($47)*(328))|0);
      var $shape_run_id=(($arrayidx24+256)|0);
      var $49=HEAP32[(($shape_run_id)>>2)];
      var $add25=((($49)+($conv))|0);
      HEAP32[(($shape_run_id)>>2)]=$add25;
      __label__ = 12; break;
    case 12: 
      var $50=$i;
      var $inc27=((($50)+(1))|0);
      $i=$inc27;
      __label__ = 10; break;
    case 13: 
      var $51=$shaper_addr;
      var $52=$glyphs;
      var $53=$text_info_addr;
      var $length29=(($53+4)|0);
      var $54=HEAP32[(($length29)>>2)];
      _shape_fribidi($51, $52, $54);
      $i=0;
      __label__ = 14; break;
    case 14: 
      var $55=$i;
      var $56=$text_info_addr;
      var $length31=(($56+4)|0);
      var $57=HEAP32[(($length31)>>2)];
      var $cmp32=(($55)|0) < (($57)|0);
      if ($cmp32) { __label__ = 15; break; } else { __label__ = 20; break; }
    case 15: 
      var $58=$i;
      var $59=$glyphs;
      var $arrayidx35=(($59+($58)*(328))|0);
      var $symbol36=(($arrayidx35)|0);
      var $60=HEAPU32[(($symbol36)>>2)];
      var $cmp37=(($60)>>>0) <= 8239;
      if ($cmp37) { __label__ = 16; break; } else { __label__ = 18; break; }
    case 16: 
      var $61=$i;
      var $62=$glyphs;
      var $arrayidx39=(($62+($61)*(328))|0);
      var $symbol40=(($arrayidx39)|0);
      var $63=HEAPU32[(($symbol40)>>2)];
      var $cmp41=(($63)>>>0) >= 8234;
      if ($cmp41) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $64=$i;
      var $65=$glyphs;
      var $arrayidx44=(($65+($64)*(328))|0);
      var $symbol45=(($arrayidx44)|0);
      HEAP32[(($symbol45)>>2)]=0;
      var $66=$i;
      var $67=$glyphs;
      var $arrayidx46=(($67+($66)*(328))|0);
      var $skip=(($arrayidx46+4)|0);
      var $68=HEAP32[(($skip)>>2)];
      var $inc47=((($68)+(1))|0);
      HEAP32[(($skip)>>2)]=$inc47;
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $69=$i;
      var $inc50=((($69)+(1))|0);
      $i=$inc50;
      __label__ = 14; break;
    case 20: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_shaper_shape["X"]=1;

function _check_allocations($shaper, $new_size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $shaper_addr;
      var $new_size_addr;
      $shaper_addr=$shaper;
      $new_size_addr=$new_size;
      var $0=$new_size_addr;
      var $1=$shaper_addr;
      var $n_glyphs=(($1+4)|0);
      var $2=HEAPU32[(($n_glyphs)>>2)];
      var $cmp=(($0)>>>0) > (($2)>>>0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $3=$shaper_addr;
      var $event_text=(($3+8)|0);
      var $4=HEAP32[(($event_text)>>2)];
      var $5=$4;
      var $6=$new_size_addr;
      var $mul=((($6<<2))|0);
      var $call=_realloc($5, $mul);
      var $7=$call;
      var $8=$shaper_addr;
      var $event_text1=(($8+8)|0);
      HEAP32[(($event_text1)>>2)]=$7;
      var $9=$shaper_addr;
      var $ctypes=(($9+12)|0);
      var $10=HEAP32[(($ctypes)>>2)];
      var $11=$10;
      var $12=$new_size_addr;
      var $mul2=((($12<<2))|0);
      var $call3=_realloc($11, $mul2);
      var $13=$call3;
      var $14=$shaper_addr;
      var $ctypes4=(($14+12)|0);
      HEAP32[(($ctypes4)>>2)]=$13;
      var $15=$shaper_addr;
      var $emblevels=(($15+16)|0);
      var $16=HEAP32[(($emblevels)>>2)];
      var $17=$new_size_addr;
      var $mul5=(($17)|0);
      var $call6=_realloc($16, $mul5);
      var $18=$shaper_addr;
      var $emblevels7=(($18+16)|0);
      HEAP32[(($emblevels7)>>2)]=$call6;
      var $19=$shaper_addr;
      var $cmap=(($19+20)|0);
      var $20=HEAP32[(($cmap)>>2)];
      var $21=$20;
      var $22=$new_size_addr;
      var $mul8=((($22<<2))|0);
      var $call9=_realloc($21, $mul8);
      var $23=$call9;
      var $24=$shaper_addr;
      var $cmap10=(($24+20)|0);
      HEAP32[(($cmap10)>>2)]=$23;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_check_allocations["X"]=1;

function _shape_fribidi($shaper, $glyphs, $len) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $shaper_addr;
      var $glyphs_addr;
      var $len_addr;
      var $i;
      var $joins;
      var $info;
      var $face;
      $shaper_addr=$shaper;
      $glyphs_addr=$glyphs;
      $len_addr=$len;
      var $0=$len_addr;
      var $call=_calloc(1, $0);
      $joins=$call;
      var $1=$shaper_addr;
      var $event_text=(($1+8)|0);
      var $2=HEAP32[(($event_text)>>2)];
      var $3=$len_addr;
      var $4=$joins;
      _fribidi_get_joining_types($2, $3, $4);
      var $5=$shaper_addr;
      var $ctypes=(($5+12)|0);
      var $6=HEAP32[(($ctypes)>>2)];
      var $7=$len_addr;
      var $8=$shaper_addr;
      var $emblevels=(($8+16)|0);
      var $9=HEAP32[(($emblevels)>>2)];
      var $10=$joins;
      _fribidi_join_arabic($6, $7, $9, $10);
      var $11=$shaper_addr;
      var $emblevels1=(($11+16)|0);
      var $12=HEAP32[(($emblevels1)>>2)];
      var $13=$len_addr;
      var $14=$joins;
      var $15=$shaper_addr;
      var $event_text2=(($15+8)|0);
      var $16=HEAP32[(($event_text2)>>2)];
      _fribidi_shape(262915, $12, $13, $14, $16);
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $17=$i;
      var $18=$len_addr;
      var $cmp=(($17)>>>0) < (($18)>>>0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $19=$glyphs_addr;
      var $20=$i;
      var $add_ptr=(($19+($20)*(328))|0);
      $info=$add_ptr;
      var $21=$info;
      var $face_index=(($21+12)|0);
      var $22=HEAP32[(($face_index)>>2)];
      var $23=$info;
      var $font=(($23+8)|0);
      var $24=HEAP32[(($font)>>2)];
      var $faces=(($24+28)|0);
      var $arrayidx=(($faces+($22<<2))|0);
      var $25=HEAP32[(($arrayidx)>>2)];
      $face=$25;
      var $26=$i;
      var $27=$shaper_addr;
      var $event_text3=(($27+8)|0);
      var $28=HEAP32[(($event_text3)>>2)];
      var $arrayidx4=(($28+($26<<2))|0);
      var $29=HEAP32[(($arrayidx4)>>2)];
      var $30=$info;
      var $symbol=(($30)|0);
      HEAP32[(($symbol)>>2)]=$29;
      var $31=$face;
      var $32=$i;
      var $33=$shaper_addr;
      var $event_text5=(($33+8)|0);
      var $34=HEAP32[(($event_text5)>>2)];
      var $arrayidx6=(($34+($32<<2))|0);
      var $35=HEAP32[(($arrayidx6)>>2)];
      var $call7=_FT_Get_Char_Index($31, $35);
      var $36=$info;
      var $glyph_index=(($36+16)|0);
      HEAP32[(($glyph_index)>>2)]=$call7;
      __label__ = 5; break;
    case 5: 
      var $37=$i;
      var $inc=((($37)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 6: 
      var $38=$joins;
      _free($38);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_shape_fribidi["X"]=1;

function _ass_shaper_new($prealloc) {
  ;
  var __label__;

  var $prealloc_addr;
  var $shaper;
  $prealloc_addr=$prealloc;
  var $call=_calloc(28, 1);
  var $0=$call;
  $shaper=$0;
  var $1=$shaper;
  var $base_direction=(($1+24)|0);
  HEAP32[(($base_direction)>>2)]=64;
  var $2=$shaper;
  var $3=$prealloc_addr;
  _check_allocations($2, $3);
  var $4=$shaper;
  ;
  return $4;
}


function _ass_shaper_cleanup($shaper, $text_info) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $shaper_addr;
      var $text_info_addr;
      var $i;
      var $info;
      var $next1;
      $shaper_addr=$shaper;
      $text_info_addr=$text_info;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $0=$i;
      var $1=$text_info_addr;
      var $length=(($1+4)|0);
      var $2=HEAP32[(($length)>>2)];
      var $cmp=(($0)|0) < (($2)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: 
      var $3=$text_info_addr;
      var $glyphs=(($3)|0);
      var $4=HEAP32[(($glyphs)>>2)];
      var $5=$i;
      var $add_ptr=(($4+($5)*(328))|0);
      $info=$add_ptr;
      var $6=$info;
      var $next=(($6+324)|0);
      var $7=HEAP32[(($next)>>2)];
      $info=$7;
      __label__ = 5; break;
    case 5: 
      var $8=$info;
      var $tobool=(($8)|0)!=0;
      if ($tobool) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $9=$info;
      var $next2=(($9+324)|0);
      var $10=HEAP32[(($next2)>>2)];
      $next1=$10;
      var $11=$info;
      var $12=$11;
      _free($12);
      var $13=$next1;
      $info=$13;
      __label__ = 5; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $14=$i;
      var $inc=((($14)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 9: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _ass_shaper_reorder($shaper, $text_info) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $shaper_addr;
      var $text_info_addr;
      var $i;
      var $line;
      var $level;
      var $dir;
      $shaper_addr=$shaper;
      $text_info_addr=$text_info;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $0=$i;
      var $1=$text_info_addr;
      var $length=(($1+4)|0);
      var $2=HEAP32[(($length)>>2)];
      var $cmp=(($0)|0) < (($2)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $3=$i;
      var $4=$i;
      var $5=$shaper_addr;
      var $cmap=(($5+20)|0);
      var $6=HEAP32[(($cmap)>>2)];
      var $arrayidx=(($6+($4<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$3;
      __label__ = 5; break;
    case 5: 
      var $7=$i;
      var $inc=((($7)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 6: 
      $i=0;
      __label__ = 7; break;
    case 7: 
      var $8=$i;
      var $9=$text_info_addr;
      var $n_lines=(($9+12)|0);
      var $10=HEAP32[(($n_lines)>>2)];
      var $cmp2=(($8)|0) < (($10)|0);
      if ($cmp2) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $11=$text_info_addr;
      var $lines=(($11+8)|0);
      var $12=HEAP32[(($lines)>>2)];
      var $13=$i;
      var $add_ptr=(($12+($13)*(24))|0);
      $line=$add_ptr;
      $dir=64;
      var $14=$shaper_addr;
      var $ctypes=(($14+12)|0);
      var $15=HEAP32[(($ctypes)>>2)];
      var $16=$line;
      var $offset=(($16+16)|0);
      var $17=HEAP32[(($offset)>>2)];
      var $add_ptr4=(($15+($17<<2))|0);
      var $18=$line;
      var $len=(($18+20)|0);
      var $19=HEAP32[(($len)>>2)];
      var $20=$dir;
      var $21=$shaper_addr;
      var $emblevels=(($21+16)|0);
      var $22=HEAP32[(($emblevels)>>2)];
      var $23=$line;
      var $offset5=(($23+16)|0);
      var $24=HEAP32[(($offset5)>>2)];
      var $add_ptr6=(($22+$24)|0);
      var $25=$shaper_addr;
      var $cmap7=(($25+20)|0);
      var $26=HEAP32[(($cmap7)>>2)];
      var $27=$line;
      var $offset8=(($27+16)|0);
      var $28=HEAP32[(($offset8)>>2)];
      var $add_ptr9=(($26+($28<<2))|0);
      var $call=_fribidi_reorder_line(0, $add_ptr4, $19, 0, $20, $add_ptr6, 0, $add_ptr9);
      var $conv=(($call << 24) >> 24);
      $level=$conv;
      __label__ = 9; break;
    case 9: 
      var $29=$i;
      var $inc11=((($29)+(1))|0);
      $i=$inc11;
      __label__ = 7; break;
    case 10: 
      var $30=$shaper_addr;
      var $cmap13=(($30+20)|0);
      var $31=HEAP32[(($cmap13)>>2)];
      ;
      return $31;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_shaper_reorder["X"]=1;

function _ass_strtod($string, $endPtr) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $string_addr;
      var $endPtr_addr;
      var $sign;
      var $expSign;
      var $fraction;
      var $dblExp;
      var $d;
      var $p;
      var $c;
      var $exp;
      var $fracExp;
      var $mantSize;
      var $decPt;
      var $pExp;
      var $frac1;
      var $frac2;
      $string_addr=$string;
      $endPtr_addr=$endPtr;
      $expSign=0;
      $exp=0;
      $fracExp=0;
      var $0=$string_addr;
      $p=$0;
      __label__ = 3; break;
    case 3: 
      var $1=$p;
      var $2=HEAP8[($1)];
      var $conv=(($2 << 24) >> 24);
      var $call=_isspace($conv);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $3=$p;
      var $add_ptr=(($3+1)|0);
      $p=$add_ptr;
      __label__ = 3; break;
    case 5: 
      var $4=$p;
      var $5=HEAP8[($4)];
      var $conv1=(($5 << 24) >> 24);
      var $cmp=(($conv1)|0)==45;
      if ($cmp) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $sign=1;
      var $6=$p;
      var $add_ptr3=(($6+1)|0);
      $p=$add_ptr3;
      __label__ = 10; break;
    case 7: 
      var $7=$p;
      var $8=HEAP8[($7)];
      var $conv4=(($8 << 24) >> 24);
      var $cmp5=(($conv4)|0)==43;
      if ($cmp5) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $9=$p;
      var $add_ptr8=(($9+1)|0);
      $p=$add_ptr8;
      __label__ = 9; break;
    case 9: 
      $sign=0;
      __label__ = 10; break;
    case 10: 
      $decPt=-1;
      $mantSize=0;
      __label__ = 11; break;
    case 11: 
      var $10=$p;
      var $11=HEAP8[($10)];
      var $conv10=(($11 << 24) >> 24);
      $c=$conv10;
      var $12=$c;
      var $call11=_isdigit($12);
      var $tobool12=(($call11)|0)!=0;
      if ($tobool12) { __label__ = 16; break; } else { __label__ = 12; break; }
    case 12: 
      var $13=$c;
      var $cmp14=(($13)|0)!=46;
      if ($cmp14) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: 
      var $14=$decPt;
      var $cmp16=(($14)|0) >= 0;
      if ($cmp16) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      __label__ = 18; break;
    case 15: 
      var $15=$mantSize;
      $decPt=$15;
      __label__ = 16; break;
    case 16: 
      var $16=$p;
      var $add_ptr21=(($16+1)|0);
      $p=$add_ptr21;
      __label__ = 17; break;
    case 17: 
      var $17=$mantSize;
      var $add=((($17)+(1))|0);
      $mantSize=$add;
      __label__ = 11; break;
    case 18: 
      var $18=$p;
      $pExp=$18;
      var $19=$mantSize;
      var $20=$p;
      var $idx_neg=(((-$19))|0);
      var $add_ptr22=(($20+$idx_neg)|0);
      $p=$add_ptr22;
      var $21=$decPt;
      var $cmp23=(($21)|0) < 0;
      if ($cmp23) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $22=$mantSize;
      $decPt=$22;
      __label__ = 21; break;
    case 20: 
      var $23=$mantSize;
      var $sub=((($23)-(1))|0);
      $mantSize=$sub;
      __label__ = 21; break;
    case 21: 
      var $24=$mantSize;
      var $cmp28=(($24)|0) > 18;
      if ($cmp28) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $25=$decPt;
      var $sub31=((($25)-(18))|0);
      $fracExp=$sub31;
      $mantSize=18;
      __label__ = 24; break;
    case 23: 
      var $26=$decPt;
      var $27=$mantSize;
      var $sub33=((($26)-($27))|0);
      $fracExp=$sub33;
      __label__ = 24; break;
    case 24: 
      var $28=$mantSize;
      var $cmp35=(($28)|0)==0;
      if ($cmp35) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      $fraction=0;
      var $29=$string_addr;
      $p=$29;
      __label__ = 68; break;
    case 26: 
      $frac1=0;
      __label__ = 27; break;
    case 27: 
      var $30=$mantSize;
      var $cmp40=(($30)|0) > 9;
      if ($cmp40) { __label__ = 28; break; } else { __label__ = 32; break; }
    case 28: 
      var $31=$p;
      var $32=HEAP8[($31)];
      var $conv42=(($32 << 24) >> 24);
      $c=$conv42;
      var $33=$p;
      var $add_ptr43=(($33+1)|0);
      $p=$add_ptr43;
      var $34=$c;
      var $cmp44=(($34)|0)==46;
      if ($cmp44) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $35=$p;
      var $36=HEAP8[($35)];
      var $conv47=(($36 << 24) >> 24);
      $c=$conv47;
      var $37=$p;
      var $add_ptr48=(($37+1)|0);
      $p=$add_ptr48;
      __label__ = 30; break;
    case 30: 
      var $38=$frac1;
      var $mul=((($38)*(10))|0);
      var $39=$c;
      var $sub50=((($39)-(48))|0);
      var $add51=((($mul)+($sub50))|0);
      $frac1=$add51;
      __label__ = 31; break;
    case 31: 
      var $40=$mantSize;
      var $sub53=((($40)-(1))|0);
      $mantSize=$sub53;
      __label__ = 27; break;
    case 32: 
      $frac2=0;
      __label__ = 33; break;
    case 33: 
      var $41=$mantSize;
      var $cmp56=(($41)|0) > 0;
      if ($cmp56) { __label__ = 34; break; } else { __label__ = 38; break; }
    case 34: 
      var $42=$p;
      var $43=HEAP8[($42)];
      var $conv59=(($43 << 24) >> 24);
      $c=$conv59;
      var $44=$p;
      var $add_ptr60=(($44+1)|0);
      $p=$add_ptr60;
      var $45=$c;
      var $cmp61=(($45)|0)==46;
      if ($cmp61) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      var $46=$p;
      var $47=HEAP8[($46)];
      var $conv64=(($47 << 24) >> 24);
      $c=$conv64;
      var $48=$p;
      var $add_ptr65=(($48+1)|0);
      $p=$add_ptr65;
      __label__ = 36; break;
    case 36: 
      var $49=$frac2;
      var $mul67=((($49)*(10))|0);
      var $50=$c;
      var $sub68=((($50)-(48))|0);
      var $add69=((($mul67)+($sub68))|0);
      $frac2=$add69;
      __label__ = 37; break;
    case 37: 
      var $51=$mantSize;
      var $sub71=((($51)-(1))|0);
      $mantSize=$sub71;
      __label__ = 33; break;
    case 38: 
      var $52=$frac1;
      var $conv73=(($52)|0);
      var $mul74=($conv73)*(1000000000);
      var $53=$frac2;
      var $conv75=(($53)|0);
      var $add76=($mul74)+($conv75);
      $fraction=$add76;
      __label__ = 39; break;
    case 39: 
      var $54=$pExp;
      $p=$54;
      var $55=$p;
      var $56=HEAP8[($55)];
      var $conv78=(($56 << 24) >> 24);
      var $cmp79=(($conv78)|0)==69;
      if ($cmp79) { __label__ = 41; break; } else { __label__ = 40; break; }
    case 40: 
      var $57=$p;
      var $58=HEAP8[($57)];
      var $conv82=(($58 << 24) >> 24);
      var $cmp83=(($conv82)|0)==101;
      if ($cmp83) { __label__ = 41; break; } else { __label__ = 50; break; }
    case 41: 
      var $59=$p;
      var $add_ptr86=(($59+1)|0);
      $p=$add_ptr86;
      var $60=$p;
      var $61=HEAP8[($60)];
      var $conv87=(($61 << 24) >> 24);
      var $cmp88=(($conv87)|0)==45;
      if ($cmp88) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      $expSign=1;
      var $62=$p;
      var $add_ptr91=(($62+1)|0);
      $p=$add_ptr91;
      __label__ = 46; break;
    case 43: 
      var $63=$p;
      var $64=HEAP8[($63)];
      var $conv93=(($64 << 24) >> 24);
      var $cmp94=(($conv93)|0)==43;
      if ($cmp94) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $65=$p;
      var $add_ptr97=(($65+1)|0);
      $p=$add_ptr97;
      __label__ = 45; break;
    case 45: 
      $expSign=0;
      __label__ = 46; break;
    case 46: 
      __label__ = 47; break;
    case 47: 
      var $66=$p;
      var $67=HEAP8[($66)];
      var $conv101=(($67 << 24) >> 24);
      var $call102=_isdigit($conv101);
      var $tobool103=(($call102)|0)!=0;
      if ($tobool103) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $68=$exp;
      var $mul105=((($68)*(10))|0);
      var $69=$p;
      var $70=HEAP8[($69)];
      var $conv106=(($70 << 24) >> 24);
      var $sub107=((($conv106)-(48))|0);
      var $add108=((($mul105)+($sub107))|0);
      $exp=$add108;
      var $71=$p;
      var $add_ptr109=(($71+1)|0);
      $p=$add_ptr109;
      __label__ = 47; break;
    case 49: 
      __label__ = 50; break;
    case 50: 
      var $72=$expSign;
      var $tobool112=(($72)|0)!=0;
      if ($tobool112) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $73=$fracExp;
      var $74=$exp;
      var $sub114=((($73)-($74))|0);
      $exp=$sub114;
      __label__ = 53; break;
    case 52: 
      var $75=$fracExp;
      var $76=$exp;
      var $add116=((($75)+($76))|0);
      $exp=$add116;
      __label__ = 53; break;
    case 53: 
      var $77=$exp;
      var $cmp118=(($77)|0) < 0;
      if ($cmp118) { __label__ = 54; break; } else { __label__ = 55; break; }
    case 54: 
      $expSign=1;
      var $78=$exp;
      var $sub121=(((-$78))|0);
      $exp=$sub121;
      __label__ = 56; break;
    case 55: 
      $expSign=0;
      __label__ = 56; break;
    case 56: 
      var $79=$exp;
      var $cmp124=(($79)|0) > 511;
      if ($cmp124) { __label__ = 57; break; } else { __label__ = 58; break; }
    case 57: 
      $exp=511;
      var $call127=___errno();
      HEAP32[(($call127)>>2)]=34;
      __label__ = 58; break;
    case 58: 
      $dblExp=1;
      $d=((_powersOf10)|0);
      __label__ = 59; break;
    case 59: 
      var $80=$exp;
      var $cmp130=(($80)|0)!=0;
      if ($cmp130) { __label__ = 60; break; } else { __label__ = 64; break; }
    case 60: 
      var $81=$exp;
      var $and=$81 & 1;
      var $tobool133=(($and)|0)!=0;
      if ($tobool133) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: 
      var $82=$d;
      var $83=(tempDoubleI32[0]=HEAP32[(($82)>>2)],tempDoubleI32[1]=HEAP32[((($82)+(4))>>2)],tempDoubleF64[0]);
      var $84=$dblExp;
      var $mul135=($84)*($83);
      $dblExp=$mul135;
      __label__ = 62; break;
    case 62: 
      __label__ = 63; break;
    case 63: 
      var $85=$exp;
      var $shr=$85 >> 1;
      $exp=$shr;
      var $86=$d;
      var $add_ptr138=(($86+8)|0);
      $d=$add_ptr138;
      __label__ = 59; break;
    case 64: 
      var $87=$expSign;
      var $tobool140=(($87)|0)!=0;
      if ($tobool140) { __label__ = 65; break; } else { __label__ = 66; break; }
    case 65: 
      var $88=$dblExp;
      var $89=$fraction;
      var $div=($89)/($88);
      $fraction=$div;
      __label__ = 67; break;
    case 66: 
      var $90=$dblExp;
      var $91=$fraction;
      var $mul143=($91)*($90);
      $fraction=$mul143;
      __label__ = 67; break;
    case 67: 
      __label__ = 68; break;
    case 68: 
      var $92=$endPtr_addr;
      var $cmp145=(($92)|0)!=0;
      if ($cmp145) { __label__ = 69; break; } else { __label__ = 70; break; }
    case 69: 
      var $93=$p;
      var $94=$endPtr_addr;
      HEAP32[(($94)>>2)]=$93;
      __label__ = 70; break;
    case 70: 
      var $95=$sign;
      var $tobool149=(($95)|0)!=0;
      if ($tobool149) { __label__ = 71; break; } else { __label__ = 72; break; }
    case 71: 
      var $96=$fraction;
      var $sub151=(-$96);
      $retval=$sub151;
      __label__ = 73; break;
    case 72: 
      var $97=$fraction;
      $retval=$97;
      __label__ = 73; break;
    case 73: 
      var $98=$retval;
      ;
      return $98;
    default: assert(0, "bad label: " + __label__);
  }
}
_ass_strtod["X"]=1;

function _malloc($bytes) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $bytes_addr;
      var $mem;
      var $nb;
      var $idx;
      var $smallbits;
      var $b;
      var $p;
      var $F;
      var $b33;
      var $p34;
      var $r;
      var $rsize;
      var $i;
      var $leftbits;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $F68;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F102;
      var $rsize157;
      var $p159;
      var $r163;
      var $dvs;
      var $rsize185;
      var $p187;
      var $r188;
      $bytes_addr=$bytes;
      var $0=$bytes_addr; //@line 4628 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)>>>0) <= 244; //@line 4628 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 38; break; } //@line 4628 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $1=$bytes_addr; //@line 4631 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp1=(($1)>>>0) < 11; //@line 4631 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4631 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $cond = 16;__label__ = 6; break; //@line 4631 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $2=$bytes_addr; //@line 4631 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add=((($2)+(4))|0); //@line 4631 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add2=((($add)+(7))|0); //@line 4631 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and=$add2 & -8; //@line 4631 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond = $and;__label__ = 6; break; //@line 4631 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $cond; //@line 4631 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $nb=$cond; //@line 4631 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $3=$nb; //@line 4632 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr=$3 >>> 3; //@line 4632 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $idx=$shr; //@line 4632 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $4=HEAPU32[((((__gm_)|0))>>2)]; //@line 4633 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $5=$idx; //@line 4633 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr3=$4 >>> (($5)>>>0); //@line 4633 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $smallbits=$shr3; //@line 4633 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $6=$smallbits; //@line 4635 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and4=$6 & 3; //@line 4635 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp5=(($and4)|0)!=0; //@line 4635 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp5) { __label__ = 7; break; } else { __label__ = 14; break; } //@line 4635 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $7=$smallbits; //@line 4637 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $neg=$7 ^ -1; //@line 4637 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and7=$neg & 1; //@line 4637 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $8=$idx; //@line 4637 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add8=((($8)+($and7))|0); //@line 4637 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $idx=$add8; //@line 4637 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $9=$idx; //@line 4638 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl=$9 << 1; //@line 4638 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=((((__gm_+40)|0)+($shl<<2))|0); //@line 4638 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $10=$arrayidx; //@line 4638 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $11=$10; //@line 4638 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $b=$11; //@line 4638 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $12=$b; //@line 4639 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd=(($12+8)|0); //@line 4639 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $13=HEAP32[(($fd)>>2)]; //@line 4639 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $p=$13; //@line 4639 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $14=$p; //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd9=(($14+8)|0); //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $15=HEAP32[(($fd9)>>2)]; //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F=$15; //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $16=$b; //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $17=$F; //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp10=(($16)|0)==(($17)|0); //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp10) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $18=$idx; //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl12=1 << $18; //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $neg13=$shl12 ^ -1; //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $19=HEAP32[((((__gm_)|0))>>2)]; //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and14=$19 & $neg13; //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$and14; //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 13; break; //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $20=$F; //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $21=$20; //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $22=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp15=(($21)>>>0) >= (($22)>>>0); //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv=(($cmp15)&1); //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval=(($conv)==(1)); //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($expval)|0)!=0; //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $23=$F; //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $24=$b; //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd17=(($24+8)|0); //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd17)>>2)]=$23; //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $25=$b; //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $26=$F; //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk=(($26+12)|0); //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk)>>2)]=$25; //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 11: 
      _abort(); //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4641 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $27=$idx; //@line 4642 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl20=$27 << 3; //@line 4642 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or=$shl20 | 1; //@line 4642 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or21=$or | 2; //@line 4642 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $28=$p; //@line 4642 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head=(($28+4)|0); //@line 4642 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head)>>2)]=$or21; //@line 4642 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $29=$p; //@line 4642 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $30=$29; //@line 4642 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $31=$idx; //@line 4642 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl22=$31 << 3; //@line 4642 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($30+$shl22)|0); //@line 4642 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $32=$add_ptr; //@line 4642 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head23=(($32+4)|0); //@line 4642 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $33=HEAP32[(($head23)>>2)]; //@line 4642 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or24=$33 | 1; //@line 4642 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head23)>>2)]=$or24; //@line 4642 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $34=$p; //@line 4643 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $35=$34; //@line 4643 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr25=(($35+8)|0); //@line 4643 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $mem=$add_ptr25; //@line 4643 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 54; break; //@line 4645 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $36=$nb; //@line 4648 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $37=HEAPU32[((((__gm_+8)|0))>>2)]; //@line 4648 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp27=(($36)>>>0) > (($37)>>>0); //@line 4648 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp27) { __label__ = 15; break; } else { __label__ = 36; break; } //@line 4648 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $38=$smallbits; //@line 4649 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp30=(($38)|0)!=0; //@line 4649 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp30) { __label__ = 16; break; } else { __label__ = 31; break; } //@line 4649 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $39=$smallbits; //@line 4653 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $40=$idx; //@line 4653 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl35=$39 << $40; //@line 4653 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $41=$idx; //@line 4653 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl36=1 << $41; //@line 4653 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl37=$shl36 << 1; //@line 4653 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $42=$idx; //@line 4653 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl38=1 << $42; //@line 4653 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl39=$shl38 << 1; //@line 4653 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub=(((-$shl39))|0); //@line 4653 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or40=$shl37 | $sub; //@line 4653 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and41=$shl35 & $or40; //@line 4653 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $leftbits=$and41; //@line 4653 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $43=$leftbits; //@line 4654 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $44=$leftbits; //@line 4654 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub42=(((-$44))|0); //@line 4654 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and43=$43 & $sub42; //@line 4654 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $leastbit=$and43; //@line 4654 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $45=$leastbit; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub44=((($45)-(1))|0); //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$sub44; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $46=$Y; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr45=$46 >>> 12; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and46=$shr45 & 16; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$and46; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $47=$K; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$47; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $48=$K; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $49=$Y; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr47=$49 >>> (($48)>>>0); //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shr47; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $50=$Y; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr48=$50 >>> 5; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and49=$shr48 & 8; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$and49; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $51=$N; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add50=((($51)+($and49))|0); //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$add50; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $52=$K; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $53=$Y; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr51=$53 >>> (($52)>>>0); //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shr51; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $54=$Y; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr52=$54 >>> 2; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and53=$shr52 & 4; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$and53; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $55=$N; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add54=((($55)+($and53))|0); //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$add54; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $56=$K; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $57=$Y; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr55=$57 >>> (($56)>>>0); //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shr55; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $58=$Y; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr56=$58 >>> 1; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and57=$shr56 & 2; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$and57; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $59=$N; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add58=((($59)+($and57))|0); //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$add58; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $60=$K; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $61=$Y; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr59=$61 >>> (($60)>>>0); //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shr59; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $62=$Y; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr60=$62 >>> 1; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and61=$shr60 & 1; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$and61; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $63=$N; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add62=((($63)+($and61))|0); //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$add62; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $64=$K; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $65=$Y; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr63=$65 >>> (($64)>>>0); //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shr63; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $66=$N; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $67=$Y; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add64=((($66)+($67))|0); //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $i=$add64; //@line 4655 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $68=$i; //@line 4656 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl65=$68 << 1; //@line 4656 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx66=((((__gm_+40)|0)+($shl65<<2))|0); //@line 4656 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $69=$arrayidx66; //@line 4656 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $70=$69; //@line 4656 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $b33=$70; //@line 4656 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $71=$b33; //@line 4657 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd67=(($71+8)|0); //@line 4657 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $72=HEAP32[(($fd67)>>2)]; //@line 4657 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $p34=$72; //@line 4657 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $73=$p34; //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd69=(($73+8)|0); //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $74=HEAP32[(($fd69)>>2)]; //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F68=$74; //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $75=$b33; //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $76=$F68; //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp70=(($75)|0)==(($76)|0); //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp70) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $77=$i; //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl73=1 << $77; //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $neg74=$shl73 ^ -1; //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $78=HEAP32[((((__gm_)|0))>>2)]; //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and75=$78 & $neg74; //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$and75; //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 22; break; //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $79=$F68; //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $80=$79; //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $81=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp77=(($80)>>>0) >= (($81)>>>0); //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv78=(($cmp77)&1); //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval79=(($conv78)==(1)); //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool80=(($expval79)|0)!=0; //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool80) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $82=$F68; //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $83=$b33; //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd82=(($83+8)|0); //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd82)>>2)]=$82; //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $84=$b33; //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $85=$F68; //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk83=(($85+12)|0); //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk83)>>2)]=$84; //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 20: 
      _abort(); //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4659 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 21: 
      __label__ = 22; break;
    case 22: 
      var $86=$i; //@line 4660 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl87=$86 << 3; //@line 4660 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $87=$nb; //@line 4660 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub88=((($shl87)-($87))|0); //@line 4660 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $rsize=$sub88; //@line 4660 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $88=$nb; //@line 4665 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or89=$88 | 1; //@line 4665 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or90=$or89 | 2; //@line 4665 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $89=$p34; //@line 4665 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head91=(($89+4)|0); //@line 4665 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head91)>>2)]=$or90; //@line 4665 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $90=$p34; //@line 4666 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $91=$90; //@line 4666 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $92=$nb; //@line 4666 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr92=(($91+$92)|0); //@line 4666 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $93=$add_ptr92; //@line 4666 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $r=$93; //@line 4666 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $94=$rsize; //@line 4667 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or93=$94 | 1; //@line 4667 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $95=$r; //@line 4667 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head94=(($95+4)|0); //@line 4667 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head94)>>2)]=$or93; //@line 4667 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $96=$rsize; //@line 4667 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $97=$r; //@line 4667 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $98=$97; //@line 4667 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $99=$rsize; //@line 4667 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr95=(($98+$99)|0); //@line 4667 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $100=$add_ptr95; //@line 4667 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $prev_foot=(($100)|0); //@line 4667 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot)>>2)]=$96; //@line 4667 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $101=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $DVS=$101; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $102=$DVS; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp96=(($102)|0)!=0; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp96) { __label__ = 23; break; } else { __label__ = 30; break; } //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $103=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $DV=$103; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $104=$DVS; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr99=$104 >>> 3; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $I=$shr99; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $105=$I; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl100=$105 << 1; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx101=((((__gm_+40)|0)+($shl100<<2))|0); //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $106=$arrayidx101; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $107=$106; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $B=$107; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $108=$B; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F102=$108; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $109=HEAP32[((((__gm_)|0))>>2)]; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $110=$I; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl103=1 << $110; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and104=$109 & $shl103; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool105=(($and104)|0)!=0; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool105) { __label__ = 25; break; } else { __label__ = 24; break; } //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $111=$I; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl107=1 << $111; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $112=HEAP32[((((__gm_)|0))>>2)]; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or108=$112 | $shl107; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$or108; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 29; break; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $113=$B; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd110=(($113+8)|0); //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $114=HEAP32[(($fd110)>>2)]; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $115=$114; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $116=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp111=(($115)>>>0) >= (($116)>>>0); //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv112=(($cmp111)&1); //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval113=(($conv112)==(1)); //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool114=(($expval113)|0)!=0; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool114) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $117=$B; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd116=(($117+8)|0); //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $118=HEAP32[(($fd116)>>2)]; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F102=$118; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 27: 
      _abort(); //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $119=$DV; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $120=$B; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd120=(($120+8)|0); //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd120)>>2)]=$119; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $121=$DV; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $122=$F102; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk121=(($122+12)|0); //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk121)>>2)]=$121; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $123=$F102; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $124=$DV; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd122=(($124+8)|0); //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd122)>>2)]=$123; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $125=$B; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $126=$DV; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk123=(($126+12)|0); //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk123)>>2)]=$125; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 30; break; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $127=$rsize; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$127; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $128=$r; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=$128; //@line 4668 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $129=$p34; //@line 4670 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $130=$129; //@line 4670 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr125=(($130+8)|0); //@line 4670 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $mem=$add_ptr125; //@line 4670 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 54; break; //@line 4672 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $131=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4675 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp127=(($131)|0)!=0; //@line 4675 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp127) { __label__ = 32; break; } else { __label__ = 34; break; } //@line 4675 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $132=$nb; //@line 4675 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call=_tmalloc_small(__gm_, $132); //@line 4675 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $mem=$call; //@line 4675 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp129=(($call)|0)!=0; //@line 4675 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp129) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 4675 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 33: 
      __label__ = 54; break; //@line 4677 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 34: 
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break; //@line 4679 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 36: 
      __label__ = 37; break;
    case 37: 
      __label__ = 45; break; //@line 4680 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $133=$bytes_addr; //@line 4681 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp137=(($133)>>>0) >= 4294967232; //@line 4681 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp137) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 4681 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 39: 
      $nb=-1; //@line 4682 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 44; break; //@line 4682 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 40: 
      var $134=$bytes_addr; //@line 4684 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add141=((($134)+(4))|0); //@line 4684 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add142=((($add141)+(7))|0); //@line 4684 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and143=$add142 & -8; //@line 4684 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $nb=$and143; //@line 4684 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $135=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4685 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp144=(($135)|0)!=0; //@line 4685 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp144) { __label__ = 41; break; } else { __label__ = 43; break; } //@line 4685 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 41: 
      var $136=$nb; //@line 4685 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call147=_tmalloc_large(__gm_, $136); //@line 4685 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $mem=$call147; //@line 4685 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp148=(($call147)|0)!=0; //@line 4685 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp148) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 4685 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 42: 
      __label__ = 54; break; //@line 4687 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 43: 
      __label__ = 44; break;
    case 44: 
      __label__ = 45; break;
    case 45: 
      var $137=$nb; //@line 4691 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $138=HEAPU32[((((__gm_+8)|0))>>2)]; //@line 4691 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp154=(($137)>>>0) <= (($138)>>>0); //@line 4691 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp154) { __label__ = 46; break; } else { __label__ = 50; break; } //@line 4691 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $139=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4692 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $140=$nb; //@line 4692 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub158=((($139)-($140))|0); //@line 4692 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $rsize157=$sub158; //@line 4692 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $141=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4693 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $p159=$141; //@line 4693 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $142=$rsize157; //@line 4694 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp160=(($142)>>>0) >= 16; //@line 4694 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp160) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 4694 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $143=$p159; //@line 4695 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $144=$143; //@line 4695 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $145=$nb; //@line 4695 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr164=(($144+$145)|0); //@line 4695 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $146=$add_ptr164; //@line 4695 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=$146; //@line 4695 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $r163=$146; //@line 4695 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $147=$rsize157; //@line 4696 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$147; //@line 4696 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $148=$rsize157; //@line 4697 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or165=$148 | 1; //@line 4697 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $149=$r163; //@line 4697 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head166=(($149+4)|0); //@line 4697 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head166)>>2)]=$or165; //@line 4697 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $150=$rsize157; //@line 4697 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $151=$r163; //@line 4697 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $152=$151; //@line 4697 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $153=$rsize157; //@line 4697 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr167=(($152+$153)|0); //@line 4697 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $154=$add_ptr167; //@line 4697 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $prev_foot168=(($154)|0); //@line 4697 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot168)>>2)]=$150; //@line 4697 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $155=$nb; //@line 4698 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or169=$155 | 1; //@line 4698 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or170=$or169 | 2; //@line 4698 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $156=$p159; //@line 4698 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head171=(($156+4)|0); //@line 4698 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head171)>>2)]=$or170; //@line 4698 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 49; break; //@line 4699 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $157=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4701 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $dvs=$157; //@line 4701 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=0; //@line 4702 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=0; //@line 4703 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $158=$dvs; //@line 4704 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or173=$158 | 1; //@line 4704 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or174=$or173 | 2; //@line 4704 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $159=$p159; //@line 4704 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head175=(($159+4)|0); //@line 4704 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head175)>>2)]=$or174; //@line 4704 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $160=$p159; //@line 4704 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $161=$160; //@line 4704 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $162=$dvs; //@line 4704 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr176=(($161+$162)|0); //@line 4704 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $163=$add_ptr176; //@line 4704 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head177=(($163+4)|0); //@line 4704 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $164=HEAP32[(($head177)>>2)]; //@line 4704 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or178=$164 | 1; //@line 4704 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head177)>>2)]=$or178; //@line 4704 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 49; break;
    case 49: 
      var $165=$p159; //@line 4706 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $166=$165; //@line 4706 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr180=(($166+8)|0); //@line 4706 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $mem=$add_ptr180; //@line 4706 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 54; break; //@line 4708 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $167=$nb; //@line 4711 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $168=HEAPU32[((((__gm_+12)|0))>>2)]; //@line 4711 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp182=(($167)>>>0) < (($168)>>>0); //@line 4711 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp182) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 4711 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 51: 
      var $169=$nb; //@line 4712 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $170=HEAP32[((((__gm_+12)|0))>>2)]; //@line 4712 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub186=((($170)-($169))|0); //@line 4712 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+12)|0))>>2)]=$sub186; //@line 4712 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $rsize185=$sub186; //@line 4712 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $171=HEAP32[((((__gm_+24)|0))>>2)]; //@line 4713 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $p187=$171; //@line 4713 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $172=$p187; //@line 4714 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $173=$172; //@line 4714 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $174=$nb; //@line 4714 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr189=(($173+$174)|0); //@line 4714 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $175=$add_ptr189; //@line 4714 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+24)|0))>>2)]=$175; //@line 4714 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $r188=$175; //@line 4714 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $176=$rsize185; //@line 4715 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or190=$176 | 1; //@line 4715 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $177=$r188; //@line 4715 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head191=(($177+4)|0); //@line 4715 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head191)>>2)]=$or190; //@line 4715 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $178=$nb; //@line 4716 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or192=$178 | 1; //@line 4716 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or193=$or192 | 2; //@line 4716 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $179=$p187; //@line 4716 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head194=(($179+4)|0); //@line 4716 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head194)>>2)]=$or193; //@line 4716 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $180=$p187; //@line 4717 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $181=$180; //@line 4717 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr195=(($181+8)|0); //@line 4717 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $mem=$add_ptr195; //@line 4717 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 54; break; //@line 4720 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 52: 
      __label__ = 53; break;
    case 53: 
      var $182=$nb; //@line 4723 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call198=_sys_alloc(__gm_, $182); //@line 4723 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $mem=$call198; //@line 4723 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 54; break; //@line 4723 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 54: 
      var $183=$mem; //@line 4727 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      ;
      return $183; //@line 4727 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
Module["_malloc"] = _malloc;_malloc["X"]=1;

function _tmalloc_small($m, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $m_addr;
      var $nb_addr;
      var $t;
      var $v;
      var $rsize;
      var $i;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $trem;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F191;
      $m_addr=$m;
      $nb_addr=$nb;
      var $0=$m_addr; //@line 4268 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treemap=(($0+4)|0); //@line 4268 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $1=HEAP32[(($treemap)>>2)]; //@line 4268 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2=$m_addr; //@line 4268 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treemap1=(($2+4)|0); //@line 4268 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $3=HEAP32[(($treemap1)>>2)]; //@line 4268 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub=(((-$3))|0); //@line 4268 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and=$1 & $sub; //@line 4268 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $leastbit=$and; //@line 4268 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $4=$leastbit; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub2=((($4)-(1))|0); //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$sub2; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $5=$Y; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr=$5 >>> 12; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and3=$shr & 16; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$and3; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $6=$K; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$6; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $7=$K; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $8=$Y; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr4=$8 >>> (($7)>>>0); //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shr4; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $9=$Y; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr5=$9 >>> 5; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and6=$shr5 & 8; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$and6; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $10=$N; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add=((($10)+($and6))|0); //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$add; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $11=$K; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $12=$Y; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr7=$12 >>> (($11)>>>0); //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shr7; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $13=$Y; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr8=$13 >>> 2; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and9=$shr8 & 4; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$and9; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $14=$N; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add10=((($14)+($and9))|0); //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$add10; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $15=$K; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $16=$Y; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr11=$16 >>> (($15)>>>0); //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shr11; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $17=$Y; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr12=$17 >>> 1; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and13=$shr12 & 2; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$and13; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $18=$N; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add14=((($18)+($and13))|0); //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$add14; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $19=$K; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $20=$Y; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr15=$20 >>> (($19)>>>0); //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shr15; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $21=$Y; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr16=$21 >>> 1; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and17=$shr16 & 1; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$and17; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $22=$N; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add18=((($22)+($and17))|0); //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$add18; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $23=$K; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $24=$Y; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr19=$24 >>> (($23)>>>0); //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shr19; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $25=$N; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $26=$Y; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add20=((($25)+($26))|0); //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $i=$add20; //@line 4269 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $27=$i; //@line 4270 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $28=$m_addr; //@line 4270 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treebins=(($28+304)|0); //@line 4270 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=(($treebins+($27<<2))|0); //@line 4270 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $29=HEAP32[(($arrayidx)>>2)]; //@line 4270 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $t=$29; //@line 4270 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $v=$29; //@line 4270 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $30=$t; //@line 4271 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head=(($30+4)|0); //@line 4271 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $31=HEAP32[(($head)>>2)]; //@line 4271 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and21=$31 & -8; //@line 4271 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $32=$nb_addr; //@line 4271 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub22=((($and21)-($32))|0); //@line 4271 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $rsize=$sub22; //@line 4271 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 3; break; //@line 4273 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $33=$t; //@line 4273 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child=(($33+16)|0); //@line 4273 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx23=(($child)|0); //@line 4273 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $34=HEAP32[(($arrayidx23)>>2)]; //@line 4273 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($34)|0)!=0; //@line 4273 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4273 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $35=$t; //@line 4273 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child24=(($35+16)|0); //@line 4273 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx25=(($child24)|0); //@line 4273 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $36=HEAP32[(($arrayidx25)>>2)]; //@line 4273 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond = $36;__label__ = 6; break; //@line 4273 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $37=$t; //@line 4273 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child26=(($37+16)|0); //@line 4273 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx27=(($child26+4)|0); //@line 4273 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $38=HEAP32[(($arrayidx27)>>2)]; //@line 4273 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond = $38;__label__ = 6; break; //@line 4273 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $cond; //@line 4273 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $t=$cond; //@line 4273 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp28=(($cond)|0)!=0; //@line 4273 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp28) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 4273 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $39=$t; //@line 4274 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head29=(($39+4)|0); //@line 4274 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $40=HEAP32[(($head29)>>2)]; //@line 4274 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and30=$40 & -8; //@line 4274 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $41=$nb_addr; //@line 4274 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub31=((($and30)-($41))|0); //@line 4274 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $trem=$sub31; //@line 4274 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $42=$trem; //@line 4275 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $43=$rsize; //@line 4275 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp32=(($42)>>>0) < (($43)>>>0); //@line 4275 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp32) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4275 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $44=$trem; //@line 4276 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $rsize=$44; //@line 4276 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $45=$t; //@line 4277 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $v=$45; //@line 4277 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 9; break; //@line 4278 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 9: 
      __label__ = 3; break; //@line 4279 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $46=$v; //@line 4281 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $47=$46; //@line 4281 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $48=$m_addr; //@line 4281 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($48+16)|0); //@line 4281 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $49=HEAPU32[(($least_addr)>>2)]; //@line 4281 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp33=(($47)>>>0) >= (($49)>>>0); //@line 4281 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv=(($cmp33)&1); //@line 4281 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval=(($conv)==(1)); //@line 4281 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($expval)|0)!=0; //@line 4281 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool) { __label__ = 11; break; } else { __label__ = 70; break; } //@line 4281 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $50=$v; //@line 4282 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $51=$50; //@line 4282 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $52=$nb_addr; //@line 4282 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($51+$52)|0); //@line 4282 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $53=$add_ptr; //@line 4282 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $r=$53; //@line 4282 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $54=$v; //@line 4284 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $55=$54; //@line 4284 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $56=$r; //@line 4284 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $57=$56; //@line 4284 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp35=(($55)>>>0) < (($57)>>>0); //@line 4284 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv36=(($cmp35)&1); //@line 4284 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval37=(($conv36)==(1)); //@line 4284 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool38=(($expval37)|0)!=0; //@line 4284 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool38) { __label__ = 12; break; } else { __label__ = 69; break; } //@line 4284 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $58=$v; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent=(($58+24)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $59=HEAP32[(($parent)>>2)]; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $XP=$59; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $60=$v; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk=(($60+12)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $61=HEAP32[(($bk)>>2)]; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $62=$v; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp40=(($61)|0)!=(($62)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp40) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $63=$v; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd=(($63+8)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $64=HEAP32[(($fd)>>2)]; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F=$64; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $65=$v; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk43=(($65+12)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $66=HEAP32[(($bk43)>>2)]; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $R=$66; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $67=$F; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $68=$67; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $69=$m_addr; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr44=(($69+16)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $70=HEAPU32[(($least_addr44)>>2)]; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp45=(($68)>>>0) >= (($70)>>>0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv46=(($cmp45)&1); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval47=(($conv46)==(1)); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool48=(($expval47)|0)!=0; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool48) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $71=$R; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $72=$F; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk50=(($72+12)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk50)>>2)]=$71; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $73=$F; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $74=$R; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd51=(($74+8)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd51)>>2)]=$73; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 16; break; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 15: 
      _abort(); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 16: 
      __label__ = 29; break; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $75=$v; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child54=(($75+16)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx55=(($child54+4)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx55; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $76=HEAP32[(($arrayidx55)>>2)]; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $R=$76; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp56=(($76)|0)!=0; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp56) { __label__ = 19; break; } else { __label__ = 18; break; } //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $77=$v; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child58=(($77+16)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx59=(($child58)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx59; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $78=HEAP32[(($arrayidx59)>>2)]; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $R=$78; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp60=(($78)|0)!=0; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp60) { __label__ = 19; break; } else { __label__ = 28; break; } //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 19: 
      __label__ = 20; break; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $79=$R; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child64=(($79+16)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx65=(($child64+4)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx65; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $80=HEAP32[(($arrayidx65)>>2)]; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp66=(($80)|0)!=0; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp66) { var $83 = 1;__label__ = 22; break; } else { __label__ = 21; break; } //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $81=$R; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child68=(($81+16)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx69=(($child68)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx69; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $82=HEAP32[(($arrayidx69)>>2)]; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp70=(($82)|0)!=0; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $83 = $cmp70;__label__ = 22; break; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $83;
      if ($83) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $84=$CP; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $RP=$84; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $85=HEAP32[(($84)>>2)]; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $R=$85; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $86=$RP; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $87=$86; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $88=$m_addr; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr74=(($88+16)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $89=HEAPU32[(($least_addr74)>>2)]; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp75=(($87)>>>0) >= (($89)>>>0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv76=(($cmp75)&1); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval77=(($conv76)==(1)); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool78=(($expval77)|0)!=0; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool78) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $90=$RP; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($90)>>2)]=0; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 26: 
      _abort(); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 27: 
      __label__ = 28; break; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $91=$XP; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp84=(($91)|0)!=0; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp84) { __label__ = 30; break; } else { __label__ = 57; break; } //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $92=$v; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $index=(($92+28)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $93=HEAP32[(($index)>>2)]; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $94=$m_addr; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treebins87=(($94+304)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx88=(($treebins87+($93<<2))|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $H=$arrayidx88; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $95=$v; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $96=$H; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $97=HEAP32[(($96)>>2)]; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp89=(($95)|0)==(($97)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp89) { __label__ = 31; break; } else { __label__ = 34; break; } //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $98=$R; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $99=$H; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($99)>>2)]=$98; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp92=(($98)|0)==0; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp92) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $100=$v; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $index95=(($100+28)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $101=HEAP32[(($index95)>>2)]; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl=1 << $101; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $neg=$shl ^ -1; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $102=$m_addr; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treemap96=(($102+4)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $103=HEAP32[(($treemap96)>>2)]; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and97=$103 & $neg; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($treemap96)>>2)]=$and97; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 33; break; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 33: 
      __label__ = 41; break; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $104=$XP; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $105=$104; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $106=$m_addr; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr100=(($106+16)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $107=HEAPU32[(($least_addr100)>>2)]; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp101=(($105)>>>0) >= (($107)>>>0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv102=(($cmp101)&1); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval103=(($conv102)==(1)); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool104=(($expval103)|0)!=0; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool104) { __label__ = 35; break; } else { __label__ = 39; break; } //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $108=$XP; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child106=(($108+16)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx107=(($child106)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $109=HEAP32[(($arrayidx107)>>2)]; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $110=$v; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp108=(($109)|0)==(($110)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp108) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $111=$R; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $112=$XP; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child111=(($112+16)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx112=(($child111)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx112)>>2)]=$111; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 38; break; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $113=$R; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $114=$XP; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child114=(($114+16)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx115=(($child114+4)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx115)>>2)]=$113; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 38; break;
    case 38: 
      __label__ = 40; break; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 39: 
      _abort(); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 40: 
      __label__ = 41; break;
    case 41: 
      var $115=$R; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp120=(($115)|0)!=0; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp120) { __label__ = 42; break; } else { __label__ = 56; break; } //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $116=$R; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $117=$116; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $118=$m_addr; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr123=(($118+16)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $119=HEAPU32[(($least_addr123)>>2)]; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp124=(($117)>>>0) >= (($119)>>>0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv125=(($cmp124)&1); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval126=(($conv125)==(1)); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool127=(($expval126)|0)!=0; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool127) { __label__ = 43; break; } else { __label__ = 54; break; } //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $120=$XP; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $121=$R; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent129=(($121+24)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent129)>>2)]=$120; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $122=$v; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child130=(($122+16)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx131=(($child130)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $123=HEAP32[(($arrayidx131)>>2)]; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $C0=$123; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp132=(($123)|0)!=0; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp132) { __label__ = 44; break; } else { __label__ = 48; break; } //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $124=$C0; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $125=$124; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $126=$m_addr; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr135=(($126+16)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $127=HEAPU32[(($least_addr135)>>2)]; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp136=(($125)>>>0) >= (($127)>>>0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv137=(($cmp136)&1); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval138=(($conv137)==(1)); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool139=(($expval138)|0)!=0; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool139) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $128=$C0; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $129=$R; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child141=(($129+16)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx142=(($child141)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx142)>>2)]=$128; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $130=$R; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $131=$C0; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent143=(($131+24)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent143)>>2)]=$130; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 46: 
      _abort(); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 47: 
      __label__ = 48; break; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $132=$v; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child147=(($132+16)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx148=(($child147+4)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $133=HEAP32[(($arrayidx148)>>2)]; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $C1=$133; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp149=(($133)|0)!=0; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp149) { __label__ = 49; break; } else { __label__ = 53; break; } //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $134=$C1; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $135=$134; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $136=$m_addr; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr152=(($136+16)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $137=HEAPU32[(($least_addr152)>>2)]; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp153=(($135)>>>0) >= (($137)>>>0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv154=(($cmp153)&1); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval155=(($conv154)==(1)); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool156=(($expval155)|0)!=0; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool156) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $138=$C1; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $139=$R; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child158=(($139+16)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx159=(($child158+4)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx159)>>2)]=$138; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $140=$R; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $141=$C1; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent160=(($141+24)|0); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent160)>>2)]=$140; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 52; break; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 51: 
      _abort(); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 52: 
      __label__ = 53; break; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 53: 
      __label__ = 55; break; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 54: 
      _abort(); //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 55: 
      __label__ = 56; break; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 56: 
      __label__ = 57; break; //@line 4285 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 57: 
      var $142=$rsize; //@line 4286 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp168=(($142)>>>0) < 16; //@line 4286 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp168) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 4286 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 58: 
      var $143=$rsize; //@line 4287 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $144=$nb_addr; //@line 4287 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add171=((($143)+($144))|0); //@line 4287 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or=$add171 | 1; //@line 4287 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or172=$or | 2; //@line 4287 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $145=$v; //@line 4287 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head173=(($145+4)|0); //@line 4287 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head173)>>2)]=$or172; //@line 4287 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $146=$v; //@line 4287 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $147=$146; //@line 4287 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $148=$rsize; //@line 4287 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $149=$nb_addr; //@line 4287 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add174=((($148)+($149))|0); //@line 4287 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr175=(($147+$add174)|0); //@line 4287 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $150=$add_ptr175; //@line 4287 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head176=(($150+4)|0); //@line 4287 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $151=HEAP32[(($head176)>>2)]; //@line 4287 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or177=$151 | 1; //@line 4287 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head176)>>2)]=$or177; //@line 4287 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 68; break; //@line 4287 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 59: 
      var $152=$nb_addr; //@line 4289 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or179=$152 | 1; //@line 4289 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or180=$or179 | 2; //@line 4289 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $153=$v; //@line 4289 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head181=(($153+4)|0); //@line 4289 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head181)>>2)]=$or180; //@line 4289 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $154=$rsize; //@line 4290 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or182=$154 | 1; //@line 4290 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $155=$r; //@line 4290 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head183=(($155+4)|0); //@line 4290 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head183)>>2)]=$or182; //@line 4290 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $156=$rsize; //@line 4290 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $157=$r; //@line 4290 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $158=$157; //@line 4290 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $159=$rsize; //@line 4290 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr184=(($158+$159)|0); //@line 4290 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $160=$add_ptr184; //@line 4290 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $prev_foot=(($160)|0); //@line 4290 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot)>>2)]=$156; //@line 4290 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $161=$m_addr; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $dvsize=(($161+8)|0); //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $162=HEAP32[(($dvsize)>>2)]; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $DVS=$162; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $163=$DVS; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp185=(($163)|0)!=0; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp185) { __label__ = 60; break; } else { __label__ = 67; break; } //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $164=$m_addr; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $dv=(($164+20)|0); //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $165=HEAP32[(($dv)>>2)]; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $DV=$165; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $166=$DVS; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr188=$166 >>> 3; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $I=$shr188; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $167=$I; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl189=$167 << 1; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $168=$m_addr; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $smallbins=(($168+40)|0); //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx190=(($smallbins+($shl189<<2))|0); //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $169=$arrayidx190; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $170=$169; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $B=$170; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $171=$B; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F191=$171; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $172=$m_addr; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $smallmap=(($172)|0); //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $173=HEAP32[(($smallmap)>>2)]; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $174=$I; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl192=1 << $174; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and193=$173 & $shl192; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool194=(($and193)|0)!=0; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool194) { __label__ = 62; break; } else { __label__ = 61; break; } //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $175=$I; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl196=1 << $175; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $176=$m_addr; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $smallmap197=(($176)|0); //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $177=HEAP32[(($smallmap197)>>2)]; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or198=$177 | $shl196; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($smallmap197)>>2)]=$or198; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 66; break; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 62: 
      var $178=$B; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd200=(($178+8)|0); //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $179=HEAP32[(($fd200)>>2)]; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $180=$179; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $181=$m_addr; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr201=(($181+16)|0); //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $182=HEAPU32[(($least_addr201)>>2)]; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp202=(($180)>>>0) >= (($182)>>>0); //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv203=(($cmp202)&1); //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval204=(($conv203)==(1)); //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool205=(($expval204)|0)!=0; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool205) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 63: 
      var $183=$B; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd207=(($183+8)|0); //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $184=HEAP32[(($fd207)>>2)]; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F191=$184; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 65; break; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 64: 
      _abort(); //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 65: 
      __label__ = 66; break;
    case 66: 
      var $185=$DV; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $186=$B; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd211=(($186+8)|0); //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd211)>>2)]=$185; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $187=$DV; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $188=$F191; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk212=(($188+12)|0); //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk212)>>2)]=$187; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $189=$F191; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $190=$DV; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd213=(($190+8)|0); //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd213)>>2)]=$189; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $191=$B; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $192=$DV; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk214=(($192+12)|0); //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk214)>>2)]=$191; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 67; break; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 67: 
      var $193=$rsize; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $194=$m_addr; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $dvsize216=(($194+8)|0); //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($dvsize216)>>2)]=$193; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $195=$r; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $196=$m_addr; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $dv217=(($196+20)|0); //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($dv217)>>2)]=$195; //@line 4291 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 68; break;
    case 68: 
      var $197=$v; //@line 4293 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $198=$197; //@line 4293 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr219=(($198+8)|0); //@line 4293 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      ;
      return $add_ptr219; //@line 4293 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 69: 
      __label__ = 70; break; //@line 4295 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 70: 
      _abort(); //@line 4297 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4297 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_tmalloc_small["X"]=1;

function _tmalloc_large($m, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $m_addr;
      var $nb_addr;
      var $v;
      var $rsize;
      var $t;
      var $idx;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $sizebits;
      var $rst;
      var $rt;
      var $trem;
      var $leftbits;
      var $i;
      var $leastbit;
      var $Y68;
      var $K70;
      var $N73;
      var $trem97;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I;
      var $B;
      var $F282;
      var $TP;
      var $H307;
      var $I308;
      var $X309;
      var $Y319;
      var $N320;
      var $K324;
      var $T;
      var $K365;
      var $C;
      var $F404;
      $m_addr=$m;
      $nb_addr=$nb;
      $v=0; //@line 4194 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $0=$nb_addr; //@line 4195 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub=(((-$0))|0); //@line 4195 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $rsize=$sub; //@line 4195 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $1=$nb_addr; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr=$1 >>> 8; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $X=$shr; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2=$X; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($2)|0)==0; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      $idx=0; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 8; break; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $3=$X; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp1=(($3)>>>0) > 65535; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 5: 
      $idx=31; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 7; break; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $4=$X; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$4; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $5=$Y; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub4=((($5)-(256))|0); //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr5=$sub4 >>> 16; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and=$shr5 & 8; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$and; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $6=$N; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $7=$Y; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl=$7 << $6; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shl; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub6=((($shl)-(4096))|0); //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr7=$sub6 >>> 16; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and8=$shr7 & 4; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$and8; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $8=$K; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $9=$N; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add=((($9)+($8))|0); //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$add; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $10=$K; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $11=$Y; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl9=$11 << $10; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shl9; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub10=((($shl9)-(16384))|0); //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr11=$sub10 >>> 16; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and12=$shr11 & 2; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$and12; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $12=$N; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add13=((($12)+($and12))|0); //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$add13; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $13=$N; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub14=(((14)-($13))|0); //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $14=$K; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $15=$Y; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl15=$15 << $14; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shl15; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr16=$shl15 >>> 15; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add17=((($sub14)+($shr16))|0); //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$add17; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $16=$K; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl18=$16 << 1; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $17=$nb_addr; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $18=$K; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add19=((($18)+(7))|0); //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr20=$17 >>> (($add19)>>>0); //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and21=$shr20 & 1; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add22=((($shl18)+($and21))|0); //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $idx=$add22; //@line 4198 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $19=$idx; //@line 4199 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $20=$m_addr; //@line 4199 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treebins=(($20+304)|0); //@line 4199 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=(($treebins+($19<<2))|0); //@line 4199 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $21=HEAP32[(($arrayidx)>>2)]; //@line 4199 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $t=$21; //@line 4199 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp24=(($21)|0)!=0; //@line 4199 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp24) { __label__ = 9; break; } else { __label__ = 24; break; } //@line 4199 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $22=$nb_addr; //@line 4201 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $23=$idx; //@line 4201 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp26=(($23)|0)==31; //@line 4201 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp26) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4201 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $cond = 0;__label__ = 12; break; //@line 4201 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $24=$idx; //@line 4201 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr27=$24 >>> 1; //@line 4201 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add28=((($shr27)+(8))|0); //@line 4201 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub29=((($add28)-(2))|0); //@line 4201 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub30=(((31)-($sub29))|0); //@line 4201 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond = $sub30;__label__ = 12; break; //@line 4201 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $cond; //@line 4201 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl31=$22 << $cond; //@line 4201 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $sizebits=$shl31; //@line 4201 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $rst=0; //@line 4202 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 13; break; //@line 4203 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $25=$t; //@line 4205 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head=(($25+4)|0); //@line 4205 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $26=HEAP32[(($head)>>2)]; //@line 4205 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and32=$26 & -8; //@line 4205 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $27=$nb_addr; //@line 4205 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub33=((($and32)-($27))|0); //@line 4205 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $trem=$sub33; //@line 4205 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $28=$trem; //@line 4206 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $29=$rsize; //@line 4206 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp34=(($28)>>>0) < (($29)>>>0); //@line 4206 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp34) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 4206 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $30=$t; //@line 4207 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $v=$30; //@line 4207 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $31=$trem; //@line 4208 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $rsize=$31; //@line 4208 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp36=(($31)|0)==0; //@line 4208 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp36) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 4208 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 15: 
      __label__ = 23; break; //@line 4209 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 16: 
      __label__ = 17; break; //@line 4210 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $32=$t; //@line 4211 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child=(($32+16)|0); //@line 4211 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx40=(($child+4)|0); //@line 4211 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $33=HEAP32[(($arrayidx40)>>2)]; //@line 4211 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $rt=$33; //@line 4211 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $34=$sizebits; //@line 4212 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr41=$34 >>> 31; //@line 4212 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and42=$shr41 & 1; //@line 4212 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $35=$t; //@line 4212 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child43=(($35+16)|0); //@line 4212 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx44=(($child43+($and42<<2))|0); //@line 4212 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $36=HEAP32[(($arrayidx44)>>2)]; //@line 4212 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $t=$36; //@line 4212 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $37=$rt; //@line 4213 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp45=(($37)|0)!=0; //@line 4213 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp45) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 4213 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $38=$rt; //@line 4213 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $39=$t; //@line 4213 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp46=(($38)|0)!=(($39)|0); //@line 4213 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp46) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 4213 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $40=$rt; //@line 4214 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $rst=$40; //@line 4214 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 4214 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $41=$t; //@line 4215 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp49=(($41)|0)==0; //@line 4215 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp49) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 4215 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $42=$rst; //@line 4216 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $t=$42; //@line 4216 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 23; break; //@line 4217 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $43=$sizebits; //@line 4219 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl52=$43 << 1; //@line 4219 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $sizebits=$shl52; //@line 4219 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 13; break; //@line 4220 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 23: 
      __label__ = 24; break; //@line 4221 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $44=$t; //@line 4222 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp54=(($44)|0)==0; //@line 4222 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp54) { __label__ = 25; break; } else { __label__ = 29; break; } //@line 4222 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $45=$v; //@line 4222 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp56=(($45)|0)==0; //@line 4222 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp56) { __label__ = 26; break; } else { __label__ = 29; break; } //@line 4222 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $46=$idx; //@line 4223 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl58=1 << $46; //@line 4223 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl59=$shl58 << 1; //@line 4223 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $47=$idx; //@line 4223 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl60=1 << $47; //@line 4223 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl61=$shl60 << 1; //@line 4223 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub62=(((-$shl61))|0); //@line 4223 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or=$shl59 | $sub62; //@line 4223 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $48=$m_addr; //@line 4223 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treemap=(($48+4)|0); //@line 4223 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $49=HEAP32[(($treemap)>>2)]; //@line 4223 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and63=$or & $49; //@line 4223 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $leftbits=$and63; //@line 4223 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $50=$leftbits; //@line 4224 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp64=(($50)|0)!=0; //@line 4224 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp64) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 4224 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 27: 
      var $51=$leftbits; //@line 4226 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $52=$leftbits; //@line 4226 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub66=(((-$52))|0); //@line 4226 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and67=$51 & $sub66; //@line 4226 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $leastbit=$and67; //@line 4226 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $53=$leastbit; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub69=((($53)-(1))|0); //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y68=$sub69; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $54=$Y68; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr71=$54 >>> 12; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and72=$shr71 & 16; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K70=$and72; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $55=$K70; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N73=$55; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $56=$K70; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $57=$Y68; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr74=$57 >>> (($56)>>>0); //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y68=$shr74; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $58=$Y68; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr75=$58 >>> 5; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and76=$shr75 & 8; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K70=$and76; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $59=$N73; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add77=((($59)+($and76))|0); //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N73=$add77; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $60=$K70; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $61=$Y68; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr78=$61 >>> (($60)>>>0); //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y68=$shr78; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $62=$Y68; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr79=$62 >>> 2; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and80=$shr79 & 4; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K70=$and80; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $63=$N73; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add81=((($63)+($and80))|0); //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N73=$add81; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $64=$K70; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $65=$Y68; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr82=$65 >>> (($64)>>>0); //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y68=$shr82; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $66=$Y68; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr83=$66 >>> 1; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and84=$shr83 & 2; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K70=$and84; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $67=$N73; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add85=((($67)+($and84))|0); //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N73=$add85; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $68=$K70; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $69=$Y68; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr86=$69 >>> (($68)>>>0); //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y68=$shr86; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $70=$Y68; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr87=$70 >>> 1; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and88=$shr87 & 1; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K70=$and88; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $71=$N73; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add89=((($71)+($and88))|0); //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N73=$add89; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $72=$K70; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $73=$Y68; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr90=$73 >>> (($72)>>>0); //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y68=$shr90; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $74=$N73; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $75=$Y68; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add91=((($74)+($75))|0); //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $i=$add91; //@line 4227 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $76=$i; //@line 4228 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $77=$m_addr; //@line 4228 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treebins92=(($77+304)|0); //@line 4228 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx93=(($treebins92+($76<<2))|0); //@line 4228 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $78=HEAP32[(($arrayidx93)>>2)]; //@line 4228 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $t=$78; //@line 4228 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 4229 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 28: 
      __label__ = 29; break; //@line 4230 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 29: 
      __label__ = 30; break; //@line 4232 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $79=$t; //@line 4232 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp96=(($79)|0)!=0; //@line 4232 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp96) { __label__ = 31; break; } else { __label__ = 37; break; } //@line 4232 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $80=$t; //@line 4233 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head98=(($80+4)|0); //@line 4233 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $81=HEAP32[(($head98)>>2)]; //@line 4233 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and99=$81 & -8; //@line 4233 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $82=$nb_addr; //@line 4233 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub100=((($and99)-($82))|0); //@line 4233 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $trem97=$sub100; //@line 4233 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $83=$trem97; //@line 4234 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $84=$rsize; //@line 4234 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp101=(($83)>>>0) < (($84)>>>0); //@line 4234 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp101) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 4234 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $85=$trem97; //@line 4235 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $rsize=$85; //@line 4235 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $86=$t; //@line 4236 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $v=$86; //@line 4236 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 33; break; //@line 4237 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $87=$t; //@line 4238 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child104=(($87+16)|0); //@line 4238 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx105=(($child104)|0); //@line 4238 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $88=HEAP32[(($arrayidx105)>>2)]; //@line 4238 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp106=(($88)|0)!=0; //@line 4238 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp106) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 4238 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $89=$t; //@line 4238 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child108=(($89+16)|0); //@line 4238 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx109=(($child108)|0); //@line 4238 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $90=HEAP32[(($arrayidx109)>>2)]; //@line 4238 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond114 = $90;__label__ = 36; break; //@line 4238 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $91=$t; //@line 4238 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child111=(($91+16)|0); //@line 4238 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx112=(($child111+4)|0); //@line 4238 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $92=HEAP32[(($arrayidx112)>>2)]; //@line 4238 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond114 = $92;__label__ = 36; break; //@line 4238 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $cond114; //@line 4238 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $t=$cond114; //@line 4238 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 30; break; //@line 4239 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $93=$v; //@line 4242 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp115=(($93)|0)!=0; //@line 4242 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp115) { __label__ = 38; break; } else { __label__ = 127; break; } //@line 4242 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $94=$rsize; //@line 4242 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $95=$m_addr; //@line 4242 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $dvsize=(($95+8)|0); //@line 4242 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $96=HEAP32[(($dvsize)>>2)]; //@line 4242 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $97=$nb_addr; //@line 4242 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub117=((($96)-($97))|0); //@line 4242 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp118=(($94)>>>0) < (($sub117)>>>0); //@line 4242 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp118) { __label__ = 39; break; } else { __label__ = 127; break; } //@line 4242 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 39: 
      var $98=$v; //@line 4243 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $99=$98; //@line 4243 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $100=$m_addr; //@line 4243 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($100+16)|0); //@line 4243 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $101=HEAPU32[(($least_addr)>>2)]; //@line 4243 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp120=(($99)>>>0) >= (($101)>>>0); //@line 4243 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv=(($cmp120)&1); //@line 4243 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval=(($conv)==(1)); //@line 4243 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($expval)|0)!=0; //@line 4243 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool) { __label__ = 40; break; } else { __label__ = 126; break; } //@line 4243 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 40: 
      var $102=$v; //@line 4244 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $103=$102; //@line 4244 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $104=$nb_addr; //@line 4244 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($103+$104)|0); //@line 4244 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $105=$add_ptr; //@line 4244 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $r=$105; //@line 4244 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $106=$v; //@line 4246 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $107=$106; //@line 4246 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $108=$r; //@line 4246 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $109=$108; //@line 4246 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp122=(($107)>>>0) < (($109)>>>0); //@line 4246 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv123=(($cmp122)&1); //@line 4246 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval124=(($conv123)==(1)); //@line 4246 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool125=(($expval124)|0)!=0; //@line 4246 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool125) { __label__ = 41; break; } else { __label__ = 125; break; } //@line 4246 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 41: 
      var $110=$v; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent=(($110+24)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $111=HEAP32[(($parent)>>2)]; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $XP=$111; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $112=$v; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk=(($112+12)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $113=HEAP32[(($bk)>>2)]; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $114=$v; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp127=(($113)|0)!=(($114)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp127) { __label__ = 42; break; } else { __label__ = 46; break; } //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $115=$v; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd=(($115+8)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $116=HEAP32[(($fd)>>2)]; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F=$116; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $117=$v; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk130=(($117+12)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $118=HEAP32[(($bk130)>>2)]; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $R=$118; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $119=$F; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $120=$119; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $121=$m_addr; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr131=(($121+16)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $122=HEAPU32[(($least_addr131)>>2)]; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp132=(($120)>>>0) >= (($122)>>>0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv133=(($cmp132)&1); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval134=(($conv133)==(1)); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool135=(($expval134)|0)!=0; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool135) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $123=$R; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $124=$F; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk137=(($124+12)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk137)>>2)]=$123; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $125=$F; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $126=$R; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd138=(($126+8)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd138)>>2)]=$125; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 45; break; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 44: 
      _abort(); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 45: 
      __label__ = 58; break; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $127=$v; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child142=(($127+16)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx143=(($child142+4)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx143; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $128=HEAP32[(($arrayidx143)>>2)]; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $R=$128; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp144=(($128)|0)!=0; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp144) { __label__ = 48; break; } else { __label__ = 47; break; } //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $129=$v; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child146=(($129+16)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx147=(($child146)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx147; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $130=HEAP32[(($arrayidx147)>>2)]; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $R=$130; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp148=(($130)|0)!=0; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp148) { __label__ = 48; break; } else { __label__ = 57; break; } //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 48: 
      __label__ = 49; break; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $131=$R; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child152=(($131+16)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx153=(($child152+4)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx153; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $132=HEAP32[(($arrayidx153)>>2)]; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp154=(($132)|0)!=0; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp154) { var $135 = 1;__label__ = 51; break; } else { __label__ = 50; break; } //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $133=$R; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child156=(($133+16)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx157=(($child156)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx157; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $134=HEAP32[(($arrayidx157)>>2)]; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp158=(($134)|0)!=0; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $135 = $cmp158;__label__ = 51; break; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 51: 
      var $135;
      if ($135) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 52: 
      var $136=$CP; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $RP=$136; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $137=HEAP32[(($136)>>2)]; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $R=$137; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 49; break; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 53: 
      var $138=$RP; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $139=$138; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $140=$m_addr; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr162=(($140+16)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $141=HEAPU32[(($least_addr162)>>2)]; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp163=(($139)>>>0) >= (($141)>>>0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv164=(($cmp163)&1); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval165=(($conv164)==(1)); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool166=(($expval165)|0)!=0; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool166) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 54: 
      var $142=$RP; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($142)>>2)]=0; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 56; break; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 55: 
      _abort(); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 56: 
      __label__ = 57; break; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 57: 
      __label__ = 58; break;
    case 58: 
      var $143=$XP; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp172=(($143)|0)!=0; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp172) { __label__ = 59; break; } else { __label__ = 86; break; } //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 59: 
      var $144=$v; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $index=(($144+28)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $145=HEAP32[(($index)>>2)]; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $146=$m_addr; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treebins175=(($146+304)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx176=(($treebins175+($145<<2))|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $H=$arrayidx176; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $147=$v; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $148=$H; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $149=HEAP32[(($148)>>2)]; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp177=(($147)|0)==(($149)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp177) { __label__ = 60; break; } else { __label__ = 63; break; } //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $150=$R; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $151=$H; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($151)>>2)]=$150; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp180=(($150)|0)==0; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp180) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $152=$v; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $index183=(($152+28)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $153=HEAP32[(($index183)>>2)]; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl184=1 << $153; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $neg=$shl184 ^ -1; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $154=$m_addr; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treemap185=(($154+4)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $155=HEAP32[(($treemap185)>>2)]; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and186=$155 & $neg; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($treemap185)>>2)]=$and186; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 62; break; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 62: 
      __label__ = 70; break; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 63: 
      var $156=$XP; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $157=$156; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $158=$m_addr; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr189=(($158+16)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $159=HEAPU32[(($least_addr189)>>2)]; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp190=(($157)>>>0) >= (($159)>>>0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv191=(($cmp190)&1); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval192=(($conv191)==(1)); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool193=(($expval192)|0)!=0; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool193) { __label__ = 64; break; } else { __label__ = 68; break; } //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 64: 
      var $160=$XP; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child195=(($160+16)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx196=(($child195)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $161=HEAP32[(($arrayidx196)>>2)]; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $162=$v; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp197=(($161)|0)==(($162)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp197) { __label__ = 65; break; } else { __label__ = 66; break; } //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 65: 
      var $163=$R; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $164=$XP; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child200=(($164+16)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx201=(($child200)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx201)>>2)]=$163; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 67; break; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 66: 
      var $165=$R; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $166=$XP; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child203=(($166+16)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx204=(($child203+4)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx204)>>2)]=$165; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 67; break;
    case 67: 
      __label__ = 69; break; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 68: 
      _abort(); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 69: 
      __label__ = 70; break;
    case 70: 
      var $167=$R; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp209=(($167)|0)!=0; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp209) { __label__ = 71; break; } else { __label__ = 85; break; } //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 71: 
      var $168=$R; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $169=$168; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $170=$m_addr; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr212=(($170+16)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $171=HEAPU32[(($least_addr212)>>2)]; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp213=(($169)>>>0) >= (($171)>>>0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv214=(($cmp213)&1); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval215=(($conv214)==(1)); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool216=(($expval215)|0)!=0; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool216) { __label__ = 72; break; } else { __label__ = 83; break; } //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 72: 
      var $172=$XP; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $173=$R; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent218=(($173+24)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent218)>>2)]=$172; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $174=$v; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child219=(($174+16)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx220=(($child219)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $175=HEAP32[(($arrayidx220)>>2)]; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $C0=$175; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp221=(($175)|0)!=0; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp221) { __label__ = 73; break; } else { __label__ = 77; break; } //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 73: 
      var $176=$C0; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $177=$176; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $178=$m_addr; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr224=(($178+16)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $179=HEAPU32[(($least_addr224)>>2)]; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp225=(($177)>>>0) >= (($179)>>>0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv226=(($cmp225)&1); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval227=(($conv226)==(1)); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool228=(($expval227)|0)!=0; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool228) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 74: 
      var $180=$C0; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $181=$R; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child230=(($181+16)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx231=(($child230)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx231)>>2)]=$180; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $182=$R; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $183=$C0; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent232=(($183+24)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent232)>>2)]=$182; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 76; break; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 75: 
      _abort(); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 76: 
      __label__ = 77; break; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 77: 
      var $184=$v; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child236=(($184+16)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx237=(($child236+4)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $185=HEAP32[(($arrayidx237)>>2)]; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $C1=$185; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp238=(($185)|0)!=0; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp238) { __label__ = 78; break; } else { __label__ = 82; break; } //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 78: 
      var $186=$C1; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $187=$186; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $188=$m_addr; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr241=(($188+16)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $189=HEAPU32[(($least_addr241)>>2)]; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp242=(($187)>>>0) >= (($189)>>>0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv243=(($cmp242)&1); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval244=(($conv243)==(1)); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool245=(($expval244)|0)!=0; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool245) { __label__ = 79; break; } else { __label__ = 80; break; } //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 79: 
      var $190=$C1; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $191=$R; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child247=(($191+16)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx248=(($child247+4)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx248)>>2)]=$190; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $192=$R; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $193=$C1; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent249=(($193+24)|0); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent249)>>2)]=$192; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 81; break; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 80: 
      _abort(); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 81: 
      __label__ = 82; break; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 82: 
      __label__ = 84; break; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 83: 
      _abort(); //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 84: 
      __label__ = 85; break; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 85: 
      __label__ = 86; break; //@line 4247 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 86: 
      var $194=$rsize; //@line 4248 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp257=(($194)>>>0) < 16; //@line 4248 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp257) { __label__ = 87; break; } else { __label__ = 88; break; } //@line 4248 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 87: 
      var $195=$rsize; //@line 4249 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $196=$nb_addr; //@line 4249 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add260=((($195)+($196))|0); //@line 4249 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or261=$add260 | 1; //@line 4249 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or262=$or261 | 2; //@line 4249 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $197=$v; //@line 4249 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head263=(($197+4)|0); //@line 4249 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head263)>>2)]=$or262; //@line 4249 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $198=$v; //@line 4249 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $199=$198; //@line 4249 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $200=$rsize; //@line 4249 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $201=$nb_addr; //@line 4249 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add264=((($200)+($201))|0); //@line 4249 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr265=(($199+$add264)|0); //@line 4249 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $202=$add_ptr265; //@line 4249 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head266=(($202+4)|0); //@line 4249 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $203=HEAP32[(($head266)>>2)]; //@line 4249 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or267=$203 | 1; //@line 4249 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head266)>>2)]=$or267; //@line 4249 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 124; break; //@line 4249 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 88: 
      var $204=$nb_addr; //@line 4251 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or269=$204 | 1; //@line 4251 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or270=$or269 | 2; //@line 4251 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $205=$v; //@line 4251 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head271=(($205+4)|0); //@line 4251 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head271)>>2)]=$or270; //@line 4251 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $206=$rsize; //@line 4252 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or272=$206 | 1; //@line 4252 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $207=$r; //@line 4252 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head273=(($207+4)|0); //@line 4252 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head273)>>2)]=$or272; //@line 4252 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $208=$rsize; //@line 4252 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $209=$r; //@line 4252 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $210=$209; //@line 4252 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $211=$rsize; //@line 4252 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr274=(($210+$211)|0); //@line 4252 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $212=$add_ptr274; //@line 4252 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $prev_foot=(($212)|0); //@line 4252 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot)>>2)]=$208; //@line 4252 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $213=$rsize; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr275=$213 >>> 3; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp276=(($shr275)>>>0) < 32; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp276) { __label__ = 89; break; } else { __label__ = 96; break; } //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $214=$rsize; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr279=$214 >>> 3; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $I=$shr279; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $215=$I; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl280=$215 << 1; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $216=$m_addr; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $smallbins=(($216+40)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx281=(($smallbins+($shl280<<2))|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $217=$arrayidx281; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $218=$217; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $B=$218; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $219=$B; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F282=$219; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $220=$m_addr; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $smallmap=(($220)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $221=HEAP32[(($smallmap)>>2)]; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $222=$I; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl283=1 << $222; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and284=$221 & $shl283; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool285=(($and284)|0)!=0; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool285) { __label__ = 91; break; } else { __label__ = 90; break; } //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $223=$I; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl287=1 << $223; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $224=$m_addr; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $smallmap288=(($224)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $225=HEAP32[(($smallmap288)>>2)]; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or289=$225 | $shl287; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($smallmap288)>>2)]=$or289; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 95; break; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 91: 
      var $226=$B; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd291=(($226+8)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $227=HEAP32[(($fd291)>>2)]; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $228=$227; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $229=$m_addr; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr292=(($229+16)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $230=HEAPU32[(($least_addr292)>>2)]; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp293=(($228)>>>0) >= (($230)>>>0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv294=(($cmp293)&1); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval295=(($conv294)==(1)); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool296=(($expval295)|0)!=0; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool296) { __label__ = 92; break; } else { __label__ = 93; break; } //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 92: 
      var $231=$B; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd298=(($231+8)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $232=HEAP32[(($fd298)>>2)]; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F282=$232; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 94; break; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 93: 
      _abort(); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 94: 
      __label__ = 95; break;
    case 95: 
      var $233=$r; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $234=$B; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd302=(($234+8)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd302)>>2)]=$233; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $235=$r; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $236=$F282; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk303=(($236+12)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk303)>>2)]=$235; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $237=$F282; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $238=$r; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd304=(($238+8)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd304)>>2)]=$237; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $239=$B; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $240=$r; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk305=(($240+12)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk305)>>2)]=$239; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 123; break; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 96: 
      var $241=$r; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $242=$241; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $TP=$242; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $243=$rsize; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr310=$243 >>> 8; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $X309=$shr310; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $244=$X309; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp311=(($244)|0)==0; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp311) { __label__ = 97; break; } else { __label__ = 98; break; } //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 97: 
      $I308=0; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 102; break; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 98: 
      var $245=$X309; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp315=(($245)>>>0) > 65535; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp315) { __label__ = 99; break; } else { __label__ = 100; break; } //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 99: 
      $I308=31; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 101; break; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 100: 
      var $246=$X309; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y319=$246; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $247=$Y319; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub321=((($247)-(256))|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr322=$sub321 >>> 16; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and323=$shr322 & 8; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N320=$and323; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $248=$N320; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $249=$Y319; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl325=$249 << $248; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y319=$shl325; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub326=((($shl325)-(4096))|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr327=$sub326 >>> 16; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and328=$shr327 & 4; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K324=$and328; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $250=$K324; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $251=$N320; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add329=((($251)+($250))|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N320=$add329; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $252=$K324; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $253=$Y319; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl330=$253 << $252; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y319=$shl330; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub331=((($shl330)-(16384))|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr332=$sub331 >>> 16; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and333=$shr332 & 2; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K324=$and333; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $254=$N320; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add334=((($254)+($and333))|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N320=$add334; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $255=$N320; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub335=(((14)-($255))|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $256=$K324; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $257=$Y319; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl336=$257 << $256; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y319=$shl336; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr337=$shl336 >>> 15; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add338=((($sub335)+($shr337))|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K324=$add338; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $258=$K324; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl339=$258 << 1; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $259=$rsize; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $260=$K324; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add340=((($260)+(7))|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr341=$259 >>> (($add340)>>>0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and342=$shr341 & 1; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add343=((($shl339)+($and342))|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $I308=$add343; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 101; break;
    case 101: 
      __label__ = 102; break;
    case 102: 
      var $261=$I308; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $262=$m_addr; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treebins346=(($262+304)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx347=(($treebins346+($261<<2))|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $H307=$arrayidx347; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $263=$I308; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $264=$TP; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $index348=(($264+28)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($index348)>>2)]=$263; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $265=$TP; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child349=(($265+16)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx350=(($child349+4)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx350)>>2)]=0; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $266=$TP; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child351=(($266+16)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx352=(($child351)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx352)>>2)]=0; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $267=$m_addr; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treemap353=(($267+4)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $268=HEAP32[(($treemap353)>>2)]; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $269=$I308; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl354=1 << $269; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and355=$268 & $shl354; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool356=(($and355)|0)!=0; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool356) { __label__ = 104; break; } else { __label__ = 103; break; } //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 103: 
      var $270=$I308; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl358=1 << $270; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $271=$m_addr; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treemap359=(($271+4)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $272=HEAP32[(($treemap359)>>2)]; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or360=$272 | $shl358; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($treemap359)>>2)]=$or360; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $273=$TP; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $274=$H307; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($274)>>2)]=$273; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $275=$H307; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $276=$275; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $277=$TP; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent361=(($277+24)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent361)>>2)]=$276; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $278=$TP; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $279=$TP; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk362=(($279+12)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk362)>>2)]=$278; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $280=$TP; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd363=(($280+8)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd363)>>2)]=$278; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 122; break; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 104: 
      var $281=$H307; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $282=HEAP32[(($281)>>2)]; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $T=$282; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $283=$rsize; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $284=$I308; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp366=(($284)|0)==31; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp366) { __label__ = 105; break; } else { __label__ = 106; break; } //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 105: 
      var $cond375 = 0;__label__ = 107; break; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 106: 
      var $285=$I308; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr370=$285 >>> 1; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add371=((($shr370)+(8))|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub372=((($add371)-(2))|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub373=(((31)-($sub372))|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond375 = $sub373;__label__ = 107; break; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 107: 
      var $cond375; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl376=$283 << $cond375; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K365=$shl376; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 108; break; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 108: 
      var $286=$T; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head378=(($286+4)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $287=HEAP32[(($head378)>>2)]; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and379=$287 & -8; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $288=$rsize; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp380=(($and379)|0)!=(($288)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp380) { __label__ = 109; break; } else { __label__ = 115; break; } //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 109: 
      var $289=$K365; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr383=$289 >>> 31; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and384=$shr383 & 1; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $290=$T; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child385=(($290+16)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx386=(($child385+($and384<<2))|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $C=$arrayidx386; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $291=$K365; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl387=$291 << 1; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K365=$shl387; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $292=$C; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $293=HEAP32[(($292)>>2)]; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp388=(($293)|0)!=0; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp388) { __label__ = 110; break; } else { __label__ = 111; break; } //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 110: 
      var $294=$C; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $295=HEAP32[(($294)>>2)]; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $T=$295; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 114; break; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 111: 
      var $296=$C; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $297=$296; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $298=$m_addr; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr392=(($298+16)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $299=HEAPU32[(($least_addr392)>>2)]; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp393=(($297)>>>0) >= (($299)>>>0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv394=(($cmp393)&1); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval395=(($conv394)==(1)); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool396=(($expval395)|0)!=0; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool396) { __label__ = 112; break; } else { __label__ = 113; break; } //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 112: 
      var $300=$TP; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $301=$C; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($301)>>2)]=$300; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $302=$T; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $303=$TP; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent398=(($303+24)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent398)>>2)]=$302; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $304=$TP; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $305=$TP; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk399=(($305+12)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk399)>>2)]=$304; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $306=$TP; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd400=(($306+8)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd400)>>2)]=$304; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 121; break; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 113: 
      _abort(); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 114: 
      __label__ = 120; break; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 115: 
      var $307=$T; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd405=(($307+8)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $308=HEAP32[(($fd405)>>2)]; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F404=$308; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $309=$T; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $310=$309; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $311=$m_addr; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr406=(($311+16)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $312=HEAPU32[(($least_addr406)>>2)]; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp407=(($310)>>>0) >= (($312)>>>0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp407) { __label__ = 116; break; } else { var $317 = 0;__label__ = 117; break; } //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 116: 
      var $313=$F404; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $314=$313; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $315=$m_addr; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr409=(($315+16)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $316=HEAPU32[(($least_addr409)>>2)]; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp410=(($314)>>>0) >= (($316)>>>0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $317 = $cmp410;__label__ = 117; break;
    case 117: 
      var $317;
      var $land_ext=(($317)&1);
      var $expval412=(($land_ext)==(1));
      var $tobool413=(($expval412)|0)!=0;
      if ($tobool413) { __label__ = 118; break; } else { __label__ = 119; break; }
    case 118: 
      var $318=$TP; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $319=$F404; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk415=(($319+12)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk415)>>2)]=$318; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $320=$T; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd416=(($320+8)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd416)>>2)]=$318; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $321=$F404; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $322=$TP; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd417=(($322+8)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd417)>>2)]=$321; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $323=$T; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $324=$TP; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk418=(($324+12)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk418)>>2)]=$323; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $325=$TP; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent419=(($325+24)|0); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent419)>>2)]=0; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 121; break; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 119: 
      _abort(); //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 120: 
      __label__ = 108; break; //@line 4253 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 121: 
      __label__ = 122; break;
    case 122: 
      __label__ = 123; break;
    case 123: 
      __label__ = 124; break;
    case 124: 
      var $326=$v; //@line 4255 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $327=$326; //@line 4255 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr426=(($327+8)|0); //@line 4255 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $retval=$add_ptr426; //@line 4255 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 128; break; //@line 4255 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 125: 
      __label__ = 126; break; //@line 4257 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 126: 
      _abort(); //@line 4258 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4258 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 127: 
      $retval=0; //@line 4260 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 128; break; //@line 4260 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 128: 
      var $328=$retval; //@line 4261 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      ;
      return $328; //@line 4261 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_tmalloc_large["X"]=1;

function _sys_alloc($m, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $m_addr;
      var $nb_addr;
      var $tbase;
      var $tsize;
      var $mmap_flag;
      var $mem;
      var $br;
      var $ss;
      var $asize;
      var $base;
      var $esize;
      var $end;
      var $asize97;
      var $br106;
      var $end107;
      var $ssize;
      var $mn;
      var $sp;
      var $oldbase;
      var $rsize;
      var $p;
      var $r;
      $m_addr=$m;
      $nb_addr=$nb;
      $tbase=-1; //@line 3876 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $tsize=0; //@line 3877 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $mmap_flag=0; //@line 3878 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $0=HEAP32[((((_mparams)|0))>>2)]; //@line 3880 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)|0)!=0; //@line 3880 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { var $1 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 3880 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $call=_init_mparams(); //@line 3880 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($call)|0)!=0; //@line 3880 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $1 = $tobool;__label__ = 4; break; //@line 3880 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $1;
      var $lor_ext=(($1)&1); //@line 3880 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2=$m_addr; //@line 3883 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $mflags=(($2+440)|0); //@line 3883 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $3=HEAP32[(($mflags)>>2)]; //@line 3883 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and=$3 & 0; //@line 3883 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool1=(($and)|0)!=0; //@line 3883 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool1) { __label__ = 5; break; } else { __label__ = 10; break; } //@line 3883 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $4=$nb_addr; //@line 3883 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $5=HEAPU32[((((_mparams+12)|0))>>2)]; //@line 3883 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp2=(($4)>>>0) >= (($5)>>>0); //@line 3883 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp2) { __label__ = 6; break; } else { __label__ = 10; break; } //@line 3883 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $6=$m_addr; //@line 3883 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $topsize=(($6+12)|0); //@line 3883 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $7=HEAP32[(($topsize)>>2)]; //@line 3883 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp4=(($7)|0)!=0; //@line 3883 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp4) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 3883 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $8=$m_addr; //@line 3884 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $9=$nb_addr; //@line 3884 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call5=_mmap_alloc($8, $9); //@line 3884 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $mem=$call5; //@line 3884 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $10=$mem; //@line 3885 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp6=(($10)|0)!=0; //@line 3885 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp6) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3885 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $11=$mem; //@line 3886 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $retval=$11; //@line 3886 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 93; break; //@line 3886 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 9: 
      __label__ = 10; break; //@line 3887 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $12=$m_addr; //@line 3911 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $mflags9=(($12+440)|0); //@line 3911 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $13=HEAP32[(($mflags9)>>2)]; //@line 3911 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and10=$13 & 4; //@line 3911 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool11=(($and10)|0)!=0; //@line 3911 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool11) { __label__ = 43; break; } else { __label__ = 11; break; } //@line 3911 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 11: 
      $br=-1; //@line 3912 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $14=$m_addr; //@line 3913 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $top=(($14+24)|0); //@line 3913 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $15=HEAP32[(($top)>>2)]; //@line 3913 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp13=(($15)|0)==0; //@line 3913 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp13) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 3913 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $cond = 0;__label__ = 14; break; //@line 3913 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $16=$m_addr; //@line 3913 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $17=$m_addr; //@line 3913 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $top14=(($17+24)|0); //@line 3913 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $18=HEAP32[(($top14)>>2)]; //@line 3913 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $19=$18; //@line 3913 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call15=_segment_holding($16, $19); //@line 3913 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond = $call15;__label__ = 14; break; //@line 3913 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $cond; //@line 3913 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $ss=$cond; //@line 3913 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $asize=0; //@line 3914 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $20=$ss; //@line 3917 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp16=(($20)|0)==0; //@line 3917 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp16) { __label__ = 15; break; } else { __label__ = 23; break; } //@line 3917 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $call18=_sbrk(0); //@line 3918 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $base=$call18; //@line 3918 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $21=$base; //@line 3919 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp19=(($21)|0)!=-1; //@line 3919 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp19) { __label__ = 16; break; } else { __label__ = 22; break; } //@line 3919 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $22=$nb_addr; //@line 3920 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add=((($22)+(48))|0); //@line 3920 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $23=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3920 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub=((($23)-(1))|0); //@line 3920 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add21=((($add)+($sub))|0); //@line 3920 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $24=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3920 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub22=((($24)-(1))|0); //@line 3920 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $neg=$sub22 ^ -1; //@line 3920 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and23=$add21 & $neg; //@line 3920 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $asize=$and23; //@line 3920 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $25=$base; //@line 3922 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $26=$25; //@line 3922 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $27=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3922 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub24=((($27)-(1))|0); //@line 3922 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and25=$26 & $sub24; //@line 3922 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp26=(($and25)|0)==0; //@line 3922 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp26) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 3922 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $28=$base; //@line 3923 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $29=$28; //@line 3923 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $30=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3923 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub28=((($30)-(1))|0); //@line 3923 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add29=((($29)+($sub28))|0); //@line 3923 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $31=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3923 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub30=((($31)-(1))|0); //@line 3923 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $neg31=$sub30 ^ -1; //@line 3923 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and32=$add29 & $neg31; //@line 3923 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $32=$base; //@line 3923 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $33=$32; //@line 3923 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub33=((($and32)-($33))|0); //@line 3923 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $34=$asize; //@line 3923 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add34=((($34)+($sub33))|0); //@line 3923 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $asize=$add34; //@line 3923 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 18; break; //@line 3923 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $35=$asize; //@line 3925 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp36=(($35)>>>0) < 2147483647; //@line 3925 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp36) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 3925 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $36=$asize; //@line 3926 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call38=_sbrk($36); //@line 3926 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $br=$call38; //@line 3926 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $37=$base; //@line 3926 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp39=(($call38)|0)==(($37)|0); //@line 3926 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp39) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 3926 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $38=$base; //@line 3927 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $tbase=$38; //@line 3927 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $39=$asize; //@line 3928 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $tsize=$39; //@line 3928 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 3929 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 21: 
      __label__ = 22; break; //@line 3930 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 22: 
      __label__ = 27; break; //@line 3931 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $40=$nb_addr; //@line 3934 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $41=$m_addr; //@line 3934 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $topsize43=(($41+12)|0); //@line 3934 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $42=HEAP32[(($topsize43)>>2)]; //@line 3934 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub44=((($40)-($42))|0); //@line 3934 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add45=((($sub44)+(48))|0); //@line 3934 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $43=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3934 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub46=((($43)-(1))|0); //@line 3934 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add47=((($add45)+($sub46))|0); //@line 3934 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $44=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3934 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub48=((($44)-(1))|0); //@line 3934 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $neg49=$sub48 ^ -1; //@line 3934 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and50=$add47 & $neg49; //@line 3934 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $asize=$and50; //@line 3934 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $45=$asize; //@line 3936 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp51=(($45)>>>0) < 2147483647; //@line 3936 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp51) { __label__ = 24; break; } else { __label__ = 26; break; } //@line 3936 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $46=$asize; //@line 3937 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call53=_sbrk($46); //@line 3937 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $br=$call53; //@line 3937 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $47=$ss; //@line 3937 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $base54=(($47)|0); //@line 3937 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $48=HEAP32[(($base54)>>2)]; //@line 3937 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $49=$ss; //@line 3937 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $size=(($49+4)|0); //@line 3937 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $50=HEAP32[(($size)>>2)]; //@line 3937 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($48+$50)|0); //@line 3937 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp55=(($call53)|0)==(($add_ptr)|0); //@line 3937 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp55) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 3937 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $51=$br; //@line 3938 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $tbase=$51; //@line 3938 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $52=$asize; //@line 3939 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $tsize=$52; //@line 3939 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 26; break; //@line 3940 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $53=$tbase; //@line 3943 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp59=(($53)|0)==-1; //@line 3943 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp59) { __label__ = 28; break; } else { __label__ = 42; break; } //@line 3943 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $54=$br; //@line 3944 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp61=(($54)|0)!=-1; //@line 3944 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp61) { __label__ = 29; break; } else { __label__ = 38; break; } //@line 3944 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $55=$asize; //@line 3945 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp63=(($55)>>>0) < 2147483647; //@line 3945 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp63) { __label__ = 30; break; } else { __label__ = 37; break; } //@line 3945 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $56=$asize; //@line 3945 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $57=$nb_addr; //@line 3945 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add65=((($57)+(48))|0); //@line 3945 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp66=(($56)>>>0) < (($add65)>>>0); //@line 3945 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp66) { __label__ = 31; break; } else { __label__ = 37; break; } //@line 3945 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $58=$nb_addr; //@line 3947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add68=((($58)+(48))|0); //@line 3947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $59=$asize; //@line 3947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub69=((($add68)-($59))|0); //@line 3947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $60=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub70=((($60)-(1))|0); //@line 3947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add71=((($sub69)+($sub70))|0); //@line 3947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $61=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub72=((($61)-(1))|0); //@line 3947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $neg73=$sub72 ^ -1; //@line 3947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and74=$add71 & $neg73; //@line 3947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $esize=$and74; //@line 3947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $62=$esize; //@line 3948 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp75=(($62)>>>0) < 2147483647; //@line 3948 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp75) { __label__ = 32; break; } else { __label__ = 36; break; } //@line 3948 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $63=$esize; //@line 3949 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call77=_sbrk($63); //@line 3949 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $end=$call77; //@line 3949 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $64=$end; //@line 3950 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp78=(($64)|0)!=-1; //@line 3950 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp78) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 3950 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $65=$esize; //@line 3951 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $66=$asize; //@line 3951 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add80=((($66)+($65))|0); //@line 3951 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $asize=$add80; //@line 3951 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break; //@line 3951 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $67=$asize; //@line 3953 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub82=(((-$67))|0); //@line 3953 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call83=_sbrk($sub82); //@line 3953 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $br=-1; //@line 3954 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break; //@line 3956 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 36: 
      __label__ = 37; break; //@line 3957 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 37: 
      __label__ = 38; break; //@line 3958 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $68=$br; //@line 3959 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp88=(($68)|0)!=-1; //@line 3959 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp88) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 3959 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 39: 
      var $69=$br; //@line 3960 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $tbase=$69; //@line 3960 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $70=$asize; //@line 3961 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $tsize=$70; //@line 3961 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 41; break; //@line 3962 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 40: 
      var $71=$m_addr; //@line 3964 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $mflags91=(($71+440)|0); //@line 3964 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $72=HEAP32[(($mflags91)>>2)]; //@line 3964 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or=$72 | 4; //@line 3964 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($mflags91)>>2)]=$or; //@line 3964 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 41; break;
    case 41: 
      __label__ = 42; break; //@line 3965 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 42: 
      __label__ = 43; break; //@line 3968 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $73=$tbase; //@line 3982 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp95=(($73)|0)==-1; //@line 3982 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp95) { __label__ = 44; break; } else { __label__ = 53; break; } //@line 3982 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $74=$nb_addr; //@line 3983 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add98=((($74)+(48))|0); //@line 3983 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $75=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3983 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub99=((($75)-(1))|0); //@line 3983 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add100=((($add98)+($sub99))|0); //@line 3983 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $76=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3983 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub101=((($76)-(1))|0); //@line 3983 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $neg102=$sub101 ^ -1; //@line 3983 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and103=$add100 & $neg102; //@line 3983 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $asize97=$and103; //@line 3983 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $77=$asize97; //@line 3984 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp104=(($77)>>>0) < 2147483647; //@line 3984 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp104) { __label__ = 45; break; } else { __label__ = 52; break; } //@line 3984 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 45: 
      $br106=-1; //@line 3985 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $end107=-1; //@line 3986 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $78=$asize97; //@line 3988 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call108=_sbrk($78); //@line 3988 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $br106=$call108; //@line 3988 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call109=_sbrk(0); //@line 3989 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $end107=$call109; //@line 3989 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $79=$br106; //@line 3991 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp110=(($79)|0)!=-1; //@line 3991 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp110) { __label__ = 46; break; } else { __label__ = 51; break; } //@line 3991 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $80=$end107; //@line 3991 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp112=(($80)|0)!=-1; //@line 3991 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp112) { __label__ = 47; break; } else { __label__ = 51; break; } //@line 3991 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $81=$br106; //@line 3991 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $82=$end107; //@line 3991 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp114=(($81)>>>0) < (($82)>>>0); //@line 3991 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp114) { __label__ = 48; break; } else { __label__ = 51; break; } //@line 3991 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $83=$end107; //@line 3992 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $84=$br106; //@line 3992 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_lhs_cast=$83; //@line 3992 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_rhs_cast=$84; //@line 3992 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 3992 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $ssize=$sub_ptr_sub; //@line 3992 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $85=$ssize; //@line 3993 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $86=$nb_addr; //@line 3993 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add116=((($86)+(40))|0); //@line 3993 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp117=(($85)>>>0) > (($add116)>>>0); //@line 3993 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp117) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 3993 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $87=$br106; //@line 3994 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $tbase=$87; //@line 3994 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $88=$ssize; //@line 3995 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $tsize=$88; //@line 3995 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 50; break; //@line 3996 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 50: 
      __label__ = 51; break; //@line 3997 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 51: 
      __label__ = 52; break; //@line 3998 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 52: 
      __label__ = 53; break; //@line 3999 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 53: 
      var $89=$tbase; //@line 4001 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp123=(($89)|0)!=-1; //@line 4001 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp123) { __label__ = 54; break; } else { __label__ = 92; break; } //@line 4001 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 54: 
      var $90=$tsize; //@line 4003 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $91=$m_addr; //@line 4003 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $footprint=(($91+432)|0); //@line 4003 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $92=HEAP32[(($footprint)>>2)]; //@line 4003 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add125=((($92)+($90))|0); //@line 4003 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($footprint)>>2)]=$add125; //@line 4003 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $93=$m_addr; //@line 4003 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $max_footprint=(($93+436)|0); //@line 4003 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $94=HEAPU32[(($max_footprint)>>2)]; //@line 4003 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp126=(($add125)>>>0) > (($94)>>>0); //@line 4003 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp126) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 4003 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 55: 
      var $95=$m_addr; //@line 4004 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $footprint128=(($95+432)|0); //@line 4004 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $96=HEAP32[(($footprint128)>>2)]; //@line 4004 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $97=$m_addr; //@line 4004 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $max_footprint129=(($97+436)|0); //@line 4004 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($max_footprint129)>>2)]=$96; //@line 4004 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 56; break; //@line 4004 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 56: 
      var $98=$m_addr; //@line 4006 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $top131=(($98+24)|0); //@line 4006 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $99=HEAP32[(($top131)>>2)]; //@line 4006 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp132=(($99)|0)!=0; //@line 4006 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp132) { __label__ = 64; break; } else { __label__ = 57; break; } //@line 4006 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 57: 
      var $100=$m_addr; //@line 4007 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($100+16)|0); //@line 4007 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $101=HEAP32[(($least_addr)>>2)]; //@line 4007 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp134=(($101)|0)==0; //@line 4007 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp134) { __label__ = 59; break; } else { __label__ = 58; break; } //@line 4007 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 58: 
      var $102=$tbase; //@line 4007 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $103=$m_addr; //@line 4007 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr135=(($103+16)|0); //@line 4007 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $104=HEAPU32[(($least_addr135)>>2)]; //@line 4007 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp136=(($102)>>>0) < (($104)>>>0); //@line 4007 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp136) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 4007 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 59: 
      var $105=$tbase; //@line 4008 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $106=$m_addr; //@line 4008 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr138=(($106+16)|0); //@line 4008 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($least_addr138)>>2)]=$105; //@line 4008 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 60; break; //@line 4008 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $107=$tbase; //@line 4009 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $108=$m_addr; //@line 4009 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $seg=(($108+444)|0); //@line 4009 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $base140=(($seg)|0); //@line 4009 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($base140)>>2)]=$107; //@line 4009 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $109=$tsize; //@line 4010 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $110=$m_addr; //@line 4010 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $seg141=(($110+444)|0); //@line 4010 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $size142=(($seg141+4)|0); //@line 4010 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($size142)>>2)]=$109; //@line 4010 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $111=$mmap_flag; //@line 4011 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $112=$m_addr; //@line 4011 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $seg143=(($112+444)|0); //@line 4011 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sflags=(($seg143+12)|0); //@line 4011 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($sflags)>>2)]=$111; //@line 4011 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $113=HEAP32[((((_mparams)|0))>>2)]; //@line 4012 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $114=$m_addr; //@line 4012 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $magic=(($114+36)|0); //@line 4012 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($magic)>>2)]=$113; //@line 4012 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $115=$m_addr; //@line 4013 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $release_checks=(($115+32)|0); //@line 4013 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($release_checks)>>2)]=-1; //@line 4013 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $116=$m_addr; //@line 4014 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      _init_bins($116); //@line 4014 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $117=$m_addr; //@line 4016 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp144=(($117)|0)==((__gm_)|0); //@line 4016 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp144) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 4016 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $118=$m_addr; //@line 4017 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $119=$tbase; //@line 4017 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $120=$119; //@line 4017 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $121=$tsize; //@line 4017 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub146=((($121)-(40))|0); //@line 4017 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      _init_top($118, $120, $sub146); //@line 4017 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 63; break; //@line 4017 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 62: 
      var $122=$m_addr; //@line 4022 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $123=$122; //@line 4022 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr148=((($123)-(8))|0); //@line 4022 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $124=$add_ptr148; //@line 4022 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $125=$124; //@line 4022 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $126=$m_addr; //@line 4022 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $127=$126; //@line 4022 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr149=((($127)-(8))|0); //@line 4022 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $128=$add_ptr149; //@line 4022 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head=(($128+4)|0); //@line 4022 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $129=HEAP32[(($head)>>2)]; //@line 4022 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and150=$129 & -8; //@line 4022 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr151=(($125+$and150)|0); //@line 4022 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $130=$add_ptr151; //@line 4022 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $mn=$130; //@line 4022 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $131=$m_addr; //@line 4023 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $132=$mn; //@line 4023 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $133=$tbase; //@line 4023 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $134=$tsize; //@line 4023 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr152=(($133+$134)|0); //@line 4023 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $135=$mn; //@line 4023 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $136=$135; //@line 4023 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_lhs_cast153=$add_ptr152; //@line 4023 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_rhs_cast154=$136; //@line 4023 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_sub155=((($sub_ptr_lhs_cast153)-($sub_ptr_rhs_cast154))|0); //@line 4023 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub156=((($sub_ptr_sub155)-(40))|0); //@line 4023 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      _init_top($131, $132, $sub156); //@line 4023 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 63; break;
    case 63: 
      __label__ = 89; break; //@line 4025 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 64: 
      var $137=$m_addr; //@line 4029 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $seg159=(($137+444)|0); //@line 4029 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $sp=$seg159; //@line 4029 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 65; break; //@line 4031 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 65: 
      var $138=$sp; //@line 4031 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp160=(($138)|0)!=0; //@line 4031 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp160) { __label__ = 66; break; } else { var $144 = 0;__label__ = 67; break; } //@line 4031 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 66: 
      var $139=$tbase; //@line 4031 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $140=$sp; //@line 4031 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $base161=(($140)|0); //@line 4031 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $141=HEAP32[(($base161)>>2)]; //@line 4031 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $142=$sp; //@line 4031 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $size162=(($142+4)|0); //@line 4031 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $143=HEAP32[(($size162)>>2)]; //@line 4031 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr163=(($141+$143)|0); //@line 4031 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp164=(($139)|0)!=(($add_ptr163)|0); //@line 4031 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $144 = $cmp164;__label__ = 67; break;
    case 67: 
      var $144;
      if ($144) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $145=$sp; //@line 4032 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $next=(($145+8)|0); //@line 4032 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $146=HEAP32[(($next)>>2)]; //@line 4032 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $sp=$146; //@line 4032 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 65; break; //@line 4032 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 69: 
      var $147=$sp; //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp165=(($147)|0)!=0; //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp165) { __label__ = 70; break; } else { __label__ = 75; break; } //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 70: 
      var $148=$sp; //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sflags167=(($148+12)|0); //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $149=HEAP32[(($sflags167)>>2)]; //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and168=$149 & 8; //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool169=(($and168)|0)!=0; //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool169) { __label__ = 75; break; } else { __label__ = 71; break; } //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 71: 
      var $150=$sp; //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sflags171=(($150+12)|0); //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $151=HEAP32[(($sflags171)>>2)]; //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and172=$151 & 0; //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $152=$mmap_flag; //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp173=(($and172)|0)==(($152)|0); //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp173) { __label__ = 72; break; } else { __label__ = 75; break; } //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 72: 
      var $153=$m_addr; //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $top175=(($153+24)|0); //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $154=HEAP32[(($top175)>>2)]; //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $155=$154; //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $156=$sp; //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $base176=(($156)|0); //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $157=HEAPU32[(($base176)>>2)]; //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp177=(($155)>>>0) >= (($157)>>>0); //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp177) { __label__ = 73; break; } else { __label__ = 75; break; } //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 73: 
      var $158=$m_addr; //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $top179=(($158+24)|0); //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $159=HEAP32[(($top179)>>2)]; //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $160=$159; //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $161=$sp; //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $base180=(($161)|0); //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $162=HEAP32[(($base180)>>2)]; //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $163=$sp; //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $size181=(($163+4)|0); //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $164=HEAP32[(($size181)>>2)]; //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr182=(($162+$164)|0); //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp183=(($160)>>>0) < (($add_ptr182)>>>0); //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp183) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 4033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 74: 
      var $165=$tsize; //@line 4037 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $166=$sp; //@line 4037 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $size185=(($166+4)|0); //@line 4037 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $167=HEAP32[(($size185)>>2)]; //@line 4037 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add186=((($167)+($165))|0); //@line 4037 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($size185)>>2)]=$add186; //@line 4037 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $168=$m_addr; //@line 4038 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $169=$m_addr; //@line 4038 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $top187=(($169+24)|0); //@line 4038 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $170=HEAP32[(($top187)>>2)]; //@line 4038 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $171=$m_addr; //@line 4038 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $topsize188=(($171+12)|0); //@line 4038 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $172=HEAP32[(($topsize188)>>2)]; //@line 4038 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $173=$tsize; //@line 4038 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add189=((($172)+($173))|0); //@line 4038 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      _init_top($168, $170, $add189); //@line 4038 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 88; break; //@line 4039 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 75: 
      var $174=$tbase; //@line 4041 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $175=$m_addr; //@line 4041 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr191=(($175+16)|0); //@line 4041 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $176=HEAPU32[(($least_addr191)>>2)]; //@line 4041 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp192=(($174)>>>0) < (($176)>>>0); //@line 4041 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp192) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 4041 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 76: 
      var $177=$tbase; //@line 4042 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $178=$m_addr; //@line 4042 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr194=(($178+16)|0); //@line 4042 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($least_addr194)>>2)]=$177; //@line 4042 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 77; break; //@line 4042 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 77: 
      var $179=$m_addr; //@line 4043 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $seg196=(($179+444)|0); //@line 4043 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $sp=$seg196; //@line 4043 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 78; break; //@line 4044 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 78: 
      var $180=$sp; //@line 4044 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp198=(($180)|0)!=0; //@line 4044 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp198) { __label__ = 79; break; } else { var $185 = 0;__label__ = 80; break; } //@line 4044 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 79: 
      var $181=$sp; //@line 4044 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $base200=(($181)|0); //@line 4044 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $182=HEAP32[(($base200)>>2)]; //@line 4044 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $183=$tbase; //@line 4044 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $184=$tsize; //@line 4044 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr201=(($183+$184)|0); //@line 4044 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp202=(($182)|0)!=(($add_ptr201)|0); //@line 4044 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $185 = $cmp202;__label__ = 80; break;
    case 80: 
      var $185;
      if ($185) { __label__ = 81; break; } else { __label__ = 82; break; }
    case 81: 
      var $186=$sp; //@line 4045 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $next205=(($186+8)|0); //@line 4045 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $187=HEAP32[(($next205)>>2)]; //@line 4045 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $sp=$187; //@line 4045 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 78; break; //@line 4045 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 82: 
      var $188=$sp; //@line 4046 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp207=(($188)|0)!=0; //@line 4046 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp207) { __label__ = 83; break; } else { __label__ = 86; break; } //@line 4046 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 83: 
      var $189=$sp; //@line 4046 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sflags209=(($189+12)|0); //@line 4046 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $190=HEAP32[(($sflags209)>>2)]; //@line 4046 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and210=$190 & 8; //@line 4046 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool211=(($and210)|0)!=0; //@line 4046 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool211) { __label__ = 86; break; } else { __label__ = 84; break; } //@line 4046 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 84: 
      var $191=$sp; //@line 4046 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sflags213=(($191+12)|0); //@line 4046 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $192=HEAP32[(($sflags213)>>2)]; //@line 4046 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and214=$192 & 0; //@line 4046 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $193=$mmap_flag; //@line 4046 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp215=(($and214)|0)==(($193)|0); //@line 4046 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp215) { __label__ = 85; break; } else { __label__ = 86; break; } //@line 4046 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 85: 
      var $194=$sp; //@line 4049 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $base217=(($194)|0); //@line 4049 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $195=HEAP32[(($base217)>>2)]; //@line 4049 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $oldbase=$195; //@line 4049 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $196=$tbase; //@line 4050 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $197=$sp; //@line 4050 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $base218=(($197)|0); //@line 4050 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($base218)>>2)]=$196; //@line 4050 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $198=$tsize; //@line 4051 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $199=$sp; //@line 4051 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $size219=(($199+4)|0); //@line 4051 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $200=HEAP32[(($size219)>>2)]; //@line 4051 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add220=((($200)+($198))|0); //@line 4051 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($size219)>>2)]=$add220; //@line 4051 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $201=$m_addr; //@line 4052 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $202=$tbase; //@line 4052 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $203=$oldbase; //@line 4052 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $204=$nb_addr; //@line 4052 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call221=_prepend_alloc($201, $202, $203, $204); //@line 4052 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $retval=$call221; //@line 4052 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 93; break; //@line 4052 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 86: 
      var $205=$m_addr; //@line 4055 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $206=$tbase; //@line 4055 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $207=$tsize; //@line 4055 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $208=$mmap_flag; //@line 4055 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      _add_segment($205, $206, $207, $208); //@line 4055 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 87; break;
    case 87: 
      __label__ = 88; break;
    case 88: 
      __label__ = 89; break;
    case 89: 
      var $209=$nb_addr; //@line 4059 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $210=$m_addr; //@line 4059 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $topsize226=(($210+12)|0); //@line 4059 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $211=HEAPU32[(($topsize226)>>2)]; //@line 4059 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp227=(($209)>>>0) < (($211)>>>0); //@line 4059 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp227) { __label__ = 90; break; } else { __label__ = 91; break; } //@line 4059 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $212=$nb_addr; //@line 4060 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $213=$m_addr; //@line 4060 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $topsize229=(($213+12)|0); //@line 4060 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $214=HEAP32[(($topsize229)>>2)]; //@line 4060 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub230=((($214)-($212))|0); //@line 4060 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($topsize229)>>2)]=$sub230; //@line 4060 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $rsize=$sub230; //@line 4060 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $215=$m_addr; //@line 4061 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $top231=(($215+24)|0); //@line 4061 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $216=HEAP32[(($top231)>>2)]; //@line 4061 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $p=$216; //@line 4061 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $217=$p; //@line 4062 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $218=$217; //@line 4062 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $219=$nb_addr; //@line 4062 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr232=(($218+$219)|0); //@line 4062 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $220=$add_ptr232; //@line 4062 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $221=$m_addr; //@line 4062 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $top233=(($221+24)|0); //@line 4062 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($top233)>>2)]=$220; //@line 4062 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $r=$220; //@line 4062 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $222=$rsize; //@line 4063 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or234=$222 | 1; //@line 4063 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $223=$r; //@line 4063 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head235=(($223+4)|0); //@line 4063 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head235)>>2)]=$or234; //@line 4063 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $224=$nb_addr; //@line 4064 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or236=$224 | 1; //@line 4064 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or237=$or236 | 2; //@line 4064 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $225=$p; //@line 4064 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head238=(($225+4)|0); //@line 4064 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head238)>>2)]=$or237; //@line 4064 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $226=$p; //@line 4067 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $227=$226; //@line 4067 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr239=(($227+8)|0); //@line 4067 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $retval=$add_ptr239; //@line 4067 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 93; break; //@line 4067 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 91: 
      __label__ = 92; break; //@line 4069 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 92: 
      var $call242=___errno(); //@line 4071 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($call242)>>2)]=12; //@line 4071 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $retval=0; //@line 4072 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 93; break; //@line 4072 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 93: 
      var $228=$retval; //@line 4073 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      ;
      return $228; //@line 4073 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_sys_alloc["X"]=1;

function _free($mem) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $mem_addr;
      var $p;
      var $psize;
      var $next;
      var $prevsize;
      var $prev;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F60;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F245;
      var $B247;
      var $I249;
      var $TP285;
      var $XP286;
      var $R288;
      var $F293;
      var $RP306;
      var $CP317;
      var $H343;
      var $C0385;
      var $C1386;
      var $I447;
      var $B449;
      var $F452;
      var $tp;
      var $H475;
      var $I476;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K525;
      var $C;
      var $F558;
      $mem_addr=$mem;
      var $0=$mem_addr; //@line 4740 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)|0)!=0; //@line 4740 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 197; break; } //@line 4740 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $1=$mem_addr; //@line 4741 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=((($1)-(8))|0); //@line 4741 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2=$add_ptr; //@line 4741 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $p=$2; //@line 4741 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $3=$p; //@line 4753 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $4=$3; //@line 4753 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $5=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4753 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp1=(($4)>>>0) >= (($5)>>>0); //@line 4753 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp1) { __label__ = 4; break; } else { var $8 = 0;__label__ = 5; break; } //@line 4753 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $6=$p; //@line 4753 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head=(($6+4)|0); //@line 4753 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $7=HEAP32[(($head)>>2)]; //@line 4753 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and=$7 & 3; //@line 4753 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp2=(($and)|0)!=1; //@line 4753 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $8 = $cmp2;__label__ = 5; break;
    case 5: 
      var $8;
      var $land_ext=(($8)&1);
      var $expval=(($land_ext)==(1));
      var $tobool=(($expval)|0)!=0;
      if ($tobool) { __label__ = 6; break; } else { __label__ = 194; break; }
    case 6: 
      var $9=$p; //@line 4754 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head4=(($9+4)|0); //@line 4754 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $10=HEAP32[(($head4)>>2)]; //@line 4754 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and5=$10 & -8; //@line 4754 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $psize=$and5; //@line 4754 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $11=$p; //@line 4755 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $12=$11; //@line 4755 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $13=$psize; //@line 4755 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr6=(($12+$13)|0); //@line 4755 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $14=$add_ptr6; //@line 4755 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $next=$14; //@line 4755 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $15=$p; //@line 4756 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head7=(($15+4)|0); //@line 4756 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $16=HEAP32[(($head7)>>2)]; //@line 4756 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and8=$16 & 1; //@line 4756 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool9=(($and8)|0)!=0; //@line 4756 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool9) { __label__ = 78; break; } else { __label__ = 7; break; } //@line 4756 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $17=$p; //@line 4757 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $prev_foot=(($17)|0); //@line 4757 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $18=HEAP32[(($prev_foot)>>2)]; //@line 4757 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $prevsize=$18; //@line 4757 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $19=$p; //@line 4758 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head11=(($19+4)|0); //@line 4758 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $20=HEAP32[(($head11)>>2)]; //@line 4758 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and12=$20 & 3; //@line 4758 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp13=(($and12)|0)==0; //@line 4758 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp13) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4758 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $21=$prevsize; //@line 4759 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add=((($21)+(16))|0); //@line 4759 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $22=$psize; //@line 4759 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add15=((($22)+($add))|0); //@line 4759 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $psize=$add15; //@line 4759 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 196; break; //@line 4762 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $23=$p; //@line 4765 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $24=$23; //@line 4765 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $25=$prevsize; //@line 4765 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $idx_neg=(((-$25))|0); //@line 4765 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr16=(($24+$idx_neg)|0); //@line 4765 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $26=$add_ptr16; //@line 4765 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $prev=$26; //@line 4765 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $27=$prevsize; //@line 4766 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $28=$psize; //@line 4766 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add17=((($28)+($27))|0); //@line 4766 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $psize=$add17; //@line 4766 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $29=$prev; //@line 4767 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $p=$29; //@line 4767 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $30=$prev; //@line 4768 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $31=$30; //@line 4768 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $32=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4768 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp18=(($31)>>>0) >= (($32)>>>0); //@line 4768 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv=(($cmp18)&1); //@line 4768 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval19=(($conv)==(1)); //@line 4768 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool20=(($expval19)|0)!=0; //@line 4768 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool20) { __label__ = 10; break; } else { __label__ = 75; break; } //@line 4768 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $33=$p; //@line 4769 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $34=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4769 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp22=(($33)|0)!=(($34)|0); //@line 4769 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp22) { __label__ = 11; break; } else { __label__ = 71; break; } //@line 4769 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $35=$prevsize; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr=$35 >>> 3; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp25=(($shr)>>>0) < 32; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp25) { __label__ = 12; break; } else { __label__ = 24; break; } //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $36=$p; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd=(($36+8)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $37=HEAP32[(($fd)>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F=$37; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $38=$p; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk=(($38+12)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $39=HEAP32[(($bk)>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $B=$39; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $40=$prevsize; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr28=$40 >>> 3; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $I=$shr28; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $41=$F; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $42=$B; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp29=(($41)|0)==(($42)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp29) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $43=$I; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl=1 << $43; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $neg=$shl ^ -1; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $44=HEAP32[((((__gm_)|0))>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and32=$44 & $neg; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$and32; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 23; break; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $45=$F; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $46=$I; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl34=$46 << 1; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=((((__gm_+40)|0)+($shl34<<2))|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $47=$arrayidx; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $48=$47; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp35=(($45)|0)==(($48)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp35) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $49=$F; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $50=$49; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $51=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp37=(($50)>>>0) >= (($51)>>>0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp37) { __label__ = 16; break; } else { var $60 = 0;__label__ = 19; break; } //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $52=$B; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $53=$I; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl40=$53 << 1; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx41=((((__gm_+40)|0)+($shl40<<2))|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $54=$arrayidx41; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $55=$54; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp42=(($52)|0)==(($55)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp42) { var $59 = 1;__label__ = 18; break; } else { __label__ = 17; break; } //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $56=$B; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $57=$56; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $58=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp44=(($57)>>>0) >= (($58)>>>0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $59 = $cmp44;__label__ = 18; break; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $59;
      var $60 = $59;__label__ = 19; break;
    case 19: 
      var $60;
      var $land_ext47=(($60)&1);
      var $expval48=(($land_ext47)==(1));
      var $tobool49=(($expval48)|0)!=0;
      if ($tobool49) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $61=$B; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $62=$F; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk51=(($62+12)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk51)>>2)]=$61; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $63=$F; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $64=$B; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd52=(($64+8)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd52)>>2)]=$63; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 22; break; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 21: 
      _abort(); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 70; break; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $65=$p; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $66=$65; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $TP=$66; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $67=$TP; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent=(($67+24)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $68=HEAP32[(($parent)>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $XP=$68; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $69=$TP; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk56=(($69+12)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $70=HEAP32[(($bk56)>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $71=$TP; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp57=(($70)|0)!=(($71)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp57) { __label__ = 25; break; } else { __label__ = 29; break; } //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $72=$TP; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd61=(($72+8)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $73=HEAP32[(($fd61)>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F60=$73; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $74=$TP; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk62=(($74+12)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $75=HEAP32[(($bk62)>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $R=$75; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $76=$F60; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $77=$76; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $78=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp63=(($77)>>>0) >= (($78)>>>0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv64=(($cmp63)&1); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval65=(($conv64)==(1)); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool66=(($expval65)|0)!=0; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool66) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $79=$R; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $80=$F60; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk68=(($80+12)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk68)>>2)]=$79; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $81=$F60; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $82=$R; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd69=(($82+8)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd69)>>2)]=$81; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 27: 
      _abort(); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 28: 
      __label__ = 41; break; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $83=$TP; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child=(($83+16)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx73=(($child+4)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx73; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $84=HEAP32[(($arrayidx73)>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $R=$84; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp74=(($84)|0)!=0; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp74) { __label__ = 31; break; } else { __label__ = 30; break; } //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $85=$TP; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child77=(($85+16)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx78=(($child77)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx78; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $86=HEAP32[(($arrayidx78)>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $R=$86; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp79=(($86)|0)!=0; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp79) { __label__ = 31; break; } else { __label__ = 40; break; } //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 31: 
      __label__ = 32; break; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $87=$R; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child82=(($87+16)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx83=(($child82+4)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx83; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $88=HEAP32[(($arrayidx83)>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp84=(($88)|0)!=0; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp84) { var $91 = 1;__label__ = 34; break; } else { __label__ = 33; break; } //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $89=$R; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child87=(($89+16)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx88=(($child87)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx88; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $90=HEAP32[(($arrayidx88)>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp89=(($90)|0)!=0; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $91 = $cmp89;__label__ = 34; break; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $91;
      if ($91) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $92=$CP; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $RP=$92; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $93=HEAP32[(($92)>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $R=$93; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 32; break; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $94=$RP; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $95=$94; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $96=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp92=(($95)>>>0) >= (($96)>>>0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv93=(($cmp92)&1); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval94=(($conv93)==(1)); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool95=(($expval94)|0)!=0; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool95) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $97=$RP; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($97)>>2)]=0; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 39; break; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 38: 
      _abort(); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 39: 
      __label__ = 40; break; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 40: 
      __label__ = 41; break;
    case 41: 
      var $98=$XP; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp101=(($98)|0)!=0; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp101) { __label__ = 42; break; } else { __label__ = 69; break; } //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $99=$TP; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $index=(($99+28)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $100=HEAP32[(($index)>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx104=((((__gm_+304)|0)+($100<<2))|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $H=$arrayidx104; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $101=$TP; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $102=$H; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $103=HEAP32[(($102)>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp105=(($101)|0)==(($103)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp105) { __label__ = 43; break; } else { __label__ = 46; break; } //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $104=$R; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $105=$H; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($105)>>2)]=$104; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp108=(($104)|0)==0; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp108) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $106=$TP; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $index111=(($106+28)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $107=HEAP32[(($index111)>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl112=1 << $107; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $neg113=$shl112 ^ -1; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $108=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and114=$108 & $neg113; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+4)|0))>>2)]=$and114; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 45; break; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 45: 
      __label__ = 53; break; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $109=$XP; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $110=$109; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $111=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp117=(($110)>>>0) >= (($111)>>>0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv118=(($cmp117)&1); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval119=(($conv118)==(1)); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool120=(($expval119)|0)!=0; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool120) { __label__ = 47; break; } else { __label__ = 51; break; } //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $112=$XP; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child122=(($112+16)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx123=(($child122)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $113=HEAP32[(($arrayidx123)>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $114=$TP; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp124=(($113)|0)==(($114)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp124) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $115=$R; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $116=$XP; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child127=(($116+16)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx128=(($child127)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx128)>>2)]=$115; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 50; break; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $117=$R; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $118=$XP; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child130=(($118+16)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx131=(($child130+4)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx131)>>2)]=$117; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 50; break;
    case 50: 
      __label__ = 52; break; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 51: 
      _abort(); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 52: 
      __label__ = 53; break;
    case 53: 
      var $119=$R; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp136=(($119)|0)!=0; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp136) { __label__ = 54; break; } else { __label__ = 68; break; } //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 54: 
      var $120=$R; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $121=$120; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $122=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp139=(($121)>>>0) >= (($122)>>>0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv140=(($cmp139)&1); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval141=(($conv140)==(1)); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool142=(($expval141)|0)!=0; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool142) { __label__ = 55; break; } else { __label__ = 66; break; } //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 55: 
      var $123=$XP; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $124=$R; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent144=(($124+24)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent144)>>2)]=$123; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $125=$TP; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child145=(($125+16)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx146=(($child145)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $126=HEAP32[(($arrayidx146)>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $C0=$126; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp147=(($126)|0)!=0; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp147) { __label__ = 56; break; } else { __label__ = 60; break; } //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 56: 
      var $127=$C0; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $128=$127; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $129=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp150=(($128)>>>0) >= (($129)>>>0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv151=(($cmp150)&1); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval152=(($conv151)==(1)); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool153=(($expval152)|0)!=0; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool153) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 57: 
      var $130=$C0; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $131=$R; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child155=(($131+16)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx156=(($child155)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx156)>>2)]=$130; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $132=$R; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $133=$C0; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent157=(($133+24)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent157)>>2)]=$132; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 59; break; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 58: 
      _abort(); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 59: 
      __label__ = 60; break; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $134=$TP; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child161=(($134+16)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx162=(($child161+4)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $135=HEAP32[(($arrayidx162)>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $C1=$135; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp163=(($135)|0)!=0; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp163) { __label__ = 61; break; } else { __label__ = 65; break; } //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $136=$C1; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $137=$136; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $138=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp166=(($137)>>>0) >= (($138)>>>0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv167=(($cmp166)&1); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval168=(($conv167)==(1)); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool169=(($expval168)|0)!=0; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool169) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 62: 
      var $139=$C1; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $140=$R; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child171=(($140+16)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx172=(($child171+4)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx172)>>2)]=$139; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $141=$R; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $142=$C1; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent173=(($142+24)|0); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent173)>>2)]=$141; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 64; break; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 63: 
      _abort(); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 64: 
      __label__ = 65; break; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 65: 
      __label__ = 67; break; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 66: 
      _abort(); //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 67: 
      __label__ = 68; break; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 68: 
      __label__ = 69; break; //@line 4770 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 69: 
      __label__ = 70; break;
    case 70: 
      __label__ = 74; break; //@line 4771 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 71: 
      var $143=$next; //@line 4772 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head183=(($143+4)|0); //@line 4772 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $144=HEAP32[(($head183)>>2)]; //@line 4772 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and184=$144 & 3; //@line 4772 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp185=(($and184)|0)==3; //@line 4772 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp185) { __label__ = 72; break; } else { __label__ = 73; break; } //@line 4772 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 72: 
      var $145=$psize; //@line 4773 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$145; //@line 4773 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $146=$next; //@line 4774 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head188=(($146+4)|0); //@line 4774 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $147=HEAP32[(($head188)>>2)]; //@line 4774 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and189=$147 & -2; //@line 4774 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head188)>>2)]=$and189; //@line 4774 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $148=$psize; //@line 4774 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or=$148 | 1; //@line 4774 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $149=$p; //@line 4774 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head190=(($149+4)|0); //@line 4774 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head190)>>2)]=$or; //@line 4774 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $150=$psize; //@line 4774 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $151=$p; //@line 4774 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $152=$151; //@line 4774 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $153=$psize; //@line 4774 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr191=(($152+$153)|0); //@line 4774 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $154=$add_ptr191; //@line 4774 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $prev_foot192=(($154)|0); //@line 4774 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot192)>>2)]=$150; //@line 4774 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 196; break; //@line 4775 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 73: 
      __label__ = 74; break;
    case 74: 
      __label__ = 76; break; //@line 4777 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 75: 
      __label__ = 195; break; //@line 4779 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 76: 
      __label__ = 77; break;
    case 77: 
      __label__ = 78; break; //@line 4781 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 78: 
      var $155=$p; //@line 4783 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $156=$155; //@line 4783 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $157=$next; //@line 4783 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $158=$157; //@line 4783 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp199=(($156)>>>0) < (($158)>>>0); //@line 4783 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp199) { __label__ = 79; break; } else { var $161 = 0;__label__ = 80; break; } //@line 4783 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 79: 
      var $159=$next; //@line 4783 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head202=(($159+4)|0); //@line 4783 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $160=HEAP32[(($head202)>>2)]; //@line 4783 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and203=$160 & 1; //@line 4783 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool204=(($and203)|0)!=0; //@line 4783 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $161 = $tobool204;__label__ = 80; break;
    case 80: 
      var $161;
      var $land_ext206=(($161)&1);
      var $expval207=(($land_ext206)==(1));
      var $tobool208=(($expval207)|0)!=0;
      if ($tobool208) { __label__ = 81; break; } else { __label__ = 193; break; }
    case 81: 
      var $162=$next; //@line 4784 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head210=(($162+4)|0); //@line 4784 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $163=HEAP32[(($head210)>>2)]; //@line 4784 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and211=$163 & 2; //@line 4784 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool212=(($and211)|0)!=0; //@line 4784 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool212) { __label__ = 154; break; } else { __label__ = 82; break; } //@line 4784 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 82: 
      var $164=$next; //@line 4785 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $165=HEAP32[((((__gm_+24)|0))>>2)]; //@line 4785 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp214=(($164)|0)==(($165)|0); //@line 4785 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp214) { __label__ = 83; break; } else { __label__ = 88; break; } //@line 4785 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 83: 
      var $166=$psize; //@line 4786 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $167=HEAP32[((((__gm_+12)|0))>>2)]; //@line 4786 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add217=((($167)+($166))|0); //@line 4786 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+12)|0))>>2)]=$add217; //@line 4786 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $tsize=$add217; //@line 4786 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $168=$p; //@line 4787 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+24)|0))>>2)]=$168; //@line 4787 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $169=$tsize; //@line 4788 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or218=$169 | 1; //@line 4788 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $170=$p; //@line 4788 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head219=(($170+4)|0); //@line 4788 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head219)>>2)]=$or218; //@line 4788 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $171=$p; //@line 4789 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $172=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4789 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp220=(($171)|0)==(($172)|0); //@line 4789 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp220) { __label__ = 84; break; } else { __label__ = 85; break; } //@line 4789 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 84: 
      HEAP32[((((__gm_+20)|0))>>2)]=0; //@line 4790 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=0; //@line 4791 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 85; break; //@line 4792 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 85: 
      var $173=$tsize; //@line 4793 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $174=HEAPU32[((((__gm_+28)|0))>>2)]; //@line 4793 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp224=(($173)>>>0) > (($174)>>>0); //@line 4793 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp224) { __label__ = 86; break; } else { __label__ = 87; break; } //@line 4793 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 86: 
      var $call=_sys_trim(__gm_, 0); //@line 4794 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 87; break; //@line 4794 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 87: 
      __label__ = 196; break; //@line 4795 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 88: 
      var $175=$next; //@line 4797 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $176=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4797 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp229=(($175)|0)==(($176)|0); //@line 4797 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp229) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 4797 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $177=$psize; //@line 4798 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $178=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4798 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add232=((($178)+($177))|0); //@line 4798 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$add232; //@line 4798 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $dsize=$add232; //@line 4798 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $179=$p; //@line 4799 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=$179; //@line 4799 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $180=$dsize; //@line 4800 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or233=$180 | 1; //@line 4800 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $181=$p; //@line 4800 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head234=(($181+4)|0); //@line 4800 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head234)>>2)]=$or233; //@line 4800 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $182=$dsize; //@line 4800 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $183=$p; //@line 4800 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $184=$183; //@line 4800 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $185=$dsize; //@line 4800 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr235=(($184+$185)|0); //@line 4800 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $186=$add_ptr235; //@line 4800 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $prev_foot236=(($186)|0); //@line 4800 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot236)>>2)]=$182; //@line 4800 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 196; break; //@line 4801 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $187=$next; //@line 4804 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head238=(($187+4)|0); //@line 4804 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $188=HEAP32[(($head238)>>2)]; //@line 4804 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and239=$188 & -8; //@line 4804 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $nsize=$and239; //@line 4804 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $189=$nsize; //@line 4805 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $190=$psize; //@line 4805 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add240=((($190)+($189))|0); //@line 4805 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $psize=$add240; //@line 4805 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $191=$nsize; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr241=$191 >>> 3; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp242=(($shr241)>>>0) < 32; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp242) { __label__ = 91; break; } else { __label__ = 103; break; } //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 91: 
      var $192=$next; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd246=(($192+8)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $193=HEAP32[(($fd246)>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F245=$193; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $194=$next; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk248=(($194+12)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $195=HEAP32[(($bk248)>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $B247=$195; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $196=$nsize; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr250=$196 >>> 3; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $I249=$shr250; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $197=$F245; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $198=$B247; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp251=(($197)|0)==(($198)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp251) { __label__ = 92; break; } else { __label__ = 93; break; } //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 92: 
      var $199=$I249; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl254=1 << $199; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $neg255=$shl254 ^ -1; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $200=HEAP32[((((__gm_)|0))>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and256=$200 & $neg255; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$and256; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 102; break; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 93: 
      var $201=$F245; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $202=$I249; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl258=$202 << 1; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx259=((((__gm_+40)|0)+($shl258<<2))|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $203=$arrayidx259; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $204=$203; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp260=(($201)|0)==(($204)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp260) { __label__ = 95; break; } else { __label__ = 94; break; } //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 94: 
      var $205=$F245; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $206=$205; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $207=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp263=(($206)>>>0) >= (($207)>>>0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp263) { __label__ = 95; break; } else { var $216 = 0;__label__ = 98; break; } //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 95: 
      var $208=$B247; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $209=$I249; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl266=$209 << 1; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx267=((((__gm_+40)|0)+($shl266<<2))|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $210=$arrayidx267; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $211=$210; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp268=(($208)|0)==(($211)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp268) { var $215 = 1;__label__ = 97; break; } else { __label__ = 96; break; } //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 96: 
      var $212=$B247; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $213=$212; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $214=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp271=(($213)>>>0) >= (($214)>>>0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $215 = $cmp271;__label__ = 97; break; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 97: 
      var $215;
      var $216 = $215;__label__ = 98; break;
    case 98: 
      var $216;
      var $land_ext275=(($216)&1);
      var $expval276=(($land_ext275)==(1));
      var $tobool277=(($expval276)|0)!=0;
      if ($tobool277) { __label__ = 99; break; } else { __label__ = 100; break; }
    case 99: 
      var $217=$B247; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $218=$F245; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk279=(($218+12)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk279)>>2)]=$217; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $219=$F245; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $220=$B247; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd280=(($220+8)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd280)>>2)]=$219; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 101; break; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 100: 
      _abort(); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 101: 
      __label__ = 102; break;
    case 102: 
      __label__ = 149; break; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 103: 
      var $221=$next; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $222=$221; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $TP285=$222; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $223=$TP285; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent287=(($223+24)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $224=HEAP32[(($parent287)>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $XP286=$224; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $225=$TP285; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk289=(($225+12)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $226=HEAP32[(($bk289)>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $227=$TP285; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp290=(($226)|0)!=(($227)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp290) { __label__ = 104; break; } else { __label__ = 108; break; } //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 104: 
      var $228=$TP285; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd294=(($228+8)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $229=HEAP32[(($fd294)>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F293=$229; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $230=$TP285; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk295=(($230+12)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $231=HEAP32[(($bk295)>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $R288=$231; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $232=$F293; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $233=$232; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $234=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp296=(($233)>>>0) >= (($234)>>>0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv297=(($cmp296)&1); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval298=(($conv297)==(1)); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool299=(($expval298)|0)!=0; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool299) { __label__ = 105; break; } else { __label__ = 106; break; } //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 105: 
      var $235=$R288; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $236=$F293; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk301=(($236+12)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk301)>>2)]=$235; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $237=$F293; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $238=$R288; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd302=(($238+8)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd302)>>2)]=$237; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 107; break; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 106: 
      _abort(); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 107: 
      __label__ = 120; break; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 108: 
      var $239=$TP285; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child307=(($239+16)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx308=(($child307+4)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $RP306=$arrayidx308; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $240=HEAP32[(($arrayidx308)>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $R288=$240; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp309=(($240)|0)!=0; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp309) { __label__ = 110; break; } else { __label__ = 109; break; } //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 109: 
      var $241=$TP285; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child312=(($241+16)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx313=(($child312)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $RP306=$arrayidx313; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $242=HEAP32[(($arrayidx313)>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $R288=$242; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp314=(($242)|0)!=0; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp314) { __label__ = 110; break; } else { __label__ = 119; break; } //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 110: 
      __label__ = 111; break; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 111: 
      var $243=$R288; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child319=(($243+16)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx320=(($child319+4)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $CP317=$arrayidx320; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $244=HEAP32[(($arrayidx320)>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp321=(($244)|0)!=0; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp321) { var $247 = 1;__label__ = 113; break; } else { __label__ = 112; break; } //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 112: 
      var $245=$R288; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child324=(($245+16)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx325=(($child324)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $CP317=$arrayidx325; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $246=HEAP32[(($arrayidx325)>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp326=(($246)|0)!=0; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $247 = $cmp326;__label__ = 113; break; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 113: 
      var $247;
      if ($247) { __label__ = 114; break; } else { __label__ = 115; break; } //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 114: 
      var $248=$CP317; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $RP306=$248; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $249=HEAP32[(($248)>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $R288=$249; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 111; break; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 115: 
      var $250=$RP306; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $251=$250; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $252=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp331=(($251)>>>0) >= (($252)>>>0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv332=(($cmp331)&1); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval333=(($conv332)==(1)); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool334=(($expval333)|0)!=0; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool334) { __label__ = 116; break; } else { __label__ = 117; break; } //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 116: 
      var $253=$RP306; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($253)>>2)]=0; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 118; break; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 117: 
      _abort(); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 118: 
      __label__ = 119; break; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 119: 
      __label__ = 120; break;
    case 120: 
      var $254=$XP286; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp340=(($254)|0)!=0; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp340) { __label__ = 121; break; } else { __label__ = 148; break; } //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 121: 
      var $255=$TP285; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $index344=(($255+28)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $256=HEAP32[(($index344)>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx345=((((__gm_+304)|0)+($256<<2))|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $H343=$arrayidx345; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $257=$TP285; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $258=$H343; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $259=HEAP32[(($258)>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp346=(($257)|0)==(($259)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp346) { __label__ = 122; break; } else { __label__ = 125; break; } //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 122: 
      var $260=$R288; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $261=$H343; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($261)>>2)]=$260; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp349=(($260)|0)==0; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp349) { __label__ = 123; break; } else { __label__ = 124; break; } //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 123: 
      var $262=$TP285; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $index352=(($262+28)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $263=HEAP32[(($index352)>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl353=1 << $263; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $neg354=$shl353 ^ -1; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $264=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and355=$264 & $neg354; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+4)|0))>>2)]=$and355; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 124; break; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 124: 
      __label__ = 132; break; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 125: 
      var $265=$XP286; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $266=$265; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $267=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp358=(($266)>>>0) >= (($267)>>>0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv359=(($cmp358)&1); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval360=(($conv359)==(1)); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool361=(($expval360)|0)!=0; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool361) { __label__ = 126; break; } else { __label__ = 130; break; } //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 126: 
      var $268=$XP286; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child363=(($268+16)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx364=(($child363)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $269=HEAP32[(($arrayidx364)>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $270=$TP285; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp365=(($269)|0)==(($270)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp365) { __label__ = 127; break; } else { __label__ = 128; break; } //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 127: 
      var $271=$R288; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $272=$XP286; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child368=(($272+16)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx369=(($child368)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx369)>>2)]=$271; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 129; break; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 128: 
      var $273=$R288; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $274=$XP286; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child371=(($274+16)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx372=(($child371+4)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx372)>>2)]=$273; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 129; break;
    case 129: 
      __label__ = 131; break; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 130: 
      _abort(); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 131: 
      __label__ = 132; break;
    case 132: 
      var $275=$R288; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp377=(($275)|0)!=0; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp377) { __label__ = 133; break; } else { __label__ = 147; break; } //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 133: 
      var $276=$R288; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $277=$276; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $278=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp380=(($277)>>>0) >= (($278)>>>0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv381=(($cmp380)&1); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval382=(($conv381)==(1)); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool383=(($expval382)|0)!=0; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool383) { __label__ = 134; break; } else { __label__ = 145; break; } //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 134: 
      var $279=$XP286; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $280=$R288; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent387=(($280+24)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent387)>>2)]=$279; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $281=$TP285; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child388=(($281+16)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx389=(($child388)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $282=HEAP32[(($arrayidx389)>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $C0385=$282; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp390=(($282)|0)!=0; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp390) { __label__ = 135; break; } else { __label__ = 139; break; } //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 135: 
      var $283=$C0385; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $284=$283; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $285=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp393=(($284)>>>0) >= (($285)>>>0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv394=(($cmp393)&1); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval395=(($conv394)==(1)); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool396=(($expval395)|0)!=0; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool396) { __label__ = 136; break; } else { __label__ = 137; break; } //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 136: 
      var $286=$C0385; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $287=$R288; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child398=(($287+16)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx399=(($child398)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx399)>>2)]=$286; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $288=$R288; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $289=$C0385; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent400=(($289+24)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent400)>>2)]=$288; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 138; break; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 137: 
      _abort(); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 138: 
      __label__ = 139; break; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 139: 
      var $290=$TP285; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child404=(($290+16)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx405=(($child404+4)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $291=HEAP32[(($arrayidx405)>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $C1386=$291; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp406=(($291)|0)!=0; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp406) { __label__ = 140; break; } else { __label__ = 144; break; } //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 140: 
      var $292=$C1386; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $293=$292; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $294=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp409=(($293)>>>0) >= (($294)>>>0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv410=(($cmp409)&1); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval411=(($conv410)==(1)); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool412=(($expval411)|0)!=0; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool412) { __label__ = 141; break; } else { __label__ = 142; break; } //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 141: 
      var $295=$C1386; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $296=$R288; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child414=(($296+16)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx415=(($child414+4)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx415)>>2)]=$295; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $297=$R288; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $298=$C1386; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent416=(($298+24)|0); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent416)>>2)]=$297; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 143; break; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 142: 
      _abort(); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 143: 
      __label__ = 144; break; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 144: 
      __label__ = 146; break; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 145: 
      _abort(); //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 146: 
      __label__ = 147; break; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 147: 
      __label__ = 148; break; //@line 4806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 148: 
      __label__ = 149; break;
    case 149: 
      var $299=$psize; //@line 4807 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or425=$299 | 1; //@line 4807 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $300=$p; //@line 4807 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head426=(($300+4)|0); //@line 4807 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head426)>>2)]=$or425; //@line 4807 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $301=$psize; //@line 4807 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $302=$p; //@line 4807 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $303=$302; //@line 4807 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $304=$psize; //@line 4807 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr427=(($303+$304)|0); //@line 4807 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $305=$add_ptr427; //@line 4807 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $prev_foot428=(($305)|0); //@line 4807 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot428)>>2)]=$301; //@line 4807 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $306=$p; //@line 4808 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $307=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4808 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp429=(($306)|0)==(($307)|0); //@line 4808 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp429) { __label__ = 150; break; } else { __label__ = 151; break; } //@line 4808 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 150: 
      var $308=$psize; //@line 4809 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$308; //@line 4809 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 196; break; //@line 4810 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 151: 
      __label__ = 152; break;
    case 152: 
      __label__ = 153; break;
    case 153: 
      __label__ = 155; break; //@line 4813 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 154: 
      var $309=$next; //@line 4815 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head436=(($309+4)|0); //@line 4815 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $310=HEAP32[(($head436)>>2)]; //@line 4815 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and437=$310 & -2; //@line 4815 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head436)>>2)]=$and437; //@line 4815 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $311=$psize; //@line 4815 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or438=$311 | 1; //@line 4815 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $312=$p; //@line 4815 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head439=(($312+4)|0); //@line 4815 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head439)>>2)]=$or438; //@line 4815 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $313=$psize; //@line 4815 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $314=$p; //@line 4815 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $315=$314; //@line 4815 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $316=$psize; //@line 4815 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr440=(($315+$316)|0); //@line 4815 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $317=$add_ptr440; //@line 4815 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $prev_foot441=(($317)|0); //@line 4815 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot441)>>2)]=$313; //@line 4815 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 155; break;
    case 155: 
      var $318=$psize; //@line 4817 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr443=$318 >>> 3; //@line 4817 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp444=(($shr443)>>>0) < 32; //@line 4817 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp444) { __label__ = 156; break; } else { __label__ = 163; break; } //@line 4817 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 156: 
      var $319=$psize; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr448=$319 >>> 3; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $I447=$shr448; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $320=$I447; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl450=$320 << 1; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx451=((((__gm_+40)|0)+($shl450<<2))|0); //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $321=$arrayidx451; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $322=$321; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $B449=$322; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $323=$B449; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F452=$323; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $324=HEAP32[((((__gm_)|0))>>2)]; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $325=$I447; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl453=1 << $325; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and454=$324 & $shl453; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool455=(($and454)|0)!=0; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool455) { __label__ = 158; break; } else { __label__ = 157; break; } //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 157: 
      var $326=$I447; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl457=1 << $326; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $327=HEAP32[((((__gm_)|0))>>2)]; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or458=$327 | $shl457; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$or458; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 162; break; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 158: 
      var $328=$B449; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd460=(($328+8)|0); //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $329=HEAP32[(($fd460)>>2)]; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $330=$329; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $331=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp461=(($330)>>>0) >= (($331)>>>0); //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv462=(($cmp461)&1); //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval463=(($conv462)==(1)); //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool464=(($expval463)|0)!=0; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool464) { __label__ = 159; break; } else { __label__ = 160; break; } //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 159: 
      var $332=$B449; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd466=(($332+8)|0); //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $333=HEAP32[(($fd466)>>2)]; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F452=$333; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 161; break; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 160: 
      _abort(); //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 161: 
      __label__ = 162; break;
    case 162: 
      var $334=$p; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $335=$B449; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd470=(($335+8)|0); //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd470)>>2)]=$334; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $336=$p; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $337=$F452; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk471=(($337+12)|0); //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk471)>>2)]=$336; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $338=$F452; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $339=$p; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd472=(($339+8)|0); //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd472)>>2)]=$338; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $340=$B449; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $341=$p; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk473=(($341+12)|0); //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk473)>>2)]=$340; //@line 4818 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 192; break; //@line 4820 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 163: 
      var $342=$p; //@line 4822 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $343=$342; //@line 4822 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $tp=$343; //@line 4822 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $344=$psize; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr477=$344 >>> 8; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $X=$shr477; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $345=$X; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp478=(($345)|0)==0; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp478) { __label__ = 164; break; } else { __label__ = 165; break; } //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 164: 
      $I476=0; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 169; break; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 165: 
      var $346=$X; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp482=(($346)>>>0) > 65535; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp482) { __label__ = 166; break; } else { __label__ = 167; break; } //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 166: 
      $I476=31; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 168; break; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 167: 
      var $347=$X; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$347; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $348=$Y; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub=((($348)-(256))|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr486=$sub >>> 16; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and487=$shr486 & 8; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$and487; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $349=$N; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $350=$Y; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl488=$350 << $349; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shl488; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub489=((($shl488)-(4096))|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr490=$sub489 >>> 16; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and491=$shr490 & 4; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$and491; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $351=$K; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $352=$N; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add492=((($352)+($351))|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$add492; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $353=$K; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $354=$Y; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl493=$354 << $353; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shl493; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub494=((($shl493)-(16384))|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr495=$sub494 >>> 16; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and496=$shr495 & 2; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$and496; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $355=$N; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add497=((($355)+($and496))|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$add497; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $356=$N; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub498=(((14)-($356))|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $357=$K; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $358=$Y; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl499=$358 << $357; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shl499; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr500=$shl499 >>> 15; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add501=((($sub498)+($shr500))|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$add501; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $359=$K; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl502=$359 << 1; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $360=$psize; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $361=$K; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add503=((($361)+(7))|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr504=$360 >>> (($add503)>>>0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and505=$shr504 & 1; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add506=((($shl502)+($and505))|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $I476=$add506; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 168; break;
    case 168: 
      __label__ = 169; break;
    case 169: 
      var $362=$I476; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx509=((((__gm_+304)|0)+($362<<2))|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $H475=$arrayidx509; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $363=$I476; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $364=$tp; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $index510=(($364+28)|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($index510)>>2)]=$363; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $365=$tp; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child511=(($365+16)|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx512=(($child511+4)|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx512)>>2)]=0; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $366=$tp; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child513=(($366+16)|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx514=(($child513)|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx514)>>2)]=0; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $367=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $368=$I476; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl515=1 << $368; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and516=$367 & $shl515; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool517=(($and516)|0)!=0; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool517) { __label__ = 171; break; } else { __label__ = 170; break; } //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 170: 
      var $369=$I476; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl519=1 << $369; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $370=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or520=$370 | $shl519; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+4)|0))>>2)]=$or520; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $371=$tp; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $372=$H475; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($372)>>2)]=$371; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $373=$H475; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $374=$373; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $375=$tp; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent521=(($375+24)|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent521)>>2)]=$374; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $376=$tp; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $377=$tp; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk522=(($377+12)|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk522)>>2)]=$376; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $378=$tp; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd523=(($378+8)|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd523)>>2)]=$376; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 189; break; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 171: 
      var $379=$H475; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $380=HEAP32[(($379)>>2)]; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $T=$380; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $381=$psize; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $382=$I476; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp526=(($382)|0)==31; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp526) { __label__ = 172; break; } else { __label__ = 173; break; } //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 172: 
      var $cond = 0;__label__ = 174; break; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 173: 
      var $383=$I476; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr528=$383 >>> 1; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add529=((($shr528)+(8))|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub530=((($add529)-(2))|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub531=(((31)-($sub530))|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond = $sub531;__label__ = 174; break; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 174: 
      var $cond; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl532=$381 << $cond; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K525=$shl532; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 175; break; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 175: 
      var $384=$T; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head533=(($384+4)|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $385=HEAP32[(($head533)>>2)]; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and534=$385 & -8; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $386=$psize; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp535=(($and534)|0)!=(($386)|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp535) { __label__ = 176; break; } else { __label__ = 182; break; } //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 176: 
      var $387=$K525; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr538=$387 >>> 31; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and539=$shr538 & 1; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $388=$T; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child540=(($388+16)|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx541=(($child540+($and539<<2))|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $C=$arrayidx541; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $389=$K525; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl542=$389 << 1; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K525=$shl542; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $390=$C; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $391=HEAP32[(($390)>>2)]; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp543=(($391)|0)!=0; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp543) { __label__ = 177; break; } else { __label__ = 178; break; } //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 177: 
      var $392=$C; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $393=HEAP32[(($392)>>2)]; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $T=$393; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 181; break; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 178: 
      var $394=$C; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $395=$394; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $396=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp547=(($395)>>>0) >= (($396)>>>0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv548=(($cmp547)&1); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval549=(($conv548)==(1)); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool550=(($expval549)|0)!=0; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool550) { __label__ = 179; break; } else { __label__ = 180; break; } //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 179: 
      var $397=$tp; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $398=$C; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($398)>>2)]=$397; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $399=$T; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $400=$tp; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent552=(($400+24)|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent552)>>2)]=$399; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $401=$tp; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $402=$tp; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk553=(($402+12)|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk553)>>2)]=$401; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $403=$tp; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd554=(($403+8)|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd554)>>2)]=$401; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 188; break; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 180: 
      _abort(); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 181: 
      __label__ = 187; break; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 182: 
      var $404=$T; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd559=(($404+8)|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $405=HEAP32[(($fd559)>>2)]; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F558=$405; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $406=$T; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $407=$406; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $408=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp560=(($407)>>>0) >= (($408)>>>0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp560) { __label__ = 183; break; } else { var $412 = 0;__label__ = 184; break; } //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 183: 
      var $409=$F558; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $410=$409; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $411=HEAPU32[((((__gm_+16)|0))>>2)]; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp563=(($410)>>>0) >= (($411)>>>0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $412 = $cmp563;__label__ = 184; break;
    case 184: 
      var $412;
      var $land_ext566=(($412)&1);
      var $expval567=(($land_ext566)==(1));
      var $tobool568=(($expval567)|0)!=0;
      if ($tobool568) { __label__ = 185; break; } else { __label__ = 186; break; }
    case 185: 
      var $413=$tp; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $414=$F558; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk570=(($414+12)|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk570)>>2)]=$413; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $415=$T; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd571=(($415+8)|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd571)>>2)]=$413; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $416=$F558; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $417=$tp; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd572=(($417+8)|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd572)>>2)]=$416; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $418=$T; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $419=$tp; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk573=(($419+12)|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk573)>>2)]=$418; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $420=$tp; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent574=(($420+24)|0); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent574)>>2)]=0; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 188; break; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 186: 
      _abort(); //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 187: 
      __label__ = 175; break; //@line 4823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 188: 
      __label__ = 189; break;
    case 189: 
      var $421=HEAP32[((((__gm_+32)|0))>>2)]; //@line 4825 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $dec=((($421)-(1))|0); //@line 4825 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+32)|0))>>2)]=$dec; //@line 4825 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp578=(($dec)|0)==0; //@line 4825 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp578) { __label__ = 190; break; } else { __label__ = 191; break; } //@line 4825 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 190: 
      var $call581=_release_unused_segments(__gm_); //@line 4826 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 191; break; //@line 4826 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 191: 
      __label__ = 192; break;
    case 192: 
      __label__ = 196; break; //@line 4828 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 193: 
      __label__ = 194; break; //@line 4830 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 194: 
      __label__ = 195; break; //@line 4830 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 195: 
      _abort(); //@line 4832 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4832 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 196: 
      __label__ = 197; break; //@line 4836 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 197: 
      ;
      return; //@line 4840 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
Module["_free"] = _free;_free["X"]=1;

function _sys_trim($m, $pad) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $m_addr;
      var $pad_addr;
      var $released;
      var $unit;
      var $extra;
      var $sp;
      var $old_br;
      var $rel_br;
      var $new_br;
      $m_addr=$m;
      $pad_addr=$pad;
      $released=0; //@line 4126 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $0=HEAP32[((((_mparams)|0))>>2)]; //@line 4127 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)|0)!=0; //@line 4127 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { var $1 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 4127 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $call=_init_mparams(); //@line 4127 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($call)|0)!=0; //@line 4127 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $1 = $tobool;__label__ = 4; break; //@line 4127 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $1;
      var $lor_ext=(($1)&1); //@line 4127 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2=$pad_addr; //@line 4128 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp1=(($2)>>>0) < 4294967232; //@line 4128 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 26; break; } //@line 4128 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $3=$m_addr; //@line 4128 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $top=(($3+24)|0); //@line 4128 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $4=HEAP32[(($top)>>2)]; //@line 4128 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp2=(($4)|0)!=0; //@line 4128 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp2) { __label__ = 6; break; } else { __label__ = 26; break; } //@line 4128 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $5=$pad_addr; //@line 4129 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add=((($5)+(40))|0); //@line 4129 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $pad_addr=$add; //@line 4129 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $6=$m_addr; //@line 4131 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $topsize=(($6+12)|0); //@line 4131 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $7=HEAPU32[(($topsize)>>2)]; //@line 4131 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $8=$pad_addr; //@line 4131 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp3=(($7)>>>0) > (($8)>>>0); //@line 4131 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp3) { __label__ = 7; break; } else { __label__ = 22; break; } //@line 4131 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $9=HEAP32[((((_mparams+8)|0))>>2)]; //@line 4133 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $unit=$9; //@line 4133 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $10=$m_addr; //@line 4135 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $topsize5=(($10+12)|0); //@line 4135 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $11=HEAP32[(($topsize5)>>2)]; //@line 4135 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $12=$pad_addr; //@line 4135 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub=((($11)-($12))|0); //@line 4135 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $13=$unit; //@line 4135 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub6=((($13)-(1))|0); //@line 4135 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add7=((($sub)+($sub6))|0); //@line 4135 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $14=$unit; //@line 4135 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $div=Math.floor(((($add7)>>>0))/((($14)>>>0))); //@line 4135 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub8=((($div)-(1))|0); //@line 4135 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $15=$unit; //@line 4135 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $mul=((($sub8)*($15))|0); //@line 4135 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $extra=$mul; //@line 4135 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $16=$m_addr; //@line 4136 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $17=$m_addr; //@line 4136 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $top9=(($17+24)|0); //@line 4136 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $18=HEAP32[(($top9)>>2)]; //@line 4136 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $19=$18; //@line 4136 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call10=_segment_holding($16, $19); //@line 4136 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $sp=$call10; //@line 4136 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $20=$sp; //@line 4138 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sflags=(($20+12)|0); //@line 4138 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $21=HEAP32[(($sflags)>>2)]; //@line 4138 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and=$21 & 8; //@line 4138 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool11=(($and)|0)!=0; //@line 4138 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool11) { __label__ = 19; break; } else { __label__ = 8; break; } //@line 4138 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $22=$sp; //@line 4139 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sflags13=(($22+12)|0); //@line 4139 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $23=HEAP32[(($sflags13)>>2)]; //@line 4139 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and14=$23 & 0; //@line 4139 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool15=(($and14)|0)!=0; //@line 4139 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool15) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4139 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 9: 
      __label__ = 18; break; //@line 4150 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $24=$extra; //@line 4152 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp17=(($24)>>>0) >= 2147483647; //@line 4152 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp17) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4152 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $25=$unit; //@line 4153 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub19=(((-2147483648)-($25))|0); //@line 4153 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $extra=$sub19; //@line 4153 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 4153 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $call20=_sbrk(0); //@line 4157 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $old_br=$call20; //@line 4157 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $26=$old_br; //@line 4158 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $27=$sp; //@line 4158 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $base=(($27)|0); //@line 4158 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $28=HEAP32[(($base)>>2)]; //@line 4158 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $29=$sp; //@line 4158 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $size=(($29+4)|0); //@line 4158 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $30=HEAP32[(($size)>>2)]; //@line 4158 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($28+$30)|0); //@line 4158 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp21=(($26)|0)==(($add_ptr)|0); //@line 4158 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp21) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 4158 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $31=$extra; //@line 4159 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub23=(((-$31))|0); //@line 4159 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call24=_sbrk($sub23); //@line 4159 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $rel_br=$call24; //@line 4159 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call25=_sbrk(0); //@line 4160 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $new_br=$call25; //@line 4160 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $32=$rel_br; //@line 4161 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp26=(($32)|0)!=-1; //@line 4161 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp26) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 4161 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $33=$new_br; //@line 4161 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $34=$old_br; //@line 4161 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp28=(($33)>>>0) < (($34)>>>0); //@line 4161 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp28) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 4161 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $35=$old_br; //@line 4162 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $36=$new_br; //@line 4162 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_lhs_cast=$35; //@line 4162 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_rhs_cast=$36; //@line 4162 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 4162 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $released=$sub_ptr_sub; //@line 4162 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 16; break; //@line 4162 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 16: 
      __label__ = 17; break; //@line 4163 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 17: 
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break; //@line 4167 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $37=$released; //@line 4169 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp34=(($37)|0)!=0; //@line 4169 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp34) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 4169 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $38=$released; //@line 4170 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $39=$sp; //@line 4170 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $size36=(($39+4)|0); //@line 4170 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $40=HEAP32[(($size36)>>2)]; //@line 4170 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub37=((($40)-($38))|0); //@line 4170 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($size36)>>2)]=$sub37; //@line 4170 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $41=$released; //@line 4171 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $42=$m_addr; //@line 4171 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $footprint=(($42+432)|0); //@line 4171 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $43=HEAP32[(($footprint)>>2)]; //@line 4171 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub38=((($43)-($41))|0); //@line 4171 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($footprint)>>2)]=$sub38; //@line 4171 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $44=$m_addr; //@line 4172 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $45=$m_addr; //@line 4172 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $top39=(($45+24)|0); //@line 4172 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $46=HEAP32[(($top39)>>2)]; //@line 4172 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $47=$m_addr; //@line 4172 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $topsize40=(($47+12)|0); //@line 4172 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $48=HEAP32[(($topsize40)>>2)]; //@line 4172 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $49=$released; //@line 4172 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub41=((($48)-($49))|0); //@line 4172 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      _init_top($44, $46, $sub41); //@line 4172 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 4174 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 21: 
      __label__ = 22; break; //@line 4175 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $50=$released; //@line 4182 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp44=(($50)|0)==0; //@line 4182 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp44) { __label__ = 23; break; } else { __label__ = 25; break; } //@line 4182 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $51=$m_addr; //@line 4182 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $topsize46=(($51+12)|0); //@line 4182 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $52=HEAPU32[(($topsize46)>>2)]; //@line 4182 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $53=$m_addr; //@line 4182 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $trim_check=(($53+28)|0); //@line 4182 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $54=HEAPU32[(($trim_check)>>2)]; //@line 4182 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp47=(($52)>>>0) > (($54)>>>0); //@line 4182 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp47) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 4182 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $55=$m_addr; //@line 4183 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $trim_check49=(($55+28)|0); //@line 4183 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($trim_check49)>>2)]=-1; //@line 4183 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 25; break; //@line 4183 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 25: 
      __label__ = 26; break; //@line 4184 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $56=$released; //@line 4186 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp52=(($56)|0)!=0; //@line 4186 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond=$cmp52 ? 1 : 0; //@line 4186 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      ;
      return $cond; //@line 4186 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_sys_trim["X"]=1;

function _calloc($n_elements, $elem_size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $n_elements_addr;
      var $elem_size_addr;
      var $mem;
      var $req;
      $n_elements_addr=$n_elements;
      $elem_size_addr=$elem_size;
      $req=0; //@line 4844 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $0=$n_elements_addr; //@line 4845 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)|0)!=0; //@line 4845 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 4845 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $1=$n_elements_addr; //@line 4846 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2=$elem_size_addr; //@line 4846 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $mul=((($1)*($2))|0); //@line 4846 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $req=$mul; //@line 4846 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $3=$n_elements_addr; //@line 4847 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $4=$elem_size_addr; //@line 4847 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or=$3 | $4; //@line 4847 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and=$or & -65536; //@line 4847 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($and)|0)!=0; //@line 4847 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 4847 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $5=$req; //@line 4847 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $6=$n_elements_addr; //@line 4847 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $div=Math.floor(((($5)>>>0))/((($6)>>>0))); //@line 4847 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $7=$elem_size_addr; //@line 4847 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp1=(($div)|0)!=(($7)|0); //@line 4847 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4847 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 5: 
      $req=-1; //@line 4849 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 6; break; //@line 4849 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 6: 
      __label__ = 7; break; //@line 4850 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $8=$req; //@line 4851 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call=_malloc($8); //@line 4851 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $mem=$call; //@line 4851 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $9=$mem; //@line 4852 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp4=(($9)|0)!=0; //@line 4852 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp4) { __label__ = 8; break; } else { __label__ = 10; break; } //@line 4852 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $10=$mem; //@line 4852 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=((($10)-(8))|0); //@line 4852 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $11=$add_ptr; //@line 4852 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head=(($11+4)|0); //@line 4852 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $12=HEAP32[(($head)>>2)]; //@line 4852 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and6=$12 & 3; //@line 4852 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp7=(($and6)|0)==0; //@line 4852 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp7) { __label__ = 10; break; } else { __label__ = 9; break; } //@line 4852 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $13=$mem; //@line 4853 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $14=$req; //@line 4853 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      _memset($13, 0, $14, 1); //@line 4853 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 10; break; //@line 4853 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $15=$mem; //@line 4854 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      ;
      return $15; //@line 4854 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _realloc($oldmem, $bytes) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $oldmem_addr;
      var $bytes_addr;
      var $m;
      $oldmem_addr=$oldmem;
      $bytes_addr=$bytes;
      var $0=$oldmem_addr; //@line 4858 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)|0)==0; //@line 4858 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4858 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $1=$bytes_addr; //@line 4859 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call=_malloc($1); //@line 4859 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $retval=$call; //@line 4859 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 5; break; //@line 4859 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      $m=__gm_; //@line 4868 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2=$m; //@line 4876 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $3=$oldmem_addr; //@line 4876 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $4=$bytes_addr; //@line 4876 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call1=_internal_realloc($2, $3, $4); //@line 4876 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $retval=$call1; //@line 4876 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 5; break; //@line 4876 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $5=$retval; //@line 4878 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      ;
      return $5; //@line 4878 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _release_unused_segments($m) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $m_addr;
      var $released;
      var $nsegs;
      var $pred;
      var $sp;
      var $base;
      var $size;
      var $next3;
      var $p;
      var $psize;
      var $tp;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $H147;
      var $I;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K197;
      var $C;
      var $F235;
      $m_addr=$m;
      $released=0; //@line 4079 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $nsegs=0; //@line 4080 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $0=$m_addr; //@line 4081 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $seg=(($0+444)|0); //@line 4081 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $pred=$seg; //@line 4081 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $1=$pred; //@line 4082 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $next=(($1+8)|0); //@line 4082 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2=HEAP32[(($next)>>2)]; //@line 4082 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $sp=$2; //@line 4082 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 3; break; //@line 4083 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $3=$sp; //@line 4083 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($3)|0)!=0; //@line 4083 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 4; break; } else { __label__ = 88; break; } //@line 4083 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $4=$sp; //@line 4084 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $base1=(($4)|0); //@line 4084 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $5=HEAP32[(($base1)>>2)]; //@line 4084 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $base=$5; //@line 4084 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $6=$sp; //@line 4085 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $size2=(($6+4)|0); //@line 4085 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $7=HEAP32[(($size2)>>2)]; //@line 4085 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $size=$7; //@line 4085 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $8=$sp; //@line 4086 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $next4=(($8+8)|0); //@line 4086 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $9=HEAP32[(($next4)>>2)]; //@line 4086 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $next3=$9; //@line 4086 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $10=$nsegs; //@line 4087 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $inc=((($10)+(1))|0); //@line 4087 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $nsegs=$inc; //@line 4087 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $11=$sp; //@line 4088 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sflags=(($11+12)|0); //@line 4088 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $12=HEAP32[(($sflags)>>2)]; //@line 4088 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and=$12 & 0; //@line 4088 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($and)|0)!=0; //@line 4088 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool) { __label__ = 5; break; } else { __label__ = 87; break; } //@line 4088 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $13=$sp; //@line 4088 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sflags5=(($13+12)|0); //@line 4088 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $14=HEAP32[(($sflags5)>>2)]; //@line 4088 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and6=$14 & 8; //@line 4088 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool7=(($and6)|0)!=0; //@line 4088 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool7) { __label__ = 87; break; } else { __label__ = 6; break; } //@line 4088 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $15=$base; //@line 4089 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $16=$base; //@line 4089 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($16+8)|0); //@line 4089 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $17=$add_ptr; //@line 4089 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and8=$17 & 7; //@line 4089 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp9=(($and8)|0)==0; //@line 4089 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp9) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4089 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $cond = 0;__label__ = 9; break; //@line 4089 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $18=$base; //@line 4089 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr10=(($18+8)|0); //@line 4089 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $19=$add_ptr10; //@line 4089 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and11=$19 & 7; //@line 4089 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub=(((8)-($and11))|0); //@line 4089 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and12=$sub & 7; //@line 4089 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond = $and12;__label__ = 9; break; //@line 4089 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $cond; //@line 4089 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr13=(($15+$cond)|0); //@line 4089 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $20=$add_ptr13; //@line 4089 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $p=$20; //@line 4089 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $21=$p; //@line 4090 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head=(($21+4)|0); //@line 4090 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $22=HEAP32[(($head)>>2)]; //@line 4090 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and14=$22 & -8; //@line 4090 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $psize=$and14; //@line 4090 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $23=$p; //@line 4092 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head15=(($23+4)|0); //@line 4092 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $24=HEAP32[(($head15)>>2)]; //@line 4092 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and16=$24 & 3; //@line 4092 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp17=(($and16)|0)!=1; //@line 4092 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp17) { __label__ = 86; break; } else { __label__ = 10; break; } //@line 4092 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $25=$p; //@line 4092 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $26=$25; //@line 4092 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $27=$psize; //@line 4092 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr19=(($26+$27)|0); //@line 4092 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $28=$base; //@line 4092 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $29=$size; //@line 4092 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr20=(($28+$29)|0); //@line 4092 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr21=((($add_ptr20)-(40))|0); //@line 4092 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp22=(($add_ptr19)>>>0) >= (($add_ptr21)>>>0); //@line 4092 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp22) { __label__ = 11; break; } else { __label__ = 86; break; } //@line 4092 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $30=$p; //@line 4093 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $31=$30; //@line 4093 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $tp=$31; //@line 4093 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $32=$p; //@line 4095 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $33=$m_addr; //@line 4095 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $dv=(($33+20)|0); //@line 4095 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $34=HEAP32[(($dv)>>2)]; //@line 4095 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp24=(($32)|0)==(($34)|0); //@line 4095 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp24) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 4095 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $35=$m_addr; //@line 4096 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $dv26=(($35+20)|0); //@line 4096 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($dv26)>>2)]=0; //@line 4096 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $36=$m_addr; //@line 4097 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $dvsize=(($36+8)|0); //@line 4097 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($dvsize)>>2)]=0; //@line 4097 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 59; break; //@line 4098 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $37=$tp; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent=(($37+24)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $38=HEAP32[(($parent)>>2)]; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $XP=$38; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $39=$tp; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk=(($39+12)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $40=HEAP32[(($bk)>>2)]; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $41=$tp; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp27=(($40)|0)!=(($41)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp27) { __label__ = 14; break; } else { __label__ = 18; break; } //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $42=$tp; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd=(($42+8)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $43=HEAP32[(($fd)>>2)]; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F=$43; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $44=$tp; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk29=(($44+12)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $45=HEAP32[(($bk29)>>2)]; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $R=$45; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $46=$F; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $47=$46; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $48=$m_addr; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($48+16)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $49=HEAPU32[(($least_addr)>>2)]; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp30=(($47)>>>0) >= (($49)>>>0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv=(($cmp30)&1); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval=(($conv)==(1)); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool31=(($expval)|0)!=0; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool31) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $50=$R; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $51=$F; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk33=(($51+12)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk33)>>2)]=$50; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $52=$F; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $53=$R; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd34=(($53+8)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd34)>>2)]=$52; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 17; break; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 16: 
      _abort(); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 17: 
      __label__ = 30; break; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $54=$tp; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child=(($54+16)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=(($child+4)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $55=HEAP32[(($arrayidx)>>2)]; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $R=$55; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp37=(($55)|0)!=0; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp37) { __label__ = 20; break; } else { __label__ = 19; break; } //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $56=$tp; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child39=(($56+16)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx40=(($child39)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx40; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $57=HEAP32[(($arrayidx40)>>2)]; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $R=$57; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp41=(($57)|0)!=0; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp41) { __label__ = 20; break; } else { __label__ = 29; break; } //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 20: 
      __label__ = 21; break; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $58=$R; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child45=(($58+16)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx46=(($child45+4)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx46; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $59=HEAP32[(($arrayidx46)>>2)]; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp47=(($59)|0)!=0; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp47) { var $62 = 1;__label__ = 23; break; } else { __label__ = 22; break; } //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $60=$R; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child49=(($60+16)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx50=(($child49)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx50; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $61=HEAP32[(($arrayidx50)>>2)]; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp51=(($61)|0)!=0; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $62 = $cmp51;__label__ = 23; break; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $62;
      if ($62) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $63=$CP; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $RP=$63; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $64=HEAP32[(($63)>>2)]; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $R=$64; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $65=$RP; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $66=$65; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $67=$m_addr; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr54=(($67+16)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $68=HEAPU32[(($least_addr54)>>2)]; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp55=(($66)>>>0) >= (($68)>>>0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv56=(($cmp55)&1); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval57=(($conv56)==(1)); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool58=(($expval57)|0)!=0; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool58) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $69=$RP; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($69)>>2)]=0; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 27: 
      _abort(); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 28: 
      __label__ = 29; break; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 29: 
      __label__ = 30; break;
    case 30: 
      var $70=$XP; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp64=(($70)|0)!=0; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp64) { __label__ = 31; break; } else { __label__ = 58; break; } //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $71=$tp; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $index=(($71+28)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $72=HEAP32[(($index)>>2)]; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $73=$m_addr; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treebins=(($73+304)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx67=(($treebins+($72<<2))|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $H=$arrayidx67; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $74=$tp; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $75=$H; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $76=HEAP32[(($75)>>2)]; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp68=(($74)|0)==(($76)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp68) { __label__ = 32; break; } else { __label__ = 35; break; } //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $77=$R; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $78=$H; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($78)>>2)]=$77; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp71=(($77)|0)==0; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp71) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $79=$tp; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $index74=(($79+28)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $80=HEAP32[(($index74)>>2)]; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl=1 << $80; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $neg=$shl ^ -1; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $81=$m_addr; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treemap=(($81+4)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $82=HEAP32[(($treemap)>>2)]; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and75=$82 & $neg; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($treemap)>>2)]=$and75; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 34: 
      __label__ = 42; break; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $83=$XP; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $84=$83; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $85=$m_addr; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr78=(($85+16)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $86=HEAPU32[(($least_addr78)>>2)]; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp79=(($84)>>>0) >= (($86)>>>0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv80=(($cmp79)&1); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval81=(($conv80)==(1)); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool82=(($expval81)|0)!=0; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool82) { __label__ = 36; break; } else { __label__ = 40; break; } //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $87=$XP; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child84=(($87+16)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx85=(($child84)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $88=HEAP32[(($arrayidx85)>>2)]; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $89=$tp; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp86=(($88)|0)==(($89)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp86) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $90=$R; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $91=$XP; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child89=(($91+16)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx90=(($child89)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx90)>>2)]=$90; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 39; break; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $92=$R; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $93=$XP; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child92=(($93+16)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx93=(($child92+4)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx93)>>2)]=$92; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 39; break;
    case 39: 
      __label__ = 41; break; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 40: 
      _abort(); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 41: 
      __label__ = 42; break;
    case 42: 
      var $94=$R; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp98=(($94)|0)!=0; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp98) { __label__ = 43; break; } else { __label__ = 57; break; } //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $95=$R; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $96=$95; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $97=$m_addr; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr101=(($97+16)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $98=HEAPU32[(($least_addr101)>>2)]; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp102=(($96)>>>0) >= (($98)>>>0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv103=(($cmp102)&1); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval104=(($conv103)==(1)); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool105=(($expval104)|0)!=0; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool105) { __label__ = 44; break; } else { __label__ = 55; break; } //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $99=$XP; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $100=$R; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent107=(($100+24)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent107)>>2)]=$99; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $101=$tp; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child108=(($101+16)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx109=(($child108)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $102=HEAP32[(($arrayidx109)>>2)]; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $C0=$102; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp110=(($102)|0)!=0; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp110) { __label__ = 45; break; } else { __label__ = 49; break; } //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $103=$C0; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $104=$103; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $105=$m_addr; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr113=(($105+16)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $106=HEAPU32[(($least_addr113)>>2)]; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp114=(($104)>>>0) >= (($106)>>>0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv115=(($cmp114)&1); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval116=(($conv115)==(1)); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool117=(($expval116)|0)!=0; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool117) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $107=$C0; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $108=$R; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child119=(($108+16)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx120=(($child119)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx120)>>2)]=$107; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $109=$R; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $110=$C0; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent121=(($110+24)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent121)>>2)]=$109; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 48; break; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 47: 
      _abort(); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 48: 
      __label__ = 49; break; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $111=$tp; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child125=(($111+16)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx126=(($child125+4)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $112=HEAP32[(($arrayidx126)>>2)]; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $C1=$112; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp127=(($112)|0)!=0; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp127) { __label__ = 50; break; } else { __label__ = 54; break; } //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $113=$C1; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $114=$113; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $115=$m_addr; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr130=(($115+16)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $116=HEAPU32[(($least_addr130)>>2)]; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp131=(($114)>>>0) >= (($116)>>>0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv132=(($cmp131)&1); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval133=(($conv132)==(1)); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool134=(($expval133)|0)!=0; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool134) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 51: 
      var $117=$C1; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $118=$R; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child136=(($118+16)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx137=(($child136+4)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx137)>>2)]=$117; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $119=$R; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $120=$C1; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent138=(($120+24)|0); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent138)>>2)]=$119; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 53; break; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 52: 
      _abort(); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 53: 
      __label__ = 54; break; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 54: 
      __label__ = 56; break; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 55: 
      _abort(); //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 56: 
      __label__ = 57; break; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 57: 
      __label__ = 58; break; //@line 4100 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 58: 
      __label__ = 59; break;
    case 59: 
      var $121=$psize; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr=$121 >>> 8; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $X=$shr; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $122=$X; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp148=(($122)|0)==0; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp148) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 60: 
      $I=0; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 65; break; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $123=$X; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp152=(($123)>>>0) > 65535; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp152) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 62: 
      $I=31; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 64; break; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 63: 
      var $124=$X; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$124; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $125=$Y; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub156=((($125)-(256))|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr157=$sub156 >>> 16; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and158=$shr157 & 8; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$and158; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $126=$N; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $127=$Y; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl159=$127 << $126; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shl159; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub160=((($shl159)-(4096))|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr161=$sub160 >>> 16; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and162=$shr161 & 4; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$and162; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $128=$K; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $129=$N; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add=((($129)+($128))|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$add; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $130=$K; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $131=$Y; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl163=$131 << $130; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shl163; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub164=((($shl163)-(16384))|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr165=$sub164 >>> 16; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and166=$shr165 & 2; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$and166; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $132=$N; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add167=((($132)+($and166))|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$add167; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $133=$N; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub168=(((14)-($133))|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $134=$K; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $135=$Y; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl169=$135 << $134; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shl169; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr170=$shl169 >>> 15; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add171=((($sub168)+($shr170))|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$add171; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $136=$K; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl172=$136 << 1; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $137=$psize; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $138=$K; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add173=((($138)+(7))|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr174=$137 >>> (($add173)>>>0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and175=$shr174 & 1; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add176=((($shl172)+($and175))|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $I=$add176; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 64; break;
    case 64: 
      __label__ = 65; break;
    case 65: 
      var $139=$I; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $140=$m_addr; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treebins179=(($140+304)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx180=(($treebins179+($139<<2))|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $H147=$arrayidx180; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $141=$I; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $142=$tp; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $index181=(($142+28)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($index181)>>2)]=$141; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $143=$tp; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child182=(($143+16)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx183=(($child182+4)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx183)>>2)]=0; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $144=$tp; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child184=(($144+16)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx185=(($child184)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx185)>>2)]=0; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $145=$m_addr; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treemap186=(($145+4)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $146=HEAP32[(($treemap186)>>2)]; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $147=$I; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl187=1 << $147; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and188=$146 & $shl187; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool189=(($and188)|0)!=0; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool189) { __label__ = 67; break; } else { __label__ = 66; break; } //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 66: 
      var $148=$I; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl191=1 << $148; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $149=$m_addr; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treemap192=(($149+4)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $150=HEAP32[(($treemap192)>>2)]; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or=$150 | $shl191; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($treemap192)>>2)]=$or; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $151=$tp; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $152=$H147; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($152)>>2)]=$151; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $153=$H147; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $154=$153; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $155=$tp; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent193=(($155+24)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent193)>>2)]=$154; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $156=$tp; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $157=$tp; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk194=(($157+12)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk194)>>2)]=$156; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $158=$tp; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd195=(($158+8)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd195)>>2)]=$156; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 85; break; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 67: 
      var $159=$H147; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $160=HEAP32[(($159)>>2)]; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $T=$160; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $161=$psize; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $162=$I; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp198=(($162)|0)==31; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp198) { __label__ = 68; break; } else { __label__ = 69; break; } //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 68: 
      var $cond207 = 0;__label__ = 70; break; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 69: 
      var $163=$I; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr202=$163 >>> 1; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add203=((($shr202)+(8))|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub204=((($add203)-(2))|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub205=(((31)-($sub204))|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond207 = $sub205;__label__ = 70; break; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 70: 
      var $cond207; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl208=$161 << $cond207; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K197=$shl208; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 71; break; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 71: 
      var $164=$T; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head209=(($164+4)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $165=HEAP32[(($head209)>>2)]; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and210=$165 & -8; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $166=$psize; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp211=(($and210)|0)!=(($166)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp211) { __label__ = 72; break; } else { __label__ = 78; break; } //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 72: 
      var $167=$K197; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr214=$167 >>> 31; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and215=$shr214 & 1; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $168=$T; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child216=(($168+16)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx217=(($child216+($and215<<2))|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $C=$arrayidx217; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $169=$K197; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl218=$169 << 1; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K197=$shl218; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $170=$C; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $171=HEAP32[(($170)>>2)]; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp219=(($171)|0)!=0; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp219) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 73: 
      var $172=$C; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $173=HEAP32[(($172)>>2)]; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $T=$173; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 77; break; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 74: 
      var $174=$C; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $175=$174; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $176=$m_addr; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr223=(($176+16)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $177=HEAPU32[(($least_addr223)>>2)]; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp224=(($175)>>>0) >= (($177)>>>0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv225=(($cmp224)&1); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval226=(($conv225)==(1)); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool227=(($expval226)|0)!=0; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool227) { __label__ = 75; break; } else { __label__ = 76; break; } //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 75: 
      var $178=$tp; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $179=$C; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($179)>>2)]=$178; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $180=$T; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $181=$tp; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent229=(($181+24)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent229)>>2)]=$180; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $182=$tp; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $183=$tp; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk230=(($183+12)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk230)>>2)]=$182; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $184=$tp; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd231=(($184+8)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd231)>>2)]=$182; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 84; break; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 76: 
      _abort(); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 77: 
      __label__ = 83; break; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 78: 
      var $185=$T; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd236=(($185+8)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $186=HEAP32[(($fd236)>>2)]; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F235=$186; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $187=$T; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $188=$187; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $189=$m_addr; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr237=(($189+16)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $190=HEAPU32[(($least_addr237)>>2)]; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp238=(($188)>>>0) >= (($190)>>>0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp238) { __label__ = 79; break; } else { var $195 = 0;__label__ = 80; break; } //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 79: 
      var $191=$F235; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $192=$191; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $193=$m_addr; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr240=(($193+16)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $194=HEAPU32[(($least_addr240)>>2)]; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp241=(($192)>>>0) >= (($194)>>>0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $195 = $cmp241;__label__ = 80; break;
    case 80: 
      var $195;
      var $land_ext=(($195)&1);
      var $expval243=(($land_ext)==(1));
      var $tobool244=(($expval243)|0)!=0;
      if ($tobool244) { __label__ = 81; break; } else { __label__ = 82; break; }
    case 81: 
      var $196=$tp; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $197=$F235; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk246=(($197+12)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk246)>>2)]=$196; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $198=$T; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd247=(($198+8)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd247)>>2)]=$196; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $199=$F235; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $200=$tp; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd248=(($200+8)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd248)>>2)]=$199; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $201=$T; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $202=$tp; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk249=(($202+12)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk249)>>2)]=$201; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $203=$tp; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent250=(($203+24)|0); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent250)>>2)]=0; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 84; break; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 82: 
      _abort(); //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 83: 
      __label__ = 71; break; //@line 4110 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 84: 
      __label__ = 85; break;
    case 85: 
      __label__ = 86; break; //@line 4112 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 86: 
      __label__ = 87; break; //@line 4113 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 87: 
      var $204=$sp; //@line 4116 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $pred=$204; //@line 4116 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $205=$next3; //@line 4117 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $sp=$205; //@line 4117 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 3; break; //@line 4118 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 88: 
      var $206=$nsegs; //@line 4120 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp257=(($206)>>>0) > 4294967295; //@line 4120 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp257) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 4120 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $207=$nsegs; //@line 4120 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond262 = $207;__label__ = 91; break; //@line 4120 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $cond262 = -1;__label__ = 91; break; //@line 4120 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 91: 
      var $cond262; //@line 4120 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $208=$m_addr; //@line 4120 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $release_checks=(($208+32)|0); //@line 4120 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($release_checks)>>2)]=$cond262; //@line 4120 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $209=$released; //@line 4122 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      ;
      return $209; //@line 4122 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_release_unused_segments["X"]=1;

function _memalign($alignment, $bytes) {
  ;
  var __label__;

  var $alignment_addr;
  var $bytes_addr;
  $alignment_addr=$alignment;
  $bytes_addr=$bytes;
  var $0=$alignment_addr; //@line 4881 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
  var $1=$bytes_addr; //@line 4881 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
  var $call=_internal_memalign(__gm_, $0, $1); //@line 4881 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
  ;
  return $call; //@line 4881 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
}


function _internal_memalign($m, $alignment, $bytes) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $m_addr;
      var $alignment_addr;
      var $bytes_addr;
      var $a;
      var $nb;
      var $req;
      var $mem;
      var $leader;
      var $trailer;
      var $p;
      var $br;
      var $pos;
      var $newp;
      var $leadsize;
      var $newsize;
      var $size;
      var $remainder_size;
      var $remainder;
      $m_addr=$m;
      $alignment_addr=$alignment;
      $bytes_addr=$bytes;
      var $0=$alignment_addr; //@line 4379 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)>>>0) <= 8; //@line 4379 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4379 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $1=$bytes_addr; //@line 4380 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call=_malloc($1); //@line 4380 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $retval=$call; //@line 4380 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 38; break; //@line 4380 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $2=$alignment_addr; //@line 4381 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp1=(($2)>>>0) < 16; //@line 4381 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4381 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 5: 
      $alignment_addr=16; //@line 4382 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 6; break; //@line 4382 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $3=$alignment_addr; //@line 4383 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $4=$alignment_addr; //@line 4383 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub=((($4)-(1))|0); //@line 4383 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and=$3 & $sub; //@line 4383 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp4=(($and)|0)!=0; //@line 4383 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp4) { __label__ = 7; break; } else { __label__ = 11; break; } //@line 4383 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 7: 
      $a=16; //@line 4384 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 8; break; //@line 4385 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $5=$a; //@line 4385 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $6=$alignment_addr; //@line 4385 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp6=(($5)>>>0) < (($6)>>>0); //@line 4385 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp6) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4385 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $7=$a; //@line 4385 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl=$7 << 1; //@line 4385 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $a=$shl; //@line 4385 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 8; break; //@line 4385 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $8=$a; //@line 4386 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $alignment_addr=$8; //@line 4386 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 11; break; //@line 4387 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $9=$bytes_addr; //@line 4389 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $10=$alignment_addr; //@line 4389 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub8=(((-64)-($10))|0); //@line 4389 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp9=(($9)>>>0) >= (($sub8)>>>0); //@line 4389 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp9) { __label__ = 12; break; } else { __label__ = 15; break; } //@line 4389 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $11=$m_addr; //@line 4390 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp11=(($11)|0)!=0; //@line 4390 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp11) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 4390 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $call13=___errno(); //@line 4391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($call13)>>2)]=12; //@line 4391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 14; break; //@line 4392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 14: 
      __label__ = 37; break; //@line 4393 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $12=$bytes_addr; //@line 4395 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp15=(($12)>>>0) < 11; //@line 4395 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp15) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 4395 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $cond = 16;__label__ = 18; break; //@line 4395 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $13=$bytes_addr; //@line 4395 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add=((($13)+(4))|0); //@line 4395 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add16=((($add)+(7))|0); //@line 4395 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and17=$add16 & -8; //@line 4395 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond = $and17;__label__ = 18; break; //@line 4395 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $cond; //@line 4395 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $nb=$cond; //@line 4395 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $14=$nb; //@line 4396 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $15=$alignment_addr; //@line 4396 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add18=((($14)+($15))|0); //@line 4396 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add19=((($add18)+(16))|0); //@line 4396 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub20=((($add19)-(4))|0); //@line 4396 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $req=$sub20; //@line 4396 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $16=$req; //@line 4397 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call21=_malloc($16); //@line 4397 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $mem=$call21; //@line 4397 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $17=$mem; //@line 4398 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp22=(($17)|0)!=0; //@line 4398 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp22) { __label__ = 19; break; } else { __label__ = 36; break; } //@line 4398 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 19: 
      $leader=0; //@line 4399 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $trailer=0; //@line 4400 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $18=$mem; //@line 4401 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=((($18)-(8))|0); //@line 4401 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $19=$add_ptr; //@line 4401 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $p=$19; //@line 4401 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $20=$mem; //@line 4404 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $21=$20; //@line 4404 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $22=$alignment_addr; //@line 4404 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $rem=((($21)>>>0))%((($22)>>>0)); //@line 4404 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp24=(($rem)|0)!=0; //@line 4404 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp24) { __label__ = 20; break; } else { __label__ = 27; break; } //@line 4404 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $23=$mem; //@line 4416 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $24=$alignment_addr; //@line 4416 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr26=(($23+$24)|0); //@line 4416 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr27=((($add_ptr26)-(1))|0); //@line 4416 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $25=$add_ptr27; //@line 4416 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $26=$alignment_addr; //@line 4416 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub28=(((-$26))|0); //@line 4416 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and29=$25 & $sub28; //@line 4416 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $27=$and29; //@line 4416 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr30=((($27)-(8))|0); //@line 4416 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $28=$add_ptr30; //@line 4416 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $29=$28; //@line 4416 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $br=$29; //@line 4416 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $30=$br; //@line 4418 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $31=$p; //@line 4418 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $32=$31; //@line 4418 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_lhs_cast=$30; //@line 4418 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_rhs_cast=$32; //@line 4418 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 4418 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp31=(($sub_ptr_sub)>>>0) >= 16; //@line 4418 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp31) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 4418 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $33=$br; //@line 4418 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond36 = $33;__label__ = 23; break; //@line 4418 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $34=$br; //@line 4418 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $35=$alignment_addr; //@line 4418 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr34=(($34+$35)|0); //@line 4418 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond36 = $add_ptr34;__label__ = 23; break; //@line 4418 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $cond36; //@line 4418 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $pos=$cond36; //@line 4418 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $36=$pos; //@line 4419 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $37=$36; //@line 4419 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $newp=$37; //@line 4419 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $38=$pos; //@line 4420 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $39=$p; //@line 4420 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $40=$39; //@line 4420 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_lhs_cast37=$38; //@line 4420 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_rhs_cast38=$40; //@line 4420 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_sub39=((($sub_ptr_lhs_cast37)-($sub_ptr_rhs_cast38))|0); //@line 4420 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $leadsize=$sub_ptr_sub39; //@line 4420 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $41=$p; //@line 4421 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head=(($41+4)|0); //@line 4421 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $42=HEAP32[(($head)>>2)]; //@line 4421 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and40=$42 & -8; //@line 4421 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $43=$leadsize; //@line 4421 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub41=((($and40)-($43))|0); //@line 4421 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $newsize=$sub41; //@line 4421 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $44=$p; //@line 4423 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head42=(($44+4)|0); //@line 4423 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $45=HEAP32[(($head42)>>2)]; //@line 4423 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and43=$45 & 3; //@line 4423 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp44=(($and43)|0)==0; //@line 4423 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp44) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 4423 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $46=$p; //@line 4424 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $prev_foot=(($46)|0); //@line 4424 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $47=HEAP32[(($prev_foot)>>2)]; //@line 4424 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $48=$leadsize; //@line 4424 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add46=((($47)+($48))|0); //@line 4424 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $49=$newp; //@line 4424 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $prev_foot47=(($49)|0); //@line 4424 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot47)>>2)]=$add46; //@line 4424 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $50=$newsize; //@line 4425 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $51=$newp; //@line 4425 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head48=(($51+4)|0); //@line 4425 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head48)>>2)]=$50; //@line 4425 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 26; break; //@line 4426 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $52=$newp; //@line 4428 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head50=(($52+4)|0); //@line 4428 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $53=HEAP32[(($head50)>>2)]; //@line 4428 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and51=$53 & 1; //@line 4428 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $54=$newsize; //@line 4428 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or=$and51 | $54; //@line 4428 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or52=$or | 2; //@line 4428 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $55=$newp; //@line 4428 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head53=(($55+4)|0); //@line 4428 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head53)>>2)]=$or52; //@line 4428 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $56=$newp; //@line 4428 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $57=$56; //@line 4428 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $58=$newsize; //@line 4428 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr54=(($57+$58)|0); //@line 4428 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $59=$add_ptr54; //@line 4428 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head55=(($59+4)|0); //@line 4428 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $60=HEAP32[(($head55)>>2)]; //@line 4428 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or56=$60 | 1; //@line 4428 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head55)>>2)]=$or56; //@line 4428 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $61=$p; //@line 4429 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head57=(($61+4)|0); //@line 4429 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $62=HEAP32[(($head57)>>2)]; //@line 4429 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and58=$62 & 1; //@line 4429 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $63=$leadsize; //@line 4429 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or59=$and58 | $63; //@line 4429 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or60=$or59 | 2; //@line 4429 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $64=$p; //@line 4429 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head61=(($64+4)|0); //@line 4429 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head61)>>2)]=$or60; //@line 4429 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $65=$p; //@line 4429 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $66=$65; //@line 4429 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $67=$leadsize; //@line 4429 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr62=(($66+$67)|0); //@line 4429 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $68=$add_ptr62; //@line 4429 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head63=(($68+4)|0); //@line 4429 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $69=HEAP32[(($head63)>>2)]; //@line 4429 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or64=$69 | 1; //@line 4429 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head63)>>2)]=$or64; //@line 4429 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $70=$p; //@line 4430 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $71=$70; //@line 4430 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr65=(($71+8)|0); //@line 4430 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $leader=$add_ptr65; //@line 4430 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 26; break;
    case 26: 
      var $72=$newp; //@line 4432 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $p=$72; //@line 4432 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break; //@line 4433 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 27: 
      var $73=$p; //@line 4436 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head68=(($73+4)|0); //@line 4436 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $74=HEAP32[(($head68)>>2)]; //@line 4436 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and69=$74 & 3; //@line 4436 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp70=(($and69)|0)==0; //@line 4436 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp70) { __label__ = 31; break; } else { __label__ = 28; break; } //@line 4436 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $75=$p; //@line 4437 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head72=(($75+4)|0); //@line 4437 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $76=HEAP32[(($head72)>>2)]; //@line 4437 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and73=$76 & -8; //@line 4437 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $size=$and73; //@line 4437 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $77=$size; //@line 4438 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $78=$nb; //@line 4438 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add74=((($78)+(16))|0); //@line 4438 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp75=(($77)>>>0) > (($add74)>>>0); //@line 4438 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp75) { __label__ = 29; break; } else { __label__ = 30; break; } //@line 4438 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $79=$size; //@line 4439 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $80=$nb; //@line 4439 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub77=((($79)-($80))|0); //@line 4439 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $remainder_size=$sub77; //@line 4439 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $81=$p; //@line 4440 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $82=$81; //@line 4440 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $83=$nb; //@line 4440 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr78=(($82+$83)|0); //@line 4440 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $84=$add_ptr78; //@line 4440 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $remainder=$84; //@line 4440 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $85=$p; //@line 4441 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head79=(($85+4)|0); //@line 4441 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $86=HEAP32[(($head79)>>2)]; //@line 4441 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and80=$86 & 1; //@line 4441 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $87=$nb; //@line 4441 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or81=$and80 | $87; //@line 4441 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or82=$or81 | 2; //@line 4441 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $88=$p; //@line 4441 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head83=(($88+4)|0); //@line 4441 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head83)>>2)]=$or82; //@line 4441 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $89=$p; //@line 4441 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $90=$89; //@line 4441 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $91=$nb; //@line 4441 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr84=(($90+$91)|0); //@line 4441 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $92=$add_ptr84; //@line 4441 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head85=(($92+4)|0); //@line 4441 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $93=HEAP32[(($head85)>>2)]; //@line 4441 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or86=$93 | 1; //@line 4441 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head85)>>2)]=$or86; //@line 4441 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $94=$remainder; //@line 4442 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head87=(($94+4)|0); //@line 4442 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $95=HEAP32[(($head87)>>2)]; //@line 4442 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and88=$95 & 1; //@line 4442 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $96=$remainder_size; //@line 4442 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or89=$and88 | $96; //@line 4442 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or90=$or89 | 2; //@line 4442 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $97=$remainder; //@line 4442 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head91=(($97+4)|0); //@line 4442 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head91)>>2)]=$or90; //@line 4442 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $98=$remainder; //@line 4442 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $99=$98; //@line 4442 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $100=$remainder_size; //@line 4442 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr92=(($99+$100)|0); //@line 4442 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $101=$add_ptr92; //@line 4442 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head93=(($101+4)|0); //@line 4442 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $102=HEAP32[(($head93)>>2)]; //@line 4442 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or94=$102 | 1; //@line 4442 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head93)>>2)]=$or94; //@line 4442 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $103=$remainder; //@line 4443 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $104=$103; //@line 4443 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr95=(($104+8)|0); //@line 4443 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $trailer=$add_ptr95; //@line 4443 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 30; break; //@line 4444 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 30: 
      __label__ = 31; break; //@line 4445 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $105=$leader; //@line 4451 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp98=(($105)|0)!=0; //@line 4451 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp98) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 4451 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $106=$leader; //@line 4452 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      _free($106); //@line 4452 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 33; break; //@line 4453 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $107=$trailer; //@line 4454 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp101=(($107)|0)!=0; //@line 4454 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp101) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 4454 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $108=$trailer; //@line 4455 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      _free($108); //@line 4455 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break; //@line 4456 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $109=$p; //@line 4457 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $110=$109; //@line 4457 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr104=(($110+8)|0); //@line 4457 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $retval=$add_ptr104; //@line 4457 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 38; break; //@line 4457 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 36: 
      __label__ = 37; break;
    case 37: 
      $retval=0; //@line 4460 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 38; break; //@line 4460 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $111=$retval; //@line 4461 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      ;
      return $111; //@line 4461 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_internal_memalign["X"]=1;

function _independent_calloc($n_elements, $elem_size, $chunks) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $n_elements_addr;
  var $elem_size_addr;
  var $chunks_addr;
  var $sz=__stackBase__;
  $n_elements_addr=$n_elements;
  $elem_size_addr=$elem_size;
  $chunks_addr=$chunks;
  var $0=$elem_size_addr; //@line 4886 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
  HEAP32[(($sz)>>2)]=$0; //@line 4886 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
  var $1=$n_elements_addr; //@line 4887 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
  var $2=$chunks_addr; //@line 4887 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
  var $call=_ialloc(__gm_, $1, $sz, 3, $2); //@line 4887 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
  STACKTOP = __stackBase__;
  return $call; //@line 4887 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
}


function _internal_realloc($m, $oldmem, $bytes) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $m_addr;
      var $oldmem_addr;
      var $bytes_addr;
      var $oldp;
      var $oldsize;
      var $next;
      var $newp;
      var $extra;
      var $nb;
      var $rsize;
      var $remainder;
      var $newsize;
      var $newtopsize;
      var $newtop;
      var $newmem;
      var $oc;
      $m_addr=$m;
      $oldmem_addr=$oldmem;
      $bytes_addr=$bytes;
      var $0=$bytes_addr; //@line 4304 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)>>>0) >= 4294967232; //@line 4304 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4304 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $call=___errno(); //@line 4305 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($call)>>2)]=12; //@line 4305 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $retval=0; //@line 4306 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break; //@line 4306 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $1=$oldmem_addr; //@line 4309 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=((($1)-(8))|0); //@line 4309 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2=$add_ptr; //@line 4309 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $oldp=$2; //@line 4309 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $3=$oldp; //@line 4310 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head=(($3+4)|0); //@line 4310 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $4=HEAP32[(($head)>>2)]; //@line 4310 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and=$4 & -8; //@line 4310 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $oldsize=$and; //@line 4310 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $5=$oldp; //@line 4311 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $6=$5; //@line 4311 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $7=$oldsize; //@line 4311 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr1=(($6+$7)|0); //@line 4311 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $8=$add_ptr1; //@line 4311 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $next=$8; //@line 4311 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $newp=0; //@line 4312 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $extra=0; //@line 4313 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $9=$oldp; //@line 4317 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $10=$9; //@line 4317 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $11=$m_addr; //@line 4317 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($11+16)|0); //@line 4317 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $12=HEAPU32[(($least_addr)>>2)]; //@line 4317 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp2=(($10)>>>0) >= (($12)>>>0); //@line 4317 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp2) { __label__ = 5; break; } else { var $21 = 0;__label__ = 8; break; } //@line 4317 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $13=$oldp; //@line 4317 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head3=(($13+4)|0); //@line 4317 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $14=HEAP32[(($head3)>>2)]; //@line 4317 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and4=$14 & 3; //@line 4317 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp5=(($and4)|0)!=1; //@line 4317 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp5) { __label__ = 6; break; } else { var $21 = 0;__label__ = 8; break; } //@line 4317 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $15=$oldp; //@line 4317 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $16=$15; //@line 4317 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $17=$next; //@line 4317 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $18=$17; //@line 4317 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp7=(($16)>>>0) < (($18)>>>0); //@line 4317 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp7) { __label__ = 7; break; } else { var $21 = 0;__label__ = 8; break; } //@line 4317 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $19=$next; //@line 4317 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head8=(($19+4)|0); //@line 4317 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $20=HEAP32[(($head8)>>2)]; //@line 4317 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and9=$20 & 1; //@line 4317 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($and9)|0)!=0; //@line 4317 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $21 = $tobool;__label__ = 8; break;
    case 8: 
      var $21;
      var $land_ext=(($21)&1);
      var $expval=(($land_ext)==(1));
      var $tobool10=(($expval)|0)!=0;
      if ($tobool10) { __label__ = 9; break; } else { __label__ = 24; break; }
    case 9: 
      var $22=$bytes_addr; //@line 4319 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp12=(($22)>>>0) < 11; //@line 4319 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp12) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4319 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $cond = 16;__label__ = 12; break; //@line 4319 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $23=$bytes_addr; //@line 4319 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add=((($23)+(4))|0); //@line 4319 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add13=((($add)+(7))|0); //@line 4319 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and14=$add13 & -8; //@line 4319 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond = $and14;__label__ = 12; break; //@line 4319 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $cond; //@line 4319 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $nb=$cond; //@line 4319 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $24=$oldp; //@line 4320 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head15=(($24+4)|0); //@line 4320 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $25=HEAP32[(($head15)>>2)]; //@line 4320 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and16=$25 & 3; //@line 4320 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp17=(($and16)|0)==0; //@line 4320 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp17) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 4320 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $26=$m_addr; //@line 4321 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $27=$oldp; //@line 4321 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $28=$nb; //@line 4321 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call19=_mmap_resize($26, $27, $28); //@line 4321 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $newp=$call19; //@line 4321 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 23; break; //@line 4321 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $29=$oldsize; //@line 4322 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $30=$nb; //@line 4322 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp20=(($29)>>>0) >= (($30)>>>0); //@line 4322 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp20) { __label__ = 15; break; } else { __label__ = 18; break; } //@line 4322 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $31=$oldsize; //@line 4323 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $32=$nb; //@line 4323 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub=((($31)-($32))|0); //@line 4323 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $rsize=$sub; //@line 4323 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $33=$oldp; //@line 4324 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $newp=$33; //@line 4324 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $34=$rsize; //@line 4325 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp22=(($34)>>>0) >= 16; //@line 4325 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp22) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 4325 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $35=$newp; //@line 4326 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $36=$35; //@line 4326 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $37=$nb; //@line 4326 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr24=(($36+$37)|0); //@line 4326 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $38=$add_ptr24; //@line 4326 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $remainder=$38; //@line 4326 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $39=$newp; //@line 4327 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head25=(($39+4)|0); //@line 4327 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $40=HEAP32[(($head25)>>2)]; //@line 4327 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and26=$40 & 1; //@line 4327 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $41=$nb; //@line 4327 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or=$and26 | $41; //@line 4327 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or27=$or | 2; //@line 4327 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $42=$newp; //@line 4327 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head28=(($42+4)|0); //@line 4327 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head28)>>2)]=$or27; //@line 4327 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $43=$newp; //@line 4327 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $44=$43; //@line 4327 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $45=$nb; //@line 4327 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr29=(($44+$45)|0); //@line 4327 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $46=$add_ptr29; //@line 4327 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head30=(($46+4)|0); //@line 4327 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $47=HEAP32[(($head30)>>2)]; //@line 4327 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or31=$47 | 1; //@line 4327 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head30)>>2)]=$or31; //@line 4327 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $48=$rsize; //@line 4328 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or32=$48 | 1; //@line 4328 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or33=$or32 | 2; //@line 4328 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $49=$remainder; //@line 4328 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head34=(($49+4)|0); //@line 4328 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head34)>>2)]=$or33; //@line 4328 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $50=$remainder; //@line 4328 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $51=$50; //@line 4328 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $52=$rsize; //@line 4328 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr35=(($51+$52)|0); //@line 4328 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $53=$add_ptr35; //@line 4328 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head36=(($53+4)|0); //@line 4328 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $54=HEAP32[(($head36)>>2)]; //@line 4328 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or37=$54 | 1; //@line 4328 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head36)>>2)]=$or37; //@line 4328 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $55=$remainder; //@line 4329 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $56=$55; //@line 4329 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr38=(($56+8)|0); //@line 4329 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $extra=$add_ptr38; //@line 4329 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 17; break; //@line 4330 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 17: 
      __label__ = 22; break; //@line 4331 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $57=$next; //@line 4332 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $58=$m_addr; //@line 4332 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $top=(($58+24)|0); //@line 4332 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $59=HEAP32[(($top)>>2)]; //@line 4332 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp41=(($57)|0)==(($59)|0); //@line 4332 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp41) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 4332 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $60=$oldsize; //@line 4332 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $61=$m_addr; //@line 4332 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $topsize=(($61+12)|0); //@line 4332 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $62=HEAP32[(($topsize)>>2)]; //@line 4332 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add43=((($60)+($62))|0); //@line 4332 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $63=$nb; //@line 4332 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp44=(($add43)>>>0) > (($63)>>>0); //@line 4332 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp44) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 4332 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $64=$oldsize; //@line 4334 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $65=$m_addr; //@line 4334 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $topsize46=(($65+12)|0); //@line 4334 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $66=HEAP32[(($topsize46)>>2)]; //@line 4334 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add47=((($64)+($66))|0); //@line 4334 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $newsize=$add47; //@line 4334 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $67=$newsize; //@line 4335 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $68=$nb; //@line 4335 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub48=((($67)-($68))|0); //@line 4335 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $newtopsize=$sub48; //@line 4335 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $69=$oldp; //@line 4336 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $70=$69; //@line 4336 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $71=$nb; //@line 4336 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr49=(($70+$71)|0); //@line 4336 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $72=$add_ptr49; //@line 4336 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $newtop=$72; //@line 4336 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $73=$oldp; //@line 4337 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head50=(($73+4)|0); //@line 4337 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $74=HEAP32[(($head50)>>2)]; //@line 4337 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and51=$74 & 1; //@line 4337 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $75=$nb; //@line 4337 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or52=$and51 | $75; //@line 4337 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or53=$or52 | 2; //@line 4337 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $76=$oldp; //@line 4337 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head54=(($76+4)|0); //@line 4337 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head54)>>2)]=$or53; //@line 4337 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $77=$oldp; //@line 4337 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $78=$77; //@line 4337 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $79=$nb; //@line 4337 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr55=(($78+$79)|0); //@line 4337 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $80=$add_ptr55; //@line 4337 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head56=(($80+4)|0); //@line 4337 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $81=HEAP32[(($head56)>>2)]; //@line 4337 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or57=$81 | 1; //@line 4337 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head56)>>2)]=$or57; //@line 4337 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $82=$newtopsize; //@line 4338 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or58=$82 | 1; //@line 4338 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $83=$newtop; //@line 4338 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head59=(($83+4)|0); //@line 4338 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head59)>>2)]=$or58; //@line 4338 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $84=$newtop; //@line 4339 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $85=$m_addr; //@line 4339 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $top60=(($85+24)|0); //@line 4339 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($top60)>>2)]=$84; //@line 4339 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $86=$newtopsize; //@line 4340 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $87=$m_addr; //@line 4340 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $topsize61=(($87+12)|0); //@line 4340 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($topsize61)>>2)]=$86; //@line 4340 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $88=$oldp; //@line 4341 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $newp=$88; //@line 4341 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 4342 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 25; break; //@line 4343 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 24: 
      _abort(); //@line 4345 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4345 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $89=$newp; //@line 4357 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp67=(($89)|0)!=0; //@line 4357 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp67) { __label__ = 26; break; } else { __label__ = 29; break; } //@line 4357 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $90=$extra; //@line 4358 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp69=(($90)|0)!=0; //@line 4358 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp69) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 4358 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 27: 
      var $91=$extra; //@line 4359 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      _free($91); //@line 4359 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 4360 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $92=$newp; //@line 4361 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $93=$92; //@line 4361 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr72=(($93+8)|0); //@line 4361 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $retval=$add_ptr72; //@line 4361 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break; //@line 4361 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $94=$bytes_addr; //@line 4364 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call74=_malloc($94); //@line 4364 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $newmem=$call74; //@line 4364 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $95=$newmem; //@line 4365 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp75=(($95)|0)!=0; //@line 4365 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp75) { __label__ = 30; break; } else { __label__ = 34; break; } //@line 4365 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $96=$oldsize; //@line 4366 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $97=$oldp; //@line 4366 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head77=(($97+4)|0); //@line 4366 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $98=HEAP32[(($head77)>>2)]; //@line 4366 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and78=$98 & 3; //@line 4366 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp79=(($and78)|0)==0; //@line 4366 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond80=$cmp79 ? 8 : 4; //@line 4366 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub81=((($96)-($cond80))|0); //@line 4366 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $oc=$sub81; //@line 4366 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $99=$newmem; //@line 4367 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $100=$oldmem_addr; //@line 4367 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $101=$oc; //@line 4367 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $102=$bytes_addr; //@line 4367 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp82=(($101)>>>0) < (($102)>>>0); //@line 4367 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp82) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 4367 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $103=$oc; //@line 4367 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond86 = $103;__label__ = 33; break; //@line 4367 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $104=$bytes_addr; //@line 4367 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond86 = $104;__label__ = 33; break; //@line 4367 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $cond86; //@line 4367 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      assert($cond86 % 1 === 0, 'memcpy given ' + $cond86 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($99, $100, $cond86, 1); //@line 4367 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $105=$oldmem_addr; //@line 4368 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      _free($105); //@line 4368 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break; //@line 4369 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $106=$newmem; //@line 4370 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $retval=$106; //@line 4370 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break; //@line 4370 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $107=$retval; //@line 4374 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      ;
      return $107; //@line 4374 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_internal_realloc["X"]=1;

function _malloc_footprint() {
  ;
  var __label__;

  var $0=HEAP32[((((__gm_+432)|0))>>2)]; //@line 4920 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
  ;
  return $0; //@line 4920 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
}


function _malloc_max_footprint() {
  ;
  var __label__;

  var $0=HEAP32[((((__gm_+436)|0))>>2)]; //@line 4924 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
  ;
  return $0; //@line 4924 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
}


function _ialloc($m, $n_elements, $sizes, $opts, $chunks) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $m_addr;
      var $n_elements_addr;
      var $sizes_addr;
      var $opts_addr;
      var $chunks_addr;
      var $element_size;
      var $contents_size;
      var $array_size;
      var $mem;
      var $p;
      var $remainder_size;
      var $marray;
      var $array_chunk;
      var $was_enabled;
      var $size;
      var $i;
      var $array_chunk_size;
      $m_addr=$m;
      $n_elements_addr=$n_elements;
      $sizes_addr=$sizes;
      $opts_addr=$opts;
      $chunks_addr=$chunks;
      var $0=HEAP32[((((_mparams)|0))>>2)]; //@line 4491 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)|0)!=0; //@line 4491 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { var $1 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 4491 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $call=_init_mparams(); //@line 4491 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($call)|0)!=0; //@line 4491 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $1 = $tobool;__label__ = 4; break; //@line 4491 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $1;
      var $lor_ext=(($1)&1); //@line 4491 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2=$chunks_addr; //@line 4493 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp1=(($2)|0)!=0; //@line 4493 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 8; break; } //@line 4493 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $3=$n_elements_addr; //@line 4494 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp2=(($3)|0)==0; //@line 4494 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp2) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 4494 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $4=$chunks_addr; //@line 4495 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $retval=$4; //@line 4495 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 48; break; //@line 4495 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $5=$chunks_addr; //@line 4496 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $marray=$5; //@line 4496 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $array_size=0; //@line 4497 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 14; break; //@line 4498 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $6=$n_elements_addr; //@line 4501 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp4=(($6)|0)==0; //@line 4501 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp4) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4501 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $call6=_malloc(0); //@line 4502 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $7=$call6; //@line 4502 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $retval=$7; //@line 4502 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 48; break; //@line 4502 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 10: 
      $marray=0; //@line 4503 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $8=$n_elements_addr; //@line 4504 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $mul=((($8<<2))|0); //@line 4504 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp8=(($mul)>>>0) < 11; //@line 4504 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp8) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4504 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $cond = 16;__label__ = 13; break; //@line 4504 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $9=$n_elements_addr; //@line 4504 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $mul9=((($9<<2))|0); //@line 4504 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add=((($mul9)+(4))|0); //@line 4504 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add10=((($add)+(7))|0); //@line 4504 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and=$add10 & -8; //@line 4504 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond = $and;__label__ = 13; break; //@line 4504 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $cond; //@line 4504 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $array_size=$cond; //@line 4504 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 14; break;
    case 14: 
      var $10=$opts_addr; //@line 4508 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and12=$10 & 1; //@line 4508 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool13=(($and12)|0)!=0; //@line 4508 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool13) { __label__ = 15; break; } else { __label__ = 19; break; } //@line 4508 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $11=$sizes_addr; //@line 4509 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $12=HEAPU32[(($11)>>2)]; //@line 4509 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp15=(($12)>>>0) < 11; //@line 4509 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp15) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 4509 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $cond22 = 16;__label__ = 18; break; //@line 4509 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $13=$sizes_addr; //@line 4509 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $14=HEAP32[(($13)>>2)]; //@line 4509 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add18=((($14)+(4))|0); //@line 4509 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add19=((($add18)+(7))|0); //@line 4509 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and20=$add19 & -8; //@line 4509 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond22 = $and20;__label__ = 18; break; //@line 4509 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $cond22; //@line 4509 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $element_size=$cond22; //@line 4509 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $15=$n_elements_addr; //@line 4510 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $16=$element_size; //@line 4510 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $mul23=((($15)*($16))|0); //@line 4510 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $contents_size=$mul23; //@line 4510 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break; //@line 4511 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 19: 
      $element_size=0; //@line 4513 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $contents_size=0; //@line 4514 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $i=0; //@line 4515 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 4515 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $17=$i; //@line 4515 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $18=$n_elements_addr; //@line 4515 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp25=(($17)|0)!=(($18)|0); //@line 4515 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp25) { __label__ = 21; break; } else { __label__ = 26; break; } //@line 4515 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $19=$i; //@line 4516 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $20=$sizes_addr; //@line 4516 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=(($20+($19<<2))|0); //@line 4516 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $21=HEAPU32[(($arrayidx)>>2)]; //@line 4516 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp26=(($21)>>>0) < 11; //@line 4516 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp26) { __label__ = 22; break; } else { __label__ = 23; break; } //@line 4516 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $cond34 = 16;__label__ = 24; break; //@line 4516 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $22=$i; //@line 4516 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $23=$sizes_addr; //@line 4516 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx29=(($23+($22<<2))|0); //@line 4516 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $24=HEAP32[(($arrayidx29)>>2)]; //@line 4516 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add30=((($24)+(4))|0); //@line 4516 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add31=((($add30)+(7))|0); //@line 4516 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and32=$add31 & -8; //@line 4516 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond34 = $and32;__label__ = 24; break; //@line 4516 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $cond34; //@line 4516 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $25=$contents_size; //@line 4516 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add35=((($25)+($cond34))|0); //@line 4516 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $contents_size=$add35; //@line 4516 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 25; break; //@line 4516 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $26=$i; //@line 4515 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $inc=((($26)+(1))|0); //@line 4515 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $i=$inc; //@line 4515 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 4515 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $27=$contents_size; //@line 4519 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $28=$array_size; //@line 4519 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add37=((($27)+($28))|0); //@line 4519 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $size=$add37; //@line 4519 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $29=$m_addr; //@line 4526 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $mflags=(($29+440)|0); //@line 4526 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $30=HEAP32[(($mflags)>>2)]; //@line 4526 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and38=$30 & 0; //@line 4526 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $was_enabled=$and38; //@line 4526 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $31=$m_addr; //@line 4527 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $mflags39=(($31+440)|0); //@line 4527 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $32=HEAP32[(($mflags39)>>2)]; //@line 4527 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($mflags39)>>2)]=$32; //@line 4527 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $33=$size; //@line 4528 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub=((($33)-(4))|0); //@line 4528 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call40=_malloc($sub); //@line 4528 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $mem=$call40; //@line 4528 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $34=$was_enabled; //@line 4529 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool41=(($34)|0)!=0; //@line 4529 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool41) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 4529 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $35=$m_addr; //@line 4530 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $mflags43=(($35+440)|0); //@line 4530 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $36=HEAP32[(($mflags43)>>2)]; //@line 4530 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($mflags43)>>2)]=$36; //@line 4530 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 29; break; //@line 4530 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $37=$mem; //@line 4531 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp45=(($37)|0)==0; //@line 4531 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp45) { __label__ = 30; break; } else { __label__ = 31; break; } //@line 4531 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 30: 
      $retval=0; //@line 4532 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 48; break; //@line 4532 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $38=$mem; //@line 4535 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=((($38)-(8))|0); //@line 4535 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $39=$add_ptr; //@line 4535 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $p=$39; //@line 4535 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $40=$p; //@line 4536 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head=(($40+4)|0); //@line 4536 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $41=HEAP32[(($head)>>2)]; //@line 4536 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and48=$41 & -8; //@line 4536 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $remainder_size=$and48; //@line 4536 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $42=$opts_addr; //@line 4540 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and49=$42 & 2; //@line 4540 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool50=(($and49)|0)!=0; //@line 4540 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool50) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 4540 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $43=$mem; //@line 4541 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $44=$43; //@line 4541 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $45=$44; //@line 4541 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $46=$remainder_size; //@line 4541 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub52=((($46)-(4))|0); //@line 4541 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $47=$array_size; //@line 4541 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub53=((($sub52)-($47))|0); //@line 4541 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      _memset($45, 0, $sub53, 4); //@line 4541 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 33; break; //@line 4542 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $48=$marray; //@line 4545 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp55=(($48)|0)==0; //@line 4545 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp55) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 4545 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $49=$p; //@line 4547 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $50=$49; //@line 4547 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $51=$contents_size; //@line 4547 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr57=(($50+$51)|0); //@line 4547 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $52=$add_ptr57; //@line 4547 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $array_chunk=$52; //@line 4547 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $53=$remainder_size; //@line 4548 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $54=$contents_size; //@line 4548 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub58=((($53)-($54))|0); //@line 4548 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $array_chunk_size=$sub58; //@line 4548 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $55=$array_chunk; //@line 4549 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $56=$55; //@line 4549 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr59=(($56+8)|0); //@line 4549 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $57=$add_ptr59; //@line 4549 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $marray=$57; //@line 4549 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $58=$array_chunk_size; //@line 4550 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or=$58 | 1; //@line 4550 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or60=$or | 2; //@line 4550 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $59=$array_chunk; //@line 4550 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head61=(($59+4)|0); //@line 4550 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head61)>>2)]=$or60; //@line 4550 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $60=$contents_size; //@line 4551 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $remainder_size=$60; //@line 4551 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break; //@line 4552 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 35: 
      $i=0; //@line 4555 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 36; break; //@line 4555 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $61=$p; //@line 4556 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $62=$61; //@line 4556 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr64=(($62+8)|0); //@line 4556 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $63=$i; //@line 4556 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $64=$marray; //@line 4556 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx65=(($64+($63<<2))|0); //@line 4556 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx65)>>2)]=$add_ptr64; //@line 4556 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $65=$i; //@line 4557 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $66=$n_elements_addr; //@line 4557 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub66=((($66)-(1))|0); //@line 4557 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp67=(($65)|0)!=(($sub66)|0); //@line 4557 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp67) { __label__ = 37; break; } else { __label__ = 44; break; } //@line 4557 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $67=$element_size; //@line 4558 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp69=(($67)|0)!=0; //@line 4558 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp69) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 4558 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $68=$element_size; //@line 4559 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $size=$68; //@line 4559 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 43; break; //@line 4559 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 39: 
      var $69=$i; //@line 4561 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $70=$sizes_addr; //@line 4561 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx72=(($70+($69<<2))|0); //@line 4561 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $71=HEAPU32[(($arrayidx72)>>2)]; //@line 4561 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp73=(($71)>>>0) < 11; //@line 4561 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp73) { __label__ = 40; break; } else { __label__ = 41; break; } //@line 4561 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 40: 
      var $cond81 = 16;__label__ = 42; break; //@line 4561 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 41: 
      var $72=$i; //@line 4561 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $73=$sizes_addr; //@line 4561 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx76=(($73+($72<<2))|0); //@line 4561 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $74=HEAP32[(($arrayidx76)>>2)]; //@line 4561 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add77=((($74)+(4))|0); //@line 4561 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add78=((($add77)+(7))|0); //@line 4561 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and79=$add78 & -8; //@line 4561 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond81 = $and79;__label__ = 42; break; //@line 4561 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $cond81; //@line 4561 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $size=$cond81; //@line 4561 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 43; break;
    case 43: 
      var $75=$size; //@line 4562 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $76=$remainder_size; //@line 4562 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub83=((($76)-($75))|0); //@line 4562 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $remainder_size=$sub83; //@line 4562 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $77=$size; //@line 4563 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or84=$77 | 1; //@line 4563 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or85=$or84 | 2; //@line 4563 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $78=$p; //@line 4563 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head86=(($78+4)|0); //@line 4563 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head86)>>2)]=$or85; //@line 4563 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $79=$p; //@line 4564 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $80=$79; //@line 4564 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $81=$size; //@line 4564 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr87=(($80+$81)|0); //@line 4564 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $82=$add_ptr87; //@line 4564 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $p=$82; //@line 4564 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 45; break; //@line 4565 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $83=$remainder_size; //@line 4567 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or89=$83 | 1; //@line 4567 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or90=$or89 | 2; //@line 4567 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $84=$p; //@line 4567 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head91=(($84+4)|0); //@line 4567 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head91)>>2)]=$or90; //@line 4567 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 4568 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 45: 
      __label__ = 46; break; //@line 4570 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $85=$i; //@line 4555 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $inc94=((($85)+(1))|0); //@line 4555 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $i=$inc94; //@line 4555 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 36; break; //@line 4555 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $86=$marray; //@line 4589 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $retval=$86; //@line 4589 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 48; break; //@line 4589 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $87=$retval; //@line 4590 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      ;
      return $87; //@line 4590 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_ialloc["X"]=1;

function _independent_comalloc($n_elements, $sizes, $chunks) {
  ;
  var __label__;

  var $n_elements_addr;
  var $sizes_addr;
  var $chunks_addr;
  $n_elements_addr=$n_elements;
  $sizes_addr=$sizes;
  $chunks_addr=$chunks;
  var $0=$n_elements_addr; //@line 4892 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
  var $1=$sizes_addr; //@line 4892 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
  var $2=$chunks_addr; //@line 4892 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
  var $call=_ialloc(__gm_, $0, $1, 0, $2); //@line 4892 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
  ;
  return $call; //@line 4892 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
}


function _valloc($bytes) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $bytes_addr;
      var $pagesz;
      $bytes_addr=$bytes;
      var $0=HEAP32[((((_mparams)|0))>>2)]; //@line 4897 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)|0)!=0; //@line 4897 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { var $1 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 4897 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $call=_init_mparams(); //@line 4897 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($call)|0)!=0; //@line 4897 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $1 = $tobool;__label__ = 4; break; //@line 4897 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $1;
      var $lor_ext=(($1)&1); //@line 4897 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2=HEAP32[((((_mparams+4)|0))>>2)]; //@line 4898 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $pagesz=$2; //@line 4898 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $3=$pagesz; //@line 4899 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $4=$bytes_addr; //@line 4899 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call1=_memalign($3, $4); //@line 4899 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      ;
      return $call1; //@line 4899 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _pvalloc($bytes) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $bytes_addr;
      var $pagesz;
      $bytes_addr=$bytes;
      var $0=HEAP32[((((_mparams)|0))>>2)]; //@line 4904 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)|0)!=0; //@line 4904 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { var $1 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 4904 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $call=_init_mparams(); //@line 4904 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($call)|0)!=0; //@line 4904 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $1 = $tobool;__label__ = 4; break; //@line 4904 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $1;
      var $lor_ext=(($1)&1); //@line 4904 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2=HEAP32[((((_mparams+4)|0))>>2)]; //@line 4905 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $pagesz=$2; //@line 4905 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $3=$pagesz; //@line 4906 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $4=$bytes_addr; //@line 4906 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $5=$pagesz; //@line 4906 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add=((($4)+($5))|0); //@line 4906 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub=((($add)-(1))|0); //@line 4906 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $6=$pagesz; //@line 4906 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub1=((($6)-(1))|0); //@line 4906 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $neg=$sub1 ^ -1; //@line 4906 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and=$sub & $neg; //@line 4906 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call2=_memalign($3, $and); //@line 4906 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      ;
      return $call2; //@line 4906 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _malloc_trim($pad) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $pad_addr;
      var $result;
      $pad_addr=$pad;
      $result=0; //@line 4910 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $0=HEAP32[((((_mparams)|0))>>2)]; //@line 4911 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)|0)!=0; //@line 4911 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { var $1 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 4911 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $call=_init_mparams(); //@line 4911 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($call)|0)!=0; //@line 4911 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $1 = $tobool;__label__ = 4; break; //@line 4911 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $1;
      var $lor_ext=(($1)&1); //@line 4911 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2=$pad_addr; //@line 4913 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call1=_sys_trim(__gm_, $2); //@line 4913 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $result=$call1; //@line 4913 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $3=$result; //@line 4916 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      ;
      return $3; //@line 4916 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _mallinfo($agg_result) {
  ;
  var __label__;

  _internal_mallinfo($agg_result, __gm_); //@line 4929 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
  ;
  return; //@line 4929 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
}


function _internal_mallinfo($agg_result, $m) {
  var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $m_addr;
      var $nm=__stackBase__;
      var $nfree;
      var $mfree;
      var $sum;
      var $s;
      var $q;
      var $sz;
      $m_addr=$m;
      var $0=$nm; //@line 3338 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      for (var $$dest = $0>>2, $$stop = $$dest + 10; $$dest < $$stop; $$dest++) {
        HEAP32[$$dest] = 0
      }; //@line 3338 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $1=HEAP32[((((_mparams)|0))>>2)]; //@line 3339 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($1)|0)!=0; //@line 3339 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { var $2 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 3339 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $call=_init_mparams(); //@line 3339 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($call)|0)!=0; //@line 3339 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2 = $tobool;__label__ = 4; break; //@line 3339 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $2;
      var $lor_ext=(($2)&1); //@line 3339 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $3=$m_addr; //@line 3342 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $top=(($3+24)|0); //@line 3342 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $4=HEAP32[(($top)>>2)]; //@line 3342 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp1=(($4)|0)!=0; //@line 3342 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 21; break; } //@line 3342 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 5: 
      $nfree=1; //@line 3343 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $5=$m_addr; //@line 3344 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $topsize=(($5+12)|0); //@line 3344 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $6=HEAP32[(($topsize)>>2)]; //@line 3344 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add=((($6)+(40))|0); //@line 3344 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $mfree=$add; //@line 3344 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $7=$mfree; //@line 3345 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $sum=$7; //@line 3345 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $8=$m_addr; //@line 3346 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $seg=(($8+444)|0); //@line 3346 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $s=$seg; //@line 3346 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 6; break; //@line 3347 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $9=$s; //@line 3347 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp2=(($9)|0)!=0; //@line 3347 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp2) { __label__ = 7; break; } else { __label__ = 20; break; } //@line 3347 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $10=$s; //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $base=(($10)|0); //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $11=HEAP32[(($base)>>2)]; //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $12=$s; //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $base3=(($12)|0); //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $13=HEAP32[(($base3)>>2)]; //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($13+8)|0); //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $14=$add_ptr; //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and=$14 & 7; //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp4=(($and)|0)==0; //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp4) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $cond = 0;__label__ = 10; break; //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $15=$s; //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $base5=(($15)|0); //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $16=HEAP32[(($base5)>>2)]; //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr6=(($16+8)|0); //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $17=$add_ptr6; //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and7=$17 & 7; //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub=(((8)-($and7))|0); //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and8=$sub & 7; //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond = $and8;__label__ = 10; break; //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $cond; //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr9=(($11+$cond)|0); //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $18=$add_ptr9; //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $q=$18; //@line 3348 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 11; break; //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $19=$q; //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $20=$19; //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $21=$s; //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $base11=(($21)|0); //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $22=HEAPU32[(($base11)>>2)]; //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp12=(($20)>>>0) >= (($22)>>>0); //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp12) { __label__ = 12; break; } else { var $34 = 0;__label__ = 15; break; } //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $23=$q; //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $24=$23; //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $25=$s; //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $base13=(($25)|0); //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $26=HEAP32[(($base13)>>2)]; //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $27=$s; //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $size=(($27+4)|0); //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $28=HEAP32[(($size)>>2)]; //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr14=(($26+$28)|0); //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp15=(($24)>>>0) < (($add_ptr14)>>>0); //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp15) { __label__ = 13; break; } else { var $34 = 0;__label__ = 15; break; } //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $29=$q; //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $30=$m_addr; //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $top17=(($30+24)|0); //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $31=HEAP32[(($top17)>>2)]; //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp18=(($29)|0)!=(($31)|0); //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp18) { __label__ = 14; break; } else { var $34 = 0;__label__ = 15; break; } //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $32=$q; //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head=(($32+4)|0); //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $33=HEAP32[(($head)>>2)]; //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp19=(($33)|0)!=7; //@line 3349 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $34 = $cmp19;__label__ = 15; break;
    case 15: 
      var $34;
      if ($34) { __label__ = 16; break; } else { __label__ = 19; break; }
    case 16: 
      var $35=$q; //@line 3351 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head21=(($35+4)|0); //@line 3351 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $36=HEAP32[(($head21)>>2)]; //@line 3351 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and22=$36 & -8; //@line 3351 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $sz=$and22; //@line 3351 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $37=$sz; //@line 3352 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $38=$sum; //@line 3352 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add23=((($38)+($37))|0); //@line 3352 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $sum=$add23; //@line 3352 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $39=$q; //@line 3353 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head24=(($39+4)|0); //@line 3353 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $40=HEAP32[(($head24)>>2)]; //@line 3353 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and25=$40 & 3; //@line 3353 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp26=(($and25)|0)!=1; //@line 3353 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp26) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 3353 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $41=$sz; //@line 3354 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $42=$mfree; //@line 3354 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add28=((($42)+($41))|0); //@line 3354 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $mfree=$add28; //@line 3354 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $43=$nfree; //@line 3355 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $inc=((($43)+(1))|0); //@line 3355 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $nfree=$inc; //@line 3355 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 18; break; //@line 3356 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $44=$q; //@line 3357 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $45=$44; //@line 3357 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $46=$q; //@line 3357 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head29=(($46+4)|0); //@line 3357 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $47=HEAP32[(($head29)>>2)]; //@line 3357 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and30=$47 & -8; //@line 3357 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr31=(($45+$and30)|0); //@line 3357 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $48=$add_ptr31; //@line 3357 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $q=$48; //@line 3357 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 11; break; //@line 3358 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $49=$s; //@line 3359 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $next=(($49+8)|0); //@line 3359 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $50=HEAP32[(($next)>>2)]; //@line 3359 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $s=$50; //@line 3359 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 6; break; //@line 3360 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $51=$sum; //@line 3362 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arena=(($nm)|0); //@line 3362 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arena)>>2)]=$51; //@line 3362 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $52=$nfree; //@line 3363 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $ordblks=(($nm+4)|0); //@line 3363 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($ordblks)>>2)]=$52; //@line 3363 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $53=$m_addr; //@line 3364 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $footprint=(($53+432)|0); //@line 3364 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $54=HEAP32[(($footprint)>>2)]; //@line 3364 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $55=$sum; //@line 3364 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub33=((($54)-($55))|0); //@line 3364 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $hblkhd=(($nm+16)|0); //@line 3364 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($hblkhd)>>2)]=$sub33; //@line 3364 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $56=$m_addr; //@line 3365 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $max_footprint=(($56+436)|0); //@line 3365 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $57=HEAP32[(($max_footprint)>>2)]; //@line 3365 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $usmblks=(($nm+20)|0); //@line 3365 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($usmblks)>>2)]=$57; //@line 3365 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $58=$m_addr; //@line 3366 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $footprint34=(($58+432)|0); //@line 3366 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $59=HEAP32[(($footprint34)>>2)]; //@line 3366 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $60=$mfree; //@line 3366 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub35=((($59)-($60))|0); //@line 3366 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $uordblks=(($nm+28)|0); //@line 3366 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($uordblks)>>2)]=$sub35; //@line 3366 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $61=$mfree; //@line 3367 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fordblks=(($nm+32)|0); //@line 3367 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fordblks)>>2)]=$61; //@line 3367 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $62=$m_addr; //@line 3368 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $topsize36=(($62+12)|0); //@line 3368 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $63=HEAP32[(($topsize36)>>2)]; //@line 3368 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $keepcost=(($nm+36)|0); //@line 3368 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($keepcost)>>2)]=$63; //@line 3368 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 3369 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $64=$agg_result; //@line 3373 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $65=$nm; //@line 3373 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      assert(40 % 1 === 0, 'memcpy given ' + 40 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');for (var $$src = $65>>2, $$dest = $64>>2, $$stop = $$src + 10; $$src < $$stop; $$src++, $$dest++) {
        HEAP32[$$dest] = HEAP32[$$src]
      }; //@line 3373 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      STACKTOP = __stackBase__;
      return; //@line 3373 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_internal_mallinfo["X"]=1;

function _malloc_stats() {
  ;
  var __label__;

  _internal_malloc_stats(__gm_); //@line 4934 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
  ;
  return; //@line 4935 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
}


function _internal_malloc_stats($m) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $m_addr;
      var $maxfp;
      var $fp;
      var $used;
      var $s;
      var $q;
      $m_addr=$m;
      var $0=HEAP32[((((_mparams)|0))>>2)]; //@line 3378 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)|0)!=0; //@line 3378 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { var $1 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 3378 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $call=_init_mparams(); //@line 3378 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($call)|0)!=0; //@line 3378 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $1 = $tobool;__label__ = 4; break; //@line 3378 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $1;
      var $lor_ext=(($1)&1); //@line 3378 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $maxfp=0; //@line 3380 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $fp=0; //@line 3381 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $used=0; //@line 3382 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2=$m_addr; //@line 3384 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $top=(($2+24)|0); //@line 3384 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $3=HEAP32[(($top)>>2)]; //@line 3384 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp1=(($3)|0)!=0; //@line 3384 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 21; break; } //@line 3384 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $4=$m_addr; //@line 3385 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $seg=(($4+444)|0); //@line 3385 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $s=$seg; //@line 3385 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $5=$m_addr; //@line 3386 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $max_footprint=(($5+436)|0); //@line 3386 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $6=HEAP32[(($max_footprint)>>2)]; //@line 3386 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $maxfp=$6; //@line 3386 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $7=$m_addr; //@line 3387 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $footprint=(($7+432)|0); //@line 3387 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $8=HEAP32[(($footprint)>>2)]; //@line 3387 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $fp=$8; //@line 3387 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $9=$fp; //@line 3388 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $10=$m_addr; //@line 3388 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $topsize=(($10+12)|0); //@line 3388 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $11=HEAP32[(($topsize)>>2)]; //@line 3388 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add=((($11)+(40))|0); //@line 3388 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub=((($9)-($add))|0); //@line 3388 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $used=$sub; //@line 3388 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 6; break; //@line 3390 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $12=$s; //@line 3390 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp2=(($12)|0)!=0; //@line 3390 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp2) { __label__ = 7; break; } else { __label__ = 20; break; } //@line 3390 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $13=$s; //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $base=(($13)|0); //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $14=HEAP32[(($base)>>2)]; //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $15=$s; //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $base3=(($15)|0); //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $16=HEAP32[(($base3)>>2)]; //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($16+8)|0); //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $17=$add_ptr; //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and=$17 & 7; //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp4=(($and)|0)==0; //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp4) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $cond = 0;__label__ = 10; break; //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $18=$s; //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $base5=(($18)|0); //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $19=HEAP32[(($base5)>>2)]; //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr6=(($19+8)|0); //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $20=$add_ptr6; //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and7=$20 & 7; //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub8=(((8)-($and7))|0); //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and9=$sub8 & 7; //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond = $and9;__label__ = 10; break; //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $cond; //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr10=(($14+$cond)|0); //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $21=$add_ptr10; //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $q=$21; //@line 3391 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 11; break; //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $22=$q; //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $23=$22; //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $24=$s; //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $base12=(($24)|0); //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $25=HEAPU32[(($base12)>>2)]; //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp13=(($23)>>>0) >= (($25)>>>0); //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp13) { __label__ = 12; break; } else { var $37 = 0;__label__ = 15; break; } //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $26=$q; //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $27=$26; //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $28=$s; //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $base14=(($28)|0); //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $29=HEAP32[(($base14)>>2)]; //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $30=$s; //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $size=(($30+4)|0); //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $31=HEAP32[(($size)>>2)]; //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr15=(($29+$31)|0); //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp16=(($27)>>>0) < (($add_ptr15)>>>0); //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp16) { __label__ = 13; break; } else { var $37 = 0;__label__ = 15; break; } //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $32=$q; //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $33=$m_addr; //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $top18=(($33+24)|0); //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $34=HEAP32[(($top18)>>2)]; //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp19=(($32)|0)!=(($34)|0); //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp19) { __label__ = 14; break; } else { var $37 = 0;__label__ = 15; break; } //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $35=$q; //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head=(($35+4)|0); //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $36=HEAP32[(($head)>>2)]; //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp20=(($36)|0)!=7; //@line 3392 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $37 = $cmp20;__label__ = 15; break;
    case 15: 
      var $37;
      if ($37) { __label__ = 16; break; } else { __label__ = 19; break; }
    case 16: 
      var $38=$q; //@line 3394 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head22=(($38+4)|0); //@line 3394 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $39=HEAP32[(($head22)>>2)]; //@line 3394 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and23=$39 & 3; //@line 3394 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp24=(($and23)|0)!=1; //@line 3394 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp24) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 3394 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $40=$q; //@line 3395 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head26=(($40+4)|0); //@line 3395 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $41=HEAP32[(($head26)>>2)]; //@line 3395 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and27=$41 & -8; //@line 3395 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $42=$used; //@line 3395 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub28=((($42)-($and27))|0); //@line 3395 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $used=$sub28; //@line 3395 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 18; break; //@line 3395 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $43=$q; //@line 3396 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $44=$43; //@line 3396 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $45=$q; //@line 3396 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head29=(($45+4)|0); //@line 3396 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $46=HEAP32[(($head29)>>2)]; //@line 3396 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and30=$46 & -8; //@line 3396 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr31=(($44+$and30)|0); //@line 3396 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $47=$add_ptr31; //@line 3396 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $q=$47; //@line 3396 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 11; break; //@line 3397 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $48=$s; //@line 3398 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $next=(($48+8)|0); //@line 3398 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $49=HEAP32[(($next)>>2)]; //@line 3398 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $s=$49; //@line 3398 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 6; break; //@line 3399 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 20: 
      __label__ = 21; break; //@line 3400 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $50=HEAP32[((_stderr)>>2)]; //@line 3402 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $51=$maxfp; //@line 3402 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call34=_fprintf($50, ((STRING_TABLE.__str103)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$51,tempInt)); //@line 3402 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $52=HEAP32[((_stderr)>>2)]; //@line 3403 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $53=$fp; //@line 3403 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call35=_fprintf($52, ((STRING_TABLE.__str1104)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$53,tempInt)); //@line 3403 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $54=HEAP32[((_stderr)>>2)]; //@line 3404 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $55=$used; //@line 3404 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call36=_fprintf($54, ((STRING_TABLE.__str2105)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$55,tempInt)); //@line 3404 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      ;
      return; //@line 3408 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_internal_malloc_stats["X"]=1;

function _mallopt($param_number, $value) {
  ;
  var __label__;

  var $param_number_addr;
  var $value_addr;
  $param_number_addr=$param_number;
  $value_addr=$value;
  var $0=$param_number_addr; //@line 4938 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
  var $1=$value_addr; //@line 4938 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
  var $call=_change_mparam($0, $1); //@line 4938 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
  ;
  return $call; //@line 4938 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
}


function _init_mparams() {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $magic;
      var $psize;
      var $gsize;
      var $0=HEAP32[((((_mparams)|0))>>2)]; //@line 2965 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)|0)==0; //@line 2965 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 2965 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $call=_sysconf(8); //@line 2971 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $psize=$call; //@line 2971 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $1=$psize; //@line 2972 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $gsize=$1; //@line 2972 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2=$gsize; //@line 2989 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $3=$gsize; //@line 2989 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub=((($3)-(1))|0); //@line 2989 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and=$2 & $sub; //@line 2989 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp1=(($and)|0)!=0; //@line 2989 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 2989 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $4=$psize; //@line 2989 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $5=$psize; //@line 2989 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub2=((($5)-(1))|0); //@line 2989 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and3=$4 & $sub2; //@line 2989 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp4=(($and3)|0)!=0; //@line 2989 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp4) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2989 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 5: 
      _abort(); //@line 2997 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 2997 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $6=$gsize; //@line 2999 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+8)|0))>>2)]=$6; //@line 2999 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $7=$psize; //@line 3000 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+4)|0))>>2)]=$7; //@line 3000 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+12)|0))>>2)]=-1; //@line 3001 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+16)|0))>>2)]=2097152; //@line 3002 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+20)|0))>>2)]=0; //@line 3004 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $8=HEAP32[((((_mparams+20)|0))>>2)]; //@line 3011 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+440)|0))>>2)]=$8; //@line 3011 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call6=_time(0); //@line 3030 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $xor=$call6 ^ 1431655765; //@line 3030 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $magic=$xor; //@line 3030 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $9=$magic; //@line 3032 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or=$9 | 8; //@line 3032 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $magic=$or; //@line 3032 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $10=$magic; //@line 3033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and7=$10 & -8; //@line 3033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $magic=$and7; //@line 3033 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $11=$magic; //@line 3034 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams)|0))>>2)]=$11; //@line 3034 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 7; break; //@line 3036 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 7: 
      ;
      return 1; //@line 3039 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _malloc_usable_size($mem) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $mem_addr;
      var $p;
      $mem_addr=$mem;
      var $0=$mem_addr; //@line 4944 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)|0)!=0; //@line 4944 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 6; break; } //@line 4944 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $1=$mem_addr; //@line 4945 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=((($1)-(8))|0); //@line 4945 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2=$add_ptr; //@line 4945 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $p=$2; //@line 4945 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $3=$p; //@line 4946 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head=(($3+4)|0); //@line 4946 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $4=HEAP32[(($head)>>2)]; //@line 4946 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and=$4 & 3; //@line 4946 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp1=(($and)|0)!=1; //@line 4946 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4946 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $5=$p; //@line 4947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head3=(($5+4)|0); //@line 4947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $6=HEAP32[(($head3)>>2)]; //@line 4947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and4=$6 & -8; //@line 4947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $7=$p; //@line 4947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head5=(($7+4)|0); //@line 4947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $8=HEAP32[(($head5)>>2)]; //@line 4947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and6=$8 & 3; //@line 4947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp7=(($and6)|0)==0; //@line 4947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond=$cmp7 ? 8 : 4; //@line 4947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub=((($and4)-($cond))|0); //@line 4947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $retval=$sub; //@line 4947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 7; break; //@line 4947 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 5: 
      __label__ = 6; break; //@line 4948 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 6: 
      $retval=0; //@line 4949 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 7; break; //@line 4949 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $9=$retval; //@line 4950 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      ;
      return $9; //@line 4950 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _mmap_resize($m, $oldp, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $m_addr;
      var $oldp_addr;
      var $nb_addr;
      var $oldsize;
      var $offset;
      var $oldmmsize;
      var $newmmsize;
      var $cp;
      var $newp;
      var $psize;
      $m_addr=$m;
      $oldp_addr=$oldp;
      $nb_addr=$nb;
      var $0=$oldp_addr; //@line 3699 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head=(($0+4)|0); //@line 3699 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $1=HEAP32[(($head)>>2)]; //@line 3699 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and=$1 & -8; //@line 3699 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $oldsize=$and; //@line 3699 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2=$nb_addr; //@line 3700 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr=$2 >>> 3; //@line 3700 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($shr)>>>0) < 32; //@line 3700 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3700 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      $retval=0; //@line 3701 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3701 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $3=$oldsize; //@line 3703 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $4=$nb_addr; //@line 3703 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add=((($4)+(4))|0); //@line 3703 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp1=(($3)>>>0) >= (($add)>>>0); //@line 3703 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 3703 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $5=$oldsize; //@line 3703 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $6=$nb_addr; //@line 3703 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub=((($5)-($6))|0); //@line 3703 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $7=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3703 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl=$7 << 1; //@line 3703 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp2=(($sub)>>>0) <= (($shl)>>>0); //@line 3703 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp2) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3703 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $8=$oldp_addr; //@line 3705 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $retval=$8; //@line 3705 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3705 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $9=$oldp_addr; //@line 3707 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $prev_foot=(($9)|0); //@line 3707 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $10=HEAP32[(($prev_foot)>>2)]; //@line 3707 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $offset=$10; //@line 3707 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $11=$oldsize; //@line 3708 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $12=$offset; //@line 3708 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add4=((($11)+($12))|0); //@line 3708 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add5=((($add4)+(16))|0); //@line 3708 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $oldmmsize=$add5; //@line 3708 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $13=$nb_addr; //@line 3709 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add6=((($13)+(24))|0); //@line 3709 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add7=((($add6)+(7))|0); //@line 3709 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $14=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3709 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub8=((($14)-(1))|0); //@line 3709 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add9=((($add7)+($sub8))|0); //@line 3709 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $15=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3709 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub10=((($15)-(1))|0); //@line 3709 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $neg=$sub10 ^ -1; //@line 3709 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and11=$add9 & $neg; //@line 3709 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $newmmsize=$and11; //@line 3709 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $cp=-1; //@line 3711 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $16=$cp; //@line 3712 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp12=(($16)|0)!=-1; //@line 3712 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp12) { __label__ = 8; break; } else { __label__ = 13; break; } //@line 3712 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $17=$cp; //@line 3713 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $18=$offset; //@line 3713 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($17+$18)|0); //@line 3713 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $19=$add_ptr; //@line 3713 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $newp=$19; //@line 3713 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $20=$newmmsize; //@line 3714 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $21=$offset; //@line 3714 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub14=((($20)-($21))|0); //@line 3714 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub15=((($sub14)-(16))|0); //@line 3714 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $psize=$sub15; //@line 3714 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $22=$psize; //@line 3715 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $23=$newp; //@line 3715 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head16=(($23+4)|0); //@line 3715 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head16)>>2)]=$22; //@line 3715 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $24=$newp; //@line 3717 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $25=$24; //@line 3717 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $26=$psize; //@line 3717 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr17=(($25+$26)|0); //@line 3717 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $27=$add_ptr17; //@line 3717 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head18=(($27+4)|0); //@line 3717 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head18)>>2)]=7; //@line 3717 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $28=$newp; //@line 3718 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $29=$28; //@line 3718 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $30=$psize; //@line 3718 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add19=((($30)+(4))|0); //@line 3718 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr20=(($29+$add19)|0); //@line 3718 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $31=$add_ptr20; //@line 3718 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head21=(($31+4)|0); //@line 3718 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head21)>>2)]=0; //@line 3718 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $32=$cp; //@line 3720 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $33=$m_addr; //@line 3720 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($33+16)|0); //@line 3720 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $34=HEAPU32[(($least_addr)>>2)]; //@line 3720 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp22=(($32)>>>0) < (($34)>>>0); //@line 3720 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp22) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3720 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $35=$cp; //@line 3721 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $36=$m_addr; //@line 3721 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr24=(($36+16)|0); //@line 3721 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($least_addr24)>>2)]=$35; //@line 3721 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 10; break; //@line 3721 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $37=$newmmsize; //@line 3722 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $38=$oldmmsize; //@line 3722 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub26=((($37)-($38))|0); //@line 3722 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $39=$m_addr; //@line 3722 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $footprint=(($39+432)|0); //@line 3722 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $40=HEAP32[(($footprint)>>2)]; //@line 3722 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add27=((($40)+($sub26))|0); //@line 3722 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($footprint)>>2)]=$add27; //@line 3722 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $41=$m_addr; //@line 3722 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $max_footprint=(($41+436)|0); //@line 3722 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $42=HEAPU32[(($max_footprint)>>2)]; //@line 3722 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp28=(($add27)>>>0) > (($42)>>>0); //@line 3722 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp28) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3722 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $43=$m_addr; //@line 3723 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $footprint30=(($43+432)|0); //@line 3723 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $44=HEAP32[(($footprint30)>>2)]; //@line 3723 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $45=$m_addr; //@line 3723 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $max_footprint31=(($45+436)|0); //@line 3723 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($max_footprint31)>>2)]=$44; //@line 3723 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 3723 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $46=$newp; //@line 3725 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $retval=$46; //@line 3725 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3725 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 13: 
      __label__ = 14; break;
    case 14: 
      $retval=0; //@line 3728 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3728 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $47=$retval; //@line 3729 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      ;
      return $47; //@line 3729 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_mmap_resize["X"]=1;

function _segment_holding($m, $addr) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $m_addr;
      var $addr_addr;
      var $sp;
      $m_addr=$m;
      $addr_addr=$addr;
      var $0=$m_addr; //@line 2562 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $seg=(($0+444)|0); //@line 2562 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $sp=$seg; //@line 2562 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 3; break; //@line 2563 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $1=$addr_addr; //@line 2564 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2=$sp; //@line 2564 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $base=(($2)|0); //@line 2564 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $3=HEAPU32[(($base)>>2)]; //@line 2564 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($1)>>>0) >= (($3)>>>0); //@line 2564 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 2564 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $4=$addr_addr; //@line 2564 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $5=$sp; //@line 2564 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $base1=(($5)|0); //@line 2564 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $6=HEAP32[(($base1)>>2)]; //@line 2564 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $7=$sp; //@line 2564 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $size=(($7+4)|0); //@line 2564 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $8=HEAP32[(($size)>>2)]; //@line 2564 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($6+$8)|0); //@line 2564 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp2=(($4)>>>0) < (($add_ptr)>>>0); //@line 2564 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2564 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $9=$sp; //@line 2565 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $retval=$9; //@line 2565 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 9; break; //@line 2565 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $10=$sp; //@line 2566 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $next=(($10+8)|0); //@line 2566 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $11=HEAP32[(($next)>>2)]; //@line 2566 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $sp=$11; //@line 2566 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp3=(($11)|0)==0; //@line 2566 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp3) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2566 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 7: 
      $retval=0; //@line 2567 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 9; break; //@line 2567 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 8: 
      __label__ = 3; break; //@line 2568 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $12=$retval; //@line 2569 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      ;
      return $12; //@line 2569 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _init_top($m, $p, $psize) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $m_addr;
      var $p_addr;
      var $psize_addr;
      var $offset;
      $m_addr=$m;
      $p_addr=$p;
      $psize_addr=$psize;
      var $0=$p_addr; //@line 3736 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $1=$0; //@line 3736 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($1+8)|0); //@line 3736 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2=$add_ptr; //@line 3736 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and=$2 & 7; //@line 3736 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($and)|0)==0; //@line 3736 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3736 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $cond = 0;__label__ = 5; break; //@line 3736 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $3=$p_addr; //@line 3736 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $4=$3; //@line 3736 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr1=(($4+8)|0); //@line 3736 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $5=$add_ptr1; //@line 3736 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and2=$5 & 7; //@line 3736 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub=(((8)-($and2))|0); //@line 3736 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and3=$sub & 7; //@line 3736 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond = $and3;__label__ = 5; break; //@line 3736 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $cond; //@line 3736 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $offset=$cond; //@line 3736 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $6=$p_addr; //@line 3737 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $7=$6; //@line 3737 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $8=$offset; //@line 3737 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr4=(($7+$8)|0); //@line 3737 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $9=$add_ptr4; //@line 3737 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $p_addr=$9; //@line 3737 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $10=$offset; //@line 3738 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $11=$psize_addr; //@line 3738 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub5=((($11)-($10))|0); //@line 3738 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $psize_addr=$sub5; //@line 3738 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $12=$p_addr; //@line 3740 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $13=$m_addr; //@line 3740 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $top=(($13+24)|0); //@line 3740 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($top)>>2)]=$12; //@line 3740 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $14=$psize_addr; //@line 3741 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $15=$m_addr; //@line 3741 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $topsize=(($15+12)|0); //@line 3741 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($topsize)>>2)]=$14; //@line 3741 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $16=$psize_addr; //@line 3742 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or=$16 | 1; //@line 3742 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $17=$p_addr; //@line 3742 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head=(($17+4)|0); //@line 3742 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head)>>2)]=$or; //@line 3742 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $18=$p_addr; //@line 3744 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $19=$18; //@line 3744 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $20=$psize_addr; //@line 3744 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr6=(($19+$20)|0); //@line 3744 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $21=$add_ptr6; //@line 3744 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head7=(($21+4)|0); //@line 3744 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head7)>>2)]=40; //@line 3744 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $22=HEAP32[((((_mparams+16)|0))>>2)]; //@line 3745 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $23=$m_addr; //@line 3745 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $trim_check=(($23+28)|0); //@line 3745 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($trim_check)>>2)]=$22; //@line 3745 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      ;
      return; //@line 3746 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_init_top["X"]=1;

function _mmap_alloc($m, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $m_addr;
      var $nb_addr;
      var $mmsize;
      var $mm;
      var $offset;
      var $psize;
      var $p;
      $m_addr=$m;
      $nb_addr=$nb;
      var $0=$nb_addr; //@line 3672 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add=((($0)+(24))|0); //@line 3672 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add1=((($add)+(7))|0); //@line 3672 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $1=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3672 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub=((($1)-(1))|0); //@line 3672 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add2=((($add1)+($sub))|0); //@line 3672 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3672 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub3=((($2)-(1))|0); //@line 3672 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $neg=$sub3 ^ -1; //@line 3672 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and=$add2 & $neg; //@line 3672 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $mmsize=$and; //@line 3672 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $3=$mmsize; //@line 3673 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $4=$nb_addr; //@line 3673 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($3)>>>0) > (($4)>>>0); //@line 3673 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 14; break; } //@line 3673 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      $mm=-1; //@line 3674 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $5=$mm; //@line 3675 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp4=(($5)|0)!=-1; //@line 3675 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp4) { __label__ = 4; break; } else { __label__ = 13; break; } //@line 3675 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $6=$mm; //@line 3676 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($6+8)|0); //@line 3676 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $7=$add_ptr; //@line 3676 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and6=$7 & 7; //@line 3676 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp7=(($and6)|0)==0; //@line 3676 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp7) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3676 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $cond = 0;__label__ = 7; break; //@line 3676 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $8=$mm; //@line 3676 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr8=(($8+8)|0); //@line 3676 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $9=$add_ptr8; //@line 3676 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and9=$9 & 7; //@line 3676 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub10=(((8)-($and9))|0); //@line 3676 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and11=$sub10 & 7; //@line 3676 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond = $and11;__label__ = 7; break; //@line 3676 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $cond; //@line 3676 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $offset=$cond; //@line 3676 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $10=$mmsize; //@line 3677 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $11=$offset; //@line 3677 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub12=((($10)-($11))|0); //@line 3677 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub13=((($sub12)-(16))|0); //@line 3677 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $psize=$sub13; //@line 3677 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $12=$mm; //@line 3678 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $13=$offset; //@line 3678 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr14=(($12+$13)|0); //@line 3678 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $14=$add_ptr14; //@line 3678 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $p=$14; //@line 3678 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $15=$offset; //@line 3679 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $16=$p; //@line 3679 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $prev_foot=(($16)|0); //@line 3679 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot)>>2)]=$15; //@line 3679 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $17=$psize; //@line 3680 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $18=$p; //@line 3680 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head=(($18+4)|0); //@line 3680 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head)>>2)]=$17; //@line 3680 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $19=$p; //@line 3682 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $20=$19; //@line 3682 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $21=$psize; //@line 3682 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr15=(($20+$21)|0); //@line 3682 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $22=$add_ptr15; //@line 3682 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head16=(($22+4)|0); //@line 3682 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head16)>>2)]=7; //@line 3682 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $23=$p; //@line 3683 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $24=$23; //@line 3683 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $25=$psize; //@line 3683 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add17=((($25)+(4))|0); //@line 3683 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr18=(($24+$add17)|0); //@line 3683 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $26=$add_ptr18; //@line 3683 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head19=(($26+4)|0); //@line 3683 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head19)>>2)]=0; //@line 3683 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $27=$m_addr; //@line 3685 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($27+16)|0); //@line 3685 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $28=HEAP32[(($least_addr)>>2)]; //@line 3685 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp20=(($28)|0)==0; //@line 3685 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp20) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 3685 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $29=$mm; //@line 3685 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $30=$m_addr; //@line 3685 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr21=(($30+16)|0); //@line 3685 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $31=HEAPU32[(($least_addr21)>>2)]; //@line 3685 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp22=(($29)>>>0) < (($31)>>>0); //@line 3685 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp22) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3685 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $32=$mm; //@line 3686 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $33=$m_addr; //@line 3686 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr24=(($33+16)|0); //@line 3686 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($least_addr24)>>2)]=$32; //@line 3686 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 10; break; //@line 3686 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $34=$mmsize; //@line 3687 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $35=$m_addr; //@line 3687 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $footprint=(($35+432)|0); //@line 3687 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $36=HEAP32[(($footprint)>>2)]; //@line 3687 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add25=((($36)+($34))|0); //@line 3687 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($footprint)>>2)]=$add25; //@line 3687 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $37=$m_addr; //@line 3687 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $max_footprint=(($37+436)|0); //@line 3687 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $38=HEAPU32[(($max_footprint)>>2)]; //@line 3687 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp26=(($add25)>>>0) > (($38)>>>0); //@line 3687 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp26) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3687 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $39=$m_addr; //@line 3688 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $footprint28=(($39+432)|0); //@line 3688 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $40=HEAP32[(($footprint28)>>2)]; //@line 3688 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $41=$m_addr; //@line 3688 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $max_footprint29=(($41+436)|0); //@line 3688 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($max_footprint29)>>2)]=$40; //@line 3688 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 3688 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $42=$p; //@line 3691 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $43=$42; //@line 3691 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr31=(($43+8)|0); //@line 3691 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $retval=$add_ptr31; //@line 3691 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3691 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 13: 
      __label__ = 14; break; //@line 3693 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 14: 
      $retval=0; //@line 3694 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3694 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $44=$retval; //@line 3695 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      ;
      return $44; //@line 3695 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_mmap_alloc["X"]=1;

function _init_bins($m) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $m_addr;
      var $i;
      var $bin;
      $m_addr=$m;
      $i=0; //@line 3752 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 3; break; //@line 3752 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $0=$i; //@line 3752 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)>>>0) < 32; //@line 3752 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 3752 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $1=$i; //@line 3753 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl=$1 << 1; //@line 3753 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2=$m_addr; //@line 3753 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $smallbins=(($2+40)|0); //@line 3753 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=(($smallbins+($shl<<2))|0); //@line 3753 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $3=$arrayidx; //@line 3753 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $4=$3; //@line 3753 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $bin=$4; //@line 3753 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $5=$bin; //@line 3754 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $6=$bin; //@line 3754 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk=(($6+12)|0); //@line 3754 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk)>>2)]=$5; //@line 3754 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $7=$bin; //@line 3754 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd=(($7+8)|0); //@line 3754 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd)>>2)]=$5; //@line 3754 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 5; break; //@line 3755 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $8=$i; //@line 3752 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $inc=((($8)+(1))|0); //@line 3752 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $i=$inc; //@line 3752 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 3; break; //@line 3752 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 6: 
      ;
      return; //@line 3756 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _change_mparam($param_number, $value) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $param_number_addr;
      var $value_addr;
      var $val;
      $param_number_addr=$param_number;
      $value_addr=$value;
      var $0=HEAP32[((((_mparams)|0))>>2)]; //@line 3045 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)|0)!=0; //@line 3045 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { var $1 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 3045 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $call=_init_mparams(); //@line 3045 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($call)|0)!=0; //@line 3045 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $1 = $tobool;__label__ = 4; break; //@line 3045 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $1;
      var $lor_ext=(($1)&1); //@line 3045 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2=$value_addr; //@line 3046 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp1=(($2)|0)==-1; //@line 3046 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3046 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $cond = -1;__label__ = 7; break; //@line 3046 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $3=$value_addr; //@line 3046 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond = $3;__label__ = 7; break; //@line 3046 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $cond; //@line 3046 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $val=$cond; //@line 3046 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $4=$param_number_addr; //@line 3047 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ((($4)|0) == -1) {
        __label__ = 8; break;
      }
      else if ((($4)|0) == -2) {
        __label__ = 9; break;
      }
      else if ((($4)|0) == -3) {
        __label__ = 13; break;
      }
      else {
      __label__ = 14; break;
      }
      
    case 8: 
      var $5=$val; //@line 3049 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+16)|0))>>2)]=$5; //@line 3049 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $retval=1; //@line 3050 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3050 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $6=$val; //@line 3052 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $7=HEAPU32[((((_mparams+4)|0))>>2)]; //@line 3052 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp3=(($6)>>>0) >= (($7)>>>0); //@line 3052 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp3) { __label__ = 10; break; } else { __label__ = 12; break; } //@line 3052 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $8=$val; //@line 3052 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $9=$val; //@line 3052 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub=((($9)-(1))|0); //@line 3052 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and=$8 & $sub; //@line 3052 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp4=(($and)|0)==0; //@line 3052 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp4) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3052 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $10=$val; //@line 3053 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+8)|0))>>2)]=$10; //@line 3053 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $retval=1; //@line 3054 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3054 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 12: 
      $retval=0; //@line 3057 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3057 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $11=$val; //@line 3059 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+12)|0))>>2)]=$11; //@line 3059 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $retval=1; //@line 3060 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3060 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 14: 
      $retval=0; //@line 3062 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3062 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $12=$retval; //@line 3064 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      ;
      return $12; //@line 3064 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_change_mparam["X"]=1;

function _prepend_alloc($m, $newbase, $oldbase, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $m_addr;
      var $newbase_addr;
      var $oldbase_addr;
      var $nb_addr;
      var $p;
      var $oldfirst;
      var $psize;
      var $q;
      var $qsize;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F63;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I203;
      var $B205;
      var $F209;
      var $TP235;
      var $H236;
      var $I237;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K290;
      var $C;
      var $F328;
      $m_addr=$m;
      $newbase_addr=$newbase;
      $oldbase_addr=$oldbase;
      $nb_addr=$nb;
      var $0=$newbase_addr; //@line 3780 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $1=$newbase_addr; //@line 3780 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($1+8)|0); //@line 3780 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2=$add_ptr; //@line 3780 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and=$2 & 7; //@line 3780 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($and)|0)==0; //@line 3780 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3780 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $cond = 0;__label__ = 5; break; //@line 3780 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $3=$newbase_addr; //@line 3780 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr1=(($3+8)|0); //@line 3780 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $4=$add_ptr1; //@line 3780 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and2=$4 & 7; //@line 3780 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub=(((8)-($and2))|0); //@line 3780 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and3=$sub & 7; //@line 3780 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond = $and3;__label__ = 5; break; //@line 3780 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $cond; //@line 3780 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr4=(($0+$cond)|0); //@line 3780 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $5=$add_ptr4; //@line 3780 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $p=$5; //@line 3780 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $6=$oldbase_addr; //@line 3781 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $7=$oldbase_addr; //@line 3781 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr5=(($7+8)|0); //@line 3781 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $8=$add_ptr5; //@line 3781 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and6=$8 & 7; //@line 3781 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp7=(($and6)|0)==0; //@line 3781 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp7) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3781 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $cond15 = 0;__label__ = 8; break; //@line 3781 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $9=$oldbase_addr; //@line 3781 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr10=(($9+8)|0); //@line 3781 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $10=$add_ptr10; //@line 3781 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and11=$10 & 7; //@line 3781 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub12=(((8)-($and11))|0); //@line 3781 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and13=$sub12 & 7; //@line 3781 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond15 = $and13;__label__ = 8; break; //@line 3781 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $cond15; //@line 3781 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr16=(($6+$cond15)|0); //@line 3781 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $11=$add_ptr16; //@line 3781 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $oldfirst=$11; //@line 3781 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $12=$oldfirst; //@line 3782 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $13=$12; //@line 3782 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $14=$p; //@line 3782 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $15=$14; //@line 3782 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_lhs_cast=$13; //@line 3782 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_rhs_cast=$15; //@line 3782 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 3782 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $psize=$sub_ptr_sub; //@line 3782 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $16=$p; //@line 3783 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $17=$16; //@line 3783 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $18=$nb_addr; //@line 3783 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr17=(($17+$18)|0); //@line 3783 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $19=$add_ptr17; //@line 3783 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $q=$19; //@line 3783 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $20=$psize; //@line 3784 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $21=$nb_addr; //@line 3784 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub18=((($20)-($21))|0); //@line 3784 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $qsize=$sub18; //@line 3784 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $22=$nb_addr; //@line 3785 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or=$22 | 1; //@line 3785 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or19=$or | 2; //@line 3785 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $23=$p; //@line 3785 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head=(($23+4)|0); //@line 3785 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head)>>2)]=$or19; //@line 3785 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $24=$oldfirst; //@line 3792 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $25=$m_addr; //@line 3792 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $top=(($25+24)|0); //@line 3792 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $26=HEAP32[(($top)>>2)]; //@line 3792 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp20=(($24)|0)==(($26)|0); //@line 3792 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp20) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3792 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $27=$qsize; //@line 3793 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $28=$m_addr; //@line 3793 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $topsize=(($28+12)|0); //@line 3793 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $29=HEAP32[(($topsize)>>2)]; //@line 3793 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add=((($29)+($27))|0); //@line 3793 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($topsize)>>2)]=$add; //@line 3793 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $tsize=$add; //@line 3793 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $30=$q; //@line 3794 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $31=$m_addr; //@line 3794 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $top21=(($31+24)|0); //@line 3794 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($top21)>>2)]=$30; //@line 3794 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $32=$tsize; //@line 3795 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or22=$32 | 1; //@line 3795 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $33=$q; //@line 3795 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head23=(($33+4)|0); //@line 3795 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head23)>>2)]=$or22; //@line 3795 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 110; break; //@line 3797 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $34=$oldfirst; //@line 3798 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $35=$m_addr; //@line 3798 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $dv=(($35+20)|0); //@line 3798 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $36=HEAP32[(($dv)>>2)]; //@line 3798 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp24=(($34)|0)==(($36)|0); //@line 3798 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp24) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3798 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $37=$qsize; //@line 3799 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $38=$m_addr; //@line 3799 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $dvsize=(($38+8)|0); //@line 3799 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $39=HEAP32[(($dvsize)>>2)]; //@line 3799 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add26=((($39)+($37))|0); //@line 3799 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($dvsize)>>2)]=$add26; //@line 3799 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $dsize=$add26; //@line 3799 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $40=$q; //@line 3800 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $41=$m_addr; //@line 3800 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $dv27=(($41+20)|0); //@line 3800 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($dv27)>>2)]=$40; //@line 3800 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $42=$dsize; //@line 3801 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or28=$42 | 1; //@line 3801 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $43=$q; //@line 3801 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head29=(($43+4)|0); //@line 3801 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head29)>>2)]=$or28; //@line 3801 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $44=$dsize; //@line 3801 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $45=$q; //@line 3801 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $46=$45; //@line 3801 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $47=$dsize; //@line 3801 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr30=(($46+$47)|0); //@line 3801 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $48=$add_ptr30; //@line 3801 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $prev_foot=(($48)|0); //@line 3801 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot)>>2)]=$44; //@line 3801 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 109; break; //@line 3802 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $49=$oldfirst; //@line 3804 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head32=(($49+4)|0); //@line 3804 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $50=HEAP32[(($head32)>>2)]; //@line 3804 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and33=$50 & 3; //@line 3804 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp34=(($and33)|0)!=1; //@line 3804 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp34) { __label__ = 73; break; } else { __label__ = 13; break; } //@line 3804 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $51=$oldfirst; //@line 3805 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head36=(($51+4)|0); //@line 3805 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $52=HEAP32[(($head36)>>2)]; //@line 3805 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and37=$52 & -8; //@line 3805 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $nsize=$and37; //@line 3805 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $53=$nsize; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr=$53 >>> 3; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp38=(($shr)>>>0) < 32; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp38) { __label__ = 14; break; } else { __label__ = 26; break; } //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $54=$oldfirst; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd=(($54+8)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $55=HEAP32[(($fd)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F=$55; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $56=$oldfirst; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk=(($56+12)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $57=HEAP32[(($bk)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $B=$57; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $58=$nsize; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr40=$58 >>> 3; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $I=$shr40; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $59=$F; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $60=$B; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp41=(($59)|0)==(($60)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp41) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $61=$I; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl=1 << $61; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $neg=$shl ^ -1; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $62=$m_addr; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $smallmap=(($62)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $63=HEAP32[(($smallmap)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and43=$63 & $neg; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($smallmap)>>2)]=$and43; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 25; break; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $64=$F; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $65=$I; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl45=$65 << 1; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $66=$m_addr; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $smallbins=(($66+40)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=(($smallbins+($shl45<<2))|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $67=$arrayidx; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $68=$67; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp46=(($64)|0)==(($68)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp46) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $69=$F; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $70=$69; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $71=$m_addr; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($71+16)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $72=HEAPU32[(($least_addr)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp47=(($70)>>>0) >= (($72)>>>0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp47) { __label__ = 18; break; } else { var $83 = 0;__label__ = 21; break; } //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $73=$B; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $74=$I; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl48=$74 << 1; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $75=$m_addr; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $smallbins49=(($75+40)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx50=(($smallbins49+($shl48<<2))|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $76=$arrayidx50; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $77=$76; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp51=(($73)|0)==(($77)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp51) { var $82 = 1;__label__ = 20; break; } else { __label__ = 19; break; } //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $78=$B; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $79=$78; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $80=$m_addr; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr52=(($80+16)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $81=HEAPU32[(($least_addr52)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp53=(($79)>>>0) >= (($81)>>>0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $82 = $cmp53;__label__ = 20; break; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $82;
      var $83 = $82;__label__ = 21; break;
    case 21: 
      var $83;
      var $land_ext=(($83)&1);
      var $expval=(($land_ext)==(1));
      var $tobool=(($expval)|0)!=0;
      if ($tobool) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $84=$B; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $85=$F; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk55=(($85+12)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk55)>>2)]=$84; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $86=$F; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $87=$B; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd56=(($87+8)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd56)>>2)]=$86; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 24; break; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 23: 
      _abort(); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 24: 
      __label__ = 25; break;
    case 25: 
      __label__ = 72; break; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $88=$oldfirst; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $89=$88; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $TP=$89; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $90=$TP; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent=(($90+24)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $91=HEAP32[(($parent)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $XP=$91; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $92=$TP; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk60=(($92+12)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $93=HEAP32[(($bk60)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $94=$TP; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp61=(($93)|0)!=(($94)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp61) { __label__ = 27; break; } else { __label__ = 31; break; } //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 27: 
      var $95=$TP; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd64=(($95+8)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $96=HEAP32[(($fd64)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F63=$96; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $97=$TP; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk65=(($97+12)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $98=HEAP32[(($bk65)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $R=$98; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $99=$F63; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $100=$99; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $101=$m_addr; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr66=(($101+16)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $102=HEAPU32[(($least_addr66)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp67=(($100)>>>0) >= (($102)>>>0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv=(($cmp67)&1); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval68=(($conv)==(1)); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool69=(($expval68)|0)!=0; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool69) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $103=$R; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $104=$F63; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk71=(($104+12)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk71)>>2)]=$103; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $105=$F63; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $106=$R; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd72=(($106+8)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd72)>>2)]=$105; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 30; break; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 29: 
      _abort(); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 30: 
      __label__ = 43; break; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $107=$TP; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child=(($107+16)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx76=(($child+4)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx76; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $108=HEAP32[(($arrayidx76)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $R=$108; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp77=(($108)|0)!=0; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp77) { __label__ = 33; break; } else { __label__ = 32; break; } //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $109=$TP; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child80=(($109+16)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx81=(($child80)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx81; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $110=HEAP32[(($arrayidx81)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $R=$110; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp82=(($110)|0)!=0; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp82) { __label__ = 33; break; } else { __label__ = 42; break; } //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 33: 
      __label__ = 34; break; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $111=$R; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child85=(($111+16)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx86=(($child85+4)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx86; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $112=HEAP32[(($arrayidx86)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp87=(($112)|0)!=0; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp87) { var $115 = 1;__label__ = 36; break; } else { __label__ = 35; break; } //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $113=$R; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child90=(($113+16)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx91=(($child90)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx91; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $114=HEAP32[(($arrayidx91)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp92=(($114)|0)!=0; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $115 = $cmp92;__label__ = 36; break; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $115;
      if ($115) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $116=$CP; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $RP=$116; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $117=HEAP32[(($116)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $R=$117; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $118=$RP; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $119=$118; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $120=$m_addr; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr95=(($120+16)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $121=HEAPU32[(($least_addr95)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp96=(($119)>>>0) >= (($121)>>>0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv97=(($cmp96)&1); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval98=(($conv97)==(1)); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool99=(($expval98)|0)!=0; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool99) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 39: 
      var $122=$RP; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($122)>>2)]=0; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 41; break; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 40: 
      _abort(); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 41: 
      __label__ = 42; break; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 42: 
      __label__ = 43; break;
    case 43: 
      var $123=$XP; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp105=(($123)|0)!=0; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp105) { __label__ = 44; break; } else { __label__ = 71; break; } //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $124=$TP; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $index=(($124+28)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $125=HEAP32[(($index)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $126=$m_addr; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treebins=(($126+304)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx108=(($treebins+($125<<2))|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $H=$arrayidx108; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $127=$TP; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $128=$H; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $129=HEAP32[(($128)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp109=(($127)|0)==(($129)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp109) { __label__ = 45; break; } else { __label__ = 48; break; } //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $130=$R; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $131=$H; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($131)>>2)]=$130; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp112=(($130)|0)==0; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp112) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $132=$TP; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $index115=(($132+28)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $133=HEAP32[(($index115)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl116=1 << $133; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $neg117=$shl116 ^ -1; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $134=$m_addr; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treemap=(($134+4)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $135=HEAP32[(($treemap)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and118=$135 & $neg117; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($treemap)>>2)]=$and118; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 47: 
      __label__ = 55; break; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $136=$XP; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $137=$136; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $138=$m_addr; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr121=(($138+16)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $139=HEAPU32[(($least_addr121)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp122=(($137)>>>0) >= (($139)>>>0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv123=(($cmp122)&1); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval124=(($conv123)==(1)); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool125=(($expval124)|0)!=0; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool125) { __label__ = 49; break; } else { __label__ = 53; break; } //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $140=$XP; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child127=(($140+16)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx128=(($child127)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $141=HEAP32[(($arrayidx128)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $142=$TP; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp129=(($141)|0)==(($142)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp129) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $143=$R; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $144=$XP; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child132=(($144+16)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx133=(($child132)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx133)>>2)]=$143; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 52; break; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 51: 
      var $145=$R; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $146=$XP; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child135=(($146+16)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx136=(($child135+4)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx136)>>2)]=$145; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 52; break;
    case 52: 
      __label__ = 54; break; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 53: 
      _abort(); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 54: 
      __label__ = 55; break;
    case 55: 
      var $147=$R; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp141=(($147)|0)!=0; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp141) { __label__ = 56; break; } else { __label__ = 70; break; } //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 56: 
      var $148=$R; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $149=$148; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $150=$m_addr; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr144=(($150+16)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $151=HEAPU32[(($least_addr144)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp145=(($149)>>>0) >= (($151)>>>0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv146=(($cmp145)&1); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval147=(($conv146)==(1)); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool148=(($expval147)|0)!=0; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool148) { __label__ = 57; break; } else { __label__ = 68; break; } //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 57: 
      var $152=$XP; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $153=$R; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent150=(($153+24)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent150)>>2)]=$152; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $154=$TP; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child151=(($154+16)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx152=(($child151)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $155=HEAP32[(($arrayidx152)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $C0=$155; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp153=(($155)|0)!=0; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp153) { __label__ = 58; break; } else { __label__ = 62; break; } //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 58: 
      var $156=$C0; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $157=$156; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $158=$m_addr; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr156=(($158+16)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $159=HEAPU32[(($least_addr156)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp157=(($157)>>>0) >= (($159)>>>0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv158=(($cmp157)&1); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval159=(($conv158)==(1)); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool160=(($expval159)|0)!=0; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool160) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 59: 
      var $160=$C0; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $161=$R; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child162=(($161+16)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx163=(($child162)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx163)>>2)]=$160; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $162=$R; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $163=$C0; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent164=(($163+24)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent164)>>2)]=$162; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 61; break; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 60: 
      _abort(); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 61: 
      __label__ = 62; break; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 62: 
      var $164=$TP; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child168=(($164+16)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx169=(($child168+4)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $165=HEAP32[(($arrayidx169)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $C1=$165; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp170=(($165)|0)!=0; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp170) { __label__ = 63; break; } else { __label__ = 67; break; } //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 63: 
      var $166=$C1; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $167=$166; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $168=$m_addr; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr173=(($168+16)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $169=HEAPU32[(($least_addr173)>>2)]; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp174=(($167)>>>0) >= (($169)>>>0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv175=(($cmp174)&1); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval176=(($conv175)==(1)); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool177=(($expval176)|0)!=0; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool177) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 64: 
      var $170=$C1; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $171=$R; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child179=(($171+16)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx180=(($child179+4)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx180)>>2)]=$170; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $172=$R; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $173=$C1; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent181=(($173+24)|0); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent181)>>2)]=$172; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 66; break; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 65: 
      _abort(); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 66: 
      __label__ = 67; break; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 67: 
      __label__ = 69; break; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 68: 
      _abort(); //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 69: 
      __label__ = 70; break; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 70: 
      __label__ = 71; break; //@line 3806 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 71: 
      __label__ = 72; break;
    case 72: 
      var $174=$oldfirst; //@line 3807 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $175=$174; //@line 3807 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $176=$nsize; //@line 3807 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr190=(($175+$176)|0); //@line 3807 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $177=$add_ptr190; //@line 3807 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $oldfirst=$177; //@line 3807 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $178=$nsize; //@line 3808 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $179=$qsize; //@line 3808 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add191=((($179)+($178))|0); //@line 3808 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $qsize=$add191; //@line 3808 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 73; break; //@line 3809 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 73: 
      var $180=$oldfirst; //@line 3810 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head193=(($180+4)|0); //@line 3810 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $181=HEAP32[(($head193)>>2)]; //@line 3810 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and194=$181 & -2; //@line 3810 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head193)>>2)]=$and194; //@line 3810 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $182=$qsize; //@line 3810 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or195=$182 | 1; //@line 3810 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $183=$q; //@line 3810 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head196=(($183+4)|0); //@line 3810 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head196)>>2)]=$or195; //@line 3810 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $184=$qsize; //@line 3810 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $185=$q; //@line 3810 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $186=$185; //@line 3810 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $187=$qsize; //@line 3810 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr197=(($186+$187)|0); //@line 3810 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $188=$add_ptr197; //@line 3810 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $prev_foot198=(($188)|0); //@line 3810 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot198)>>2)]=$184; //@line 3810 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $189=$qsize; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr199=$189 >>> 3; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp200=(($shr199)>>>0) < 32; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp200) { __label__ = 74; break; } else { __label__ = 81; break; } //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 74: 
      var $190=$qsize; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr204=$190 >>> 3; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $I203=$shr204; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $191=$I203; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl206=$191 << 1; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $192=$m_addr; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $smallbins207=(($192+40)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx208=(($smallbins207+($shl206<<2))|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $193=$arrayidx208; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $194=$193; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $B205=$194; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $195=$B205; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F209=$195; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $196=$m_addr; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $smallmap210=(($196)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $197=HEAP32[(($smallmap210)>>2)]; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $198=$I203; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl211=1 << $198; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and212=$197 & $shl211; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool213=(($and212)|0)!=0; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool213) { __label__ = 76; break; } else { __label__ = 75; break; } //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 75: 
      var $199=$I203; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl215=1 << $199; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $200=$m_addr; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $smallmap216=(($200)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $201=HEAP32[(($smallmap216)>>2)]; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or217=$201 | $shl215; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($smallmap216)>>2)]=$or217; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 80; break; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 76: 
      var $202=$B205; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd219=(($202+8)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $203=HEAP32[(($fd219)>>2)]; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $204=$203; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $205=$m_addr; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr220=(($205+16)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $206=HEAPU32[(($least_addr220)>>2)]; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp221=(($204)>>>0) >= (($206)>>>0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv222=(($cmp221)&1); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval223=(($conv222)==(1)); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool224=(($expval223)|0)!=0; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool224) { __label__ = 77; break; } else { __label__ = 78; break; } //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 77: 
      var $207=$B205; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd226=(($207+8)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $208=HEAP32[(($fd226)>>2)]; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F209=$208; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 79; break; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 78: 
      _abort(); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 79: 
      __label__ = 80; break;
    case 80: 
      var $209=$q; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $210=$B205; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd230=(($210+8)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd230)>>2)]=$209; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $211=$q; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $212=$F209; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk231=(($212+12)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk231)>>2)]=$211; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $213=$F209; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $214=$q; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd232=(($214+8)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd232)>>2)]=$213; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $215=$B205; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $216=$q; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk233=(($216+12)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk233)>>2)]=$215; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 108; break; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 81: 
      var $217=$q; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $218=$217; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $TP235=$218; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $219=$qsize; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr238=$219 >>> 8; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $X=$shr238; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $220=$X; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp239=(($220)|0)==0; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp239) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 82: 
      $I237=0; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 87; break; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 83: 
      var $221=$X; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp243=(($221)>>>0) > 65535; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp243) { __label__ = 84; break; } else { __label__ = 85; break; } //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 84: 
      $I237=31; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 86; break; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 85: 
      var $222=$X; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$222; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $223=$Y; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub247=((($223)-(256))|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr248=$sub247 >>> 16; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and249=$shr248 & 8; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$and249; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $224=$N; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $225=$Y; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl250=$225 << $224; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shl250; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub251=((($shl250)-(4096))|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr252=$sub251 >>> 16; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and253=$shr252 & 4; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$and253; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $226=$K; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $227=$N; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add254=((($227)+($226))|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$add254; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $228=$K; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $229=$Y; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl255=$229 << $228; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shl255; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub256=((($shl255)-(16384))|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr257=$sub256 >>> 16; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and258=$shr257 & 2; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$and258; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $230=$N; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add259=((($230)+($and258))|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$add259; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $231=$N; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub260=(((14)-($231))|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $232=$K; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $233=$Y; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl261=$233 << $232; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shl261; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr262=$shl261 >>> 15; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add263=((($sub260)+($shr262))|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$add263; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $234=$K; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl264=$234 << 1; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $235=$qsize; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $236=$K; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add265=((($236)+(7))|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr266=$235 >>> (($add265)>>>0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and267=$shr266 & 1; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add268=((($shl264)+($and267))|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $I237=$add268; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 86; break;
    case 86: 
      __label__ = 87; break;
    case 87: 
      var $237=$I237; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $238=$m_addr; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treebins271=(($238+304)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx272=(($treebins271+($237<<2))|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $H236=$arrayidx272; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $239=$I237; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $240=$TP235; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $index273=(($240+28)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($index273)>>2)]=$239; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $241=$TP235; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child274=(($241+16)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx275=(($child274+4)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx275)>>2)]=0; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $242=$TP235; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child276=(($242+16)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx277=(($child276)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx277)>>2)]=0; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $243=$m_addr; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treemap278=(($243+4)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $244=HEAP32[(($treemap278)>>2)]; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $245=$I237; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl279=1 << $245; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and280=$244 & $shl279; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool281=(($and280)|0)!=0; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool281) { __label__ = 89; break; } else { __label__ = 88; break; } //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 88: 
      var $246=$I237; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl283=1 << $246; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $247=$m_addr; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treemap284=(($247+4)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $248=HEAP32[(($treemap284)>>2)]; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or285=$248 | $shl283; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($treemap284)>>2)]=$or285; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $249=$TP235; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $250=$H236; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($250)>>2)]=$249; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $251=$H236; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $252=$251; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $253=$TP235; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent286=(($253+24)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent286)>>2)]=$252; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $254=$TP235; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $255=$TP235; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk287=(($255+12)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk287)>>2)]=$254; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $256=$TP235; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd288=(($256+8)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd288)>>2)]=$254; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 107; break; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $257=$H236; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $258=HEAP32[(($257)>>2)]; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $T=$258; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $259=$qsize; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $260=$I237; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp291=(($260)|0)==31; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp291) { __label__ = 90; break; } else { __label__ = 91; break; } //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $cond300 = 0;__label__ = 92; break; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 91: 
      var $261=$I237; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr295=$261 >>> 1; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add296=((($shr295)+(8))|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub297=((($add296)-(2))|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub298=(((31)-($sub297))|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond300 = $sub298;__label__ = 92; break; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 92: 
      var $cond300; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl301=$259 << $cond300; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K290=$shl301; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 93; break; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 93: 
      var $262=$T; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head302=(($262+4)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $263=HEAP32[(($head302)>>2)]; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and303=$263 & -8; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $264=$qsize; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp304=(($and303)|0)!=(($264)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp304) { __label__ = 94; break; } else { __label__ = 100; break; } //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 94: 
      var $265=$K290; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr307=$265 >>> 31; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and308=$shr307 & 1; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $266=$T; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child309=(($266+16)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx310=(($child309+($and308<<2))|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $C=$arrayidx310; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $267=$K290; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl311=$267 << 1; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K290=$shl311; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $268=$C; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $269=HEAP32[(($268)>>2)]; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp312=(($269)|0)!=0; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp312) { __label__ = 95; break; } else { __label__ = 96; break; } //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 95: 
      var $270=$C; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $271=HEAP32[(($270)>>2)]; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $T=$271; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 99; break; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 96: 
      var $272=$C; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $273=$272; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $274=$m_addr; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr316=(($274+16)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $275=HEAPU32[(($least_addr316)>>2)]; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp317=(($273)>>>0) >= (($275)>>>0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv318=(($cmp317)&1); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval319=(($conv318)==(1)); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool320=(($expval319)|0)!=0; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool320) { __label__ = 97; break; } else { __label__ = 98; break; } //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 97: 
      var $276=$TP235; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $277=$C; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($277)>>2)]=$276; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $278=$T; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $279=$TP235; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent322=(($279+24)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent322)>>2)]=$278; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $280=$TP235; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $281=$TP235; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk323=(($281+12)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk323)>>2)]=$280; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $282=$TP235; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd324=(($282+8)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd324)>>2)]=$280; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 106; break; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 98: 
      _abort(); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 99: 
      __label__ = 105; break; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 100: 
      var $283=$T; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd329=(($283+8)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $284=HEAP32[(($fd329)>>2)]; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F328=$284; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $285=$T; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $286=$285; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $287=$m_addr; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr330=(($287+16)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $288=HEAPU32[(($least_addr330)>>2)]; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp331=(($286)>>>0) >= (($288)>>>0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp331) { __label__ = 101; break; } else { var $293 = 0;__label__ = 102; break; } //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 101: 
      var $289=$F328; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $290=$289; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $291=$m_addr; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr334=(($291+16)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $292=HEAPU32[(($least_addr334)>>2)]; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp335=(($290)>>>0) >= (($292)>>>0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $293 = $cmp335;__label__ = 102; break;
    case 102: 
      var $293;
      var $land_ext338=(($293)&1);
      var $expval339=(($land_ext338)==(1));
      var $tobool340=(($expval339)|0)!=0;
      if ($tobool340) { __label__ = 103; break; } else { __label__ = 104; break; }
    case 103: 
      var $294=$TP235; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $295=$F328; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk342=(($295+12)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk342)>>2)]=$294; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $296=$T; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd343=(($296+8)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd343)>>2)]=$294; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $297=$F328; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $298=$TP235; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd344=(($298+8)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd344)>>2)]=$297; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $299=$T; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $300=$TP235; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk345=(($300+12)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk345)>>2)]=$299; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $301=$TP235; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent346=(($301+24)|0); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent346)>>2)]=0; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 106; break; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 104: 
      _abort(); //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 105: 
      __label__ = 93; break; //@line 3811 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 106: 
      __label__ = 107; break;
    case 107: 
      __label__ = 108; break;
    case 108: 
      __label__ = 109; break;
    case 109: 
      __label__ = 110; break;
    case 110: 
      var $302=$p; //@line 3816 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $303=$302; //@line 3816 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr353=(($303+8)|0); //@line 3816 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      ;
      return $add_ptr353; //@line 3816 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_prepend_alloc["X"]=1;

function __ZNKSt9bad_alloc4whatEv($this) {
  ;
  var __label__;

  var $this_addr;
  $this_addr=$this;
  var $this1=$this_addr;
  ;
  return ((STRING_TABLE.__str3106)|0); //@line 160 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
}


function __ZSt15get_new_handlerv() {
  ;
  var __label__;

  var $0=(tempValue=HEAP32[((__ZL13__new_handler)>>2)],HEAP32[((__ZL13__new_handler)>>2)]=tempValue+0,tempValue); //@line 146 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
  var $1=$0; //@line 146 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
  ;
  return $1; //@line 146 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
}


function __ZSt15set_new_handlerPFvvE($handler) {
  ;
  var __label__;

  var $handler_addr;
  $handler_addr=$handler;
  var $0=$handler_addr; //@line 140 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
  var $1=$0; //@line 140 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
  var $2=(tempValue=HEAP32[((__ZL13__new_handler)>>2)],HEAP32[((__ZL13__new_handler)>>2)]=$1,tempValue); //@line 140 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
  var $3=$2; //@line 140 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
  ;
  return $3; //@line 140 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
}


function __ZNSt9bad_allocC2Ev($this) {
  ;
  var __label__;

  var $this_addr_i;
  var $this_addr;
  $this_addr=$this;
  var $this1=$this_addr;
  var $0=$this1; //@line 150 "/home/slarti/Development/emscripten/emscripten/system/include/libcxx/new"
  $this_addr_i=$0;
  var $this1_i=$this_addr_i;
  var $1=$this1_i; //@line 90 "/home/slarti/Development/emscripten/emscripten/system/include/libcxx/exception"
  HEAP32[(($1)>>2)]=((__ZTVSt9exception+8)|0); //@line 90 "/home/slarti/Development/emscripten/emscripten/system/include/libcxx/exception"
  var $2=$this1; //@line 150 "/home/slarti/Development/emscripten/emscripten/system/include/libcxx/new"
  HEAP32[(($2)>>2)]=((__ZTVSt9bad_alloc+8)|0); //@line 150 "/home/slarti/Development/emscripten/emscripten/system/include/libcxx/new"
  ;
  return; //@line 151 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
}


function __ZdlPv($ptr) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $ptr_addr;
      $ptr_addr=$ptr;
      var $0=$ptr_addr; //@line 107 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $tobool=(($0)|0)!=0; //@line 107 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 107 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 3: 
      var $1=$ptr_addr; //@line 108 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      _free($1); //@line 108 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 4; break; //@line 108 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 4: 
      ;
      return; //@line 109 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZdlPvRKSt9nothrow_t($ptr, $0) {
  ;
  var __label__;

  var $ptr_addr;
  var $_addr;
  $ptr_addr=$ptr;
  $_addr=$0;
  var $1=$ptr_addr; //@line 115 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
  __ZdlPv($1); //@line 115 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
  ;
  return; //@line 116 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
}


function __ZdaPv($ptr) {
  ;
  var __label__;

  var $ptr_addr;
  $ptr_addr=$ptr;
  var $0=$ptr_addr; //@line 122 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
  __ZdlPv($0); //@line 122 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
  ;
  return; //@line 123 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
}


function __ZdaPvRKSt9nothrow_t($ptr, $0) {
  ;
  var __label__;

  var $ptr_addr;
  var $_addr;
  $ptr_addr=$ptr;
  $_addr=$0;
  var $1=$ptr_addr; //@line 129 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
  __ZdaPv($1); //@line 129 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
  ;
  return; //@line 130 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
}


function __ZNSt9bad_allocD0Ev($this) {
  ;
  var __label__;

  var $this_addr;
  $this_addr=$this;
  var $this1=$this_addr;
  FUNCTION_TABLE[__ZNSt9bad_allocD1Ev]($this1); //@line 154 "/home/slarti/Development/emscripten/emscripten/system/include/libcxx/new"
  var $0=$this1; //@line 154 "/home/slarti/Development/emscripten/emscripten/system/include/libcxx/new"
  __ZdlPv($0); //@line 154 "/home/slarti/Development/emscripten/emscripten/system/include/libcxx/new"
  ;
  return; //@line 155 "/home/slarti/Development/emscripten/emscripten/system/include/libcxx/new"
}


function __ZNSt9bad_allocD2Ev($this) {
  ;
  var __label__;

  var $this_addr;
  $this_addr=$this;
  var $this1=$this_addr;
  var $0=$this1; //@line 155 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
  __ZNSt9exceptionD2Ev($0); //@line 155 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
  ;
  return; //@line 155 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
}


function _add_segment($m, $tbase, $tsize, $mmapped) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $m_addr;
      var $tbase_addr;
      var $tsize_addr;
      var $mmapped_addr;
      var $old_top;
      var $oldsp;
      var $old_end;
      var $ssize;
      var $rawsp;
      var $offset;
      var $asp;
      var $csp;
      var $sp;
      var $ss;
      var $tnext;
      var $p;
      var $nfences;
      var $nextp;
      var $q;
      var $psize;
      var $tn;
      var $I;
      var $B;
      var $F;
      var $TP;
      var $H;
      var $I57;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K105;
      var $C;
      var $F144;
      $m_addr=$m;
      $tbase_addr=$tbase;
      $tsize_addr=$tsize;
      $mmapped_addr=$mmapped;
      var $0=$m_addr; //@line 3822 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $top=(($0+24)|0); //@line 3822 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $1=HEAP32[(($top)>>2)]; //@line 3822 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $2=$1; //@line 3822 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $old_top=$2; //@line 3822 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $3=$m_addr; //@line 3823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $4=$old_top; //@line 3823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $call=_segment_holding($3, $4); //@line 3823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $oldsp=$call; //@line 3823 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $5=$oldsp; //@line 3824 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $base=(($5)|0); //@line 3824 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $6=HEAP32[(($base)>>2)]; //@line 3824 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $7=$oldsp; //@line 3824 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $size=(($7+4)|0); //@line 3824 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $8=HEAP32[(($size)>>2)]; //@line 3824 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($6+$8)|0); //@line 3824 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $old_end=$add_ptr; //@line 3824 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $ssize=24; //@line 3825 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $9=$old_end; //@line 3826 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $10=$ssize; //@line 3826 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add=((($10)+(16))|0); //@line 3826 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add1=((($add)+(7))|0); //@line 3826 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $idx_neg=(((-$add1))|0); //@line 3826 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr2=(($9+$idx_neg)|0); //@line 3826 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $rawsp=$add_ptr2; //@line 3826 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $11=$rawsp; //@line 3827 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr3=(($11+8)|0); //@line 3827 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $12=$add_ptr3; //@line 3827 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and=$12 & 7; //@line 3827 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($and)|0)==0; //@line 3827 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3827 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $cond = 0;__label__ = 5; break; //@line 3827 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $13=$rawsp; //@line 3827 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr4=(($13+8)|0); //@line 3827 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $14=$add_ptr4; //@line 3827 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and5=$14 & 7; //@line 3827 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub=(((8)-($and5))|0); //@line 3827 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and6=$sub & 7; //@line 3827 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond = $and6;__label__ = 5; break; //@line 3827 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $cond; //@line 3827 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $offset=$cond; //@line 3827 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $15=$rawsp; //@line 3828 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $16=$offset; //@line 3828 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr7=(($15+$16)|0); //@line 3828 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $asp=$add_ptr7; //@line 3828 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $17=$asp; //@line 3829 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $18=$old_top; //@line 3829 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr8=(($18+16)|0); //@line 3829 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp9=(($17)>>>0) < (($add_ptr8)>>>0); //@line 3829 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp9) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3829 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $19=$old_top; //@line 3829 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond13 = $19;__label__ = 8; break; //@line 3829 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $20=$asp; //@line 3829 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond13 = $20;__label__ = 8; break; //@line 3829 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $cond13; //@line 3829 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $csp=$cond13; //@line 3829 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $21=$csp; //@line 3830 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $22=$21; //@line 3830 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $sp=$22; //@line 3830 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $23=$sp; //@line 3831 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $24=$23; //@line 3831 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr14=(($24+8)|0); //@line 3831 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $25=$add_ptr14; //@line 3831 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $ss=$25; //@line 3831 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $26=$sp; //@line 3832 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $27=$26; //@line 3832 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $28=$ssize; //@line 3832 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr15=(($27+$28)|0); //@line 3832 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $29=$add_ptr15; //@line 3832 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $tnext=$29; //@line 3832 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $30=$tnext; //@line 3833 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $p=$30; //@line 3833 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $nfences=0; //@line 3834 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $31=$m_addr; //@line 3837 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $32=$tbase_addr; //@line 3837 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $33=$32; //@line 3837 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $34=$tsize_addr; //@line 3837 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub16=((($34)-(40))|0); //@line 3837 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      _init_top($31, $33, $sub16); //@line 3837 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $35=$ssize; //@line 3841 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or=$35 | 1; //@line 3841 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or17=$or | 2; //@line 3841 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $36=$sp; //@line 3841 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head=(($36+4)|0); //@line 3841 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head)>>2)]=$or17; //@line 3841 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $37=$ss; //@line 3842 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $38=$m_addr; //@line 3842 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $seg=(($38+444)|0); //@line 3842 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $39=$37; //@line 3842 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $40=$seg; //@line 3842 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[((($39)+(4))>>2)]=HEAP32[((($40)+(4))>>2)];HEAP32[((($39)+(8))>>2)]=HEAP32[((($40)+(8))>>2)];HEAP32[((($39)+(12))>>2)]=HEAP32[((($40)+(12))>>2)]; //@line 3842 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $41=$tbase_addr; //@line 3843 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $42=$m_addr; //@line 3843 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $seg18=(($42+444)|0); //@line 3843 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $base19=(($seg18)|0); //@line 3843 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($base19)>>2)]=$41; //@line 3843 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $43=$tsize_addr; //@line 3844 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $44=$m_addr; //@line 3844 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $seg20=(($44+444)|0); //@line 3844 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $size21=(($seg20+4)|0); //@line 3844 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($size21)>>2)]=$43; //@line 3844 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $45=$mmapped_addr; //@line 3845 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $46=$m_addr; //@line 3845 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $seg22=(($46+444)|0); //@line 3845 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sflags=(($seg22+12)|0); //@line 3845 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($sflags)>>2)]=$45; //@line 3845 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $47=$ss; //@line 3846 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $48=$m_addr; //@line 3846 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $seg23=(($48+444)|0); //@line 3846 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $next=(($seg23+8)|0); //@line 3846 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($next)>>2)]=$47; //@line 3846 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 9; break; //@line 3849 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $49=$p; //@line 3850 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $50=$49; //@line 3850 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr24=(($50+4)|0); //@line 3850 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $51=$add_ptr24; //@line 3850 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $nextp=$51; //@line 3850 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $52=$p; //@line 3851 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head25=(($52+4)|0); //@line 3851 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head25)>>2)]=7; //@line 3851 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $53=$nfences; //@line 3852 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $inc=((($53)+(1))|0); //@line 3852 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $nfences=$inc; //@line 3852 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $54=$nextp; //@line 3853 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head26=(($54+4)|0); //@line 3853 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $55=$head26; //@line 3853 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $56=$old_end; //@line 3853 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp27=(($55)>>>0) < (($56)>>>0); //@line 3853 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp27) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3853 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $57=$nextp; //@line 3854 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $p=$57; //@line 3854 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 3854 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 11: 
      __label__ = 13; break; //@line 3856 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 12: 
      __label__ = 9; break; //@line 3857 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $58=$csp; //@line 3861 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $59=$old_top; //@line 3861 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp28=(($58)|0)!=(($59)|0); //@line 3861 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp28) { __label__ = 14; break; } else { __label__ = 50; break; } //@line 3861 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $60=$old_top; //@line 3862 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $61=$60; //@line 3862 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $q=$61; //@line 3862 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $62=$csp; //@line 3863 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $63=$old_top; //@line 3863 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_lhs_cast=$62; //@line 3863 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_rhs_cast=$63; //@line 3863 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 3863 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $psize=$sub_ptr_sub; //@line 3863 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $64=$q; //@line 3864 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $65=$64; //@line 3864 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $66=$psize; //@line 3864 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr30=(($65+$66)|0); //@line 3864 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $67=$add_ptr30; //@line 3864 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $tn=$67; //@line 3864 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $68=$tn; //@line 3865 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head31=(($68+4)|0); //@line 3865 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $69=HEAP32[(($head31)>>2)]; //@line 3865 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and32=$69 & -2; //@line 3865 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head31)>>2)]=$and32; //@line 3865 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $70=$psize; //@line 3865 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or33=$70 | 1; //@line 3865 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $71=$q; //@line 3865 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head34=(($71+4)|0); //@line 3865 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head34)>>2)]=$or33; //@line 3865 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $72=$psize; //@line 3865 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $73=$q; //@line 3865 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $74=$73; //@line 3865 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $75=$psize; //@line 3865 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add_ptr35=(($74+$75)|0); //@line 3865 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $76=$add_ptr35; //@line 3865 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $prev_foot=(($76)|0); //@line 3865 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot)>>2)]=$72; //@line 3865 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $77=$psize; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr=$77 >>> 3; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp36=(($shr)>>>0) < 32; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp36) { __label__ = 15; break; } else { __label__ = 22; break; } //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $78=$psize; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr38=$78 >>> 3; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $I=$shr38; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $79=$I; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl=$79 << 1; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $80=$m_addr; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $smallbins=(($80+40)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=(($smallbins+($shl<<2))|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $81=$arrayidx; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $82=$81; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $B=$82; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $83=$B; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F=$83; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $84=$m_addr; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $smallmap=(($84)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $85=HEAP32[(($smallmap)>>2)]; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $86=$I; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl39=1 << $86; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and40=$85 & $shl39; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($and40)|0)!=0; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $87=$I; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl42=1 << $87; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $88=$m_addr; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $smallmap43=(($88)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $89=HEAP32[(($smallmap43)>>2)]; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or44=$89 | $shl42; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($smallmap43)>>2)]=$or44; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $90=$B; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd=(($90+8)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $91=HEAP32[(($fd)>>2)]; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $92=$91; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $93=$m_addr; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($93+16)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $94=HEAPU32[(($least_addr)>>2)]; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp46=(($92)>>>0) >= (($94)>>>0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv=(($cmp46)&1); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval=(($conv)==(1)); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool47=(($expval)|0)!=0; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool47) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $95=$B; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd49=(($95+8)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $96=HEAP32[(($fd49)>>2)]; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F=$96; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 19: 
      _abort(); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $97=$q; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $98=$B; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd53=(($98+8)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd53)>>2)]=$97; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $99=$q; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $100=$F; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk=(($100+12)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk)>>2)]=$99; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $101=$F; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $102=$q; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd54=(($102+8)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd54)>>2)]=$101; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $103=$B; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $104=$q; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk55=(($104+12)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk55)>>2)]=$103; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 49; break; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $105=$q; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $106=$105; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $TP=$106; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $107=$psize; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr58=$107 >>> 8; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $X=$shr58; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $108=$X; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp59=(($108)|0)==0; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp59) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 23: 
      $I57=0; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $109=$X; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp63=(($109)>>>0) > 65535; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp63) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 25: 
      $I57=31; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $110=$X; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$110; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $111=$Y; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub67=((($111)-(256))|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr68=$sub67 >>> 16; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and69=$shr68 & 8; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$and69; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $112=$N; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $113=$Y; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl70=$113 << $112; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shl70; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub71=((($shl70)-(4096))|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr72=$sub71 >>> 16; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and73=$shr72 & 4; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$and73; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $114=$K; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $115=$N; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add74=((($115)+($114))|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$add74; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $116=$K; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $117=$Y; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl75=$117 << $116; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shl75; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub76=((($shl75)-(16384))|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr77=$sub76 >>> 16; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and78=$shr77 & 2; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$and78; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $118=$N; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add79=((($118)+($and78))|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $N=$add79; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $119=$N; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub80=(((14)-($119))|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $120=$K; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $121=$Y; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl81=$121 << $120; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $Y=$shl81; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr82=$shl81 >>> 15; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add83=((($sub80)+($shr82))|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K=$add83; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $122=$K; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl84=$122 << 1; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $123=$psize; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $124=$K; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add85=((($124)+(7))|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr86=$123 >>> (($add85)>>>0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and87=$shr86 & 1; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add88=((($shl84)+($and87))|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $I57=$add88; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      var $125=$I57; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $126=$m_addr; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treebins=(($126+304)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx91=(($treebins+($125<<2))|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $H=$arrayidx91; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $127=$I57; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $128=$TP; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $index=(($128+28)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($index)>>2)]=$127; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $129=$TP; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child=(($129+16)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx92=(($child+4)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx92)>>2)]=0; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $130=$TP; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child93=(($130+16)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx94=(($child93)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx94)>>2)]=0; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $131=$m_addr; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treemap=(($131+4)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $132=HEAP32[(($treemap)>>2)]; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $133=$I57; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl95=1 << $133; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and96=$132 & $shl95; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool97=(($and96)|0)!=0; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool97) { __label__ = 30; break; } else { __label__ = 29; break; } //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $134=$I57; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl99=1 << $134; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $135=$m_addr; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $treemap100=(($135+4)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $136=HEAP32[(($treemap100)>>2)]; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $or101=$136 | $shl99; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($treemap100)>>2)]=$or101; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $137=$TP; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $138=$H; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($138)>>2)]=$137; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $139=$H; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $140=$139; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $141=$TP; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent=(($141+24)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent)>>2)]=$140; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $142=$TP; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $143=$TP; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk102=(($143+12)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk102)>>2)]=$142; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $144=$TP; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd103=(($144+8)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd103)>>2)]=$142; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 48; break; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $145=$H; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $146=HEAP32[(($145)>>2)]; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $T=$146; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $147=$psize; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $148=$I57; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp106=(($148)|0)==31; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp106) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $cond115 = 0;__label__ = 33; break; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $149=$I57; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr110=$149 >>> 1; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $add111=((($shr110)+(8))|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub112=((($add111)-(2))|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $sub113=(((31)-($sub112))|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cond115 = $sub113;__label__ = 33; break; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $cond115; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl116=$147 << $cond115; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K105=$shl116; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $150=$T; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $head118=(($150+4)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $151=HEAP32[(($head118)>>2)]; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and119=$151 & -8; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $152=$psize; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp120=(($and119)|0)!=(($152)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp120) { __label__ = 35; break; } else { __label__ = 41; break; } //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $153=$K105; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shr123=$153 >>> 31; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $and124=$shr123 & 1; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $154=$T; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $child125=(($154+16)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $arrayidx126=(($child125+($and124<<2))|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $C=$arrayidx126; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $155=$K105; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $shl127=$155 << 1; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $K105=$shl127; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $156=$C; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $157=HEAP32[(($156)>>2)]; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp128=(($157)|0)!=0; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp128) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $158=$C; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $159=HEAP32[(($158)>>2)]; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $T=$159; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 40; break; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $160=$C; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $161=$160; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $162=$m_addr; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr132=(($162+16)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $163=HEAPU32[(($least_addr132)>>2)]; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp133=(($161)>>>0) >= (($163)>>>0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $conv134=(($cmp133)&1); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $expval135=(($conv134)==(1)); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $tobool136=(($expval135)|0)!=0; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($tobool136) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $164=$TP; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $165=$C; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($165)>>2)]=$164; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $166=$T; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $167=$TP; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent138=(($167+24)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent138)>>2)]=$166; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $168=$TP; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $169=$TP; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk139=(($169+12)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk139)>>2)]=$168; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $170=$TP; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd140=(($170+8)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd140)>>2)]=$168; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 39: 
      _abort(); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 40: 
      __label__ = 46; break; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 41: 
      var $171=$T; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd145=(($171+8)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $172=HEAP32[(($fd145)>>2)]; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      $F144=$172; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $173=$T; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $174=$173; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $175=$m_addr; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr146=(($175+16)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $176=HEAPU32[(($least_addr146)>>2)]; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp147=(($174)>>>0) >= (($176)>>>0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      if ($cmp147) { __label__ = 42; break; } else { var $181 = 0;__label__ = 43; break; } //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $177=$F144; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $178=$177; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $179=$m_addr; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $least_addr149=(($179+16)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $180=HEAPU32[(($least_addr149)>>2)]; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $cmp150=(($178)>>>0) >= (($180)>>>0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $181 = $cmp150;__label__ = 43; break;
    case 43: 
      var $181;
      var $land_ext=(($181)&1);
      var $expval152=(($land_ext)==(1));
      var $tobool153=(($expval152)|0)!=0;
      if ($tobool153) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $182=$TP; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $183=$F144; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk155=(($183+12)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk155)>>2)]=$182; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $184=$T; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd156=(($184+8)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd156)>>2)]=$182; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $185=$F144; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $186=$TP; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $fd157=(($186+8)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd157)>>2)]=$185; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $187=$T; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $188=$TP; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $bk158=(($188+12)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk158)>>2)]=$187; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $189=$TP; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      var $parent159=(($189+24)|0); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent159)>>2)]=0; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 45: 
      _abort(); //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 46: 
      __label__ = 34; break; //@line 3866 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 47: 
      __label__ = 48; break;
    case 48: 
      __label__ = 49; break;
    case 49: 
      __label__ = 50; break; //@line 3867 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    case 50: 
      ;
      return; //@line 3870 "/home/slarti/Development/emscripten/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_add_segment["X"]=1;

function __Znwj($size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $size_addr;
      var $p;
      var $nh;
      var $exn_slot;
      var $ehselector_slot;
      $size_addr=$size;
      var $0=$size_addr; //@line 35 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $cmp=(($0)|0)==0; //@line 35 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 35 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 3: 
      $size_addr=1; //@line 36 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 4; break; //@line 36 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 4: 
      __label__ = 5; break; //@line 38 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 5: 
      var $1=$size_addr; //@line 38 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $call=_malloc($1); //@line 38 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      $p=$call; //@line 38 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $cmp1=(($call)|0)==0; //@line 38 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      if ($cmp1) { __label__ = 6; break; } else { __label__ = 14; break; } //@line 38 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 6: 
      var $call2=__ZSt15get_new_handlerv(); //@line 42 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      $nh=$call2; //@line 42 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $2=$nh; //@line 43 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $tobool=(($2)|0)!=0; //@line 43 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      if ($tobool) { __label__ = 7; break; } else { __label__ = 12; break; } //@line 43 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 7: 
      var $3=$nh; //@line 44 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      (function() { try { __THREW__ = false; return FUNCTION_TABLE[$3]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; Module.print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      __label__ = 13; break; //@line 44 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 9: 
      var $4=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)],[]);
      var $5=$4.f0; //@line 44 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      $exn_slot=$5; //@line 44 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $6=$4.f1; //@line 44 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      $ehselector_slot=$6; //@line 44 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 10; break; //@line 44 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 10: 
      var $sel=$ehselector_slot; //@line 52 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $ehspec_fails=(($sel)|0) < 0; //@line 52 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      if ($ehspec_fails) { __label__ = 11; break; } else { __label__ = 15; break; } //@line 52 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 11: 
      var $exn=$exn_slot; //@line 52 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      ___cxa_call_unexpected($exn); //@line 52 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      throw "Reached an unreachable!" //@line 52 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 12: 
      var $exception=___cxa_allocate_exception(4); //@line 47 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $7=$exception; //@line 47 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      FUNCTION_TABLE[__ZNSt9bad_allocC1Ev]($7); //@line 47 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      (function() { try { __THREW__ = false; return ___cxa_throw($exception, __ZTISt9bad_alloc, 44) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; Module.print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 16; break; } else { __label__ = 9; break; }
    case 13: 
      __label__ = 5; break; //@line 51 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 14: 
      var $8=$p; //@line 52 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      ;
      return $8; //@line 52 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 15: 
      var $exn5=$exn_slot; //@line 52 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $sel6=$ehselector_slot; //@line 52 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $lpad_val=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $exn5, tempValue); //@line 52 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $lpad_val7=($lpad_val.f1 = $sel6, $lpad_val); //@line 52 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      Module.print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)]; //@line 52 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 16: 
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}
__Znwj["X"]=1;

function __ZnwjRKSt9nothrow_t($size, $0) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $size_addr;
      var $_addr;
      var $p;
      var $exn_slot;
      var $ehselector_slot;
      $size_addr=$size;
      $_addr=$0;
      $p=0; //@line 59 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $1=$size_addr; //@line 64 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $call = (function() { try { __THREW__ = false; return __Znwj($1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; Module.print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $p=$call; //@line 64 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 7; break; //@line 66 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 4: 
      var $2=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)],[0]);
      var $3=$2.f0; //@line 64 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      $exn_slot=$3; //@line 64 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $4=$2.f1; //@line 64 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      $ehselector_slot=$4; //@line 64 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 5; break; //@line 64 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 5: 
      var $exn=$exn_slot; //@line 66 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $5=___cxa_begin_catch($exn); //@line 66 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      (function() { try { __THREW__ = false; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; Module.print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      __label__ = 7; break; //@line 69 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 7: 
      var $6=$p; //@line 71 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      ;
      return $6; //@line 71 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 8: 
      var $7=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)],[]);
      var $8=$7.f0; //@line 69 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      $exn_slot=$8; //@line 69 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $9=$7.f1; //@line 69 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      $ehselector_slot=$9; //@line 69 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 9; break; //@line 69 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 9: 
      var $exn3=$exn_slot; //@line 71 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      ___cxa_call_unexpected($exn3); //@line 71 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      throw "Reached an unreachable!" //@line 71 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    default: assert(0, "bad label: " + __label__);
  }
}


function __Znaj($size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $size_addr;
      var $exn_slot;
      var $ehselector_slot;
      $size_addr=$size;
      var $0=$size_addr; //@line 81 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $call = (function() { try { __THREW__ = false; return __Znwj($0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; Module.print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      ;
      return $call; //@line 81 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 4: 
      var $1=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)],[]);
      var $2=$1.f0; //@line 81 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      $exn_slot=$2; //@line 81 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $3=$1.f1; //@line 81 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      $ehselector_slot=$3; //@line 81 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 5; break; //@line 81 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 5: 
      var $sel=$ehselector_slot; //@line 81 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $ehspec_fails=(($sel)|0) < 0; //@line 81 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      if ($ehspec_fails) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 81 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 6: 
      var $exn=$exn_slot; //@line 81 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      ___cxa_call_unexpected($exn); //@line 81 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      throw "Reached an unreachable!" //@line 81 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 7: 
      var $exn1=$exn_slot; //@line 81 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $sel2=$ehselector_slot; //@line 81 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $lpad_val=(tempValue = [0,0,0,0,0,0,0,0], tempValue.f0 = $exn1, tempValue); //@line 81 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $lpad_val3=($lpad_val.f1 = $sel2, $lpad_val); //@line 81 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      Module.print("Resuming exception");throw HEAP32[((_llvm_eh_exception.buf)>>2)]; //@line 81 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZnajRKSt9nothrow_t($size, $nothrow) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $size_addr;
      var $nothrow_addr;
      var $p;
      var $exn_slot;
      var $ehselector_slot;
      $size_addr=$size;
      $nothrow_addr=$nothrow;
      $p=0; //@line 88 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $0=$size_addr; //@line 93 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $call = (function() { try { __THREW__ = false; return __Znaj($0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; Module.print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $p=$call; //@line 93 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 7; break; //@line 95 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 4: 
      var $1=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)],[0]);
      var $2=$1.f0; //@line 93 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      $exn_slot=$2; //@line 93 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $3=$1.f1; //@line 93 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      $ehselector_slot=$3; //@line 93 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 5; break; //@line 93 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 5: 
      var $exn=$exn_slot; //@line 95 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $4=___cxa_begin_catch($exn); //@line 95 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      (function() { try { __THREW__ = false; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = true; Module.print("Exception: " + e + ", currently at: " + (new Error().stack)); return null } })();if (!__THREW__) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      __label__ = 7; break; //@line 98 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 7: 
      var $5=$p; //@line 100 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      ;
      return $5; //@line 100 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 8: 
      var $6=___cxa_find_matching_catch(HEAP32[((_llvm_eh_exception.buf)>>2)],HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)],[]);
      var $7=$6.f0; //@line 98 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      $exn_slot=$7; //@line 98 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $8=$6.f1; //@line 98 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      $ehselector_slot=$8; //@line 98 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      __label__ = 9; break; //@line 98 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 9: 
      var $exn3=$exn_slot; //@line 100 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      ___cxa_call_unexpected($exn3); //@line 100 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      throw "Reached an unreachable!" //@line 100 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    default: assert(0, "bad label: " + __label__);
  }
}


function __ZNKSt20bad_array_new_length4whatEv($this) {
  ;
  var __label__;

  var $this_addr;
  $this_addr=$this;
  var $this1=$this_addr;
  ;
  return ((STRING_TABLE.__str14107)|0); //@line 174 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
}


function __ZNSt20bad_array_new_lengthC2Ev($this) {
  ;
  var __label__;

  var $this_addr;
  $this_addr=$this;
  var $this1=$this_addr;
  var $0=$this1; //@line 164 "/home/slarti/Development/emscripten/emscripten/system/include/libcxx/new"
  __ZNSt9bad_allocC2Ev($0); //@line 164 "/home/slarti/Development/emscripten/emscripten/system/include/libcxx/new"
  var $1=$this1; //@line 164 "/home/slarti/Development/emscripten/emscripten/system/include/libcxx/new"
  HEAP32[(($1)>>2)]=((__ZTVSt20bad_array_new_length+8)|0); //@line 164 "/home/slarti/Development/emscripten/emscripten/system/include/libcxx/new"
  ;
  return; //@line 165 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
}


function __ZNSt20bad_array_new_lengthD0Ev($this) {
  ;
  var __label__;

  var $this_addr;
  $this_addr=$this;
  var $this1=$this_addr;
  FUNCTION_TABLE[__ZNSt20bad_array_new_lengthD1Ev]($this1); //@line 168 "/home/slarti/Development/emscripten/emscripten/system/include/libcxx/new"
  var $0=$this1; //@line 168 "/home/slarti/Development/emscripten/emscripten/system/include/libcxx/new"
  __ZdlPv($0); //@line 168 "/home/slarti/Development/emscripten/emscripten/system/include/libcxx/new"
  ;
  return; //@line 169 "/home/slarti/Development/emscripten/emscripten/system/include/libcxx/new"
}


function __ZSt17__throw_bad_allocv() {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $exception=___cxa_allocate_exception(4); //@line 181 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      var $0=$exception; //@line 181 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      FUNCTION_TABLE[__ZNSt9bad_allocC1Ev]($0); //@line 181 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      ___cxa_throw($exception, __ZTISt9bad_alloc, 44); //@line 181 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
      throw "Reached an unreachable!" //@line 181 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    case 3: 
      ;
      return; //@line 183 "/home/slarti/Development/emscripten/emscripten/system/lib/libcxx/new.cpp"
    default: assert(0, "bad label: " + __label__);
  }
}

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
var goog = { math: {} };


/**
 * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
 * values as *signed* integers.  See the from* functions below for more
 * convenient ways of constructing Longs.
 *
 * The internal representation of a long is the two given signed, 32-bit values.
 * We use 32-bit pieces because these are the size of integers on which
 * Javascript performs bit-operations.  For operations like addition and
 * multiplication, we split each number into 16-bit pieces, which can easily be
 * multiplied within Javascript's floating-point representation without overflow
 * or change in sign.
 *
 * In the algorithms below, we frequently reduce the negative case to the
 * positive case by negating the input(s) and then post-processing the result.
 * Note that we must ALWAYS check specially whether those values are MIN_VALUE
 * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
 * a positive number, it overflows back into a negative).  Not handling this
 * case would often result in infinite recursion.
 *
 * @param {number} low  The low (signed) 32 bits of the long.
 * @param {number} high  The high (signed) 32 bits of the long.
 * @constructor
 */
goog.math.Long = function(low, high) {
  /**
   * @type {number}
   * @private
   */
  this.low_ = low | 0;  // force into 32 signed bits.

  /**
   * @type {number}
   * @private
   */
  this.high_ = high | 0;  // force into 32 signed bits.
};


// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
// from* methods on which they depend.


/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @private
 */
goog.math.Long.IntCache_ = {};


/**
 * Returns a Long representing the given (32-bit) integer value.
 * @param {number} value The 32-bit integer in question.
 * @return {!goog.math.Long} The corresponding Long value.
 */
goog.math.Long.fromInt = function(value) {
  if (-128 <= value && value < 128) {
    var cachedObj = goog.math.Long.IntCache_[value];
    if (cachedObj) {
      return cachedObj;
    }
  }

  var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
  if (-128 <= value && value < 128) {
    goog.math.Long.IntCache_[value] = obj;
  }
  return obj;
};


/**
 * Returns a Long representing the given value, provided that it is a finite
 * number.  Otherwise, zero is returned.
 * @param {number} value The number in question.
 * @return {!goog.math.Long} The corresponding Long value.
 */
goog.math.Long.fromNumber = function(value) {
  if (isNaN(value) || !isFinite(value)) {
    return goog.math.Long.ZERO;
  } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
    return goog.math.Long.MIN_VALUE;
  } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
    return goog.math.Long.MAX_VALUE;
  } else if (value < 0) {
    return goog.math.Long.fromNumber(-value).negate();
  } else {
    return new goog.math.Long(
        (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
        (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
  }
};


/**
 * Returns a Long representing the 64-bit integer that comes by concatenating
 * the given high and low bits.  Each is assumed to use 32 bits.
 * @param {number} lowBits The low 32-bits.
 * @param {number} highBits The high 32-bits.
 * @return {!goog.math.Long} The corresponding Long value.
 */
goog.math.Long.fromBits = function(lowBits, highBits) {
  return new goog.math.Long(lowBits, highBits);
};


/**
 * Returns a Long representation of the given string, written using the given
 * radix.
 * @param {string} str The textual representation of the Long.
 * @param {number=} opt_radix The radix in which the text is written.
 * @return {!goog.math.Long} The corresponding Long value.
 */
goog.math.Long.fromString = function(str, opt_radix) {
  if (str.length == 0) {
    throw Error('number format error: empty string');
  }

  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error('radix out of range: ' + radix);
  }

  if (str.charAt(0) == '-') {
    return goog.math.Long.fromString(str.substring(1), radix).negate();
  } else if (str.indexOf('-') >= 0) {
    throw Error('number format error: interior "-" character: ' + str);
  }

  // Do several (8) digits each time through the loop, so as to
  // minimize the calls to the very expensive emulated div.
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

  var result = goog.math.Long.ZERO;
  for (var i = 0; i < str.length; i += 8) {
    var size = Math.min(8, str.length - i);
    var value = parseInt(str.substring(i, i + size), radix);
    if (size < 8) {
      var power = goog.math.Long.fromNumber(Math.pow(radix, size));
      result = result.multiply(power).add(goog.math.Long.fromNumber(value));
    } else {
      result = result.multiply(radixToPower);
      result = result.add(goog.math.Long.fromNumber(value));
    }
  }
  return result;
};


// NOTE: the compiler should inline these constant values below and then remove
// these variables, so there should be no runtime penalty for these.


/**
 * Number used repeated below in calculations.  This must appear before the
 * first call to any from* function below.
 * @type {number}
 * @private
 */
goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


/**
 * @type {number}
 * @private
 */
goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


/**
 * @type {number}
 * @private
 */
goog.math.Long.TWO_PWR_32_DBL_ =
    goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


/**
 * @type {number}
 * @private
 */
goog.math.Long.TWO_PWR_31_DBL_ =
    goog.math.Long.TWO_PWR_32_DBL_ / 2;


/**
 * @type {number}
 * @private
 */
goog.math.Long.TWO_PWR_48_DBL_ =
    goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


/**
 * @type {number}
 * @private
 */
goog.math.Long.TWO_PWR_64_DBL_ =
    goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


/**
 * @type {number}
 * @private
 */
goog.math.Long.TWO_PWR_63_DBL_ =
    goog.math.Long.TWO_PWR_64_DBL_ / 2;


/** @type {!goog.math.Long} */
goog.math.Long.ZERO = goog.math.Long.fromInt(0);


/** @type {!goog.math.Long} */
goog.math.Long.ONE = goog.math.Long.fromInt(1);


/** @type {!goog.math.Long} */
goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


/** @type {!goog.math.Long} */
goog.math.Long.MAX_VALUE =
    goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


/** @type {!goog.math.Long} */
goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


/**
 * @type {!goog.math.Long}
 * @private
 */
goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


/** @return {number} The value, assuming it is a 32-bit integer. */
goog.math.Long.prototype.toInt = function() {
  return this.low_;
};


/** @return {number} The closest floating-point representation to this value. */
goog.math.Long.prototype.toNumber = function() {
  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
         this.getLowBitsUnsigned();
};


/**
 * @param {number=} opt_radix The radix in which the text should be written.
 * @return {string} The textual representation of this value.
 */
goog.math.Long.prototype.toString = function(opt_radix) {
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error('radix out of range: ' + radix);
  }

  if (this.isZero()) {
    return '0';
  }

  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      // We need to change the Long value before it can be negated, so we remove
      // the bottom-most digit in this base and then recurse to do the rest.
      var radixLong = goog.math.Long.fromNumber(radix);
      var div = this.div(radixLong);
      var rem = div.multiply(radixLong).subtract(this);
      return div.toString(radix) + rem.toInt().toString(radix);
    } else {
      return '-' + this.negate().toString(radix);
    }
  }

  // Do several (6) digits each time through the loop, so as to
  // minimize the calls to the very expensive emulated div.
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

  var rem = this;
  var result = '';
  while (true) {
    var remDiv = rem.div(radixToPower);
    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
    var digits = intval.toString(radix);

    rem = remDiv;
    if (rem.isZero()) {
      return digits + result;
    } else {
      while (digits.length < 6) {
        digits = '0' + digits;
      }
      result = '' + digits + result;
    }
  }
};


/** @return {number} The high 32-bits as a signed value. */
goog.math.Long.prototype.getHighBits = function() {
  return this.high_;
};


/** @return {number} The low 32-bits as a signed value. */
goog.math.Long.prototype.getLowBits = function() {
  return this.low_;
};


/** @return {number} The low 32-bits as an unsigned value. */
goog.math.Long.prototype.getLowBitsUnsigned = function() {
  return (this.low_ >= 0) ?
      this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
};


/**
 * @return {number} Returns the number of bits needed to represent the absolute
 *     value of this Long.
 */
goog.math.Long.prototype.getNumBitsAbs = function() {
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return 64;
    } else {
      return this.negate().getNumBitsAbs();
    }
  } else {
    var val = this.high_ != 0 ? this.high_ : this.low_;
    for (var bit = 31; bit > 0; bit--) {
      if ((val & (1 << bit)) != 0) {
        break;
      }
    }
    return this.high_ != 0 ? bit + 33 : bit + 1;
  }
};


/** @return {boolean} Whether this value is zero. */
goog.math.Long.prototype.isZero = function() {
  return this.high_ == 0 && this.low_ == 0;
};


/** @return {boolean} Whether this value is negative. */
goog.math.Long.prototype.isNegative = function() {
  return this.high_ < 0;
};


/** @return {boolean} Whether this value is odd. */
goog.math.Long.prototype.isOdd = function() {
  return (this.low_ & 1) == 1;
};


/**
 * @param {goog.math.Long} other Long to compare against.
 * @return {boolean} Whether this Long equals the other.
 */
goog.math.Long.prototype.equals = function(other) {
  return (this.high_ == other.high_) && (this.low_ == other.low_);
};


/**
 * @param {goog.math.Long} other Long to compare against.
 * @return {boolean} Whether this Long does not equal the other.
 */
goog.math.Long.prototype.notEquals = function(other) {
  return (this.high_ != other.high_) || (this.low_ != other.low_);
};


/**
 * @param {goog.math.Long} other Long to compare against.
 * @return {boolean} Whether this Long is less than the other.
 */
goog.math.Long.prototype.lessThan = function(other) {
  return this.compare(other) < 0;
};


/**
 * @param {goog.math.Long} other Long to compare against.
 * @return {boolean} Whether this Long is less than or equal to the other.
 */
goog.math.Long.prototype.lessThanOrEqual = function(other) {
  return this.compare(other) <= 0;
};


/**
 * @param {goog.math.Long} other Long to compare against.
 * @return {boolean} Whether this Long is greater than the other.
 */
goog.math.Long.prototype.greaterThan = function(other) {
  return this.compare(other) > 0;
};


/**
 * @param {goog.math.Long} other Long to compare against.
 * @return {boolean} Whether this Long is greater than or equal to the other.
 */
goog.math.Long.prototype.greaterThanOrEqual = function(other) {
  return this.compare(other) >= 0;
};


/**
 * Compares this Long with the given one.
 * @param {goog.math.Long} other Long to compare against.
 * @return {number} 0 if they are the same, 1 if the this is greater, and -1
 *     if the given one is greater.
 */
goog.math.Long.prototype.compare = function(other) {
  if (this.equals(other)) {
    return 0;
  }

  var thisNeg = this.isNegative();
  var otherNeg = other.isNegative();
  if (thisNeg && !otherNeg) {
    return -1;
  }
  if (!thisNeg && otherNeg) {
    return 1;
  }

  // at this point, the signs are the same, so subtraction will not overflow
  if (this.subtract(other).isNegative()) {
    return -1;
  } else {
    return 1;
  }
};


/** @return {!goog.math.Long} The negation of this value. */
goog.math.Long.prototype.negate = function() {
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return goog.math.Long.MIN_VALUE;
  } else {
    return this.not().add(goog.math.Long.ONE);
  }
};


/**
 * Returns the sum of this and the given Long.
 * @param {goog.math.Long} other Long to add to this one.
 * @return {!goog.math.Long} The sum of this and the given Long.
 */
goog.math.Long.prototype.add = function(other) {
  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 0xFFFF;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 0xFFFF;

  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 0xFFFF;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 0xFFFF;

  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 0xFFFF;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 0xFFFF;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 0xFFFF;
  c48 += a48 + b48;
  c48 &= 0xFFFF;
  return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
};


/**
 * Returns the difference of this and the given Long.
 * @param {goog.math.Long} other Long to subtract from this.
 * @return {!goog.math.Long} The difference of this and the given Long.
 */
goog.math.Long.prototype.subtract = function(other) {
  return this.add(other.negate());
};


/**
 * Returns the product of this and the given long.
 * @param {goog.math.Long} other Long to multiply with this.
 * @return {!goog.math.Long} The product of this and the other.
 */
goog.math.Long.prototype.multiply = function(other) {
  if (this.isZero()) {
    return goog.math.Long.ZERO;
  } else if (other.isZero()) {
    return goog.math.Long.ZERO;
  }

  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
  } else if (other.equals(goog.math.Long.MIN_VALUE)) {
    return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
  }

  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().multiply(other.negate());
    } else {
      return this.negate().multiply(other).negate();
    }
  } else if (other.isNegative()) {
    return this.multiply(other.negate()).negate();
  }

  // If both longs are small, use float multiplication
  if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
      other.lessThan(goog.math.Long.TWO_PWR_24_)) {
    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
  }

  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
  // We can skip products that would overflow.

  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 0xFFFF;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 0xFFFF;

  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 0xFFFF;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 0xFFFF;

  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 0xFFFF;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 0xFFFF;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 0xFFFF;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 0xFFFF;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 0xFFFF;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 0xFFFF;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 0xFFFF;
  return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
};


/**
 * Returns this Long divided by the given one.
 * @param {goog.math.Long} other Long by which to divide.
 * @return {!goog.math.Long} This Long divided by the given one.
 */
goog.math.Long.prototype.div = function(other) {
  if (other.isZero()) {
    throw Error('division by zero');
  } else if (this.isZero()) {
    return goog.math.Long.ZERO;
  }

  if (this.equals(goog.math.Long.MIN_VALUE)) {
    if (other.equals(goog.math.Long.ONE) ||
        other.equals(goog.math.Long.NEG_ONE)) {
      return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ONE;
    } else {
      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
      var halfThis = this.shiftRight(1);
      var approx = halfThis.div(other).shiftLeft(1);
      if (approx.equals(goog.math.Long.ZERO)) {
        return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
      } else {
        var rem = this.subtract(other.multiply(approx));
        var result = approx.add(rem.div(other));
        return result;
      }
    }
  } else if (other.equals(goog.math.Long.MIN_VALUE)) {
    return goog.math.Long.ZERO;
  }

  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().div(other.negate());
    } else {
      return this.negate().div(other).negate();
    }
  } else if (other.isNegative()) {
    return this.div(other.negate()).negate();
  }

  // Repeat the following until the remainder is less than other:  find a
  // floating-point that approximates remainder / other *from below*, add this
  // into the result, and subtract it from the remainder.  It is critical that
  // the approximate value is less than or equal to the real value so that the
  // remainder never becomes negative.
  var res = goog.math.Long.ZERO;
  var rem = this;
  while (rem.greaterThanOrEqual(other)) {
    // Approximate the result of division. This may be a little greater or
    // smaller than the actual value.
    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

    // We will tweak the approximate result by changing it in the 48-th digit or
    // the smallest non-fractional digit, whichever is larger.
    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

    // Decrease the approximation until it is smaller than the remainder.  Note
    // that if it is too large, the product overflows and is negative.
    var approxRes = goog.math.Long.fromNumber(approx);
    var approxRem = approxRes.multiply(other);
    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
      approx -= delta;
      approxRes = goog.math.Long.fromNumber(approx);
      approxRem = approxRes.multiply(other);
    }

    // We know the answer can't be zero... and actually, zero would cause
    // infinite recursion since we would make no progress.
    if (approxRes.isZero()) {
      approxRes = goog.math.Long.ONE;
    }

    res = res.add(approxRes);
    rem = rem.subtract(approxRem);
  }
  return res;
};


/**
 * Returns this Long modulo the given one.
 * @param {goog.math.Long} other Long by which to mod.
 * @return {!goog.math.Long} This Long modulo the given one.
 */
goog.math.Long.prototype.modulo = function(other) {
  return this.subtract(this.div(other).multiply(other));
};


/** @return {!goog.math.Long} The bitwise-NOT of this value. */
goog.math.Long.prototype.not = function() {
  return goog.math.Long.fromBits(~this.low_, ~this.high_);
};


/**
 * Returns the bitwise-AND of this Long and the given one.
 * @param {goog.math.Long} other The Long with which to AND.
 * @return {!goog.math.Long} The bitwise-AND of this and the other.
 */
goog.math.Long.prototype.and = function(other) {
  return goog.math.Long.fromBits(this.low_ & other.low_,
                                 this.high_ & other.high_);
};


/**
 * Returns the bitwise-OR of this Long and the given one.
 * @param {goog.math.Long} other The Long with which to OR.
 * @return {!goog.math.Long} The bitwise-OR of this and the other.
 */
goog.math.Long.prototype.or = function(other) {
  return goog.math.Long.fromBits(this.low_ | other.low_,
                                 this.high_ | other.high_);
};


/**
 * Returns the bitwise-XOR of this Long and the given one.
 * @param {goog.math.Long} other The Long with which to XOR.
 * @return {!goog.math.Long} The bitwise-XOR of this and the other.
 */
goog.math.Long.prototype.xor = function(other) {
  return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                 this.high_ ^ other.high_);
};


/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @param {number} numBits The number of bits by which to shift.
 * @return {!goog.math.Long} This shifted to the left by the given amount.
 */
goog.math.Long.prototype.shiftLeft = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var low = this.low_;
    if (numBits < 32) {
      var high = this.high_;
      return goog.math.Long.fromBits(
          low << numBits,
          (high << numBits) | (low >>> (32 - numBits)));
    } else {
      return goog.math.Long.fromBits(0, low << (numBits - 32));
    }
  }
};


/**
 * Returns this Long with bits shifted to the right by the given amount.
 * @param {number} numBits The number of bits by which to shift.
 * @return {!goog.math.Long} This shifted to the right by the given amount.
 */
goog.math.Long.prototype.shiftRight = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(
          (low >>> numBits) | (high << (32 - numBits)),
          high >> numBits);
    } else {
      return goog.math.Long.fromBits(
          high >> (numBits - 32),
          high >= 0 ? 0 : -1);
    }
  }
};


/**
 * Returns this Long with bits shifted to the right by the given amount, with
 * the new top bits matching the current sign bit.
 * @param {number} numBits The number of bits by which to shift.
 * @return {!goog.math.Long} This shifted to the right by the given amount, with
 *     zeros placed into the new leading bits.
 */
goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(
          (low >>> numBits) | (high << (32 - numBits)),
          high >>> numBits);
    } else if (numBits == 32) {
      return goog.math.Long.fromBits(high, 0);
    } else {
      return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
    }
  }
};

//======= begin jsbn =======

var navigator = { appName: 'Modern Browser' }; // polyfill a little

// Copyright (c) 2005  Tom Wu
// All Rights Reserved.
// http://www-cs-students.stanford.edu/~tjw/jsbn/

/*
 * Copyright (c) 2003-2005  Tom Wu
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
 *
 * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following condition applies:
 *
 * All redistributions must retain an intact copy of this copyright notice
 * and disclaimer.
 */

// Basic JavaScript BN library - subset useful for RSA encryption.

// Bits per digit
var dbits;

// JavaScript engine analysis
var canary = 0xdeadbeefcafe;
var j_lm = ((canary&0xffffff)==0xefcafe);

// (public) Constructor
function BigInteger(a,b,c) {
  if(a != null)
    if("number" == typeof a) this.fromNumber(a,b,c);
    else if(b == null && "string" != typeof a) this.fromString(a,256);
    else this.fromString(a,b);
}

// return new, unset BigInteger
function nbi() { return new BigInteger(null); }

// am: Compute w_j += (x*this_i), propagate carries,
// c is initial carry, returns final carry.
// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
// We need to select the fastest one that works in this environment.

// am1: use a single mult and divide to get the high bits,
// max digit bits should be 26 because
// max internal value = 2*dvalue^2-2*dvalue (< 2^53)
function am1(i,x,w,j,c,n) {
  while(--n >= 0) {
    var v = x*this[i++]+w[j]+c;
    c = Math.floor(v/0x4000000);
    w[j++] = v&0x3ffffff;
  }
  return c;
}
// am2 avoids a big mult-and-extract completely.
// Max digit bits should be <= 30 because we do bitwise ops
// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
function am2(i,x,w,j,c,n) {
  var xl = x&0x7fff, xh = x>>15;
  while(--n >= 0) {
    var l = this[i]&0x7fff;
    var h = this[i++]>>15;
    var m = xh*l+h*xl;
    l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
    c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
    w[j++] = l&0x3fffffff;
  }
  return c;
}
// Alternately, set max digit bits to 28 since some
// browsers slow down when dealing with 32-bit numbers.
function am3(i,x,w,j,c,n) {
  var xl = x&0x3fff, xh = x>>14;
  while(--n >= 0) {
    var l = this[i]&0x3fff;
    var h = this[i++]>>14;
    var m = xh*l+h*xl;
    l = xl*l+((m&0x3fff)<<14)+w[j]+c;
    c = (l>>28)+(m>>14)+xh*h;
    w[j++] = l&0xfffffff;
  }
  return c;
}
if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
  BigInteger.prototype.am = am2;
  dbits = 30;
}
else if(j_lm && (navigator.appName != "Netscape")) {
  BigInteger.prototype.am = am1;
  dbits = 26;
}
else { // Mozilla/Netscape seems to prefer am3
  BigInteger.prototype.am = am3;
  dbits = 28;
}

BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = ((1<<dbits)-1);
BigInteger.prototype.DV = (1<<dbits);

var BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2,BI_FP);
BigInteger.prototype.F1 = BI_FP-dbits;
BigInteger.prototype.F2 = 2*dbits-BI_FP;

// Digit conversions
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
var BI_RC = new Array();
var rr,vv;
rr = "0".charCodeAt(0);
for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
rr = "a".charCodeAt(0);
for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
rr = "A".charCodeAt(0);
for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

function int2char(n) { return BI_RM.charAt(n); }
function intAt(s,i) {
  var c = BI_RC[s.charCodeAt(i)];
  return (c==null)?-1:c;
}

// (protected) copy this to r
function bnpCopyTo(r) {
  for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
  r.t = this.t;
  r.s = this.s;
}

// (protected) set from integer value x, -DV <= x < DV
function bnpFromInt(x) {
  this.t = 1;
  this.s = (x<0)?-1:0;
  if(x > 0) this[0] = x;
  else if(x < -1) this[0] = x+DV;
  else this.t = 0;
}

// return bigint initialized to value
function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

// (protected) set from string and radix
function bnpFromString(s,b) {
  var k;
  if(b == 16) k = 4;
  else if(b == 8) k = 3;
  else if(b == 256) k = 8; // byte array
  else if(b == 2) k = 1;
  else if(b == 32) k = 5;
  else if(b == 4) k = 2;
  else { this.fromRadix(s,b); return; }
  this.t = 0;
  this.s = 0;
  var i = s.length, mi = false, sh = 0;
  while(--i >= 0) {
    var x = (k==8)?s[i]&0xff:intAt(s,i);
    if(x < 0) {
      if(s.charAt(i) == "-") mi = true;
      continue;
    }
    mi = false;
    if(sh == 0)
      this[this.t++] = x;
    else if(sh+k > this.DB) {
      this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
      this[this.t++] = (x>>(this.DB-sh));
    }
    else
      this[this.t-1] |= x<<sh;
    sh += k;
    if(sh >= this.DB) sh -= this.DB;
  }
  if(k == 8 && (s[0]&0x80) != 0) {
    this.s = -1;
    if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
  }
  this.clamp();
  if(mi) BigInteger.ZERO.subTo(this,this);
}

// (protected) clamp off excess high words
function bnpClamp() {
  var c = this.s&this.DM;
  while(this.t > 0 && this[this.t-1] == c) --this.t;
}

// (public) return string representation in given radix
function bnToString(b) {
  if(this.s < 0) return "-"+this.negate().toString(b);
  var k;
  if(b == 16) k = 4;
  else if(b == 8) k = 3;
  else if(b == 2) k = 1;
  else if(b == 32) k = 5;
  else if(b == 4) k = 2;
  else return this.toRadix(b);
  var km = (1<<k)-1, d, m = false, r = "", i = this.t;
  var p = this.DB-(i*this.DB)%k;
  if(i-- > 0) {
    if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
    while(i >= 0) {
      if(p < k) {
        d = (this[i]&((1<<p)-1))<<(k-p);
        d |= this[--i]>>(p+=this.DB-k);
      }
      else {
        d = (this[i]>>(p-=k))&km;
        if(p <= 0) { p += this.DB; --i; }
      }
      if(d > 0) m = true;
      if(m) r += int2char(d);
    }
  }
  return m?r:"0";
}

// (public) -this
function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

// (public) |this|
function bnAbs() { return (this.s<0)?this.negate():this; }

// (public) return + if this > a, - if this < a, 0 if equal
function bnCompareTo(a) {
  var r = this.s-a.s;
  if(r != 0) return r;
  var i = this.t;
  r = i-a.t;
  if(r != 0) return r;
  while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
  return 0;
}

// returns bit length of the integer x
function nbits(x) {
  var r = 1, t;
  if((t=x>>>16) != 0) { x = t; r += 16; }
  if((t=x>>8) != 0) { x = t; r += 8; }
  if((t=x>>4) != 0) { x = t; r += 4; }
  if((t=x>>2) != 0) { x = t; r += 2; }
  if((t=x>>1) != 0) { x = t; r += 1; }
  return r;
}

// (public) return the number of bits in "this"
function bnBitLength() {
  if(this.t <= 0) return 0;
  return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
}

// (protected) r = this << n*DB
function bnpDLShiftTo(n,r) {
  var i;
  for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
  for(i = n-1; i >= 0; --i) r[i] = 0;
  r.t = this.t+n;
  r.s = this.s;
}

// (protected) r = this >> n*DB
function bnpDRShiftTo(n,r) {
  for(var i = n; i < this.t; ++i) r[i-n] = this[i];
  r.t = Math.max(this.t-n,0);
  r.s = this.s;
}

// (protected) r = this << n
function bnpLShiftTo(n,r) {
  var bs = n%this.DB;
  var cbs = this.DB-bs;
  var bm = (1<<cbs)-1;
  var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
  for(i = this.t-1; i >= 0; --i) {
    r[i+ds+1] = (this[i]>>cbs)|c;
    c = (this[i]&bm)<<bs;
  }
  for(i = ds-1; i >= 0; --i) r[i] = 0;
  r[ds] = c;
  r.t = this.t+ds+1;
  r.s = this.s;
  r.clamp();
}

// (protected) r = this >> n
function bnpRShiftTo(n,r) {
  r.s = this.s;
  var ds = Math.floor(n/this.DB);
  if(ds >= this.t) { r.t = 0; return; }
  var bs = n%this.DB;
  var cbs = this.DB-bs;
  var bm = (1<<bs)-1;
  r[0] = this[ds]>>bs;
  for(var i = ds+1; i < this.t; ++i) {
    r[i-ds-1] |= (this[i]&bm)<<cbs;
    r[i-ds] = this[i]>>bs;
  }
  if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
  r.t = this.t-ds;
  r.clamp();
}

// (protected) r = this - a
function bnpSubTo(a,r) {
  var i = 0, c = 0, m = Math.min(a.t,this.t);
  while(i < m) {
    c += this[i]-a[i];
    r[i++] = c&this.DM;
    c >>= this.DB;
  }
  if(a.t < this.t) {
    c -= a.s;
    while(i < this.t) {
      c += this[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    c += this.s;
  }
  else {
    c += this.s;
    while(i < a.t) {
      c -= a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    c -= a.s;
  }
  r.s = (c<0)?-1:0;
  if(c < -1) r[i++] = this.DV+c;
  else if(c > 0) r[i++] = c;
  r.t = i;
  r.clamp();
}

// (protected) r = this * a, r != this,a (HAC 14.12)
// "this" should be the larger one if appropriate.
function bnpMultiplyTo(a,r) {
  var x = this.abs(), y = a.abs();
  var i = x.t;
  r.t = i+y.t;
  while(--i >= 0) r[i] = 0;
  for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
  r.s = 0;
  r.clamp();
  if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
}

// (protected) r = this^2, r != this (HAC 14.16)
function bnpSquareTo(r) {
  var x = this.abs();
  var i = r.t = 2*x.t;
  while(--i >= 0) r[i] = 0;
  for(i = 0; i < x.t-1; ++i) {
    var c = x.am(i,x[i],r,2*i,0,1);
    if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
      r[i+x.t] -= x.DV;
      r[i+x.t+1] = 1;
    }
  }
  if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
  r.s = 0;
  r.clamp();
}

// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
// r != q, this != m.  q or r may be null.
function bnpDivRemTo(m,q,r) {
  var pm = m.abs();
  if(pm.t <= 0) return;
  var pt = this.abs();
  if(pt.t < pm.t) {
    if(q != null) q.fromInt(0);
    if(r != null) this.copyTo(r);
    return;
  }
  if(r == null) r = nbi();
  var y = nbi(), ts = this.s, ms = m.s;
  var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
  if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
  else { pm.copyTo(y); pt.copyTo(r); }
  var ys = y.t;
  var y0 = y[ys-1];
  if(y0 == 0) return;
  var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
  var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
  var i = r.t, j = i-ys, t = (q==null)?nbi():q;
  y.dlShiftTo(j,t);
  if(r.compareTo(t) >= 0) {
    r[r.t++] = 1;
    r.subTo(t,r);
  }
  BigInteger.ONE.dlShiftTo(ys,t);
  t.subTo(y,y);	// "negative" y so we can replace sub with am later
  while(y.t < ys) y[y.t++] = 0;
  while(--j >= 0) {
    // Estimate quotient digit
    var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
    if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
      y.dlShiftTo(j,t);
      r.subTo(t,r);
      while(r[i] < --qd) r.subTo(t,r);
    }
  }
  if(q != null) {
    r.drShiftTo(ys,q);
    if(ts != ms) BigInteger.ZERO.subTo(q,q);
  }
  r.t = ys;
  r.clamp();
  if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
  if(ts < 0) BigInteger.ZERO.subTo(r,r);
}

// (public) this mod a
function bnMod(a) {
  var r = nbi();
  this.abs().divRemTo(a,null,r);
  if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
  return r;
}

// Modular reduction using "classic" algorithm
function Classic(m) { this.m = m; }
function cConvert(x) {
  if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
  else return x;
}
function cRevert(x) { return x; }
function cReduce(x) { x.divRemTo(this.m,null,x); }
function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

Classic.prototype.convert = cConvert;
Classic.prototype.revert = cRevert;
Classic.prototype.reduce = cReduce;
Classic.prototype.mulTo = cMulTo;
Classic.prototype.sqrTo = cSqrTo;

// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
// justification:
//         xy == 1 (mod m)
//         xy =  1+km
//   xy(2-xy) = (1+km)(1-km)
// x[y(2-xy)] = 1-k^2m^2
// x[y(2-xy)] == 1 (mod m^2)
// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
// JS multiply "overflows" differently from C/C++, so care is needed here.
function bnpInvDigit() {
  if(this.t < 1) return 0;
  var x = this[0];
  if((x&1) == 0) return 0;
  var y = x&3;		// y == 1/x mod 2^2
  y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
  y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
  y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
  // last step - calculate inverse mod DV directly;
  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
  y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
  // we really want the negative inverse, and -DV < y < DV
  return (y>0)?this.DV-y:-y;
}

// Montgomery reduction
function Montgomery(m) {
  this.m = m;
  this.mp = m.invDigit();
  this.mpl = this.mp&0x7fff;
  this.mph = this.mp>>15;
  this.um = (1<<(m.DB-15))-1;
  this.mt2 = 2*m.t;
}

// xR mod m
function montConvert(x) {
  var r = nbi();
  x.abs().dlShiftTo(this.m.t,r);
  r.divRemTo(this.m,null,r);
  if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
  return r;
}

// x/R mod m
function montRevert(x) {
  var r = nbi();
  x.copyTo(r);
  this.reduce(r);
  return r;
}

// x = x/R mod m (HAC 14.32)
function montReduce(x) {
  while(x.t <= this.mt2)	// pad x so am has enough room later
    x[x.t++] = 0;
  for(var i = 0; i < this.m.t; ++i) {
    // faster way of calculating u0 = x[i]*mp mod DV
    var j = x[i]&0x7fff;
    var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
    // use am to combine the multiply-shift-add into one call
    j = i+this.m.t;
    x[j] += this.m.am(0,u0,x,i,0,this.m.t);
    // propagate carry
    while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
  }
  x.clamp();
  x.drShiftTo(this.m.t,x);
  if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
}

// r = "x^2/R mod m"; x != r
function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

// r = "xy/R mod m"; x,y != r
function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

Montgomery.prototype.convert = montConvert;
Montgomery.prototype.revert = montRevert;
Montgomery.prototype.reduce = montReduce;
Montgomery.prototype.mulTo = montMulTo;
Montgomery.prototype.sqrTo = montSqrTo;

// (protected) true iff this is even
function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
function bnpExp(e,z) {
  if(e > 0xffffffff || e < 1) return BigInteger.ONE;
  var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
  g.copyTo(r);
  while(--i >= 0) {
    z.sqrTo(r,r2);
    if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
    else { var t = r; r = r2; r2 = t; }
  }
  return z.revert(r);
}

// (public) this^e % m, 0 <= e < 2^32
function bnModPowInt(e,m) {
  var z;
  if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
  return this.exp(e,z);
}

// protected
BigInteger.prototype.copyTo = bnpCopyTo;
BigInteger.prototype.fromInt = bnpFromInt;
BigInteger.prototype.fromString = bnpFromString;
BigInteger.prototype.clamp = bnpClamp;
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
BigInteger.prototype.drShiftTo = bnpDRShiftTo;
BigInteger.prototype.lShiftTo = bnpLShiftTo;
BigInteger.prototype.rShiftTo = bnpRShiftTo;
BigInteger.prototype.subTo = bnpSubTo;
BigInteger.prototype.multiplyTo = bnpMultiplyTo;
BigInteger.prototype.squareTo = bnpSquareTo;
BigInteger.prototype.divRemTo = bnpDivRemTo;
BigInteger.prototype.invDigit = bnpInvDigit;
BigInteger.prototype.isEven = bnpIsEven;
BigInteger.prototype.exp = bnpExp;

// public
BigInteger.prototype.toString = bnToString;
BigInteger.prototype.negate = bnNegate;
BigInteger.prototype.abs = bnAbs;
BigInteger.prototype.compareTo = bnCompareTo;
BigInteger.prototype.bitLength = bnBitLength;
BigInteger.prototype.mod = bnMod;
BigInteger.prototype.modPowInt = bnModPowInt;

// "constants"
BigInteger.ZERO = nbv(0);
BigInteger.ONE = nbv(1);

// jsbn2 stuff

// (protected) convert from radix string
function bnpFromRadix(s,b) {
  this.fromInt(0);
  if(b == null) b = 10;
  var cs = this.chunkSize(b);
  var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
  for(var i = 0; i < s.length; ++i) {
    var x = intAt(s,i);
    if(x < 0) {
      if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
      continue;
    }
    w = b*w+x;
    if(++j >= cs) {
      this.dMultiply(d);
      this.dAddOffset(w,0);
      j = 0;
      w = 0;
    }
  }
  if(j > 0) {
    this.dMultiply(Math.pow(b,j));
    this.dAddOffset(w,0);
  }
  if(mi) BigInteger.ZERO.subTo(this,this);
}

// (protected) return x s.t. r^x < DV
function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

// (public) 0 if this == 0, 1 if this > 0
function bnSigNum() {
  if(this.s < 0) return -1;
  else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
  else return 1;
}

// (protected) this *= n, this >= 0, 1 < n < DV
function bnpDMultiply(n) {
  this[this.t] = this.am(0,n-1,this,0,0,this.t);
  ++this.t;
  this.clamp();
}

// (protected) this += n << w words, this >= 0
function bnpDAddOffset(n,w) {
  if(n == 0) return;
  while(this.t <= w) this[this.t++] = 0;
  this[w] += n;
  while(this[w] >= this.DV) {
    this[w] -= this.DV;
    if(++w >= this.t) this[this.t++] = 0;
    ++this[w];
  }
}

// (protected) convert to radix string
function bnpToRadix(b) {
  if(b == null) b = 10;
  if(this.signum() == 0 || b < 2 || b > 36) return "0";
  var cs = this.chunkSize(b);
  var a = Math.pow(b,cs);
  var d = nbv(a), y = nbi(), z = nbi(), r = "";
  this.divRemTo(d,y,z);
  while(y.signum() > 0) {
    r = (a+z.intValue()).toString(b).substr(1) + r;
    y.divRemTo(d,y,z);
  }
  return z.intValue().toString(b) + r;
}

// (public) return value as integer
function bnIntValue() {
  if(this.s < 0) {
    if(this.t == 1) return this[0]-this.DV;
    else if(this.t == 0) return -1;
  }
  else if(this.t == 1) return this[0];
  else if(this.t == 0) return 0;
  // assumes 16 < DB < 32
  return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
}

// (protected) r = this + a
function bnpAddTo(a,r) {
  var i = 0, c = 0, m = Math.min(a.t,this.t);
  while(i < m) {
    c += this[i]+a[i];
    r[i++] = c&this.DM;
    c >>= this.DB;
  }
  if(a.t < this.t) {
    c += a.s;
    while(i < this.t) {
      c += this[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    c += this.s;
  }
  else {
    c += this.s;
    while(i < a.t) {
      c += a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    c += a.s;
  }
  r.s = (c<0)?-1:0;
  if(c > 0) r[i++] = c;
  else if(c < -1) r[i++] = this.DV+c;
  r.t = i;
  r.clamp();
}

BigInteger.prototype.fromRadix = bnpFromRadix;
BigInteger.prototype.chunkSize = bnpChunkSize;
BigInteger.prototype.signum = bnSigNum;
BigInteger.prototype.dMultiply = bnpDMultiply;
BigInteger.prototype.dAddOffset = bnpDAddOffset;
BigInteger.prototype.toRadix = bnpToRadix;
BigInteger.prototype.intValue = bnIntValue;
BigInteger.prototype.addTo = bnpAddTo;

//======= end jsbn =======

// Emscripten wrapper
var Wrapper = {
  result: [0, 0], // return result stored here
  add: function(xl, xh, yl, yh) {
    var x = new goog.math.Long(xl, xh);
    var y = new goog.math.Long(yl, yh);
    var ret = x.add(y);
    Wrapper.result[0] = ret.low_;
    Wrapper.result[1] = ret.high_;
  },
  subtract: function(xl, xh, yl, yh) {
    var x = new goog.math.Long(xl, xh);
    var y = new goog.math.Long(yl, yh);
    var ret = x.subtract(y);
    Wrapper.result[0] = ret.low_;
    Wrapper.result[1] = ret.high_;
  },
  multiply: function(xl, xh, yl, yh) {
    var x = new goog.math.Long(xl, xh);
    var y = new goog.math.Long(yl, yh);
    var ret = x.multiply(y);
    Wrapper.result[0] = ret.low_;
    Wrapper.result[1] = ret.high_;
  },
  makeTwo32: function() {
    Wrapper.two32 = new BigInteger();
    Wrapper.two32.fromString('4294967296', 10);
  },
  lh2bignum: function(l, h) {
    var a = new BigInteger();
    a.fromString(h.toString(), 10);
    var b = new BigInteger();
    a.multiplyTo(Wrapper.two32, b);
    var c = new BigInteger();
    c.fromString(l.toString(), 10);
    var d = new BigInteger();
    c.addTo(b, d);
    return d;
  },
  divide: function(xl, xh, yl, yh, unsigned) {
    if (!Wrapper.two32) Wrapper.makeTwo32();
    if (!unsigned) {
      var x = new goog.math.Long(xl, xh);
      var y = new goog.math.Long(yl, yh);
      var ret = x.div(y);
      Wrapper.result[0] = ret.low_;
      Wrapper.result[1] = ret.high_;
    } else {
      // slow precise bignum division
      var x = Wrapper.lh2bignum(xl >>> 0, xh >>> 0);
      var y = Wrapper.lh2bignum(yl >>> 0, yh >>> 0);
      var z = new BigInteger();
      x.divRemTo(y, z, null);
      var l = new BigInteger();
      var h = new BigInteger();
      z.divRemTo(Wrapper.two32, h, l);
      Wrapper.result[0] = parseInt(l.toString()) | 0;
      Wrapper.result[1] = parseInt(h.toString()) | 0;
    }
  },
  modulo: function(xl, xh, yl, yh, unsigned) {
    if (!Wrapper.two32) Wrapper.makeTwo32();
    if (!unsigned) {
      var x = new goog.math.Long(xl, xh);
      var y = new goog.math.Long(yl, yh);
      var ret = x.modulo(y);
      Wrapper.result[0] = ret.low_;
      Wrapper.result[1] = ret.high_;
    } else {
      // slow precise bignum division
      var x = Wrapper.lh2bignum(xl >>> 0, xh >>> 0);
      var y = Wrapper.lh2bignum(yl >>> 0, yh >>> 0);
      var z = new BigInteger();
      x.divRemTo(y, null, z);
      var l = new BigInteger();
      var h = new BigInteger();
      z.divRemTo(Wrapper.two32, h, l);
      Wrapper.result[0] = parseInt(l.toString()) | 0;
      Wrapper.result[1] = parseInt(h.toString()) | 0;
    }
  },
  stringify: function(l, h, unsigned) {
    var ret = new goog.math.Long(l, h).toString();
    if (unsigned && ret[0] == '-') {
      // unsign slowly using jsbn bignums
      if (!Wrapper.two64) {
        Wrapper.two64 = new BigInteger();
        Wrapper.two64.fromString('18446744073709551616', 10);
      }
      var bignum = new BigInteger();
      bignum.fromString(ret, 10);
      ret = new BigInteger();
      Wrapper.two64.addTo(bignum, ret);
      ret = ret.toString(10);
    }
    return ret;
  }
};
return Wrapper;
})();

//======= end closure i64 code =======



  function ___assert_fail(condition, file, line) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition);//JSON.stringify(arguments)//condition;
    }

  
  function _memset(ptr, value, num, align) {
      // TODO: make these settings, and in memcpy, {{'s
      if (num >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        var stop = ptr + num;
        while (ptr % 4) { // no need to check for stop, since we have large num
          HEAP8[ptr++] = value;
        }
        if (value < 0) value += 256; // make it unsigned
        var ptr4 = ptr >> 2, stop4 = stop >> 2, value4 = value | (value << 8) | (value << 16) | (value << 24);
        while (ptr4 < stop4) {
          HEAP32[ptr4++] = value4;
        }
        ptr = ptr4 << 2;
        while (ptr < stop) {
          HEAP8[ptr++] = value;
        }
      } else {
        while (num--) {
          HEAP8[ptr++] = value;
        }
      }
    }var _llvm_memset_p0i8_i32=_memset;

  
  function _strlen(ptr) {
      return String_len(ptr);
    }function _strrchr(ptr, chr) {
      var ptr2 = ptr + _strlen(ptr);
      do {
        if (HEAP8[(ptr2)] == chr) return ptr2;
        ptr2--;
      } while (ptr2 >= ptr);
      return 0;
    }

  
  
  function _tolower(chr) {
      if (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0)) {
        return chr - 'A'.charCodeAt(0) + 'a'.charCodeAt(0);
      } else {
        return chr;
      }
    }function _strncasecmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = _tolower(HEAP8[((px)+(i))]);
        var y = _tolower(HEAP8[((py)+(i))]);
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcasecmp(px, py) {
      return _strncasecmp(px, py, TOTAL_MEMORY);
    }

  
  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }
  
  function _isdigit(chr) {
      return chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0);
    }function _atoi(s) {
      var c;
      while ((c = HEAP8[(s)]) && _isspace(c)) s++;
      if (!c || !_isdigit(c)) return 0;
      var e = s;
      while ((c = HEAP8[(e)]) && _isdigit(c)) e++;
      return Math.floor(Number(Pointer_stringify(s).substr(0, e-s)));
    }

  function _strdup(ptr) {
      var len = String_len(ptr);
      var newStr = _malloc(len + 1);
      _memcpy(newStr, ptr, len, 1);
      HEAP8[((newStr)+(len))]=0;
      return newStr;
    }

  
  function _memcpy(dest, src, num, align) {
      assert(num % 1 === 0, 'memcpy given ' + num + ' bytes to copy. Problem with quantum=1 corrections perhaps?');
      if (num >= 20 && src % 2 == dest % 2) {
        // This is unaligned, but quite large, and potentially alignable, so work hard to get to aligned settings
        if (src % 4 == dest % 4) {
          var stop = src + num;
          while (src % 4) { // no need to check for stop, since we have large num
            HEAP8[dest++] = HEAP8[src++];
          }
          var src4 = src >> 2, dest4 = dest >> 2, stop4 = stop >> 2;
          while (src4 < stop4) {
            HEAP32[dest4++] = HEAP32[src4++];
          }
          src = src4 << 2;
          dest = dest4 << 2;
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
        } else {
          var stop = src + num;
          if (src % 2) { // no need to check for stop, since we have large num
            HEAP8[dest++] = HEAP8[src++];
          }
          var src2 = src >> 1, dest2 = dest >> 1, stop2 = stop >> 1;
          while (src2 < stop2) {
            HEAP16[dest2++] = HEAP16[src2++];
          }
          src = src2 << 1;
          dest = dest2 << 1;
          if (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
        }
      } else {
        while (num--) {
          HEAP8[dest++] = HEAP8[src++];
        }
      }
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  
  
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }
  
  var _stdin=0;
  
  var _stdout=0;
  
  var _stderr=0;
  
  var __impure_ptr=0;var FS={currentPath:"/",nextInode:2,streams:[null],ignorePermissions:true,absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
  
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
  
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
  
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {isDevice: false, contents: data};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        var properties = {isDevice: false, url: url};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite) {
        Browser.asyncLoad(url, function(data) {
          FS.createDataFile(parent, name, data, canRead, canWrite);
        });
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          // Browser.
          assert('Cannot do synchronous binary XHRs in modern browsers. Use --embed-file or --preload-file in emcc');
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureRoot();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
  
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        function simpleOutput(val) {
          if (val === null || val === '\n'.charCodeAt(0)) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(String.fromCharCode(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
  
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
  
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
  
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        _stdin = allocate([1], 'void*', ALLOC_STATIC);
        _stdout = allocate([2], 'void*', ALLOC_STATIC);
        _stderr = allocate([3], 'void*', ALLOC_STATIC);
  
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
  
        // Newlib initialization
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        __impure_ptr = allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_STATIC) ], 'void*', ALLOC_STATIC);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output('\n'.charCodeAt(0));
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output('\n'.charCodeAt(0));
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        var path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  
  
  var ___dirent_struct_layout=null;function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      // NOTE: This implementation tries to mimic glibc rather that strictly
      // following the POSIX standard.
  
      var mode = HEAP32[((varargs)>>2)];
  
      // Simplify flags.
      var accessMode = oflag & 3;
      var isWrite = accessMode != 0;
      var isRead = accessMode != 1;
      var isCreate = Boolean(oflag & 512);
      var isExistCheck = Boolean(oflag & 2048);
      var isTruncate = Boolean(oflag & 1024);
      var isAppend = Boolean(oflag & 8);
  
      // Verify path.
      var origPath = path;
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists) {
        ___setErrNo(path.error);
        return -1;
      }
      var target = path.object || null;
      var finalPath;
  
      // Verify the file exists, create if needed and allowed.
      if (target) {
        if (isCreate && isExistCheck) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          return -1;
        }
        if ((isWrite || isCreate || isTruncate) && target.isFolder) {
          ___setErrNo(ERRNO_CODES.EISDIR);
          return -1;
        }
        if (isRead && !target.read || isWrite && !target.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        if (isTruncate && !target.isDevice) {
          target.contents = [];
        } else {
          if (!FS.forceLoadFile(target)) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        finalPath = path.path;
      } else {
        if (!isCreate) {
          ___setErrNo(ERRNO_CODES.ENOENT);
          return -1;
        }
        if (!path.parentObject.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        target = FS.createDataFile(path.parentObject, path.name, [],
                                   mode & 0x100, mode & 0x80);  // S_IRUSR, S_IWUSR.
        finalPath = path.parentPath + '/' + path.name;
      }
      // Actually create an open stream.
      var id = FS.streams.length;
      if (target.isFolder) {
        var entryBuffer = 0;
        if (___dirent_struct_layout) {
          entryBuffer = _malloc(___dirent_struct_layout.__size__);
        }
        var contents = [];
        for (var key in target.contents) contents.push(key);
        FS.streams[id] = {
          path: finalPath,
          object: target,
          // An index into contents. Special values: -2 is ".", -1 is "..".
          position: -2,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: [],
          // Folder-specific properties:
          // Remember the contents at the time of opening in an array, so we can
          // seek between them relying on a single order.
          contents: contents,
          // Each stream has its own area for readdir() returns.
          currentEntry: entryBuffer
        };
      } else {
        FS.streams[id] = {
          path: finalPath,
          object: target,
          position: 0,
          isRead: isRead,
          isWrite: isWrite,
          isAppend: isAppend,
          error: false,
          eof: false,
          ungotten: []
        };
      }
      return id;
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 1024;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 8;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }

  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      if (FS.streams[fildes] && !FS.streams[fildes].isDevice) {
        var stream = FS.streams[fildes];
        var position = offset;
        if (whence === 1) {  // SEEK_CUR.
          position += stream.position;
        } else if (whence === 2) {  // SEEK_END.
          position += stream.object.contents.length;
        }
        if (position < 0) {
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        } else {
          stream.ungotten = [];
          stream.position = position;
          return position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var ret = _lseek(stream, offset, whence);
      if (ret == -1) {
        return -1;
      } else {
        FS.streams[stream].eof = false;
        return 0;
      }
    }

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      if (FS.streams[fildes]) {
        if (FS.streams[fildes].currentEntry) {
          _free(FS.streams[fildes].currentEntry);
        }
        delete FS.streams[fildes];
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      if (FS.streams[fildes]) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      if (stream in FS.streams) {
        stream = FS.streams[stream];
        if (stream.object.isDevice) {
          ___setErrNo(ERRNO_CODES.ESPIPE);
          return -1;
        } else {
          return stream.position;
        }
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }

  function _rewind(stream) {
      // void rewind(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rewind.html
      _fseek(stream, 0, 0);  // SEEK_SET.
      if (stream in FS.streams) FS.streams[stream].error = false;
    }

  
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[(buf++)]=stream.ungotten.pop()
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        for (var i = 0; i < size; i++) {
          HEAP8[((buf)+(i))]=contents[offset + i]
          bytesRead++;
        }
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP8[(buf++)]=stream.ungotten.pop()
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[((buf)+(i))]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) return 0;
      var bytesRead = _read(stream, ptr, bytesToRead);
      var streamObj = FS.streams[stream];
      if (bytesRead == -1) {
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        if (bytesRead < bytesToRead) streamObj.eof = true;
        return Math.floor(bytesRead / size);
      }
    }

  function ___errno_location() {
      return ___setErrNo.ret;
    }

  
  
  var ERRNO_MESSAGES={1:"Operation not permitted",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"Input/output error",6:"No such device or address",8:"Exec format error",9:"Bad file descriptor",10:"No child processes",11:"Resource temporarily unavailable",12:"Cannot allocate memory",13:"Permission denied",14:"Bad address",16:"Device or resource busy",17:"File exists",18:"Invalid cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Inappropriate ioctl for device",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read-only file system",31:"Too many links",32:"Broken pipe",33:"Numerical argument out of domain",34:"Numerical result out of range",35:"Resource deadlock avoided",36:"File name too long",37:"No locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many levels of symbolic links",42:"No message of desired type",43:"Identifier removed",60:"Device not a stream",61:"No data available",62:"Timer expired",63:"Out of streams resources",67:"Link has been severed",71:"Protocol error",72:"Multihop attempted",74:"Bad message",75:"Value too large for defined data type",84:"Invalid or incomplete multibyte or wide character",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Protocol not supported",95:"Operation not supported",97:"Address family not supported by protocol",98:"Address already in use",99:"Cannot assign requested address",100:"Network is down",101:"Network is unreachable",102:"Network dropped connection on reset",103:"Software caused connection abort",104:"Connection reset by peer",105:"No buffer space available",106:"Transport endpoint is already connected",107:"Transport endpoint is not connected",110:"Connection timed out",111:"Connection refused",113:"No route to host",114:"Operation already in progress",115:"Operation now in progress",116:"Stale NFS file handle",122:"Disk quota exceeded",125:"Operation canceled",130:"Owner died",131:"State not recoverable"};function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          for (var i = 0; i < msg.length; i++) {
            HEAP8[((strerrbuf)+(i))]=msg.charCodeAt(i)
          }
          HEAP8[((strerrbuf)+(i))]=0
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }
var ___isoc99_sscanf; // stub for ___isoc99_sscanf
var _iconv_open; // stub for _iconv_open
var _iconv; // stub for _iconv
var _iconv_close; // stub for _iconv_close


  
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAP8[((px)+(i))];
        var y = HEAP8[((py)+(i))];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }



  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i]
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _strncpy(pdest, psrc, num) {
      var padding = false, curr;
      for (var i = 0; i < num; i++) {
        curr = padding ? 0 : HEAP8[((psrc)+(i))];
        HEAP8[((pdest)+(i))]=curr
        padding = padding || HEAP8[((psrc)+(i))] == 0;
      }
      return pdest;
    }

  function _memcmp(p1, p2, num) {
      for (var i = 0; i < num; i++) {
        var v1 = HEAP8[((p1)+(i))];
        var v2 = HEAP8[((p2)+(i))];
        if (v1 != v2) return v1 > v2 ? 1 : -1;
      }
      return 0;
    }
var _FT_Get_Sfnt_Table; // stub for _FT_Get_Sfnt_Table
var _FT_Request_Size; // stub for _FT_Request_Size
var _FT_Get_Char_Index; // stub for _FT_Get_Char_Index
var _FT_MulFix; // stub for _FT_MulFix
var _FT_Outline_New; // stub for _FT_Outline_New
var _FT_Outline_Copy; // stub for _FT_Outline_Copy
var _FT_Outline_Done; // stub for _FT_Outline_Done
var _FT_Set_Charmap; // stub for _FT_Set_Charmap
var _FT_Load_Glyph; // stub for _FT_Load_Glyph
var _FT_GlyphSlot_Oblique; // stub for _FT_GlyphSlot_Oblique
var _FT_Get_Glyph; // stub for _FT_Get_Glyph
var _FT_Outline_Translate; // stub for _FT_Outline_Translate
var _FT_Outline_Transform; // stub for _FT_Outline_Transform
var _FT_Get_Kerning; // stub for _FT_Get_Kerning
var _FT_Done_Face; // stub for _FT_Done_Face
var _FT_Outline_Get_Orientation; // stub for _FT_Outline_Get_Orientation
var _FT_Outline_Embolden; // stub for _FT_Outline_Embolden
var _FT_New_Memory_Face; // stub for _FT_New_Memory_Face
var _FT_New_Face; // stub for _FT_New_Face
var _FcConfigCreate; // stub for _FcConfigCreate
var _FcConfigParseAndLoad; // stub for _FcConfigParseAndLoad
var _FcConfigDestroy; // stub for _FcConfigDestroy
var _FcInitLoadConfig; // stub for _FcInitLoadConfig
var _FcConfigBuildFonts; // stub for _FcConfigBuildFonts
var _FcConfigAppFontAddDir; // stub for _FcConfigAppFontAddDir
var _FcFreeTypeQueryFace; // stub for _FcFreeTypeQueryFace
var _FcConfigGetBlanks; // stub for _FcConfigGetBlanks
var _FcConfigGetFonts; // stub for _FcConfigGetFonts
var _FcFontSetAdd; // stub for _FcFontSetAdd
var _FcNameParse; // stub for _FcNameParse
var _FcPatternCreate; // stub for _FcPatternCreate
var _FcPatternAddString; // stub for _FcPatternAddString
var _FcPatternAddBool; // stub for _FcPatternAddBool
var _FcPatternAddInteger; // stub for _FcPatternAddInteger
var _FcDefaultSubstitute; // stub for _FcDefaultSubstitute
var _FcConfigSubstitute; // stub for _FcConfigSubstitute
var _FcFontSort; // stub for _FcFontSort
var _FcFontSetCreate; // stub for _FcFontSetCreate
var _FcPatternReference; // stub for _FcPatternReference
var _FcPatternGetBool; // stub for _FcPatternGetBool
var _FcPatternGetCharSet; // stub for _FcPatternGetCharSet
var _FcCharSetHasChar; // stub for _FcCharSetHasChar
var _FcPatternRemove; // stub for _FcPatternRemove
var _FcFontRenderPrepare; // stub for _FcFontRenderPrepare
var _FcPatternGetInteger; // stub for _FcPatternGetInteger
var _FcPatternGetString; // stub for _FcPatternGetString
var _FcPatternDestroy; // stub for _FcPatternDestroy
var _FcFontSetDestroy; // stub for _FcFontSetDestroy
var _FcPatternDuplicate; // stub for _FcPatternDuplicate
var _FT_Init_FreeType; // stub for _FT_Init_FreeType
var _FT_Library_Version; // stub for _FT_Library_Version
var _FT_Done_FreeType; // stub for _FT_Done_FreeType
var _FT_Stroker_Done; // stub for _FT_Stroker_Done

  function _qsort(base, num, size, comparator) {
      if (num == 0 || size == 0) return;
      // forward calls to the JavaScript sort method
      // first, sort the items logically
      comparator = FUNCTION_TABLE[comparator];
      var keys = [];
      for (var i = 0; i < num; i++) keys.push(i);
      keys.sort(function(a, b) {
        return comparator(base+a*size, base+b*size);
      });
      // apply the sort
      var temp = _malloc(num*size);
      _memcpy(temp, base, num*size);
      for (var i = 0; i < num; i++) {
        if (keys[i] == i) continue; // already in place
        _memcpy(base+i*size, temp+keys[i]*size, size);
      }
      _free(temp);
    }

  var _sin=Math.sin;

  var _cos=Math.cos;

  function ___assert_func(filename, line, func, condition) {
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [Pointer_stringify(filename), line, Pointer_stringify(func)];
    }
var _FT_Done_Glyph; // stub for _FT_Done_Glyph
var _FT_Outline_Get_CBox; // stub for _FT_Outline_Get_CBox
var _FT_Outline_GetOutsideBorder; // stub for _FT_Outline_GetOutsideBorder
var _FT_Stroker_ParseOutline; // stub for _FT_Stroker_ParseOutline
var _FT_Stroker_GetBorderCounts; // stub for _FT_Stroker_GetBorderCounts
var _FT_Stroker_ExportBorder; // stub for _FT_Stroker_ExportBorder

  
  function __parseInt(str, endptr, base, min, max, bits, unsign) {
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      // Find base.
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == '0'.charCodeAt(0)) {
          if (HEAP8[(str+1)] == 'x'.charCodeAt(0) ||
              HEAP8[(str+1)] == 'X'.charCodeAt(0)) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            str++;
          }
        }
      }
      if (!finalBase) finalBase = 10;
  
      // Get digits.
      var chr;
      var ret = 0;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          ret = ret * finalBase + digit;
          str++;
        }
      }
  
      // Apply sign.
      ret *= multiplier;
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      // Unsign if needed.
      if (unsign) {
        if (Math.abs(ret) > max) {
          ret = max;
          ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          ret = unSign(ret, bits);
        }
      }
  
      // Validate range.
      if (ret > max || ret < min) {
        ret = ret > max ? max : min;
        ___setErrNo(ERRNO_CODES.ERANGE);
      }
  
      if (bits == 64) {
        ret = [ret>>>0,Math.min(Math.floor((ret)/4294967296), 4294967295)];
      }
  
      return ret;
    }function _strtoll(str, endptr, base) {
      return __parseInt(str, endptr, base, -9223372036854775200, 9223372036854775200, 64);  // LLONG_MIN, LLONG_MAX; imprecise.
    }

  function _strtol(str, endptr, base) {
      return __parseInt(str, endptr, base, -2147483648, 2147483647, 32);  // LONG_MIN, LONG_MAX.
    }
var _llvm_va_start; // stub for _llvm_va_start

  function _llvm_va_end() {}
var _enca_get_languages; // stub for _enca_get_languages
var _enca_analyser_alloc; // stub for _enca_analyser_alloc
var _enca_analyse_const; // stub for _enca_analyse_const
var _enca_charset_name; // stub for _enca_charset_name
var _enca_analyser_free; // stub for _enca_analyser_free
var _FT_Outline_Get_Bitmap; // stub for _FT_Outline_Get_Bitmap

  var _sqrt=Math.sqrt;

  var _log=Math.log;

  var _ceil=Math.ceil;

  var _exp=Math.exp;

  
  
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[((buf)+(i))];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[((buf)+(i))]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (tempDoubleI32[0]=HEAP32[(((varargs)+(argIndex))>>2)],tempDoubleI32[1]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],tempDoubleF64[0]);
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[(textIndex+1)];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[(textIndex+1)];
          }
  
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[(textIndex+1)];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP8[(textIndex+1)];
            }
          }
  
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[(textIndex+1)];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[(textIndex+1)];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP8[(textIndex+1)];
          } else {
            var precision = 6; // Standard default.
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[(textIndex+1)];
  
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            var origArg = currArg;
            var argText;
            // Flatten i64-1 [low, high] into a (slightly rounded) double
            if (argSize == 8) {
              currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 'u'.charCodeAt(0));
            }
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1]); else
              argText = reSign(currArg, 8 * argSize, 1).toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
              argText = unSign(currArg, 8 * argSize, 1).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
  
            // Add sign if needed
            if (flagAlwaysSigned) {
              if (currArg < 0) {
                prefix = '-' + prefix;
              } else {
                prefix = '+' + prefix;
              }
            }
  
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
  
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg('double');
            var argText;
  
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
  
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
  
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
  
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
  
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
  
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
  
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
  
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*') || 0; // 0 holds '(null)'
            var argLength = String_len(arg);
            if (precisionSet) argLength = Math.min(String_len(arg), precision);
            if (!flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            for (var i = 0; i < argLength; i++) {
              ret.push(HEAPU8[(arg++)]);
            }
            if (flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP32[((ptr)>>2)]=ret.length
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP8[(i)]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  var _vfprintf=_fprintf;

  var _fabs=Math.abs;
var _FT_Stroker_New; // stub for _FT_Stroker_New
var _FT_Stroker_Set; // stub for _FT_Stroker_Set

  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }

  var _llvm_pow_f64=Math.pow;
var _fribidi_get_bidi_types; // stub for _fribidi_get_bidi_types
var _fribidi_get_par_embedding_levels; // stub for _fribidi_get_par_embedding_levels
var _fribidi_reorder_line; // stub for _fribidi_reorder_line
var _fribidi_get_joining_types; // stub for _fribidi_get_joining_types
var _fribidi_join_arabic; // stub for _fribidi_join_arabic
var _fribidi_shape; // stub for _fribidi_shape



  var ___errno=___errno_location;
var _llvm_dbg_declare; // stub for _llvm_dbg_declare
var _llvm_expect_i32; // stub for _llvm_expect_i32

  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
  
      // We need to make sure no one else allocates unfreeable memory!
      // We must control this entirely. So we don't even need to do
      // unfreeable allocations - the HEAP is ours, from STATICTOP up.
      // TODO: We could in theory slice off the top of the HEAP when
      //       sbrk gets a negative increment in |bytes|...
      var self = _sbrk;
      if (!self.called) {
        STATICTOP = alignMemoryPage(STATICTOP); // make sure we start out aligned
        self.called = true;
        _sbrk.DYNAMIC_START = STATICTOP;
      }
      var ret = STATICTOP;
      if (bytes != 0) Runtime.staticAlloc(bytes);
      return ret;  // Previous break location.
    }

  function ___gxx_personality_v0() {
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function _llvm_eh_exception() {
      return HEAP32[((_llvm_eh_exception.buf)>>2)];
    }
  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }function ___cxa_find_matching_catch(thrown, throwntype, typeArray) {
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return { f0:thrown, f1:typeArray[i] };
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return { f0:thrown, f1 :throwntype };
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      Module.printErr('Compiled code throwing an exception, ' + [ptr,type,destructor] + ', at ' + new Error().stack);
      HEAP32[((_llvm_eh_exception.buf)>>2)]=ptr
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=type
      HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=destructor
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function ___cxa_call_unexpected(exception) {
      ABORT = true;
      throw exception;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      return ptr;
    }

  
  function ___cxa_free_exception(ptr) {
      return _free(ptr);
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      __THREW__ = false;
      // Clear type.
      HEAP32[(((_llvm_eh_exception.buf)+(4))>>2)]=0
      // Call destructor if one is registered then clear it.
      var ptr = HEAP32[((_llvm_eh_exception.buf)>>2)];
      var destructor = HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)];
      if (destructor) {
        FUNCTION_TABLE[destructor](ptr);
        HEAP32[(((_llvm_eh_exception.buf)+(8))>>2)]=0
      }
      // Free ptr if it isn't null.
      if (ptr) {
        ___cxa_free_exception(ptr);
        HEAP32[((_llvm_eh_exception.buf)>>2)]=0
      }
    }
var __ZNSt9exceptionD2Ev; // stub for __ZNSt9exceptionD2Ev





  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false},pointerLock:false,moduleContextCreatedCallbacks:[],createContext:function (canvas, useWebGL, setInModule) {
        try {
          var ctx = canvas.getContext(useWebGL ? 'experimental-webgl' : '2d');
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
        }
        return ctx;
      },requestFullScreen:function () {
        var canvas = Module.canvas;
        function fullScreenChange() {
          if (document['webkitFullScreenElement'] === canvas ||
              document['mozFullScreenElement'] === canvas ||
              document['fullScreenElement'] === canvas) {
            canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                        canvas['mozRequestPointerLock'] ||
                                        canvas['webkitRequestPointerLock'];
            canvas.requestPointerLock();
          }
        }
  
        document.addEventListener('fullscreenchange', fullScreenChange, false);
        document.addEventListener('mozfullscreenchange', fullScreenChange, false);
        document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },getMovementX:function (delta, event) {
        if (!Browser.pointerLock) return delta;
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0; // delta;
      },getMovementY:function (delta, event) {
        if (!Browser.pointerLock) return delta;
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0; // delta;
      },asyncLoad:function (url, callback) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          var arrayBuffer = xhr.response;
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          callback(new Uint8Array(arrayBuffer));
          removeRunDependency();
        };
        xhr.onerror = function(event) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed.');
        };
        xhr.send(null);
        addRunDependency();
      }};
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___setErrNo(0);
_llvm_eh_exception.buf = allocate(12, "void*", ALLOC_STATIC);
Module["requestFullScreen"] = function() { Browser.requestFullScreen() };
  

// === Auto-generated postamble setup entry stuff ===

Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);

  return _main(argc, argv, 0);
}


















































































































































var __str28142;





































var _stderr;






































































var _powersOf10;
var __gm_;
var _mparams;



var __ZSt7nothrow;
var __ZL13__new_handler;
var __ZTVSt9bad_alloc;

var __ZTVSt20bad_array_new_length;

var __ZTVN10__cxxabiv120__si_class_type_infoE;

var __ZTISt9exception;
var __ZTISt9bad_alloc;

var __ZTISt20bad_array_new_length;
var __ZTVSt9exception;
var __ZNSt9bad_allocC1Ev;
var __ZNSt9bad_allocD1Ev;
var __ZNSt20bad_array_new_lengthC1Ev;
var __ZNSt20bad_array_new_lengthD1Ev;
var __ZNSt20bad_array_new_lengthD2Ev;
STRING_TABLE.__str=allocate([116,114,97,99,107,45,62,110,95,115,116,121,108,101,115,32,60,61,32,116,114,97,99,107,45,62,109,97,120,95,115,116,121,108,101,115,0] /* track-_n_styles _= t */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1=allocate([97,115,115,46,99,0] /* ass.c\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION___ass_alloc_style=allocate([105,110,116,32,97,115,115,95,97,108,108,111,99,95,115,116,121,108,101,40,65,83,83,95,84,114,97,99,107,32,42,41,0] /* int ass_alloc_style( */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2=allocate([116,114,97,99,107,45,62,110,95,101,118,101,110,116,115,32,60,61,32,116,114,97,99,107,45,62,109,97,120,95,101,118,101,110,116,115,0] /* track-_n_events _= t */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION___ass_alloc_event=allocate([105,110,116,32,97,115,115,95,97,108,108,111,99,95,101,118,101,110,116,40,65,83,83,95,84,114,97,99,107,32,42,41,0] /* int ass_alloc_event( */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3=allocate([80,108,97,121,82,101,115,88,0] /* PlayResX\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4=allocate([80,108,97,121,82,101,115,89,0] /* PlayResY\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5=allocate([84,105,109,101,114,0] /* Timer\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6=allocate([87,114,97,112,83,116,121,108,101,0] /* WrapStyle\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7=allocate([83,99,97,108,101,100,66,111,114,100,101,114,65,110,100,83,104,97,100,111,119,0] /* ScaledBorderAndShado */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8=allocate([75,101,114,110,105,110,103,0] /* Kerning\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9=allocate([70,111,110,116,78,97,109,101,0] /* FontName\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10=allocate([37,115,32,61,32,37,115,0] /* %s = %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11=allocate([80,114,105,109,97,114,121,67,111,108,111,117,114,0] /* PrimaryColour\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12=allocate([83,101,99,111,110,100,97,114,121,67,111,108,111,117,114,0] /* SecondaryColour\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13=allocate([79,117,116,108,105,110,101,67,111,108,111,117,114,0] /* OutlineColour\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14=allocate([66,97,99,107,67,111,108,111,117,114,0] /* BackColour\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15=allocate([70,111,110,116,83,105,122,101,0] /* FontSize\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16=allocate([66,111,108,100,0] /* Bold\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17=allocate([73,116,97,108,105,99,0] /* Italic\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18=allocate([85,110,100,101,114,108,105,110,101,0] /* Underline\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19=allocate([83,116,114,105,107,101,79,117,116,0] /* StrikeOut\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20=allocate([83,112,97,99,105,110,103,0] /* Spacing\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21=allocate([65,110,103,108,101,0] /* Angle\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22=allocate([66,111,114,100,101,114,83,116,121,108,101,0] /* BorderStyle\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23=allocate([65,108,105,103,110,109,101,110,116,0] /* Alignment\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24=allocate([77,97,114,103,105,110,76,0] /* MarginL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25=allocate([77,97,114,103,105,110,82,0] /* MarginR\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26=allocate([77,97,114,103,105,110,86,0] /* MarginV\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27=allocate([69,110,99,111,100,105,110,103,0] /* Encoding\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28=allocate([83,99,97,108,101,88,0] /* ScaleX\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29=allocate([83,99,97,108,101,89,0] /* ScaleY\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30=allocate([79,117,116,108,105,110,101,0] /* Outline\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31=allocate([83,104,97,100,111,119,0] /* Shadow\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32=allocate([69,118,101,110,116,58,32,37,115,0] /* Event: %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str33=allocate([69,118,101,110,116,32,102,111,114,109,97,116,32,104,101,97,100,101,114,32,109,105,115,115,105,110,103,0] /* Event format header  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str34=allocate([69,118,101,110,116,32,97,116,32,37,108,108,100,44,32,43,37,108,108,100,58,32,37,115,0] /* Event at %lld, +%lld */, "i8", ALLOC_STATIC);
STRING_TABLE.__str35=allocate([65,100,100,101,100,32,115,117,98,116,105,116,108,101,32,102,105,108,101,58,32,60,109,101,109,111,114,121,62,32,40,37,100,32,115,116,121,108,101,115,44,32,37,100,32,101,118,101,110,116,115,41,0] /* Added subtitle file: */, "i8", ALLOC_STATIC);
STRING_TABLE.__str36=allocate([65,100,100,101,100,32,115,117,98,116,105,116,108,101,32,102,105,108,101,58,32,39,37,115,39,32,40,37,100,32,115,116,121,108,101,115,44,32,37,100,32,101,118,101,110,116,115,41,0] /* Added subtitle file: */, "i8", ALLOC_STATIC);
STRING_TABLE.__str37=allocate([105,32,62,61,32,45,49,0] /* i _= -1\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION___ass_step_sub=allocate([108,111,110,103,32,108,111,110,103,32,97,115,115,95,115,116,101,112,95,115,117,98,40,65,83,83,95,84,114,97,99,107,32,42,44,32,108,111,110,103,32,108,111,110,103,44,32,105,110,116,41,0] /* long long ass_step_s */, "i8", ALLOC_STATIC);
STRING_TABLE.__str38=allocate([105,32,60,61,32,116,114,97,99,107,45,62,110,95,101,118,101,110,116,115,0] /* i _= track-_n_events */, "i8", ALLOC_STATIC);
STRING_TABLE.__str39=allocate([78,101,105,116,104,101,114,32,80,108,97,121,82,101,115,88,32,110,111,114,32,80,108,97,121,82,101,115,89,32,100,101,102,105,110,101,100,46,32,65,115,115,117,109,105,110,103,32,51,56,52,120,50,56,56,0] /* Neither PlayResX nor */, "i8", ALLOC_STATIC);
STRING_TABLE.__str40=allocate([80,108,97,121,82,101,115,89,32,117,110,100,101,102,105,110,101,100,44,32,115,101,116,116,105,110,103,32,116,111,32,37,100,0] /* PlayResY undefined,  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str41=allocate([80,108,97,121,82,101,115,88,32,117,110,100,101,102,105,110,101,100,44,32,115,101,116,116,105,110,103,32,116,111,32,37,100,0] /* PlayResX undefined,  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str42=allocate([114,98,0] /* rb\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str43=allocate([97,115,115,95,114,101,97,100,95,102,105,108,101,40,37,115,41,58,32,102,111,112,101,110,32,102,97,105,108,101,100,0] /* ass_read_file(%s): f */, "i8", ALLOC_STATIC);
STRING_TABLE.__str44=allocate([97,115,115,95,114,101,97,100,95,102,105,108,101,40,37,115,41,58,32,102,115,101,101,107,32,102,97,105,108,101,100,0] /* ass_read_file(%s): f */, "i8", ALLOC_STATIC);
STRING_TABLE.__str45=allocate([70,105,108,101,32,115,105,122,101,58,32,37,108,100,0] /* File size: %ld\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str46=allocate([98,117,102,0] /* buf\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION___read_file=allocate([99,104,97,114,32,42,114,101,97,100,95,102,105,108,101,40,65,83,83,95,76,105,98,114,97,114,121,32,42,44,32,99,104,97,114,32,42,44,32,115,105,122,101,95,116,32,42,41,0] /* char _read_file(ASS_ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str47=allocate([82,101,97,100,32,102,97,105,108,101,100,44,32,37,100,58,32,37,115,0] /* Read failed, %d: %s\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str48=allocate([70,111,110,116,58,32,37,100,32,98,121,116,101,115,32,101,110,99,111,100,101,100,32,100,97,116,97,0] /* Font: %d bytes encod */, "i8", ALLOC_STATIC);
STRING_TABLE.__str49=allocate([66,97,100,32,101,110,99,111,100,101,100,32,100,97,116,97,32,115,105,122,101,0] /* Bad encoded data siz */, "i8", ALLOC_STATIC);
STRING_TABLE.__str50=allocate([100,115,105,122,101,32,60,61,32,115,105,122,101,32,47,32,52,32,42,32,51,32,43,32,50,0] /* dsize _= size / 4 _  */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION___decode_font=allocate([105,110,116,32,100,101,99,111,100,101,95,102,111,110,116,40,65,83,83,95,84,114,97,99,107,32,42,41,0] /* int decode_font(ASS_ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str51=allocate([85,84,70,45,56,0] /* UTF-8\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str52=allocate([99,111,100,101,112,97,103,101,0] /* codepage\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.___PRETTY_FUNCTION___sub_recode=allocate([99,104,97,114,32,42,115,117,98,95,114,101,99,111,100,101,40,65,83,83,95,76,105,98,114,97,114,121,32,42,44,32,99,104,97,114,32,42,44,32,115,105,122,101,95,116,44,32,99,104,97,114,32,42,41,0] /* char _sub_recode(ASS */, "i8", ALLOC_STATIC);
STRING_TABLE.__str53=allocate([101,110,99,97,58,37,50,115,58,37,57,57,115,0] /* enca:%2s:%99s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str54=allocate([69,78,67,65,58,37,50,115,58,37,57,57,115,0] /* ENCA:%2s:%99s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str55=allocate([79,112,101,110,101,100,32,105,99,111,110,118,32,100,101,115,99,114,105,112,116,111,114,0] /* Opened iconv descrip */, "i8", ALLOC_STATIC);
STRING_TABLE.__str56=allocate([69,114,114,111,114,32,111,112,101,110,105,110,103,32,105,99,111,110,118,32,100,101,115,99,114,105,112,116,111,114,0] /* Error opening iconv  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str57=allocate([69,114,114,111,114,32,114,101,99,111,100,105,110,103,32,102,105,108,101,0] /* Error recoding file\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str58=allocate([67,108,111,115,101,100,32,105,99,111,110,118,32,100,101,115,99,114,105,112,116,111,114,0] /* Closed iconv descrip */, "i8", ALLOC_STATIC);
STRING_TABLE.__str59=allocate([84,101,120,116,0] /* Text\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str60=allocate([84,101,120,116,32,61,32,37,115,0] /* Text = %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str61=allocate([69,110,100,0] /* End\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str62=allocate([68,117,114,97,116,105,111,110,0] /* Duration\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str63=allocate([76,97,121,101,114,0] /* Layer\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str64=allocate([83,116,121,108,101,0] /* Style\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str65=allocate([78,97,109,101,0] /* Name\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str66=allocate([69,102,102,101,99,116,0] /* Effect\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str67=allocate([83,116,97,114,116,0] /* Start\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str68=allocate([37,49,100,58,37,50,100,58,37,50,100,46,37,50,100,0] /* %1d:%2d:%2d.%2d\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str69=allocate([66,97,100,32,116,105,109,101,115,116,97,109,112,0] /* Bad timestamp\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str70=allocate([91,37,112,93,58,32,87,97,114,110,105,110,103,58,32,110,111,32,115,116,121,108,101,32,110,97,109,101,100,32,39,37,115,39,32,102,111,117,110,100,44,32,117,115,105,110,103,32,39,37,115,39,0] /* [%p]: Warning: no st */, "i8", ALLOC_STATIC);
STRING_TABLE.__str71=allocate([68,101,102,97,117,108,116,0] /* Default\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str72=allocate([65,114,105,97,108,0] /* Arial\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str73=allocate([70,111,114,109,97,116,58,32,77,97,114,107,101,100,44,32,83,116,97,114,116,44,32,69,110,100,44,32,83,116,121,108,101,44,32,78,97,109,101,44,32,77,97,114,103,105,110,76,44,32,77,97,114,103,105,110,82,44,32,77,97,114,103,105,110,86,44,32,69,102,102,101,99,116,44,32,84,101,120,116,0] /* Format: Marked, Star */, "i8", ALLOC_STATIC);
STRING_TABLE.__str74=allocate([70,111,114,109,97,116,58,32,76,97,121,101,114,44,32,83,116,97,114,116,44,32,69,110,100,44,32,83,116,121,108,101,44,32,65,99,116,111,114,44,32,77,97,114,103,105,110,76,44,32,77,97,114,103,105,110,82,44,32,77,97,114,103,105,110,86,44,32,69,102,102,101,99,116,44,32,84,101,120,116,0] /* Format: Layer, Start */, "i8", ALLOC_STATIC);
STRING_TABLE.__str75=allocate([78,111,32,101,118,101,110,116,32,102,111,114,109,97,116,32,102,111,117,110,100,44,32,117,115,105,110,103,32,102,97,108,108,98,97,99,107,0] /* No event format foun */, "i8", ALLOC_STATIC);
STRING_TABLE.__str76=allocate([91,83,99,114,105,112,116,32,73,110,102,111,93,0] /* [Script Info]\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str77=allocate([91,86,52,32,83,116,121,108,101,115,93,0] /* [V4 Styles]\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str78=allocate([91,86,52,43,32,83,116,121,108,101,115,93,0] /* [V4+ Styles]\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str79=allocate([91,69,118,101,110,116,115,93,0] /* [Events]\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str80=allocate([91,70,111,110,116,115,93,0] /* [Fonts]\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str81=allocate([102,111,110,116,110,97,109,101,58,0] /* fontname:\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str82=allocate([70,111,110,116,110,97,109,101,58,32,37,115,0] /* Fontname: %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str83=allocate([78,111,116,32,117,110,100,101,114,115,116,111,111,100,58,32,39,37,115,39,0] /* Not understood: '%s' */, "i8", ALLOC_STATIC);
STRING_TABLE.__str84=allocate([70,111,110,116,32,108,105,110,101,32,116,111,111,32,108,111,110,103,58,32,37,100,44,32,37,115,0] /* Font line too long:  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str85=allocate([70,111,114,109,97,116,58,0] /* Format:\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str86=allocate([69,118,101,110,116,32,102,111,114,109,97,116,58,32,37,115,0] /* Event format: %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str87=allocate([68,105,97,108,111,103,117,101,58,0] /* Dialogue:\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str88=allocate([78,111,116,32,117,110,100,101,114,115,116,111,111,100,58,32,39,37,46,51,48,115,39,0] /* Not understood: '%.3 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str89=allocate([83,116,121,108,101,32,102,111,114,109,97,116,58,32,37,115,0] /* Style format: %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str90=allocate([83,116,121,108,101,58,0] /* Style:\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str91=allocate([78,97,109,101,44,32,70,111,110,116,110,97,109,101,44,32,70,111,110,116,115,105,122,101,44,32,80,114,105,109,97,114,121,67,111,108,111,117,114,44,32,83,101,99,111,110,100,97,114,121,67,111,108,111,117,114,44,84,101,114,116,105,97,114,121,67,111,108,111,117,114,44,32,66,97,99,107,67,111,108,111,117,114,44,32,66,111,108,100,44,32,73,116,97,108,105,99,44,32,66,111,114,100,101,114,83,116,121,108,101,44,32,79,117,116,108,105,110,101,44,83,104,97,100,111,119,44,32,65,108,105,103,110,109,101,110,116,44,32,77,97,114,103,105,110,76,44,32,77,97,114,103,105,110,82,44,32,77,97,114,103,105,110,86,44,32,65,108,112,104,97,76,101,118,101,108,44,32,69,110,99,111,100,105,110,103,0] /* Name, Fontname, Font */, "i8", ALLOC_STATIC);
STRING_TABLE.__str92=allocate([78,97,109,101,44,32,70,111,110,116,110,97,109,101,44,32,70,111,110,116,115,105,122,101,44,32,80,114,105,109,97,114,121,67,111,108,111,117,114,44,32,83,101,99,111,110,100,97,114,121,67,111,108,111,117,114,44,79,117,116,108,105,110,101,67,111,108,111,117,114,44,32,66,97,99,107,67,111,108,111,117,114,44,32,66,111,108,100,44,32,73,116,97,108,105,99,44,32,85,110,100,101,114,108,105,110,101,44,32,83,116,114,105,107,101,79,117,116,44,83,99,97,108,101,88,44,32,83,99,97,108,101,89,44,32,83,112,97,99,105,110,103,44,32,65,110,103,108,101,44,32,66,111,114,100,101,114,83,116,121,108,101,44,32,79,117,116,108,105,110,101,44,32,83,104,97,100,111,119,44,65,108,105,103,110,109,101,110,116,44,32,77,97,114,103,105,110,76,44,32,77,97,114,103,105,110,82,44,32,77,97,114,103,105,110,86,44,32,69,110,99,111,100,105,110,103,0] /* Name, Fontname, Font */, "i8", ALLOC_STATIC);
STRING_TABLE.__str93=allocate([91,37,112,93,32,83,116,121,108,101,58,32,37,115,0] /* [%p] Style: %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str94=allocate([42,68,101,102,97,117,108,116,0] /* _Default\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str95=allocate([80,108,97,121,82,101,115,88,58,0] /* PlayResX:\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str96=allocate([80,108,97,121,82,101,115,89,58,0] /* PlayResY:\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str97=allocate([84,105,109,101,114,58,0] /* Timer:\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str98=allocate([87,114,97,112,83,116,121,108,101,58,0] /* WrapStyle:\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str99=allocate([83,99,97,108,101,100,66,111,114,100,101,114,65,110,100,83,104,97,100,111,119,58,0] /* ScaledBorderAndShado */, "i8", ALLOC_STATIC);
STRING_TABLE.__str100=allocate([75,101,114,110,105,110,103,58,0] /* Kerning:\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str101=allocate([76,97,110,103,117,97,103,101,58,0] /* Language:\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str102=allocate([71,108,121,112,104,32,48,120,37,88,32,110,111,116,32,102,111,117,110,100,44,32,115,101,108,101,99,116,105,110,103,32,111,110,101,32,109,111,114,101,32,102,111,110,116,32,102,111,114,32,40,37,115,44,32,37,100,44,32,37,100,41,0] /* Glyph 0x%X not found */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1103=allocate([71,108,121,112,104,32,48,120,37,88,32,110,111,116,32,102,111,117,110,100,44,32,98,114,111,107,101,110,32,102,111,110,116,63,32,84,114,121,105,110,103,32,97,108,108,32,99,104,97,114,109,97,112,115,0] /* Glyph 0x%X not found */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2104=allocate([71,108,121,112,104,32,48,120,37,88,32,110,111,116,32,102,111,117,110,100,32,105,110,32,102,111,110,116,32,102,111,114,32,40,37,115,44,32,37,100,44,32,37,100,41,0] /* Glyph 0x%X not found */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3105=allocate([69,114,114,111,114,32,108,111,97,100,105,110,103,32,103,108,121,112,104,44,32,105,110,100,101,120,32,37,100,0] /* Error loading glyph, */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4106=allocate([69,114,114,111,114,32,111,112,101,110,105,110,103,32,109,101,109,111,114,121,32,102,111,110,116,58,32,39,37,115,39,0] /* Error opening memory */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5107=allocate([69,114,114,111,114,32,111,112,101,110,105,110,103,32,102,111,110,116,58,32,39,37,115,39,44,32,37,100,0] /* Error opening font:  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6108=allocate([70,111,110,116,32,102,97,99,101,32,119,105,116,104,32,110,111,32,99,104,97,114,109,97,112,115,0] /* Font face with no ch */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7109=allocate([78,111,32,99,104,97,114,109,97,112,32,97,117,116,111,100,101,116,101,99,116,101,100,44,32,116,114,121,105,110,103,32,116,104,101,32,102,105,114,115,116,32,111,110,101,0] /* No charmap autodetec */, "i8", ALLOC_STATIC);
STRING_TABLE.__str114=allocate([102,111,110,116,99,111,110,102,105,103,95,115,101,108,101,99,116,58,32,85,115,105,110,103,32,100,101,102,97,117,108,116,32,102,111,110,116,32,102,97,109,105,108,121,58,32,40,37,115,44,32,37,100,44,32,37,100,41,32,45,62,32,37,115,44,32,37,100,0] /* fontconfig_select: U */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1115=allocate([102,111,110,116,99,111,110,102,105,103,95,115,101,108,101,99,116,58,32,85,115,105,110,103,32,100,101,102,97,117,108,116,32,102,111,110,116,58,32,40,37,115,44,32,37,100,44,32,37,100,41,32,45,62,32,37,115,44,32,37,100,0] /* fontconfig_select: U */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2116=allocate([65,114,105,97,108,0] /* Arial\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3117=allocate([102,111,110,116,99,111,110,102,105,103,95,115,101,108,101,99,116,58,32,85,115,105,110,103,32,39,65,114,105,97,108,39,32,102,111,110,116,32,102,97,109,105,108,121,58,32,40,37,115,44,32,37,100,44,32,37,100,41,32,45,62,32,37,115,44,32,37,100,0] /* fontconfig_select: U */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4118=allocate([102,111,110,116,99,111,110,102,105,103,95,115,101,108,101,99,116,58,32,40,37,115,44,32,37,100,44,32,37,100,41,32,45,62,32,37,115,44,32,37,100,0] /* fontconfig_select: ( */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5119=allocate([70,111,110,116,99,111,110,102,105,103,32,100,105,115,97,98,108,101,100,44,32,111,110,108,121,32,100,101,102,97,117,108,116,32,102,111,110,116,32,119,105,108,108,32,98,101,32,117,115,101,100,46,0] /* Fontconfig disabled, */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6120=allocate([78,111,32,117,115,97,98,108,101,32,102,111,110,116,99,111,110,102,105,103,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,102,105,108,101,32,102,111,117,110,100,44,32,117,115,105,110,103,32,102,97,108,108,98,97,99,107,46,0] /* No usable fontconfig */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7121=allocate([78,111,32,118,97,108,105,100,32,102,111,110,116,99,111,110,102,105,103,32,99,111,110,102,105,103,117,114,97,116,105,111,110,32,102,111,117,110,100,33,0] /* No valid fontconfig  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8122=allocate([85,112,100,97,116,105,110,103,32,102,111,110,116,32,99,97,99,104,101,0] /* Updating font cache\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9123=allocate([37,115,32,102,97,105,108,101,100,0] /* %s failed\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10124=allocate([70,99,67,111,110,102,105,103,65,112,112,70,111,110,116,65,100,100,68,105,114,0] /* FcConfigAppFontAddDi */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11125=allocate([69,114,114,111,114,32,111,112,101,110,105,110,103,32,109,101,109,111,114,121,32,102,111,110,116,58,32,37,115,0] /* Error opening memory */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12126=allocate([70,99,70,114,101,101,84,121,112,101,81,117,101,114,121,70,97,99,101,0] /* FcFreeTypeQueryFace\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13127=allocate([70,99,67,111,110,102,105,103,71,101,116,70,111,110,116,115,0] /* FcConfigGetFonts\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14128=allocate([70,99,70,111,110,116,83,101,116,65,100,100,0] /* FcFontSetAdd\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15129=allocate([102,97,109,105,108,121,0] /* family\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16130=allocate([111,117,116,108,105,110,101,0] /* outline\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17131=allocate([115,108,97,110,116,0] /* slant\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18132=allocate([119,101,105,103,104,116,0] /* weight\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19133=allocate([99,104,97,114,115,101,116,0] /* charset\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20134=allocate([105,110,100,101,120,0] /* index\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21135=allocate([102,105,108,101,0] /* file\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22136=allocate([102,117,108,108,110,97,109,101,0] /* fullname\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23137=allocate([102,111,110,116,99,111,110,102,105,103,58,32,83,101,108,101,99,116,101,100,32,102,111,110,116,32,105,115,32,110,111,116,32,116,104,101,32,114,101,113,117,101,115,116,101,100,32,111,110,101,58,32,39,37,115,39,32,33,61,32,39,37,115,39,0] /* fontconfig: Selected */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24138=allocate([115,116,121,108,101,0] /* style\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25139=allocate([101,109,98,111,108,100,101,110,0] /* embolden\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26140=allocate([70,111,110,116,32,105,110,102,111,58,32,102,97,109,105,108,121,32,39,37,115,39,44,32,115,116,121,108,101,32,39,37,115,39,44,32,102,117,108,108,110,97,109,101,32,39,37,115,39,44,32,115,108,97,110,116,32,37,100,44,32,119,101,105,103,104,116,32,37,100,37,115,0] /* Font info: family '% */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27141=allocate([44,32,101,109,98,111,108,100,101,110,0] /* , embolden\00 */, "i8", ALLOC_STATIC);
__str28142=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str145=allocate([37,115,32,102,97,105,108,101,100,0] /* %s failed\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1146=allocate([70,84,95,73,110,105,116,95,70,114,101,101,84,121,112,101,0] /* FT_Init_FreeType\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2147=allocate([82,97,115,116,101,114,58,32,70,114,101,101,84,121,112,101,32,37,100,46,37,100,46,37,100,0] /* Raster: FreeType %d. */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3148=allocate([73,110,105,116,105,97,108,105,122,101,100,0] /* Initialized\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4149=allocate([73,110,105,116,105,97,108,105,122,97,116,105,111,110,32,102,97,105,108,101,100,0] /* Initialization faile */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5150=allocate([69,118,101,110,116,32,104,101,105,103,104,116,32,104,97,115,32,99,104,97,110,103,101,100,0] /* Event height has cha */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6151=allocate([78,111,32,115,116,121,108,101,32,102,111,117,110,100,0] /* No style found\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7152=allocate([69,109,112,116,121,32,101,118,101,110,116,0] /* Empty event\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8153=allocate([73,110,118,97,108,105,100,32,118,97,108,105,103,110,44,32,97,115,115,117,109,105,110,103,32,48,32,40,115,117,98,116,105,116,108,101,41,0] /* Invalid valign, assu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9154=allocate([112,111,115,105,116,105,111,110,101,100,32,101,118,101,110,116,32,97,116,32,37,102,44,32,37,102,0] /* positioned event at  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10155=allocate([67,108,105,112,32,118,101,99,116,111,114,32,112,97,114,115,105,110,103,32,102,97,105,108,101,100,46,32,83,107,105,112,112,105,110,103,46,0] /* Clip vector parsing  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11156=allocate([80,97,114,115,101,100,32,118,101,99,116,111,114,32,99,108,105,112,58,32,115,99,97,108,101,115,32,40,37,102,44,32,37,102,41,32,115,116,114,105,110,103,32,91,37,115,93,10,0] /* Parsed vector clip:  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12157=allocate([67,108,105,112,32,118,101,99,116,111,114,32,114,97,115,116,101,114,105,122,97,116,105,111,110,32,102,97,105,108,101,100,58,32,37,100,46,32,83,107,105,112,112,105,110,103,46,0] /* Clip vector rasteriz */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13158=allocate([99,108,105,112,32,108,101,102,116,0] /* clip left\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14159=allocate([99,108,105,112,32,116,111,112,0] /* clip top\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15160=allocate([99,108,105,112,32,114,105,103,104,116,0] /* clip right\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16161=allocate([99,108,105,112,32,98,111,116,116,111,109,0] /* clip bottom\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17162=allocate([102,111,114,99,101,100,32,108,105,110,101,32,98,114,101,97,107,32,97,116,32,37,100,0] /* forced line break at */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18163=allocate([108,105,110,101,32,98,114,101,97,107,32,97,116,32,37,100,0] /* line break at %d\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19164=allocate([97,115,115,95,114,101,110,100,101,114,46,99,0] /* ass_render.c\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.___func___wrap_lines_smart=allocate([119,114,97,112,95,108,105,110,101,115,95,115,109,97,114,116,0] /* wrap_lines_smart\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20165=allocate([116,101,120,116,95,105,110,102,111,45,62,110,95,108,105,110,101,115,32,62,61,32,49,0] /* text_info-_n_lines _ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21166=allocate([115,104,105,102,116,105,110,103,32,102,114,111,109,32,37,100,32,116,111,32,37,100,32,98,121,32,40,37,102,44,32,37,102,41,0] /* shifting from %d to  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22167=allocate([70,84,95,83,116,114,111,107,101,114,95,80,97,114,115,101,79,117,116,108,105,110,101,32,102,97,105,108,101,100,44,32,101,114,114,111,114,58,32,37,100,0] /* FT_Stroker_ParseOutl */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23168=allocate([70,84,95,83,116,114,111,107,101,114,95,71,101,116,66,111,114,100,101,114,67,111,117,110,116,115,32,102,97,105,108,101,100,44,32,101,114,114,111,114,58,32,37,100,0] /* FT_Stroker_GetBorder */, "i8", ALLOC_STATIC);
STRING_TABLE.__str172=allocate([115,117,115,112,105,99,105,111,117,115,32,99,111,108,111,114,32,102,111,114,109,97,116,58,32,34,37,115,34,10,0] /* suspicious color for */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1173=allocate([121,101,115,0] /* yes\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2174=allocate([69,78,67,65,32,115,117,112,112,111,114,116,101,100,32,108,97,110,103,117,97,103,101,115,0] /* ENCA supported langu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3175=allocate([108,97,110,103,32,37,115,0] /* lang %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4176=allocate([69,78,67,65,32,100,101,116,101,99,116,101,100,32,99,104,97,114,115,101,116,58,32,37,115,0] /* ENCA detected charse */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5177=allocate([69,78,67,65,32,100,101,116,101,99,116,105,111,110,32,102,97,105,108,101,100,58,32,102,97,108,108,98,97,99,107,32,116,111,32,37,115,0] /* ENCA detection faile */, "i8", ALLOC_STATIC);
STRING_TABLE.__str186=allocate([71,108,121,112,104,32,98,111,117,110,100,105,110,103,32,98,111,120,32,116,111,111,32,108,97,114,103,101,58,32,37,100,120,37,100,112,120,0] /* Glyph bounding box t */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1187=allocate([70,97,105,108,101,100,32,116,111,32,114,97,115,116,101,114,105,122,101,32,103,108,121,112,104,58,32,37,100,10,0] /* Failed to rasterize  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2188=allocate([97,115,115,95,98,105,116,109,97,112,46,99,0] /* ass_bitmap.c\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.___func___outline_to_bitmap3=allocate([111,117,116,108,105,110,101,95,116,111,95,98,105,116,109,97,112,51,0] /* outline_to_bitmap3\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3189=allocate([98,109,95,103,32,38,38,32,98,109,95,111,32,38,38,32,98,109,95,115,0] /* bm_g && bm_o && bm_s */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4190=allocate([98,109,95,115,0] /* bm_s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str201=allocate([91,97,115,115,93,32,0] /* [ass] \00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1202=allocate([10,0] /* \0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str205=allocate([80,97,114,115,101,100,32,100,114,97,119,105,110,103,32,119,105,116,104,32,37,100,32,112,111,105,110,116,115,32,97,110,100,32,37,100,32,99,111,110,116,111,117,114,115,0] /* Parsed drawing with  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str218=allocate([102,97,105,108,101,100,32,116,111,32,103,101,116,32,115,116,114,111,107,101,114,0] /* failed to get stroke */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1219=allocate([66,97,110,110,101,114,59,0] /* Banner;\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2220=allocate([69,114,114,111,114,32,112,97,114,115,105,110,103,32,101,102,102,101,99,116,58,32,39,37,115,39,0] /* Error parsing effect */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3221=allocate([83,99,114,111,108,108,32,117,112,59,0] /* Scroll up;\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4222=allocate([83,99,114,111,108,108,32,100,111,119,110,59,0] /* Scroll down;\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5223=allocate([85,110,107,110,111,119,110,32,116,114,97,110,115,105,116,105,111,110,32,101,102,102,101,99,116,58,32,39,37,115,39,0] /* Unknown transition e */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6224=allocate([85,110,107,110,111,119,110,32,101,102,102,101,99,116,32,116,121,112,101,0] /* Unknown effect type\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7225=allocate([85,110,97,98,108,101,32,116,111,32,112,97,114,115,101,58,32,39,37,46,51,48,115,39,0] /* Unable to parse: '%. */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8226=allocate([120,98,111,114,100,0] /* xbord\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9227=allocate([121,98,111,114,100,0] /* ybord\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10228=allocate([120,115,104,97,100,0] /* xshad\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11229=allocate([121,115,104,97,100,0] /* yshad\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12230=allocate([102,97,120,0] /* fax\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13231=allocate([102,97,121,0] /* fay\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14232=allocate([105,99,108,105,112,0] /* iclip\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15233=allocate([98,108,117,114,0] /* blur\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16234=allocate([102,115,99,0] /* fsc\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17235=allocate([102,115,112,0] /* fsp\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18236=allocate([102,115,43,0] /* fs+\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19237=allocate([102,115,45,0] /* fs-\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20238=allocate([102,115,0] /* fs\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21239=allocate([98,111,114,100,0] /* bord\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22240=allocate([109,111,118,101,0] /* move\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23241=allocate([109,111,118,101,109,101,110,116,54,58,32,40,37,102,44,32,37,102,41,32,45,62,32,40,37,102,44,32,37,102,41,44,32,40,37,108,108,100,32,46,46,32,37,108,108,100,41,10,0] /* movement6: (%f, %f)  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24242=allocate([109,111,118,101,109,101,110,116,58,32,40,37,102,44,32,37,102,41,32,45,62,32,40,37,102,44,32,37,102,41,0] /* movement: (%f, %f) - */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25243=allocate([102,114,120,0] /* frx\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26244=allocate([102,114,121,0] /* fry\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27245=allocate([102,114,122,0] /* frz\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28246=allocate([102,114,0] /* fr\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29247=allocate([102,110,0] /* fn\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30248=allocate([97,108,112,104,97,0] /* alpha\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31249=allocate([97,110,0] /* an\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32250=allocate([97,110,32,37,100,0] /* an %d\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str33251=allocate([97,108,105,103,110,32,37,100,0] /* align %d\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str34252=allocate([97,0] /* a\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str35253=allocate([112,111,115,0] /* pos\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str36254=allocate([112,111,115,40,37,102,44,32,37,102,41,0] /* pos(%f, %f)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str37255=allocate([83,117,98,116,105,116,108,101,32,104,97,115,32,97,32,110,101,119,32,92,112,111,115,32,97,102,116,101,114,32,92,109,111,118,101,32,111,114,32,92,112,111,115,44,32,105,103,110,111,114,105,110,103,0] /* Subtitle has a new \ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str38256=allocate([102,97,100,0] /* fad\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str39257=allocate([111,114,103,0] /* org\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str40258=allocate([111,114,103,40,37,100,44,32,37,100,41,0] /* org(%d, %d)\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str41259=allocate([116,0] /* t\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str42260=allocate([97,115,115,95,112,97,114,115,101,46,99,0] /* ass_parse.c\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.___func___parse_tag=allocate([112,97,114,115,101,95,116,97,103,0] /* parse_tag\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str43261=allocate([100,101,108,116,97,95,116,32,33,61,32,48,46,0] /* delta_t != 0.\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str44262=allocate([99,108,105,112,0] /* clip\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str45263=allocate([99,0] /* c\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str46264=allocate([99,111,108,111,114,58,32,37,88,0] /* color: %X\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str47265=allocate([40,110,32,62,61,32,39,49,39,41,32,38,38,32,40,110,32,60,61,32,39,52,39,41,0] /* (n _= '1') && (n _=  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str48266=allocate([66,97,100,32,99,111,109,109,97,110,100,58,32,37,99,37,99,0] /* Bad command: %c%c\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str49267=allocate([115,105,110,103,108,101,32,99,47,97,32,97,116,32,37,102,58,32,37,99,37,99,32,61,32,37,88,0] /* single c/a at %f: %c */, "i8", ALLOC_STATIC);
STRING_TABLE.__str50268=allocate([114,0] /* r\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str51269=allocate([98,101,0] /* be\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str52270=allocate([98,0] /* b\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str53271=allocate([105,0] /* i\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str54272=allocate([107,102,0] /* kf\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str55273=allocate([75,0] /* K\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str56274=allocate([107,111,0] /* ko\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str57275=allocate([107,0] /* k\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str58276=allocate([115,104,97,100,0] /* shad\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str59277=allocate([115,0] /* s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str60278=allocate([117,0] /* u\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str61279=allocate([112,98,111,0] /* pbo\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str62280=allocate([112,0] /* p\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str63281=allocate([113,0] /* q\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str64282=allocate([102,101,0] /* fe\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str299=allocate([83,104,97,112,101,114,58,32,70,114,105,66,105,100,105,32,48,46,49,57,46,50,32,40,83,73,77,80,76,69,41,0] /* Shaper: FriBidi 0.19 */, "i8", ALLOC_STATIC);
_powersOf10=allocate([10, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 10000, 0, 0, 0, 0, 0, 0, 0, 100000000, 0, 0, 0, 0, 0, 0, 0, 10000000000000000, 0, 0, 0, 0, 0, 0, 0, 1e+32, 0, 0, 0, 0, 0, 0, 0, 1e+64, 0, 0, 0, 0, 0, 0, 0, 1e+128, 0, 0, 0, 0, 0, 0, 0, 1e+256, 0, 0, 0, 0, 0, 0, 0], ["double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0], ALLOC_STATIC);
__gm_=allocate(468, ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_mparams=allocate(24, "i32", ALLOC_STATIC);
STRING_TABLE.__str103=allocate([109,97,120,32,115,121,115,116,101,109,32,98,121,116,101,115,32,61,32,37,49,48,108,117,10,0] /* max system bytes = % */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1104=allocate([115,121,115,116,101,109,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0] /* system bytes     = % */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2105=allocate([105,110,32,117,115,101,32,98,121,116,101,115,32,32,32,32,32,61,32,37,49,48,108,117,10,0] /* in use bytes     = % */, "i8", ALLOC_STATIC);
__ZSt7nothrow=allocate(1, "i8", ALLOC_STATIC);
__ZL13__new_handler=allocate(1, "void ()*", ALLOC_STATIC);
__ZTVSt9bad_alloc=allocate([0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 46, 0, 0, 0, 48, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__str3106=allocate([115,116,100,58,58,98,97,100,95,97,108,108,111,99,0] /* std::bad_alloc\00 */, "i8", ALLOC_STATIC);
__ZTVSt20bad_array_new_length=allocate([0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 52, 0, 0, 0, 54, 0, 0, 0], ["*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
allocate(1, "void*", ALLOC_STATIC);
STRING_TABLE.__str14107=allocate([98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0] /* bad_array_new_length */, "i8", ALLOC_STATIC);
STRING_TABLE.__ZTSSt9bad_alloc=allocate([83,116,57,98,97,100,95,97,108,108,111,99,0] /* St9bad_alloc\00 */, "i8", ALLOC_STATIC);
__ZTISt9bad_alloc=allocate(12, "*", ALLOC_STATIC);
STRING_TABLE.__ZTSSt20bad_array_new_length=allocate([83,116,50,48,98,97,100,95,97,114,114,97,121,95,110,101,119,95,108,101,110,103,116,104,0] /* St20bad_array_new_le */, "i8", ALLOC_STATIC);
__ZTISt20bad_array_new_length=allocate(12, "*", ALLOC_STATIC);
HEAP32[(((__ZTVSt9bad_alloc)+(4))>>2)]=__ZTISt9bad_alloc;
HEAP32[(((__ZTVSt20bad_array_new_length)+(4))>>2)]=__ZTISt20bad_array_new_length;
__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([2,0,0,0,0], ["i8*",0,0,0,0], ALLOC_STATIC);
HEAP32[((__ZTISt9bad_alloc)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[(((__ZTISt9bad_alloc)+(4))>>2)]=((STRING_TABLE.__ZTSSt9bad_alloc)|0);
HEAP32[(((__ZTISt9bad_alloc)+(8))>>2)]=__ZTISt9exception;
HEAP32[((__ZTISt20bad_array_new_length)>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[(((__ZTISt20bad_array_new_length)+(4))>>2)]=((STRING_TABLE.__ZTSSt20bad_array_new_length)|0);
HEAP32[(((__ZTISt20bad_array_new_length)+(8))>>2)]=__ZTISt9bad_alloc;
__ZNSt9bad_allocC1Ev = 56;
__ZNSt9bad_allocD1Ev = 58;
__ZNSt20bad_array_new_lengthC1Ev = 60;
__ZNSt20bad_array_new_lengthD1Ev = 62;
__ZNSt20bad_array_new_lengthD2Ev = 58;
FUNCTION_TABLE = [0,0,_hash_simple,0,_compare_simple,0,_destruct_simple,0,_font_hash,0,_font_compare,0,_font_destruct,0,_outline_hash,0,_outline_compare,0,_outline_destruct,0,_glyph_metrics_hash,0,_glyph_metrics_compare,0,_bitmap_hash,0,_bitmap_compare,0,_bitmap_destruct,0,_bitmap_size,0,_composite_hash,0,_composite_compare,0,_composite_destruct,0,_cmp_event_layer,0,_cmp_segment,0,_ass_msg_handler,0,__ZNSt9bad_allocD2Ev,0,__ZNSt9bad_allocD0Ev,0,__ZNKSt9bad_alloc4whatEv,0,__ZNSt9bad_allocD2Ev,0,__ZNSt20bad_array_new_lengthD0Ev,0,__ZNKSt20bad_array_new_length4whatEv,0,__ZNSt9bad_allocC2Ev,0,__ZNSt9bad_allocD2Ev,0,__ZNSt20bad_array_new_lengthC2Ev,0,__ZNSt9bad_allocD2Ev,0]; Module["FUNCTION_TABLE"] = FUNCTION_TABLE;


function run(args) {
  args = args || Module['arguments'];

  if (Module['preRun']) {
    Module['preRun']();
    if (runDependencies > 0) {
      // preRun added a dependency, run will be called later
      Module['preRun'] = null;
      return 0;
    }
  }

  function doRun() {
    var ret = 0;
    if (Module['_main']) {
      preMain();
      ret = Module.callMain(args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      Module['postRun']();
    }
    return ret;
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = run;

// {{PRE_RUN_ADDITIONS}}

initRuntime();

if (Module['noInitialRun']) {
  addRunDependency();
}

if (runDependencies == 0) {
  var ret = run();
}

// {{POST_RUN_ADDITIONS}}





  // {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_ass_free_track","_ass_free_style","_ass_free_event","_ass_alloc_style","_ass_alloc_event","_ass_process_force_style","_string2color","_ass_process_data","_process_text","_ass_process_codec_private","_check_duplicate_event","_event_format_fallback","_ass_process_chunk","_next_token","_process_event_tail","_ass_flush_events","_ass_read_memory","_parse_memory","_ass_read_file","_read_file_recode","_ass_read_styles","_ass_new_track","_sub_recode","_read_file","_ass_step_sub","_decode_chars","_skip_spaces","_rskip_spaces","_ass_lazy_track_init","_set_default_style","_lookup_style","_string2timecode","_process_line","_decode_font","_process_info_line","_process_styles_line","_process_events_line","_process_fonts_line","_numpad2align","_process_style","_ass_cache_create","_hash_simple","_compare_simple","_destruct_simple","_ass_cache_stats","_glyph_metrics_compare","_ass_cache_put","_ass_cache_get","_ass_cache_empty","_ass_cache_done","_ass_font_cache_create","_font_hash","_font_compare","_font_destruct","_ass_outline_cache_create","_outline_hash","_outline_compare","_outline_destruct","_ass_glyph_metrics_cache_create","_glyph_metrics_hash","_ass_bitmap_cache_create","_bitmap_hash","_bitmap_size","_composite_compare","_fnv_32a_buf","_outline_bitmap_compare","_fnv_32a_str","_bitmap_compare","_bitmap_destruct","_ass_composite_cache_create","_composite_hash","_composite_destruct","_clip_bitmap_compare","_outline_bitmap_hash","_clip_bitmap_hash","_double_to_d6","_glyph_compare","_ass_font_set_transform","_drawing_compare","_glyph_hash","_drawing_hash","_ass_font_new","_add_face","_ass_face_set_size","_ass_font_set_size","_double_to_d16","_ass_font_get_asc_desc","_outline_copy","_outline_free","_ass_font_get_index","_ass_font_get_glyph","_ass_glyph_embolden","_ass_strike_outline_glyph","_ass_font_get_kerning","_ass_font_free","_d16_to_d6","_get_contour_cbox","_get_contour_direction","_fix_freetype_stroker","_find_font","_charmap_magic","_buggy_font_workaround","_fontconfig_select","_select_font","_fontconfig_init","_process_fontdata","_fontconfig_update","_fontconfig_done","_match_fullname","_ass_renderer_init","_ass_renderer_done","_ass_free_images","_free_list_clear","_reset_render_context","_ass_render_frame","_ass_start_frame","_ass_render_event","_cmp_event_layer","_ass_image_compare","_overlap","_shift_event","_cmp_segment","_fix_collisions","_ass_detect_change","_get_render_priv","_double_to_d6169","_fit_segment","_init_render_context","_free_render_context","_get_outline_glyph","_x2scr","_fill_bitmap_hash","_wrap_lines_smart","_d6_to_double","_y2scr_top","_y2scr","_y2scr_sub","_get_base_point","_x2scr_pos","_y2scr_pos","_x2scr_scaled","_x2scr_pos_scaled","_measure_text","_compute_string_bbox","_get_bitmap_glyph","_render_text","_render_glyph","_render_overlap","_int_to_d6","_blend_vector_clip","_free_list_add","_clone_bitmap_buffer","_double_to_d16170","_render_glyph_i","_my_draw_bitmap","_transform_3d","_double_to_d22","_d16_to_d6171","_trim_whitespace","_transform_3d_points","_rot_key","_fill_glyph_hash","_ass_utf8_get_char","_draw_opaque_box","_stroke_outline","_check_cache_limits","_mystrtoi","_mystrtoll","_mystrtou32","_mystrtod","_strtocolor","_ass_msg","_parse_bool","_ass_guess_buffer_cp","_ass_synth_init","_generate_tables","_ass_synth_done","_ass_free_bitmap","_outline_to_bitmap","_alloc_bitmap","_be_blur","_outline_to_bitmap3","_resize_tmp","_ass_gauss_blur","_copy_bitmap","_fix_outline","_shift_bitmap","_ass_set_extract_fonts","_ass_library_init","_ass_msg_handler","_ass_library_done","_ass_set_fonts_dir","_ass_set_style_overrides","_ass_clear_fonts","_ass_set_message_cb","_fnv_32a_str214","_drawing_prepare","_ass_add_font","_grow_array","_ass_drawing_new","_ass_drawing_free","_ass_drawing_add_char","_ass_drawing_hash","_ass_drawing_parse","_drawing_tokenize","_translate_point","_double_to_d6217","_token_check_values","_update_cbox","_ensure_font_size","_drawing_close_shape","_drawing_add_point","_drawing_evaluate_curve","_drawing_finish","_drawing_free_tokens","_change_alpha","_mult_alpha","_change_font_size","_update_font","_change_border","_apply_transition_effects","_d6_to_int","_process_karaoke_effects","_get_next_char","_parse_tag","_ass_set_shaper","_change_color","_interpolate_alpha","_ass_set_use_margins","_ass_set_line_spacing","_ass_set_cache_limits","_mystrcmp","_parse_vector_clip","_ass_set_frame_size","_ass_reconfigure","_ass_set_margins","_ass_set_aspect_ratio","_ass_set_font_scale","_ass_set_hinting","_ass_set_fonts","_ass_fonts_update","_ass_shaper_info","_ass_shaper_free","_ass_shaper_font_data_free","_ass_shaper_set_kerning","_ass_shaper_set_language","_resolve_base_direction","_ass_shaper_set_base_direction","_ass_shaper_set_level","_ass_shaper_find_runs","_ass_shaper_shape","_check_allocations","_shape_fribidi","_ass_shaper_new","_ass_shaper_cleanup","_ass_shaper_reorder","_ass_strtod","_malloc","_tmalloc_small","_tmalloc_large","_sys_alloc","_free","_sys_trim","_calloc","_realloc","_release_unused_segments","_memalign","_internal_memalign","_independent_calloc","_internal_realloc","_malloc_footprint","_malloc_max_footprint","_ialloc","_independent_comalloc","_valloc","_pvalloc","_malloc_trim","_mallinfo","_internal_mallinfo","_malloc_stats","_internal_malloc_stats","_mallopt","_init_mparams","_malloc_usable_size","_mmap_resize","_segment_holding","_init_top","_mmap_alloc","_init_bins","_change_mparam","_prepend_alloc","__ZNKSt9bad_alloc4whatEv","__ZSt15get_new_handlerv","__ZSt15set_new_handlerPFvvE","__ZNSt9bad_allocC2Ev","__ZdlPv","__ZdlPvRKSt9nothrow_t","__ZdaPv","__ZdaPvRKSt9nothrow_t","__ZNSt9bad_allocD0Ev","__ZNSt9bad_allocD2Ev","_add_segment","__Znwj","__ZnwjRKSt9nothrow_t","__Znaj","__ZnajRKSt9nothrow_t","__ZNKSt20bad_array_new_length4whatEv","__ZNSt20bad_array_new_lengthC2Ev","__ZNSt20bad_array_new_lengthD0Ev","__ZSt17__throw_bad_allocv"]

